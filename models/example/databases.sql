{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table ghc_db.maplemonk.sales_consolidated_intermediate_ghc as select b.SHOP_NAME, NULL as carrier_id, NULL as courier, coalesce(b.name ,null) as Customer_Name, coalesce(b.email ,null) as email, coalesce(b.phone ,null) as phone, b.SHOP_NAME as MARKETPLACE, NULL as MARKETPLACE_ID, b.ORDER_ID, line_item_id::varchar as Line_Item_ID, line_item_id::varchar as Invoice_ID, order_name as Reference_Code, NULL as manifest_date, NULL as shipping_last_update_date, NULL as shipping_status, coalesce(b.sku ,null) as sku, NULL as sku_type, b.PRODUCT_ID, b.PRODUCT_NAME as PRODUCTNAME, b.CURRENCY, b.IS_REFUND as RETURN_FLAG, upper(b.CITY::varchar) City, upper(b.STATE:: varchar) State, coalesce(b.order_status,null) as Order_Status, b.ORDER_TIMESTAMP::datetime as ORDER_Date, b.shipping_price::float as SHIPPING_PRICE, NULL as number_of_products_in_combo, b.quantity::int suborder_quantity, b.quantity::int shipped_quantity, case when b.is_refund = 1 then b.quantity::int end returned_quantity, case when b.is_refund = 0 and lower(b.order_status) in (\'cancelled\') then quantity::int end cancelled_quantity, case when b.is_refund = 1 then line_item_sales end as return_sales, case when b.is_refund = 0 and lower(b.order_status) in (\'cancelled\') then line_item_sales end as cancel_sales, b.TAX::float Tax, b.category, b.discount::float as discount, case when b.line_item_sales::float is null then 0 else b.line_item_sales::float - ifnull(b.discount::float,0) end selling_price, case when b.new_customer_flag = \'New\' then 1 else 0 end as new_customer_flag, null as warehouse_name, null as days_in_shipment, FINAL_UTM_CHANNEL as Channel, null as payment_mode, null as import_date, last_updated_date as last_update_date from ghc_db.maplemonk.FACT_ITEMS_GHC b union all SELECT \'Amazon\' AS SHOP_NAME, NULL as carrier_id, NULL as courier, NULL as Customer_Name, NULL as email, NULL as phone, \'Amazon.in\' as Marketplace, NULL as MARKETPLACE_ID, b.\"amazon-order-id\" AS ORDER_ID, CONCAT(b.\"amazon-order-id\",\'-\',b.ASIN) AS LINE_ITEM_ID, b.\"amazon-order-id\" AS Invoice_ID, b.\"amazon-order-id\" AS Reference_Code, NULL as manifest_date, NULL as shipping_last_update_date, NULL as shipping_status, coalesce(b.sku ,null) as sku, NULL as sku_type, b.ASIN AS PRODUCT_ID, b.\"product-name\" AS Product_Name, b.CURRENCY, case when b.\"order-status\" in (\'Shipped - Returned to Seller\', \'Shipped - Returning to Seller\',\'Shipped - Rejected by Buyer\',\'Shipped - Damaged\') then 1 else 0 end AS RETURN_FLAG, upper(b.\"ship-city\") AS CITY, upper(b.\"ship-state\") AS STATE, coalesce(b.\"order-status\",null) as Order_Status, \"Purchase-datetime-IST\" AS ORDER_Date, ifnull(TRY_CAST(\"shipping-price\" AS FLOAT),0) AS SHIPPING_PRICE, NULL as Number_of_Products_in_Combo, ifnull(TRY_CAST(QUANTITY AS FLOAT),0) AS QUANTITY, case when lower(\"item-status\") in (\'shipped\') then QUANTITY end AS Shipped_Quantity, case when return_flag = 1 then QUANTITY::int end returned_quantity, case when return_flag = 0 and lower(\"order-status\") in (\'cancelled\') then quantity::int end cancelled_quantity, case when return_flag = 1 then ifnull(TRY_CAST(\"item-price\" AS FLOAT),0) - ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0) end as return_sales, case when return_flag= 0 and lower(\"order-status\") in (\'cancelled\') then ifnull(TRY_CAST(\"item-price\" AS FLOAT),0) - ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0) end as cancel_sales, ifnull(TRY_CAST(\"item-tax\" AS FLOAT),0) AS TAX, null as Category, ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0) AS DISCOUNT, ifnull(TRY_CAST(\"item-price\" AS FLOAT),0) - ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0) AS Selling_Price, Null as new_customer_flag, null as Warehouse_Name, null as days_in_shipment, b.\"sales-channel\" as Channel, null payment_mode, null as import_date, b.\"last-updated-date\" as last_update_date FROM ghc_db.maplemonk.FACT_ITEMS_AMAZONSELLERPARTNER_GHC b; create or replace table ghc_db.maplemonk.Final_customerID as with new_phone_numbers as ( select phone, contact_num ,19700000000 + row_number() over( order by contact_num asc ) as maple_monk_id from ( select distinct right(regexp_replace(phone, \'[^a-zA-Z0-9]+\'),10) as contact_num, phone from ghc_db.maplemonk.SALES_CONSOLIDATED_INTERMEDIATE_GHC ) a ), int as ( select contact_num,email,coalesce(maple_monk_id,id2) as maple_monk_id from ( select contact_num, email,maple_monk_id,19800000000+row_number() over(partition by maple_monk_id is NULL order by email asc ) as id2 from ( select distinct coalesce(p.contact_num,right(regexp_replace(e.contact_num, \'[^a-zA-Z0-9]+\'),10)) as contact_num, e.email,maple_monk_id from ( select phone as contact_num,email from ghc_db.maplemonk.SALES_CONSOLIDATED_INTERMEDIATE_ghc ) e left join new_phone_numbers p on p.contact_num = right(regexp_replace(e.contact_num, \'[^a-zA-Z0-9]+\'),10) ) a ) b ) select contact_num, email, maple_monk_id from int where coalesce(contact_num,email) is not NULL; create or replace table ghc_db.maplemonk.SALES_CONSOLIDATED_GHC as select coalesce(m.maple_monk_id_phone, d.maple_monk_id) as customer_id_final, min(order_date) over(partition by customer_id_final) as acquisition_date, m.* from (select c.maple_monk_id as maple_monk_id_phone, o.* from ghc_db.maplemonk.SALES_CONSOLIDATED_INTERMEDIATE_ghc o left join (select * from (select contact_num phone,maple_monk_id, row_number() over (partition by contact_num order by maple_monk_id asc) magic from ghc_db.maplemonk.Final_customerID) where magic =1 )c on c.phone = right(regexp_replace(o.phone, \'[^a-zA-Z0-9]+\'),10))m left join (select distinct maple_monk_id, email from ghc_db.maplemonk.Final_customerID where contact_num is null )d on d.email = m.email ; ALTER TABLE ghc_db.maplemonk.SALES_CONSOLIDATED_GHC drop COLUMN new_customer_flag ; ALTER TABLE ghc_db.maplemonk.SALES_CONSOLIDATED_GHC ADD COLUMN new_customer_flag varchar(50); ALTER TABLE ghc_db.maplemonk.SALES_CONSOLIDATED_GHC ADD COLUMN acquisition_product varchar(16777216); ALTER TABLE ghc_db.maplemonk.SALES_CONSOLIDATED_GHC ADD COLUMN acquisition_channel varchar(16777216); ALTER TABLE ghc_db.maplemonk.SALES_CONSOLIDATED_ghc ADD COLUMN acquisition_marketplace varchar(16777216); UPDATE ghc_db.maplemonk.SALES_CONSOLIDATED_GHC AS A SET A.new_customer_flag = B.flag FROM ( SELECT DISTINCT order_id, customer_id_final, Order_Date, CASE WHEN Order_Date <> Min(Order_Date) OVER ( partition BY customer_id_final) THEN \'Repeat\' ELSE \'New\' END AS Flag FROM ghc_db.maplemonk.SALES_CONSOLIDATED_GHC)AS B WHERE A.order_id = B.order_id AND A.customer_id_final = B.customer_id_final; UPDATE ghc_db.maplemonk.SALES_CONSOLIDATED_ghc SET new_customer_flag = CASE WHEN new_customer_flag IS NULL THEN \'New\' ELSE new_customer_flag END; CREATE OR replace temporary TABLE ghc_db.maplemonk.temp_source_1 AS SELECT DISTINCT customer_id_final, channel , marketplace FROM ( SELECT DISTINCT customer_id_final, order_date, channel, marketplace, Min(order_date) OVER ( partition BY customer_id_final) firstOrderdate FROM ghc_db.maplemonk.SALES_CONSOLIDATED_GHC ) res WHERE order_date=firstorderdate; UPDATE ghc_db.maplemonk.SALES_CONSOLIDATED_GHC AS a SET a.acquisition_channel=b.channel FROM ghc_db.maplemonk.temp_source_1 b WHERE a.customer_id_final = b.customer_id_final; UPDATE ghc_db.maplemonk.SALES_CONSOLIDATED_GHC AS a SET a.acquisition_marketplace=b.marketplace FROM ghc_db.maplemonk.temp_source_1 b WHERE a.customer_id_final = b.customer_id_final; CREATE OR replace temporary TABLE ghc_db.maplemonk.temp_product_1 AS SELECT DISTINCT customer_id_final, productname, Row_number() OVER (partition BY customer_id_final ORDER BY SELLING_PRICE DESC) rowid FROM ( SELECT DISTINCT customer_id_final, order_date, productname, SELLING_PRICE , Min(order_date) OVER (partition BY customer_id_final) firstOrderdate FROM ghc_db.maplemonk.SALES_CONSOLIDATED_GHC )res WHERE order_date=firstorderdate; UPDATE ghc_db.maplemonk.SALES_CONSOLIDATED_GHC AS A SET A.acquisition_product=B.productname FROM ( SELECT * FROM ghc_db.maplemonk.temp_product_1 WHERE rowid=1)B WHERE A.customer_id_final = B.customer_id_final;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from GHC_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        