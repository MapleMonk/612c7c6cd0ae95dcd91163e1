{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table select_db.maplemonk.select_db_pandl as with sales_data as ( select ORDER_ID ,REFERENCE_CODE ,SALEORDERITEMCODE ,SALES_ORDER_ITEM_ID ,PHONE ,NAME ,EMAIL ,MAPLE_MONK_ID_PHONE ,CUSTOMER_ID ,CUSTOMER_ID_FINAL ,ACQUSITION_DATE ,FIRST_COMPLETE_ORDER_DATE ,NEW_CUSTOMER_FLAG ,NEW_CUSTOMER_FLAG_MONTH ,ACQUISITION_PRODUCT ,ACQUISITION_CHANNEL ,ACQUISITION_MARKETPLACE ,SHOP_NAME ,sc.MARKETPLACE ,CHANNEL ,SOURCE ,SKU ,PRODUCT_ID ,PRODUCT_NAME ,SKU_CODE ,coalesce(SM.productname,SC.PRODUCT_NAME_FINAL) PRODUCT_NAME_FINAL ,coalesce(SM.category,SC.PRODUCT_CATEGORY) PRODUCT_CATEGORY ,coalesce(SM.sub_category,SC.PRODUCT_SUB_CATEGORY) PRODUCT_SUB_CATEGORY ,CURRENCY ,CITY ,STATE ,ORDER_DATE ,SHIPPING_LAST_UPDATE_DATE ,ORDER_STATUS ,OMS_ORDER_STATUS ,SHIPPING_STATUS ,FINAL_SHIPPING_STATUS ,AWB ,COURIER ,DISPATCH_DATE ,DELIVERED_DATE ,DELIVERED_STATUS ,DAYS_IN_SHIPMENT ,WAREHOUSE ,PAYMENT_GATEWAY ,PAYMENT_MODE ,RETURN_FLAG ,coalesce(SM.commonskuid, sc.sku_code) commonskuid ,AOP_CATEGORY ,WEIGHT_ATS_SHIPMENT_IN_KG ,WEIGHT_DTDC_SHIPMENT_IN_KG ,Quantity ,GROSS_SALES_BEFORE_TAX ,DISCOUNT ,sc.TAX ,SHIPPING_PRICE ,SELLING_PRICE ,RETURNED_QUANTITY ,RETURNED_SALES ,CANCELLED_QUANTITY ,pincode ,PAYMENT_GATEWAY_TRANSACTION_NUMBER ,case when lower(pickup_city) in (\'pune\',\'talegaon\') then \'PUNE\' else pickup_city end as pickup_city ,case when lower(sh_ps.commission_type) like \'%percent%\' then div0(ifnull(sh_ps.commission_value/100,0) *sc.selling_price, count(1) over (partition by sc.order_id,SALEORDERITEMCODE))end as shopify_PLATFORM_FEE1 ,case when lower(scm.commission_type) like \'%flat fee for month%\' then div0(ifnull(scm.commission_value,0), count(1) over (partition by lower(sc.marketplace) , month(sc.order_Date::date), year(sc.order_Date::date))) end as shopify_PLATFORM_FEE2 ,case when lower(shco.commission_type) like \'%flat fee for each order%\' then div0(ifnull(shco.commission_value,0), count(1) over (partition by sc.order_id,SALEORDERITEMCODE)) end as shopify_PLATFORM_FEE3 ,ifnull(shopify_PLATFORM_FEE1,0)+ifnull(shopify_PLATFORM_FEE2,0)+ifnull(shopify_PLATFORM_FEE3,0) as shopify_PLATFORM_FEE ,case when lower(amc.commission_type) like \'%flat fee for month%\' then div0(ifnull(amc.commission_value , 0) ,count(1) over (partition by lower(sc.marketplace) , month(sc.order_Date::date), year(sc.order_Date::date))) when lower(amc.commission_type) like \'%flat fee for each order%\' then div0(ifnull(amc.commission_value,0), count(1) over (partition by sc.order_id,SALEORDERITEMCODE)) when lower(amc.commission_type) like \'%percent%\' then div0(ifnull(amc.commission_value/100,0)*(sc.selling_price), count(1) over (partition by sc.order_id,SALEORDERITEMCODE) )end as amazon_PLATFORM_FEE from SELECT_DB.MAPLEMONK.SELECT_db_sales_consolidated sc left join (select * from (select marketplace_sku skucode , commonskuid , name productname , category , sub_category ,AOP_CATEGORY ,WEIGHT_ATS_SHIPMENT_IN_KG ,WEIGHT_DTDC_SHIPMENT_IN_KG , row_number() over (partition by lower(marketplace_sku) order by 1) rw from SELECT_DB.maplemonk.select_db_sku_master ) where rw = 1 ) SM on lower(sc.sku_code) = lower(SM.skucode) left join (select try_to_date(from_date,\'DD-MON-YY\') start_date , try_to_date(to_date,\'DD-MON-YY\') end_date ,upper(partner) Partner , \'SHOPIFY_KYARI_CO\' as marketplace , upper(detail) COMMISSION_TYPE , try_to_double(replace(replace(charges,\'%\',\'\'),\',\',\'\')) commission_value from select_db.maplemonk.shopify_and_tool_costs where upper(commission_type) = \'PERCENT OF SALE\' ) sh_ps on sh_ps.start_date::date <= sc.order_date::date and sh_ps.end_date::date >=sc.order_date::date and lower(sh_ps.marketplace) = lower(sc.marketplace) left join (select try_to_date(from_date,\'DD-MON-YY\') start_date , try_to_date(to_date,\'DD-MON-YY\') end_date ,upper(partner) Partner , \'SHOPIFY_KYARI_CO\' as marketplace , upper(detail) COMMISSION_TYPE , try_to_double(replace(replace(charges,\'%\',\'\'),\',\',\'\')) commission_value from select_db.maplemonk.shopify_and_tool_costs where upper(commission_type) = \'FLAT FEE FOR MONTH\' ) scm on scm.start_date::date <= sc.order_date::date and scm.end_date::date >=sc.order_date::date and lower(scm.marketplace) = lower(sc.marketplace) left join (select try_to_date(from_date,\'DD-MON-YY\') start_date , try_to_date(to_date,\'DD-MON-YY\') end_date ,upper(partner) Partner , \'SHOPIFY_KYARI_CO\' as marketplace , upper(detail) COMMISSION_TYPE , try_to_double(replace(replace(charges,\'%\',\'\'),\',\',\'\')) commission_value from select_db.maplemonk.shopify_and_tool_costs where lower(commission_type) like \'%flat fee for each order%\' ) shco on shco.start_date::date <= sc.order_date::date and shco.end_date::date >=sc.order_date::date and lower(shco.marketplace) = lower(sc.marketplace) left join (select try_to_date(start_date,\'DD-MON-YY\') start_date , try_to_date(end_date,\'DD-MON-YY\') end_date ,marketplace ,COMMISSION_TYPE , try_to_double(replace(replace(COMMISSION_VALUE,\'%\',\'\'),\',\',\'\')) commission_value from select_db.maplemonk.amazon_marketplace_commissions )amc on amc.start_date::date <= sc.order_date::date and amc.end_date::date >=sc.order_date::date and lower(amc.marketplace) = lower(sc.marketplace) ), Shipping_Costs as ( select ab.awb as awb_number, sdc.cost as DTDC_cost, sdc.\"Shipping Type\" as DTDC_type, ATS_mapping.cost as ats_cost, ATS_mapping.type as ats_type from ( select sd.awb, dtdc_prm.\"DESTINATION CATEGORY\" as destination_dtdc_category, ats.type1 as destination_ats_category, sd.ATS_weight, sd.DTDC_weight from (select awb, pincode, pickup_city, courier, sum(WEIGHT_DTDC_SHIPMENT_IN_KG) as DTDC_weight, sum(WEIGHT_ATS_SHIPMENT_IN_KG) as ATS_weight from sales_data group by 1,2,3,4 ) sd left join( select * from ( select * ,row_number() over(partition by \"DESTINATION PINCODE\",lower(\"SOURCE CITY\") order by 1)rw from select_db.maplemonk.pincode_region_mapping ) where rw=1 )dtdc_prm on dtdc_prm.\"DESTINATION PINCODE\" = sd.pincode and lower(dtdc_prm.\"SOURCE CITY\") = lower(sd.pickup_city) and lower(sd.courier) like \'%dtdc%\' left join ( select * from ( select * ,row_number() over(partition by DESTINATION_PINCODE,SOURCE order by 1)rw from select_db.maplemonk.city_mapping_ats ) where rw=1 )ATS on ATS.DESTINATION_PINCODE = sd.pincode and lower(ATS.source) = lower(sd.pickup_city) and lower(sd.courier) like \'%ats%\' )ab left join ( select * from select_db.maplemonk.dtdc_shipping_costs where lower(\"Shipping Type\") in (\'reverse\',\'forward\') ) sdc on ab.DTDC_weight ::string = sdc.weight ::string and lower(sdc.region) = lower(ab.destination_dtdc_category) left join ( select * from select_db.maplemonk.ATS_SHIPPING_COSTS where lower(Type) in (\'reverse\',\'forward\') ) ATS_mapping on ab.ATS_weight::string = ATS_mapping.weight::string and lower(ATS_mapping.region) = lower(ab.destination_ats_category) where awb is not null ), MRP_COGS as ( select * from (select skucode_child, ifnull(try_cast(product_cost as float),0) as product_cost, to_date(start_date , \'dd-mon-yy\')::date as start_date, to_date(end_date ,\'dd-mon-yy\')::date as end_date, warehouse, channel, ifnull(try_cast(tax as float),0) as cogs_tax, row_number() over(partition by lower(warehouse),lower(channel),lower(skucode_child),lower(start_date),lower(end_date) order by 1 )rw from select_db.maplemonk.sku_mrp_cogs ) where rw=1 ), Mile_Costs as ( select * from( select channel, skucode, warehouse, ifnull(try_cast(FIRST_MILE_COST as float),0)+ifnull(try_cast(PROCESSING_COST as float),0)+ ifnull(try_cast(THIRD_MILE_COST as float),0)+ ifnull(try_cast(SECOND_MILE_COST as float),0)+ifnull(try_cast(INNER_PACKAGING_COST as float),0)+ ifnull(try_cast(OUTER_PACKAGING_COST as float),0)+ifnull(try_cast(tax as float),0) as mile_cost, row_number() over(partition by lower(channel),lower(skucode),lower(warehouse) order by 1)rw from SELECT_DB.MAPLEMONK.parent_sku_packing_mile_cost ) where rw=1 ), Spends as ( select spend.date, \'SHOPIFY_KYARI_CO\' as marketplace, channel, aop.AOP_category, sum(case when aop.spend_share is not null then div0(spend.marketing_spend*aop.spend_share,100) else spend.marketing_spend end) as marketing_spend, sum(clicks) as clicks from (select date, replace(AD_URL,\'\"\',\'\') ad_url, channel, sum(spend) marketing_spend, sum(clicks) as clicks from SELECT_DB.MAPLEMONK.select_db_marketing_consolidated where lower(channel) like any (\'%google%\',\'%facebook%\') group by 1,2,3 )spend left join ( select \"Landing Page URL\" as landing_page, AOP_category, spend_share FROM select_db.maplemonk.landing_page_category_mapping UNPIVOT ( spend_share FOR AOP_category IN (\"PLNTXL\",\"PLNTSNGL\",\"PLNTRPLST\", \"PLNTRMTL\",\"PLNTRCRMC\", \"PLNTMS\",\"PLNTCRMC\",\"PLNTCOMB\", \"ADONACC\") ) AS unpivoted_data )aop on lower(aop.landing_page) = lower(spend.ad_url) group by 1,2,3,4 ) , Razorpay_gateway_costs as ( select replace(NOTES:shopify_order_id,\'\"\',\'\') id, \'SHOPIFY_KYARI_CO\' as marketplace, sum(div0(ifnull(fee,0),100)+div0(ifnull(tax,0),100)) as gateway_fee from select_db.maplemonk.razorpay_payments where lower(status) in (\'refunded\',\'captured\') group by 1,2 ), Returns as ( with return_data as ( select credit_note_date as return_date, order_date, reference_code, invoice_date, invoice_id, suborder_id, sku, marketplace, marketing_channel, total_return_amount, returned_quantity, return_tax, coalesce(commonskuid,sku) as commonskuid, category as product_category, sub_category as product_sub_category from SELECT_DB.MAPLEMONK.select_db_easyecom_returns_fact_items rf left join (select * from (select marketplace_sku skucode , commonskuid , name productname , category , sub_category ,AOP_CATEGORY ,WEIGHT_ATS_SHIPMENT_IN_KG ,WEIGHT_DTDC_SHIPMENT_IN_KG , row_number() over (partition by lower(marketplace_sku) order by 1) rw from SELECT_DB.maplemonk.select_db_sku_master ) where rw = 1 ) SM on lower(rf.sku) = lower(SM.skucode) ) select rd.*, coalesce(pcm.commonskuid_child,rd.commonskuid) as child_sku, case when pcm.commonskuid_child is null then rd.returned_quantity else ifnull(pcm.qty,0)*rd.returned_quantity end as returned_child_QUANTITY ,div0(rd.RETURNED_QUANTITY,count(1) over (partition by reference_code ,SKU)) RETURN_QUANTITY ,div0(rd.total_return_amount,count(1) over (partition by reference_code ,SKU)) return_amount from return_data rd left join (select * from (select replace(commonskuid,\'`\',\'\') commonskuid , replace(skucode_child,\'`\',\'\') commonskuid_child , qty::float qty , row_number() over (partition by lower(commonskuid), lower(skucode_child) order by 1) rw from SELECT_DB.MAPLEMONK.mapping_sku_mapping_parent_child ) where rw=1) PCM on lower(PCM.commonskuid) = lower(rd.commonskuid) ) , sales_calculation as ( select coalesce(sc.order_date::Date,gs.date,gst.date, amazon_spends.date)::date as Order_Date ,coalesce(SC.MARKETPLACE,gs.MARKETPLACE,gst.MARKETPLACE) as MARKETPLACE ,coalesce(sc.CHANNEL, gs.channel, gst.channel, amazon_spends.channel) channel ,case when lower(coalesce(sc.CHANNEL, gs.channel, gst.channel, amazon_spends.channel)) like any(\'%google%\',\'%facebook%\',\'%direct%\') then \'KY_WEBSTORES_B2C_ACQ\' when lower(coalesce(sc.CHANNEL, gs.channel, gst.channel, amazon_spends.channel)) like any(\'%contlo%\',\'%whatsapp%\',\'bob\') then \'KY_WEBSTORES_B2C_RTN\' when lower(coalesce(SC.MARKETPLACE,gs.MARKETPLACE,gst.MARKETPLACE)) like any(\'%shopify%\') then \'KY_WEBSTORES_B2C_OTHER\' when lower(coalesce(SC.MARKETPLACE,gs.MARKETPLACE,gst.MARKETPLACE)) like any(\'%amazon_merchant%\',\'%amazon_fba%\') then \'KY_AMZ_B2C_ACQ\' when lower(coalesce(SC.MARKETPLACE,gs.MARKETPLACE,gst.MARKETPLACE)) like any(\'%vendor central%\') then \'KY_AMZ_B2B_ACQ\' when lower(sc.reference_code) like \'corp%\' then \'KY_CORPGIFTOTH_B2B_ACQ\' when lower(sc.sku_code) like \'rf%\' then \'RB_AMZ_B2B_ACQ\' else \'Others\' end as Revenue_Stream ,SC.PRODUCT_CATEGORY ,SC.PRODUCT_SUB_CATEGORY ,SC.REFERENCE_CODE ,SC.SOURCE ,SC.ORDER_ID ,SC.SALEORDERITEMCODE ,SC.SALES_ORDER_ITEM_ID ,SC.PHONE ,SC.NAME ,SC.EMAIL ,SC.MAPLE_MONK_ID_PHONE ,SC.CUSTOMER_ID ,SC.CUSTOMER_ID_FINAL ,SC.ACQUSITION_DATE ,SC.FIRST_COMPLETE_ORDER_DATE ,SC.NEW_CUSTOMER_FLAG ,SC.NEW_CUSTOMER_FLAG_MONTH ,SC.ACQUISITION_PRODUCT ,SC.ACQUISITION_CHANNEL ,SC.ACQUISITION_MARKETPLACE ,SC.SHOP_NAME ,SC.SKU ,SC.PRODUCT_ID ,SC.PRODUCT_NAME ,SC.SKU_CODE ,SC.PRODUCT_NAME_FINAL ,SC.CURRENCY ,SC.CITY ,SC.STATE ,SC.SHIPPING_LAST_UPDATE_DATE ,SC.ORDER_STATUS ,SC.OMS_ORDER_STATUS ,SC.SHIPPING_STATUS ,SC.FINAL_SHIPPING_STATUS ,SC.AWB ,SC.COURIER ,SC.DISPATCH_DATE ,SC.DELIVERED_DATE ,SC.DELIVERED_STATUS ,SC.DAYS_IN_SHIPMENT ,SC.WAREHOUSE ,SC.PAYMENT_GATEWAY ,SC.PAYMENT_MODE ,SC.RETURN_FLAG ,sc.commonskuid ,coalesce(sc.AOP_CATEGORY,gs.AOP_CATEGORY,gst.aop_category) as AOP_CATEGORY ,SC.WEIGHT_ATS_SHIPMENT_IN_KG ,SC.WEIGHT_DTDC_SHIPMENT_IN_KG ,coalesce(pcm.commonskuid_child, SC.sku_code) SKU_CODE_CHILD ,case when pcm.commonskuid_child is null then sc.quantity else ifnull(pcm.qty,0)*sc.quantity end as QUANTITY_CHILD ,case when pcm.commonskuid_child is null then sc.RETURNED_QUANTITY else ifnull(pcm.qty,0)*sc.RETURNED_QUANTITY end as RETURNED_QUANTITY_CHILD ,case when pcm.commonskuid_child is null then sc.CANCELLED_QUANTITY else ifnull(pcm.qty,0)*sc.CANCELLED_QUANTITY end as CANCELLED_QUANTITY_CHILD ,div0(QUANTITY,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) Quantity ,div0(GROSS_SALES_BEFORE_TAX,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) GROSS_SALES_BEFORE_TAX ,div0(TAX,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) TAX ,div0(SHIPPING_PRICE,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) SHIPPING_PRICE ,div0(discount,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) discount ,div0(SELLING_PRICE,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) SELLING_PRICE ,div0(sc.RETURNED_QUANTITY,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) RETURNED_QUANTITY ,div0(shopify_PLATFORM_FEE,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) shopify_PLATFORM_FEE ,div0(amazon_PLATFORM_FEE,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) amazon_PLATFORM_FEE ,div0(sc.RETURNED_SALES,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) RETURNED_SALES ,div0(CANCELLED_QUANTITY,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) CANCELLED_QUANTITY ,div0(ifnull(gs.marketing_spend,0),count(1) over (partition by coalesce(sc.order_date::Date,Gs.date,gst.date::date,amazon_spends.date::date), lower(coalesce(sc.CHANNEL, gs.channel,gst.channel,amazon_spends.channel)),lower(coalesce(sc.aop_category,gs.aop_category,gst.aop_category)),lower(coalesce(sc.marketplace, gs.marketplace,gst.marketplace)))) aop_marketing_spend ,div0(ifnull(gst.marketing_spend,0),count(1) over (partition by coalesce(sc.order_date::Date,Gs.date,gst.date::date,amazon_spends.date::date), lower(coalesce(sc.CHANNEL, gs.channel,gst.channel,amazon_spends.channel)),lower(coalesce(sc.marketplace, gs.marketplace,gst.marketplace)))) total_marketing_spend ,div0(ifnull(gs.clicks,0),count(1) over (partition by coalesce(sc.order_date::Date,Gs.date), lower(coalesce(sc.CHANNEL, gs.channel)),lower(coalesce(sc.aop_category,gs.aop_category)),lower(coalesce(sc.marketplace, gs.marketplace)))) aop_clicks ,div0(ifnull(gst.clicks,0),count(1) over (partition by coalesce(sc.order_date::Date,Gst.date::date,gs.date::date), lower(coalesce(sc.CHANNEL, gs.channel,gst.channel)),lower(coalesce(sc.marketplace,gs.marketplace, gst.marketplace)))) total_clicks ,div0(ifnull(amazon_spends.marketing_spend,0),count(1) over (partition by coalesce(sc.order_date::Date,gs.date, gst.date, amazon_spends.date), lower(coalesce(sc.CHANNEL, gs.channel, gst.channel, amazon_spends.channel)))) Amazon_Marketing_Spend ,div0(ifnull(RGC.gateway_fee,0),count(1) over (partition by RGC.marketplace,RGC.id)) as gateway_tax ,smc.product_cost*QUANTITY_CHILD as product_cost , smc.cogs_tax*QUANTITY_CHILD as product_cost_tax, div0(mc.mile_cost,count(1) over (partition by reference_code,sku_code order by 1 )) as mile_cost, pincode, div0(dcr.dtdc_cost,count(1) over (partition by dcr.awb_number order by 1 )) as dtdc_reverse_cost, div0(dcf.dtdc_cost,count(1) over (partition by dcf.awb_number order by 1 )) as dtdc_forward_cost, div0(acr.ats_cost,count(1) over (partition by acr.awb_number order by 1 )) as ats_reverse_cost, div0(acf.ats_cost,count(1) over (partition by acf.awb_number order by 1 )) as ats_forward_cost, PAYMENT_GATEWAY_TRANSACTION_NUMBER from sales_data sc left join (select * from (select replace(commonskuid,\'`\',\'\') commonskuid , replace(skucode_child,\'`\',\'\') commonskuid_child , qty::float qty , row_number() over (partition by lower(commonskuid), lower(skucode_child) order by 1) rw from SELECT_DB.MAPLEMONK.mapping_sku_mapping_parent_child ) where rw=1) PCM on lower(PCM.commonskuid) = lower(SC.commonskuid) FULL OUTER JOIN ( select date, channel, sum(spend) marketing_spend from SELECT_DB.MAPLEMONK.select_db_marketing_consolidated where lower(channel) like \'%amazon%\' group by 1,2 ) amazon_spends on sc.order_date::date = amazon_spends.Date and lower(sc.channel) = lower(amazon_spends.channel) full outer join ( select * from Spends where aop_category is not null )gs on gs.date::date = sc.order_date::date and lower(gs.channel) = lower(sc.channel) and lower(gs.aop_category) = lower(sc.AOP_CATEGORY) and lower(sc.marketplace) = lower(gs.marketplace) full outer join ( select * from Spends where aop_category is null )gst on gst.date::date = sc.order_date::date and lower(gst.channel) = lower(sc.channel) and lower(sc.marketplace) = lower(gst.marketplace) left join mrp_cogs smc on sc.order_date::date >= smc.start_date::date and sc.order_date::date <= smc.end_date::date and lower(smc.skucode_child) = lower(coalesce(pcm.commonskuid_child, SC.sku_code)) left join mile_costs mc on lower(mc.skucode) = lower(sc.sku_code) left join (select * from Shipping_Costs where lower(DTDC_type) = \'reverse\' ) dcr on sc.awb = dcr.awb_number and lower(sc.courier) like \'%dtdc%\' and sc.return_flag=1 left join (select * from Shipping_Costs where lower(DTDC_type) = \'forward\') dcf on sc.awb = dcf.awb_number and lower(sc.courier) like \'%dtdc%\' left join (select * from Shipping_Costs where lower(ATS_type) = \'reverse\') acr on sc.awb = dcr.awb_number and lower(sc.courier) like \'%ats%\' and sc.return_flag=1 left join (select * from Shipping_Costs where lower(ATS_type) = \'forward\') acf on sc.awb = dcr.awb_number and lower(sc.courier) like \'%ats%\' left join ( select * from Razorpay_gateway_costs where id is not null )RGC on sc.PAYMENT_GATEWAY_TRANSACTION_NUMBER = RGC.id and lower(RGC.marketplace) = lower(sc.marketplace) ) ( SELECT *, NULL AS return_reference_code, NULL AS return_sku, NULL AS return_child_sku, NULL AS return_quantity, NULL AS returned_child_quantity, NULL AS return_amount FROM sales_calculation ) UNION ALL ( SELECT return_date::date AS order_date, case when lower(marketplace) like \'%shopify%\' then \'SHOPIFY_KYARI_CO\' when lower(marketplace) like \'%amazon%\' then \'AMAZON_MERCHANT\' else upper(marketplace) end as marketplace , marketing_channel as channel ,case when lower(channel) like any(\'%google%\',\'%facebook%\',\'%direct%\') then \'KY_WEBSTORES_B2C_ACQ\' when lower(channel) like any(\'%contlo%\',\'%whatsapp%\',\'bob\') then \'KY_WEBSTORES_B2C_RTN\' when lower(MARKETPLACE) like any(\'%shopify%\') then \'KY_WEBSTORES_B2C_OTHER\' when lower(MARKETPLACE) like any(\'%amazon_merchant%\',\'%amazon_fba%\') then \'KY_AMZ_B2C_ACQ\' when lower(MARKETPLACE) like any(\'%vendor central%\') then \'KY_AMZ_B2B_ACQ\' when lower(reference_code) like \'corp%\' then \'KY_CORPGIFTOTH_B2B_ACQ\' when lower(sku) like \'rf%\' then \'RB_AMZ_B2B_ACQ\' else \'Others\' end as Revenue_Stream ,PRODUCT_CATEGORY,product_sub_category , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, reference_code AS return_reference_code, sku AS return_sku, child_sku AS return_child_sku, return_quantity, returned_child_quantity, return_amount FROM returns )",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from SELECT_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        