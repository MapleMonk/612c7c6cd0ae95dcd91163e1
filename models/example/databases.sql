{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table snitch_db.maplemonk.store_outward_inward_reporting as WITH units_on_hand_store AS ( SELECT LOGICUSERCODE as sku, SUM(STOCK_QTY) as units_in_hand_store FROM snitch_db.MAPLEMONK.LOGICERP_GET_STOCK_IN_HAND GROUP BY sku ), store_aging as ( with RankedInwardDates as ( SELECT logicusercode, date_inward, ROW_NUMBER() OVER (PARTITION BY logicusercode ORDER BY date_inward DESC) AS rn FROM snitch_db.maplemonk.store_stock_aging ) SELECT logicusercode, date_inward FROM RankedInwardDates WHERE rn = 1 ORDER BY logicusercode, date_inward DESC ), UnitsInWarehouse AS ( SELECT SKU, SUM(UNITS_ON_HAND) as units_on_hand_warehouse FROM snitch_db.MAPLEMONK.INVENTORY_AGING_BUCKETS_SNITCH GROUP BY SKU ), products AS ( WITH latest_orders AS ( SELECT fact_items_snitch.sku_group, fact_items_snitch.product_name, fact_items_snitch.category, ROW_NUMBER() OVER(PARTITION BY sku_group ORDER BY order_timestamp DESC) as rn FROM snitch_db.maplemonk.fact_items_snitch ) SELECT sku_group, product_name, category FROM latest_orders WHERE rn = 1 ), rate_of_sale AS ( SELECT sku, sku_group, rate_of_sale FROM snitch_db.MAPLEMONK.STORE_WISE_DAILY_ORDERS GROUP BY sku, sku_group, rate_of_sale ), snitch_sku_groups AS ( SELECT DISTINCT sku_group FROM snitch_db.MAPLEMONK.inventory_summary_snitch ), aggregated AS ( SELECT rate_of_sale.rate_of_sale, UnitsInWarehouse.units_on_hand_warehouse, units_on_hand_store.units_in_hand_store, units_on_hand_store.sku, rate_of_sale.sku_group, products.product_name, products.category, store_aging.date_inward, REVERSE(SUBSTRING(REVERSE(units_on_hand_store.sku), 1, CHARINDEX(\'-\', REVERSE(units_on_hand_store.sku)) - 1)) as size, REVERSE(SUBSTRING(REVERSE(units_on_hand_store.sku), CHARINDEX(\'-\', REVERSE(units_on_hand_store.sku)) + 1)) as sku_group_new, COUNT(DISTINCT units_on_hand_store.sku) OVER (PARTITION BY IFNULL(rate_of_sale.sku_group, sku_group_new)) as unique_sku_count, SUM(rate_of_sale.rate_of_sale) OVER (PARTITION BY IFNULL(rate_of_sale.sku_group, sku_group_new)) as cumulative_sku_group_rate_of_sale, CASE WHEN rate_of_sale.rate_of_sale IS NULL THEN -1 ELSE units_on_hand_store.units_in_hand_store / rate_of_sale.rate_of_sale END AS days_to_clear FROM units_on_hand_store LEFT JOIN rate_of_sale ON units_on_hand_store.sku = rate_of_sale.sku LEFT JOIN UnitsInWarehouse ON units_on_hand_store.sku = UnitsInWarehouse.SKU LEFT JOIN store_aging ON units_on_hand_store.sku = store_aging.logicusercode LEFT JOIN products ON IFNULL(rate_of_sale.sku_group, REVERSE(SUBSTRING(REVERSE(units_on_hand_store.sku), CHARINDEX(\'-\', REVERSE(units_on_hand_store.sku)) + 1))) = products.sku_group WHERE rate_of_sale.rate_of_sale IS NULL OR rate_of_sale.rate_of_sale < 0.2 ) SELECT *, CASE WHEN unique_sku_count < 3 THEN \'cut size\' ELSE \'available\' END AS flag, CASE WHEN days_to_clear > 45 AND rate_of_sale < 0.2 THEN ROUND(units_in_hand_store - 45 * rate_of_sale, 0) WHEN flag = \'cut size\' THEN units_in_hand_store WHEN rate_of_sale IS NULL AND units_in_hand_store > 10 THEN -1 WHEN cumulative_sku_group_rate_of_sale > 1 THEN 0 ELSE 0 END AS inventory_outward, CASE WHEN sku_group_new IN (SELECT sku_group FROM snitch_sku_groups) THEN \'Snitch-WH\' ELSE \'B2B\' END as destination, CASE WHEN (UNITS_ON_HAND_WAREHOUSE>50 AND CUMULATIVE_SKU_GROUP_RATE_OF_SALE>0.2 AND FLAG = \'cut size\') THEN \'replenish\' WHEN date_inward > cast(getdate() as date)-30 THEN \'wait\' ELSE \'outward\' END as final_outward FROM aggregated ORDER BY sku_group_new, days_to_clear DESC;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from snitch_db.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        