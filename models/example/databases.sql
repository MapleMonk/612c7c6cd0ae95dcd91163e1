{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report_intermediate as with abc as ( select a.report_type, a.Reference_Code, a.Order_status, a.invoice_status, a.order_type, date(a.report_date) as report_date, a.SKU, sum(a.Quantity) as QUANTITY, sum(a.Invoice_amount) as Invoice_amt, sum(a.absolute_invoice_amount) as absolute_invoice_amount, sum(a.Tax_exclusive_gross)as Tax_exclusive_gross , sum(a.Total_tax_amount) as Total_tax_amount from HOX_DB.MapleMonk.HOX_BLANKO_Amazon_Tax_Fact_Items a group by 1,2,3,4,5,6,7 ), base as ( select distinct report_type, Reference_Code, Order_status, invoice_status, order_type, report_date, SKU, marketplace, QUANTITY, div0(Invoice_amt, count(1) over (partition by Reference_Code, lower(report_type), lower(Order_status), SKU, report_date order by 1)) as Invoice_amt, div0(Selling_price, count(1) over (partition by Reference_Code, lower(report_type), lower(Order_status), SKU, report_date order by 1)) as Selling_price, div0(absolute_invoice_amount, count(1) over (partition by Reference_Code, lower(report_type), lower(Order_status), SKU, report_date order by 1)) as absolute_invoice_amount, Tax_exclusive_gross , Total_tax_amount from ( select distinct a.report_type, a.Reference_Code, a.Order_status, a.invoice_status, a.order_type, date(a.report_date) as report_date, coalesce(b.common_sku, a.SKU) as SKU, b.marketplace, sum(a.Quantity) as QUANTITY, sum(coalesce(nullif(a.Invoice_amt,0),b.total_sales)) as Invoice_amt, sum(b.total_sales) as Selling_price, sum(coalesce(nullif(a.absolute_invoice_amount,0),b.total_sales)) as absolute_invoice_amount, sum(a.Tax_exclusive_gross)as Tax_exclusive_gross , sum(a.Total_tax_amount) as Total_tax_amount From abc a left join ( select order_id, sku, common_sku , case when lower(source) = \'amazon\' then \'Amazon FBA\' else \'Amazon EasyShip\' end as marketplace, sum(total_sales)as total_sales from HOX_DB.MAPLEMONK.HOX_DB_amazon_fact_items group by 1,2,3,4 )b on a.Reference_Code = b.order_id and lower(a.SKU) = lower(b.SKU) group by 1,2,3,4,5,6,7,8 )as o ), final_base as ( select distinct report_type, null as Company_Name, null as seller_gst, marketplace, Reference_Code, order_type, Order_status, Invoice_status, report_date, ifnull(c.item_count,1) * a.Quantity as QUANTITY, a.SKU, coalesce(c.new_sku , a.sku) as component_sku_name, case when (c.parent_sku is null or c.parent_sku = \'\') then Invoice_amt else div0(Invoice_amt, count(1) over (partition by Reference_Code, lower(report_type), lower(Order_status), a.SKU order by 1)) end as Invoice_amt, case when (c.parent_sku is null or c.parent_sku = \'\') then Selling_price else div0(Selling_price, count(1) over (partition by Reference_Code, lower(report_type), lower(Order_status), a.SKU order by 1)) end as Selling_price, case when (c.parent_sku is null or c.parent_sku = \'\') then absolute_invoice_amount else div0(absolute_invoice_amount, count(1) over (partition by Reference_Code, lower(report_type), lower(Order_status), a.SKU order by 1)) end as absolute_invoice_amount, Tax_exclusive_gross, Total_tax_amount from base a left join hox_db.maplemonk.hox_db_Sku_child_mapping c on lower(a.SKU) = lower(c.sku_code) ), easyecom_tax as ( select REPORT_TYPE , COMPANY_NAME , SELLER_GST , MARKETPLACE , REFERENCE_CODE , ORDER_TYPE , ORDER_STATUS , INVOICE_STATUS , date(REPORT_DATE) as REPORT_DATE , QUANTITY , SKU , COMPONENT_SKU_NAME , INVOICE_AMOUNT , SELLING_PRICE , ABSOLUTE_INVOICE_AMOUNT , TAX_EXCLUSIVE_GROSS , TOTAL_TAX_AMOUNT from hox_db.maplemonk.HOX_BLANKO_Easyecom_Tax_Fact_Items ), cogs as ( select distinct sku, (cost:: float) as cost, WEIGHT from hox_db.maplemonk.easyecom_easyecom_blanko_hox_product_master where lower(PRODUCT_TYPE) in (\'normal_product\', \'child_product\') and (cost:: float) > 10 union select distinct MODEL_NO, (cost:: float) as cost, WEIGHT from hox_db.maplemonk.easyecom_easyecom_blanko_hox_product_master where lower(PRODUCT_TYPE) in (\'normal_product\', \'child_product\') and (cost:: float) > 10 ), spends_data as ( select date as ads_date, case when lower(marketplace) like \'%shopify%\' then \'Shopify\' when lower(marketplace) like \'%flipkart%\' then \'Flipkart\' when lower(marketplace) like \'%amazon%\' then \'Amazon FBA\' when lower(marketplace) like \'%b2b - zepto%\' then \'MUM KIRANAKART TECHNOLOGIES PVT LTD\' else marketplace end as marketplace, round(sum(marketing_spend),2) as spend from hox_db.maplemonk.HOX_DB_SALES_COST_SOURCE group by 1,2 having sum(marketing_spend) > 0 order by 1,2 ), final_result as ( Select distinct o.*, a.weight, (a.weight * quantity) as total_weight , case when lower(COMPONENT_SKU_NAME) in (\'dusk\', \'dawn\') and REPORT_DATE < date(\'2023-07-01\') then 142.65 else a.cost end as cost, case when lower(COMPONENT_SKU_NAME) in (\'dusk\', \'dawn\') and REPORT_DATE < date(\'2023-07-01\') then (142.65 * quantity) else (QUANTITY * a.cost) end as COGS FROM ( select *, date(date_trunc(\'month\', REPORT_DATE)) as report_month, date(date_trunc( \'week\', REPORT_DATE)) as report_week from final_base union select *, date(date_trunc(\'month\', REPORT_DATE)) as report_month, date(date_trunc( \'week\', REPORT_DATE)) as report_week from easyecom_tax )o left join cogs a on lower(o.COMPONENT_SKU_NAME) = lower(a.SKU) ), SAAS_price as ( select REFERENCE_CODE, MARKETPLACE, \'Easyecom sale\' as REPORT_TYPE, REPORT_DATE, sum(easyecom_cost)as EASYECOM_COST, sum(interakt_cost) as Interakt_cost, sum(clickpost_cost) as clickpost_Cost from hox_db.maplemonk.HOX_BLANKO_SAAS_cost group by 1,2,3,4 order by 1,2,4 ) select a.REPORT_TYPE , a.COMPANY_NAME , a.SELLER_GST , coalesce(a.MARKETPLACE, b.MARKETPLACE) as MARKETPLACE , a.REFERENCE_CODE , a.ORDER_TYPE , a.ORDER_STATUS , a.INVOICE_STATUS , coalesce(date(a.REPORT_DATE), ads_date) as REPORT_DATE , a.QUANTITY , a.SKU , a.COMPONENT_SKU_NAME , a.INVOICE_AMT , a.SELLING_PRICE , a.ABSOLUTE_INVOICE_AMOUNT , a.TAX_EXCLUSIVE_GROSS , a.TOTAL_TAX_AMOUNT , coalesce(a.report_month, date(date_trunc(\'month\', ads_date))) as report_month , coalesce(a.report_week, date(date_trunc(\'week\', ads_date))) as report_week , a.cost , a.COGS , a.weight , a.total_weight , div0(spend, count(1) over (partition by coalesce(a.MARKETPLACE, b.MARKETPLACE), coalesce(date(a.REPORT_DATE), ads_date) order by 1)) as final_spend , case when a.COMPONENT_SKU_NAME in (\'BLKBE100\',\'BLKEE100\',\'BLKINOD100\',\'BLKLD100\',\'BLKODMY100\',\'BLKSS100\',\'DAWN\', \'DUSK\') then \'100 ml\' when a.COMPONENT_SKU_NAME in (\'BLKBE20\',\'BLKEE20\',\'BLKINOD20\',\'BLKLD20\',\'BLKODMY20\',\'BLKSS20\',\'BLKDN20\', \'BLKDK20\') then \'20 ml\' when a.COMPONENT_SKU_NAME in (\'BLKBE8\',\'BLKEE8\',\'BLKINOD8\',\'BLKLD8\',\'BLKODMY8\',\'BLKSS8\',\'BLKDN8\', \'BLKDK8\') then \'8 ml\' when a.COMPONENT_SKU_NAME in (\'BLKPRMNCN-P4_20\', \'BLKRLCN-P4_20\') then \'Pack of 4 - 20 ml\' when a.COMPONENT_SKU_NAME in (\'BLKCN-8_8\') then \'Pack of 8 - 8 ml\' when a.COMPONENT_SKU_NAME in (\'BLKCAP_FR_01\', \'BLKFREECAP_01\') then \'CAP\' when a.COMPONENT_SKU_NAME in (\'BL_FREE_TSHIRT_01\') then \'Tshirt\' end as sku_type, div0(c.EASYECOM_COST, count(1) over (partition by a.Reference_Code, a.report_type, a.MARKETPLACE, a.REPORT_DATE order by 1)) as EASYECOM_COST, div0(c.INTERAKT_COST, count(1) over (partition by a.Reference_Code, a.report_type, a.MARKETPLACE, a.REPORT_DATE order by 1)) as INTERAKT_COST, div0(c.CLICKPOST_COST, count(1) over (partition by a.Reference_Code, a.report_type, a.MARKETPLACE, a.REPORT_DATE order by 1)) as CLICKPOST_COST from final_result a full outer join spends_data b on a.report_date = b.ads_date and lower(a.marketplace) = lower(b.marketplace) left join SAAS_price c on a.REFERENCE_CODE = c.REFERENCE_CODE and lower(a.report_type) = lower(c.report_type) and lower(a.MARKETPLACE) = lower(c.MARKETPLACE) and a.REPORT_DATE = c.REPORT_DATE",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from HOX_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        