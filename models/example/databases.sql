{{ config(
            materialized='table',
                post_hook={
                    "sql": "create or replace table snitch_db.maplemonk.store_replen_2 as WITH sold_yesterday as ( select sku_group,sum(suborder_quantity) as units_sold_store, branch_code, order_date from snitch_db.maplemonk.STORE_fact_items_offline where order_date = current_date - 1 and sku_group not like \'%CB%\' group by sku_group,branch_code, order_date ), thresholds as ( SELECT * FROM snitch_db.maplemonk.store_bifurcation ), sku_specific_thresholds AS ( SELECT sku_group, branch_code, xs_tsh_high_2, s_tsh_high_2, m_tsh_high_2, l_tsh_high_2, xl_tsh_high_2, xxl_tsh_high_2, xl3_tsh_high_2, xl4_tsh_high_2, xl5_tsh_high_2, xl6_tsh_high_2,xl7_tsh_high_2,xl8_tsh_high_2 FROM snitch_db.maplemonk.core_skus ), store_replen_interim as ( select store_replen_1.*, omc.percentage_category, (CASE WHEN XS_UNITS > 1 THEN 1 ELSE 0 END) + (CASE WHEN S_UNITS > 1 THEN 1 ELSE 0 END) + (CASE WHEN M_UNITS > 1 THEN 1 ELSE 0 END) + (CASE WHEN L_UNITS > 1 THEN 1 ELSE 0 END) + (CASE WHEN XL_UNITS > 1 THEN 1 ELSE 0 END) + (CASE WHEN XXL_UNITS > 1 THEN 1 ELSE 0 END) + (CASE WHEN XL3_UNITS > 1 THEN 1 ELSE 0 END) + (CASE WHEN XL4_UNITS > 1 THEN 1 ELSE 0 END) + (CASE WHEN XL5_UNITS > 1 THEN 1 ELSE 0 END) + (CASE WHEN XL6_UNITS > 1 THEN 1 ELSE 0 END) AS NUM_SIZE_WH_NEW, CASE WHEN round(sum_size_ratio_percentage_by_sku_group,0) <100 THEN \'REPLEN\' ELSE \'DONT REPLEN\' END AS REPLEN_FLAG, (CASE WHEN XS_UNITS > 1 AND XS_UNITS_STORE>0 THEN 1 ELSE 0 END) + (CASE WHEN S_UNITS > 1 AND S_UNITS_STORE>0 THEN 1 ELSE 0 END) + (CASE WHEN M_UNITS > 1 AND M_UNITS_STORE>0 THEN 1 ELSE 0 END) + (CASE WHEN L_UNITS > 1 AND L_UNITS_STORE>0 THEN 1 ELSE 0 END) + (CASE WHEN XL_UNITS > 1 AND XL_UNITS_STORE>0 THEN 1 ELSE 0 END) + (CASE WHEN XXL_UNITS > 1 AND XXL_UNITS_STORE>0 THEN 1 ELSE 0 END) + (CASE WHEN XL3_UNITS > 1 AND XL3_UNITS_STORE>0 THEN 1 ELSE 0 END) + (CASE WHEN XL4_UNITS > 1 AND XL4_UNITS_STORE>0 THEN 1 ELSE 0 END) + (CASE WHEN XL5_UNITS > 1 AND XL5_UNITS_STORE>0 THEN 1 ELSE 0 END) + (CASE WHEN XL6_UNITS > 1 AND XL6_UNITS_STORE>0 THEN 1 ELSE 0 END) AS NUM_SAME_SIZES, NUM_SIZE_WH_NEW + NUM_SIZE_AVAILABLE - NUM_SAME_SIZES as SIZE_AFTER_REPLEN, CASE WHEN (SIZE_AFTER_REPLEN > NUM_SIZE_AVAILABLE AND REPLEN_FLAG=\'REPLEN\' AND SIZE_AFTER_REPLEN >=3) THEN 1 ELSE 0 END AS FINAL_ALLOC, CASE WHEN (FINAL_ALLOC=0 AND REPLEN_FLAG=\'REPLEN\' AND sum_size_ratio_percentage_by_sku_group < 55) THEN \'OUTWARD\' WHEN SIZE_AFTER_REPLEN < 3 AND REPLEN_FLAG=\'REPLEN\' THEN \'OUTWARD\' WHEN (FINAL_ALLOC=0 AND REPLEN_FLAG=\'REPLEN\' AND sum_size_ratio_percentage_by_sku_group >= 55) THEN \'CANNOT REPLEN\' ELSE REPLEN_FLAG END AS Final_action, omc.percentage_category as sku_offline_pareto, A.\"ROS/Sqft\" as size_1, A.\"CLUSTER\" as cluster_1, cor.sku_group as COR from snitch_db.maplemonk.store_replen_1 LEFT JOIN snitch_db.maplemonk.offline_pareto omc ON store_replen_1.sku_group = omc.sku_group_final and store_replen_1.branch_code = omc.BRANCH_CODE left join snitch_db.maplemonk.master_file a on store_replen_1.branch_code = A.\"STORE CODE\" left join snitch_db.maplemonk.core_skus cor on store_replen_1.sku_group = cor.sku_group and store_replen_1.branch_code = cor.branch_code order by priority,units_on_hand desc ) select sri.*, sy.order_date as yesterday_order_date, thresholds.ONL_CAT_1, thresholds.xs_tsh_low_1, thresholds.s_tsh_low_1, thresholds.m_tsh_low_1, thresholds.l_tsh_low_1, thresholds.xl_tsh_low_1, thresholds.xxl_tsh_low_1, thresholds.xl3_tsh_low_1, thresholds.xl4_tsh_low_1, thresholds.xl5_tsh_low_1, thresholds.xl6_tsh_low_1, thresholds.xl7_tsh_low_1, thresholds.xl8_tsh_low_1, COALESCE(sst.xs_tsh_high_2, thresholds.xs_tsh_high_1) AS xs_tsh_high, COALESCE(sst.s_tsh_high_2, thresholds.s_tsh_high_1) AS s_tsh_high, COALESCE(sst.m_tsh_high_2, thresholds.m_tsh_high_1) AS m_tsh_high, COALESCE(sst.l_tsh_high_2, thresholds.l_tsh_high_1) AS l_tsh_high, COALESCE(sst.xl_tsh_high_2, thresholds.xl_tsh_high_1) AS xl_tsh_high, COALESCE(sst.xxl_tsh_high_2, thresholds.xxl_tsh_high_1) AS xxl_tsh_high, COALESCE(sst.xl3_tsh_high_2, thresholds.xl3_tsh_high_1) AS xl3_tsh_high, COALESCE(sst.xl4_tsh_high_2, thresholds.xl4_tsh_high_1) AS xl4_tsh_high, COALESCE(sst.xl5_tsh_high_2, thresholds.xl5_tsh_high_1) AS xl5_tsh_high, COALESCE(sst.xl6_tsh_high_2, thresholds.xl6_tsh_high_1) AS xl6_tsh_high, COALESCE(sst.xl7_tsh_high_2, thresholds.xl7_tsh_high_1) AS xl7_tsh_high, COALESCE(sst.xl8_tsh_high_2, thresholds.xl8_tsh_high_1) AS xl8_tsh_high, ifnull(CAST(LEFT(percentage_category, LEN(percentage_category) - 1) AS INT),100) as pareto, CASE WHEN sy.units_sold_store IS NULL THEN 0 ELSE sy.units_sold_store END as units_sold_yesterday, CASE WHEN COR IS NOT NULL THEN greatest((sst.xs_tsh_high_2 - XS_UNITS_STORE), 0) ELSE CASE WHEN (XS_UNITS > 1 AND XS_UNITS_STORE = 0 AND FINAL_ALLOC = 1 AND pareto <= 40) THEN LEAST(XS_UNITS, COALESCE(sst.xs_tsh_high_2, thresholds.xs_tsh_high_1)) WHEN (XS_UNITS > 1 AND XS_UNITS_STORE = 0 AND FINAL_ALLOC = 1 AND pareto > 40) THEN LEAST(XS_UNITS, xs_tsh_low_1) ELSE 0 END END AS XS_alloc, Case when COR is not null then greatest((sst.s_tsh_high_2 - S_UNITS_STORE),0) else CASE WHEN (S_UNITS > 1 AND S_UNITS_STORE=0 AND FINAL_ALLOC=1 AND pareto <=40) THEN LEAST(S_UNITS, COALESCE(sst.s_tsh_high_2, thresholds.s_tsh_high_1)) WHEN (S_UNITS > 1 AND S_UNITS_STORE=0 AND FINAL_ALLOC=1 AND pareto >40) THEN LEAST(S_UNITS,s_tsh_low_1) ELSE 0 END end AS S_alloc, Case when COR is not null then greatest((sst.m_tsh_high_2 - M_UNITS_STORE),0) else CASE WHEN (M_UNITS > 1 AND M_UNITS_STORE=0 AND FINAL_ALLOC=1 AND pareto <=40) THEN LEAST(M_UNITS,COALESCE(sst.m_tsh_high_2, thresholds.m_tsh_high_1)) WHEN (M_UNITS > 1 AND M_UNITS_STORE=0 AND FINAL_ALLOC=1 AND pareto >40) THEN LEAST(M_UNITS,M_tsh_low_1) ELSE 0 END end AS M_alloc, Case when COR is not null then greatest((sst.l_tsh_high_2 - L_UNITS_STORE),0) else CASE WHEN (L_UNITS > 1 AND L_UNITS_STORE=0 AND FINAL_ALLOC=1 AND pareto <=40) THEN LEAST(L_UNITS, COALESCE(sst.l_tsh_high_2, thresholds.l_tsh_high_1)) WHEN (L_UNITS > 1 AND L_UNITS_STORE=0 AND FINAL_ALLOC=1 AND pareto >40) THEN LEAST(L_UNITS,L_tsh_low_1) ELSE 0 END end AS L_alloc, Case when COR is not null then greatest((sst.xl_tsh_high_2 - XL_UNITS_STORE),0) else CASE WHEN (XL_UNITS > 1 AND XL_UNITS_STORE=0 AND FINAL_ALLOC=1 AND pareto <=40) THEN LEAST(XL_UNITS, COALESCE(sst.xl_tsh_high_2, thresholds.xl_tsh_high_1)) WHEN (XL_UNITS > 1 AND XL_UNITS_STORE=0 AND FINAL_ALLOC=1 AND pareto >40) THEN LEAST(XL_UNITS,XL_tsh_low_1) ELSE 0 END end AS XL_alloc, Case when COR is not null then greatest((sst.xxl_tsh_high_2 - XXL_UNITS_STORE),0) else CASE WHEN (XXL_UNITS > 1 AND XXL_UNITS_STORE=0 AND FINAL_ALLOC=1 AND pareto <=40) THEN LEAST(XXL_UNITS, COALESCE(sst.xxl_tsh_high_2, thresholds.xxl_tsh_high_1)) WHEN (XXL_UNITS > 1 AND XXL_UNITS_STORE=0 AND FINAL_ALLOC=1 AND pareto >40) THEN LEAST(XXL_UNITS,XXL_tsh_low_1) ELSE 0 END end AS XXL_alloc, Case when COR is not null then greatest((sst.xl3_tsh_high_2 - XL3_UNITS_STORE),0) else CASE WHEN (XL3_UNITS > 1 AND XL3_UNITS_STORE=0 AND FINAL_ALLOC=1 AND pareto <=40) THEN LEAST(XL3_UNITS, COALESCE(sst.xl3_tsh_high_2, thresholds.xl3_tsh_high_1)) WHEN (XL3_UNITS > 1 AND XL3_UNITS_STORE=0 AND FINAL_ALLOC=1 AND pareto >40) THEN LEAST(XL3_UNITS,XL3_tsh_low_1) ELSE 0 END end AS XL3_alloc, Case when COR is not null then greatest((sst.xl4_tsh_high_2 - XL4_UNITS_STORE),0) else CASE WHEN (XL4_UNITS > 1 AND XL4_UNITS_STORE=0 AND FINAL_ALLOC=1 AND pareto <=40) THEN LEAST(XL4_UNITS, COALESCE(sst.xl4_tsh_high_2, thresholds.xl4_tsh_high_1)) WHEN (XL4_UNITS > 1 AND XL4_UNITS_STORE=0 AND FINAL_ALLOC=1 AND pareto >40) THEN LEAST(XL4_UNITS,XL4_tsh_low_1) ELSE 0 END end AS XL4_alloc, Case when COR is not null then greatest((sst.xl5_tsh_high_2 - XL5_UNITS_STORE),0) else CASE WHEN (XL5_UNITS > 1 AND XL5_UNITS_STORE=0 AND FINAL_ALLOC=1 AND pareto <=40) THEN LEAST(XL5_UNITS,COALESCE(sst.xl5_tsh_high_2, thresholds.xl5_tsh_high_1)) WHEN (XL5_UNITS > 1 AND XL5_UNITS_STORE=0 AND FINAL_ALLOC=1 AND pareto >40) THEN LEAST(XL5_UNITS,XL5_tsh_low_1) ELSE 0 END end AS XL5_alloc, Case when COR is not null then greatest((sst.xl6_tsh_high_2 - XL6_UNITS_STORE),0) else CASE WHEN (XL6_UNITS > 1 AND XL6_UNITS_STORE=0 AND FINAL_ALLOC=1 AND pareto <=40) THEN LEAST(XL6_UNITS,COALESCE(sst.xl6_tsh_high_2, thresholds.xl6_tsh_high_1)) WHEN (XL6_UNITS > 1 AND XL6_UNITS_STORE=0 AND FINAL_ALLOC=1 AND pareto >40) THEN LEAST(XL6_UNITS,XL6_tsh_low_1) ELSE 0 END end AS XL6_alloc FROM store_replen_interim sri LEFT JOIN sold_yesterday sy ON sri.sku_group=sy.sku_group AND SRI.BRANCH_CODE =SY.BRANCH_CODE LEFT JOIN thresholds ON lower(sri.CLUSTER_1)=lower(thresholds.CLUSTER_1) and lower(sri.size_1)=lower(thresholds.SIZE_1) and lower(sri.availability_category)=lower(thresholds.ONL_CAT_1) LEFT JOIN sku_specific_thresholds sst ON sri.sku_group = sst.sku_group AND sri.branch_code = sst.branch_code ;",
                    "transaction": true
                }
            ) }}
            with sample_data as (

                select * from snitch_db.information_schema.databases
            ),
            
            final as (
                select * from sample_data
            )
            select * from final
            