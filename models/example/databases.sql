{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table XYXX_DB.MAPLEMONK.shopify_in_orders_all as (select ID, NAME, NOTE, TAGS, TEST, EMAIL, PHONE, TOKEN, APP_ID, NUMBER, GATEWAY, REFUNDS, USER_ID, CURRENCY, CUSTOMER, CLOSED_AT, CONFIRMED, DEVICE_ID, REFERENCE, TAX_LINES, TOTAL_TAX, BROWSER_IP, CART_TOKEN, CREATED_AT, LINE_ITEMS, SOURCE_URL, UPDATED_AT, CHECKOUT_ID, LOCATION_ID, SOURCE_NAME, TOTAL_PRICE, CANCELLED_AT, FULFILLMENTS, LANDING_SITE, ORDER_NUMBER, PROCESSED_AT, TOTAL_WEIGHT, CANCEL_REASON, CONTACT_EMAIL, TOTAL_TAX_SET, CHECKOUT_TOKEN, CLIENT_DETAILS, DISCOUNT_CODES, REFERRING_SITE, SHIPPING_LINES, SUBTOTAL_PRICE, TAXES_INCLUDED, BILLING_ADDRESS, CUSTOMER_LOCALE, NOTE_ATTRIBUTES, PAYMENT_DETAILS, TOTAL_DISCOUNTS, TOTAL_PRICE_SET, TOTAL_PRICE_USD, FINANCIAL_STATUS, LANDING_SITE_REF, ORDER_STATUS_URL, SHIPPING_ADDRESS, CURRENT_TOTAL_TAX, PROCESSING_METHOD, SOURCE_IDENTIFIER, TOTAL_OUTSTANDING, FULFILLMENT_STATUS, SUBTOTAL_PRICE_SET, TOTAL_TIP_RECEIVED, CURRENT_TOTAL_PRICE, TOTAL_DISCOUNTS_SET, ADMIN_GRAPHQL_API_ID, PRESENTMENT_CURRENCY, CURRENT_TOTAL_TAX_SET, DISCOUNT_APPLICATIONS, PAYMENT_GATEWAY_NAMES, CURRENT_SUBTOTAL_PRICE, TOTAL_LINE_ITEMS_PRICE, BUYER_ACCEPTS_MARKETING, CURRENT_TOTAL_DISCOUNTS, CURRENT_TOTAL_PRICE_SET, CURRENT_TOTAL_DUTIES_SET, TOTAL_SHIPPING_PRICE_SET, ORIGINAL_TOTAL_DUTIES_SET, CURRENT_SUBTOTAL_PRICE_SET, TOTAL_LINE_ITEMS_PRICE_SET, CURRENT_TOTAL_DISCOUNTS_SET, _AIRBYTE_AB_ID, _AIRBYTE_EMITTED_AT, _AIRBYTE_NORMALIZED_AT, _AIRBYTE_SHOPIFY_IN_ORDERS_HASHID, _AIRBYTE_UNIQUE_KEY from xyxx_db.maplemonk.shopify_in_orders union all select ID, NAME, NOTE, TAGS, TEST, EMAIL, PHONE, TOKEN, APP_ID, NUMBER, GATEWAY, REFUNDS, USER_ID, CURRENCY, CUSTOMER, CLOSED_AT, CONFIRMED, DEVICE_ID, REFERENCE, TAX_LINES, TOTAL_TAX, BROWSER_IP, CART_TOKEN, CREATED_AT, LINE_ITEMS, SOURCE_URL, UPDATED_AT, CHECKOUT_ID, LOCATION_ID, SOURCE_NAME, TOTAL_PRICE, CANCELLED_AT, FULFILLMENTS, LANDING_SITE, ORDER_NUMBER, PROCESSED_AT, TOTAL_WEIGHT, CANCEL_REASON, CONTACT_EMAIL, TOTAL_TAX_SET, CHECKOUT_TOKEN, CLIENT_DETAILS, DISCOUNT_CODES, REFERRING_SITE, SHIPPING_LINES, SUBTOTAL_PRICE, TAXES_INCLUDED, BILLING_ADDRESS, CUSTOMER_LOCALE, NOTE_ATTRIBUTES, PAYMENT_DETAILS, TOTAL_DISCOUNTS, TOTAL_PRICE_SET, TOTAL_PRICE_USD, FINANCIAL_STATUS, LANDING_SITE_REF, ORDER_STATUS_URL, SHIPPING_ADDRESS, CURRENT_TOTAL_TAX, PROCESSING_METHOD, SOURCE_IDENTIFIER, TOTAL_OUTSTANDING, FULFILLMENT_STATUS, SUBTOTAL_PRICE_SET, TOTAL_TIP_RECEIVED, CURRENT_TOTAL_PRICE, TOTAL_DISCOUNTS_SET, ADMIN_GRAPHQL_API_ID, PRESENTMENT_CURRENCY, CURRENT_TOTAL_TAX_SET, DISCOUNT_APPLICATIONS, PAYMENT_GATEWAY_NAMES, CURRENT_SUBTOTAL_PRICE, TOTAL_LINE_ITEMS_PRICE, BUYER_ACCEPTS_MARKETING, CURRENT_TOTAL_DISCOUNTS, CURRENT_TOTAL_PRICE_SET, CURRENT_TOTAL_DUTIES_SET, TOTAL_SHIPPING_PRICE_SET, ORIGINAL_TOTAL_DUTIES_SET, CURRENT_SUBTOTAL_PRICE_SET, TOTAL_LINE_ITEMS_PRICE_SET, CURRENT_TOTAL_DISCOUNTS_SET, _AIRBYTE_AB_ID, _AIRBYTE_EMITTED_AT, _AIRBYTE_NORMALIZED_AT, _AIRBYTE_XYLIFE_SHOPIFY_ORDERS_HASHID, _AIRBYTE_UNIQUE_KEY from xyxx_db.maplemonk.xylife_shopify_orders); create or replace table XYXX_DB.MAPLEMONK.shopify_in_customers_all as (select ID, NOTE, TAGS, EMAIL, PHONE, STATE, CURRENCY, ADDRESSES, LAST_NAME, CREATED_AT, FIRST_NAME, TAX_EXEMPT, UPDATED_AT, TOTAL_SPENT, ORDERS_COUNT, LAST_ORDER_ID, VERIFIED_EMAIL, DEFAULT_ADDRESS, LAST_ORDER_NAME, ACCEPTS_MARKETING, ADMIN_GRAPHQL_API_ID, MULTIPASS_IDENTIFIER, ACCEPTS_MARKETING_UPDATED_AT, _AIRBYTE_AB_ID, _AIRBYTE_EMITTED_AT, _AIRBYTE_NORMALIZED_AT, _AIRBYTE_SHOPIFY_IN_CUSTOMERS_HASHID, _AIRBYTE_UNIQUE_KEY from xyxx_db.maplemonk.shopify_in_customers union all select ID, NOTE, TAGS, EMAIL, PHONE, STATE, CURRENCY, ADDRESSES, LAST_NAME, CREATED_AT, FIRST_NAME, TAX_EXEMPT, UPDATED_AT, TOTAL_SPENT, ORDERS_COUNT, LAST_ORDER_ID, VERIFIED_EMAIL, DEFAULT_ADDRESS, LAST_ORDER_NAME, ACCEPTS_MARKETING, ADMIN_GRAPHQL_API_ID, MULTIPASS_IDENTIFIER, ACCEPTS_MARKETING_UPDATED_AT, _AIRBYTE_AB_ID, _AIRBYTE_EMITTED_AT, _AIRBYTE_NORMALIZED_AT, _AIRBYTE_XYLIFE_SHOPIFY_CUSTOMERS_HASHID, _AIRBYTE_UNIQUE_KEY from xyxx_db.maplemonk.xylife_shopify_customers); create or replace table XYXX_DB.MAPLEMONK.shopify_in_products_all as (select ID, TAGS, IMAGE, TITLE, HANDLE, IMAGES, STATUS, VENDOR, OPTIONS, VARIANTS, BODY_HTML, CREATED_AT, UPDATED_AT, PRODUCT_TYPE, PUBLISHED_AT, PUBLISHED_SCOPE, TEMPLATE_SUFFIX, ADMIN_GRAPHQL_API_ID, _AIRBYTE_AB_ID, _AIRBYTE_EMITTED_AT, _AIRBYTE_NORMALIZED_AT, _AIRBYTE_SHOPIFY_IN_PRODUCTS_HASHID, _AIRBYTE_UNIQUE_KEY from xyxx_db.maplemonk.shopify_in_products union all select ID, TAGS, IMAGE, TITLE, HANDLE, IMAGES, STATUS, VENDOR, OPTIONS, VARIANTS, BODY_HTML, CREATED_AT, UPDATED_AT, PRODUCT_TYPE, PUBLISHED_AT, PUBLISHED_SCOPE, TEMPLATE_SUFFIX, ADMIN_GRAPHQL_API_ID, _AIRBYTE_AB_ID, _AIRBYTE_EMITTED_AT, _AIRBYTE_NORMALIZED_AT, _AIRBYTE_XYLIFE_SHOPIFY_PRODUCTS_HASHID, _AIRBYTE_UNIQUE_KEY from xyxx_db.maplemonk.xylife_shopify_products); create or replace table XYXX_DB.MAPLEMONK.SHOPIFY_IN_PRODUCTS_VARIANTS_ALL as select ID, SKU, GRAMS, PRICE, TITLE, WEIGHT, BARCODE, OPTION1, OPTION2, OPTION3, TAXABLE, IMAGE_ID, POSITION, TAX_CODE, CREATED_AT, UPDATED_AT, WEIGHT_UNIT, COMPARE_AT_PRICE, INVENTORY_POLICY, INVENTORY_ITEM_ID, REQUIRES_SHIPPING, INVENTORY_QUANTITY, PRESENTMENT_PRICES, FULFILLMENT_SERVICE, ADMIN_GRAPHQL_API_ID, INVENTORY_MANAGEMENT, OLD_INVENTORY_QUANTITY, _AIRBYTE_AB_ID, _AIRBYTE_EMITTED_AT, _AIRBYTE_NORMALIZED_AT, _AIRBYTE_VARIANTS_HASHID, _AIRBYTE_SHOPIFY_IN_PRODUCTS_HASHID from XYXX_DB.MAPLEMONK.SHOPIFY_IN_PRODUCTS_VARIANTS union all select ID, SKU, GRAMS, PRICE, TITLE, WEIGHT, BARCODE, OPTION1, OPTION2, OPTION3, TAXABLE, IMAGE_ID, POSITION, TAX_CODE, CREATED_AT, UPDATED_AT, WEIGHT_UNIT, COMPARE_AT_PRICE, INVENTORY_POLICY, INVENTORY_ITEM_ID, REQUIRES_SHIPPING, INVENTORY_QUANTITY, PRESENTMENT_PRICES, FULFILLMENT_SERVICE, ADMIN_GRAPHQL_API_ID, INVENTORY_MANAGEMENT, OLD_INVENTORY_QUANTITY, _AIRBYTE_AB_ID, _AIRBYTE_EMITTED_AT, _AIRBYTE_NORMALIZED_AT, _AIRBYTE_VARIANTS_HASHID, _AIRBYTE_XYLIFE_SHOPIFY_PRODUCTS_HASHID from XYXX_DB.MAPLEMONK.XYLIFE_SHOPIFY_PRODUCTS_VARIANTS; create or replace table XYXX_DB.MAPLEMONK.SHOPIFY_IN_CUSTOMERS_ADDRESSES_ALL as select ID, ZIP, CITY, NAME, PHONE, COMPANY, COUNTRY, ADDRESS1, ADDRESS2, PROVINCE, LAST_NAME, FIRST_NAME, CUSTOMER_ID, COUNTRY_CODE, COUNTRY_NAME, PROVINCE_CODE, _AIRBYTE_AB_ID, _AIRBYTE_EMITTED_AT, _AIRBYTE_NORMALIZED_AT, _AIRBYTE_ADDRESSES_HASHID, _AIRBYTE_SHOPIFY_IN_CUSTOMERS_HASHID from XYXX_DB.MAPLEMONK.SHOPIFY_IN_CUSTOMERS_ADDRESSES union all select ID, ZIP, CITY, NAME, PHONE, COMPANY, COUNTRY, ADDRESS1, ADDRESS2, PROVINCE, LAST_NAME, FIRST_NAME, CUSTOMER_ID, COUNTRY_CODE, COUNTRY_NAME, PROVINCE_CODE, _AIRBYTE_AB_ID, _AIRBYTE_EMITTED_AT, _AIRBYTE_NORMALIZED_AT, _AIRBYTE_ADDRESSES_HASHID, _AIRBYTE_XYLIFE_SHOPIFY_CUSTOMERS_HASHID from XYXX_DB.MAPLEMONK.XYLIFE_SHOPIFY_CUSTOMERS_ADDRESSES; create or replace table XYXX_DB.MAPLEMONK.Shopify_UTM_Parameters as select ShopifyQL.* ,upper(coalesce(UTM_MAPPING.CHANNEL,UTM_MAPPING_REF.CHANNEL)) as ShopifyQL_MAPPED_CHANNEL ,upper(coalesce(UTM_MAPPING.SOURCE,UTM_MAPPING_REF.SOURCE)) as ShopifyQL_MAPPED_SOURCE ,upper(coalesce(UTM_MAPPING_FIRST_CLICK.SOURCE,ShopifyQL.FirstVisit_UTM_Source)) as ShopifyQL_MAPPED_FIRSTCLICK_SOURCE ,upper(UTM_MAPPING_FIRST_CLICK.CHANNEL) as ShopifyQL_MAPPED_FIRSTCLICK_CHANNEL from (select * from (select A.id ,A.name ,A.createdat ,replace(A.customerjourneysummary:\"momentsCount\",\'\"\',\'\') Moments_Count ,replace(A.customerjourneysummary:\"daysToConversion\",\'\"\',\'\') DaysToConvert ,replace(A.CUSTOMERJOURNEYSUMMARY:\"lastVisit\":\"utmParameters\":\"source\",\'\"\',\'\') LastVisit_UTM_Source ,replace(A.CUSTOMERJOURNEYSUMMARY:\"lastVisit\":\"source\",\'\"\',\'\') LastVisit_NON_UTM_Source ,replace(A.CUSTOMERJOURNEYSUMMARY:\"lastVisit\":\"utmParameters\":\"campaign\",\'\"\',\'\') LastVisit_UTM_Campaign ,replace(A.CUSTOMERJOURNEYSUMMARY:\"firstVisit\":\"utmParameters\":\"source\",\'\"\',\'\') FirstVisit_UTM_Source ,replace(A.CUSTOMERJOURNEYSUMMARY:\"firstVisit\":\"utmParameters\":\"medium\",\'\"\',\'\') FirstVisit_UTM_Medium ,replace(A.CUSTOMERJOURNEYSUMMARY:\"firstVisit\":\"utmParameters\":\"campaign\",\'\"\',\'\') FirstVisit_UTM_Campaign ,replace(B.Value:\"id\",\'gid://shopify/CustomerVisit/\',\'\') Moment_ID ,replace(B.value:\"utmParameters\":\"source\",\'\"\',\'\') Last_Moment_UTM_Source ,replace(B.value:\"utmParameters\":\"medium\",\'\"\',\'\') Last_Moment_UTM_Medium ,case when Moments_Count >1 then LastVisit_UTM_Source else FirstVisit_UTM_Source end CJSummary_utm_source ,referrerdisplaytext Referrer_Name ,customerjourneysummary ,customerjourney ,coalesce(Last_Moment_UTM_Source,LastVisit_NON_UTM_Source) ShopifyQL_Unmapped_Last_Source ,rank() over (partition by name order by MOMENT_ID desc) rw from (select id, name, createdat, customerjourney, customerjourneysummary, referrerurl, referralcode, referrerdisplaytext, landingpageurl, LANDINGPAGEDISPLAYTEXT from XYXX_DB.MAPLEMONK.xyxx_shopify_utm_parameters union all select id, name, createdat, customerjourney, customerjourneysummary, referrerurl, referralcode, referrerdisplaytext, landingpageurl, LANDINGPAGEDISPLAYTEXT from XYXX_DB.MAPLEMONK.xylife_shopify_utm_parameters ) A, lateral flatten (INPUT => customerjourney:\"moments\") B ) where rw=1 ) ShopifyQL left join (select * from (select * , row_number() over (partition by lower(utm_campaign_source) order by 1) rw from xyxx_db.maplemonk.xyxx_utm_campaign_mapping) where rw=1 and utm_campaign_source is not null ) UTM_MAPPING on lower(ShopifyQL.ShopifyQL_Unmapped_Last_Source) = lower(UTM_MAPPING.utm_campaign_source) left join (select * from (select * , row_number() over (partition by lower(utm_campaign_source) order by 1) rw from xyxx_db.maplemonk.xyxx_utm_campaign_mapping) where rw=1 and utm_campaign_source is not null ) UTM_MAPPING_REF on lower(ShopifyQL.referrer_name) = lower(UTM_MAPPING_REF.utm_campaign_source) left join (select * from (select * , row_number() over (partition by lower(utm_campaign_source) order by 1) rw from xyxx_db.maplemonk.xyxx_utm_campaign_mapping) where rw=1 and utm_campaign_source is not null ) UTM_MAPPING_FIRST_CLICK on lower(ShopifyQL.FirstVisit_UTM_Source) = lower(UTM_MAPPING_FIRST_CLICK.utm_campaign_source) ; create or replace table xyxx_db.maplemonk.GOKWIK_SOURCE as With GO_KWIK as ( WITH utm_source_cte AS ( SELECT S.id, UPPER(A.value:\"value\") AS gokwik_utm_source FROM shopify_in_orders_all S, LATERAL FLATTEN(INPUT => note_attributes) A WHERE LOWER(S.note_attributes) LIKE \'%gokwik%\' AND LOWER(A.value:\"name\") = \'utm_source\' ) SELECT S.id, S.note_attributes, source_cte.gokwik_utm_source AS GOKWIK_UTM_SOURCE FROM shopify_in_orders_all S JOIN utm_source_cte source_cte ON S.id = source_cte.id WHERE LOWER(S.note_attributes) LIKE \'%gokwik%\' AND source_cte.gokwik_utm_source IS NOT NULL ) Select GO_KWIK.* ,Upper(UTM_MAPPING.CHANNEL) as GOKWIK_MAPPED_CHANNEL ,Upper(UTM_MAPPING.SOURCE) as GOKWIK_MAPPED_SOURCE from GO_KWIK left join (select * from (select * , row_number() over (partition by lower(utm_campaign_source) order by 1) rw from xyxx_db.maplemonk.xyxx_utm_campaign_mapping) where rw=1 and utm_campaign_source is not null ) UTM_MAPPING on lower(GO_KWIK.GOKWIK_UTM_SOURCE) = lower(UTM_MAPPING.utm_campaign_source) ; create or replace table xyxx_db.maplemonk.Shopify_All_orders as select AO.* ,UPPER(case when lower(AO.source_name) like \'%draft_order%\' then \'Draft Orders\' else ShopifyQL.shopifyql_mapped_channel end) shopifyql_mapped_channel ,UPPER(case when lower(AO.source_name) like \'%draft_order%\' then \'Draft Orders\' else ShopifyQL.shopifyql_mapped_source end) shopifyql_mapped_source ,UPPER(ShopifyQL.FIRSTVISIT_UTM_SOURCE) Shopifyql_FIRSTVISIT_UTM_SOURCE ,UPPER(ShopifyQL.LAST_MOMENT_UTM_SOURCE) Shopifyql_LAST_MOMENT_UTM_SOURCE ,UPPER(ShopifyQL.LastVisit_NON_UTM_Source) Shopifyql_LAST_VISIT_NON_UTM_SOURCE ,upper(ShopifyQL.LastVisit_UTM_Campaign) Shopifyql_LAST_VISIT_UTM_CAMPAIGN ,UPPER(ShopifyQL.LAST_MOMENT_UTM_MEDIUM) Shopifyql_LAST_MOMENT_UTM_MEDIUM ,UPPER(ShopifyQL.FIRSTVISIT_UTM_MEDIUM) Shopifyql_FIRSTVISIT_UTM_MEDIUM ,UPPER(ShopifyQL.FirstVisit_UTM_Campaign) Shopifyql_FIRSTVISIT_UTM_CAMPAIGN ,UPPER(ShopifyQL.ShopifyQL_MAPPED_FIRSTCLICK_SOURCE) ShopifyQL_MAPPED_FIRSTCLICK_SOURCE ,UPPER(ShopifyQL.ShopifyQL_MAPPED_FIRSTCLICK_CHANNEL) ShopifyQL_MAPPED_FIRSTCLICK_CHANNEL ,div0(ShopifyQL.MOMENTS_COUNT,count(1) over (partition by AO.name order by 1)) MOMENTS_COUNT ,div0(ShopifyQL.DAYSTOCONVERT,count(1) over (partition by AO.name order by 1)) DAYSTOCONVERT ,UPPER(GOKWIK.GOKWIK_UTM_SOURCE) GOKWIK_UTM_SOURCE ,UPPER(GOKWIK.GOKWIK_MAPPED_CHANNEL) GOKWIK_MAPPED_CHANNEL ,UPPER(GOKWIK.GOKWIK_MAPPED_SOURCE) GOKWIK_MAPPED_SOURCE ,UPPER(Referrer_Name) Referrer_Name ,Upper(coalesce(case when lower(AO.source_name) like \'%draft_order%\' then \'Draft Orders\' else ShopifyQL.shopifyql_mapped_source end,GOKWIK_MAPPED_SOURCE,\'Direct\')) FINAL_UTM_SOURCE ,Upper(coalesce(case when lower(AO.source_name) like \'%draft_order%\' then \'Draft Orders\' else ShopifyQL.shopifyql_mapped_source end,GOKWIK_MAPPED_CHANNEL,\'Direct\')) FINAL_UTM_CHANNEL from (select * ,case when lower(tags) like \'%cred%\' then \'CRED\' else \'Shopify_India\' end AS Shop_Name from xyxx_db.MAPLEMONK.SHOPIFY_IN_ORDERS_ALL) AO left join xyxx_db.maplemonk.Shopify_UTM_Parameters ShopifyQL on AO.name = ShopifyQL.name left join xyxx_db.maplemonk.GOKWIK_SOURCE GOKWIK on AO.ID = GOKWIK.ID ; ALTER TABLE xyxx_db.maplemonk.Shopify_All_orders RENAME COLUMN _AIRBYTE_SHOPIFY_IN_ORDERS_HASHID to _AIRBYTE_ORDERS_HASHID; CREATE OR REPLACE TABLE xyxx_db.maplemonk.Shopify_All_products AS select * ,upper(case when lower(tags) like (\'%collection_%\') then left(right(tags,len(tags)-position(\'collection_\',tags,1)-10),position(\',\',right(tags,len(tags)-position(\'collection_\',tags,1)-10),1)-1) end) Shopify_Product_Collection ,\'Shopify_India\' AS Shop_Name from XYXX_DB.MAPLEMONK.SHOPIFY_IN_PRODUCTS_ALL; ALTER TABLE xyxx_db.maplemonk.Shopify_All_products RENAME COLUMN _AIRBYTE_SHOPIFY_IN_PRODUCTS_HASHID to _AIRBYTE_PRODUCTS_HASHID; CREATE OR REPLACE TABLE xyxx_db.maplemonk.Shopify_All_products_variants AS select *,\'Shopify_India\' AS Shop_Name from XYXX_DB.MAPLEMONK.SHOPIFY_IN_PRODUCTS_VARIANTS_ALL; ALTER TABLE XYXX_DB.MAPLEMONK.SHOPIFY_ALL_PRODUCTS_VARIANTS RENAME COLUMN _AIRBYTE_SHOPIFY_IN_PRODUCTS_HASHID to _AIRBYTE_PRODUCTS_HASHID; CREATE OR REPLACE TABLE XYXX_DB.maplemonk.Shopify_All_customers_addresses AS select *,\'Shopify_India\' AS Shop_Name from XYXX_DB.MAPLEMONK.SHOPIFY_IN_CUSTOMERS_ADDRESSES_ALL; CREATE OR REPLACE TABLE XYXX_DB.maplemonk.Shopify_All_orders_items_discount AS SELECT order_id, LINE_ITEM_ID, SUM(B.VALUE:amount::FLOAT) AS DISCOUNT FROM( SELECT id AS order_id, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:discount_allocations AS discount_allocations FROM xyxx_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A)x,LATERAL FLATTEN (INPUT => x.discount_allocations)B GROUP BY ORDER_ID, LINE_ITEM_ID; CREATE OR REPLACE TABLE XYXX_db.maplemonk.Shopify_All_orders_items_tax AS SELECT order_id, LINE_ITEM_ID, SUM(B.VALUE:price::FLOAT) AS TAX, sum(B.VALUE:rate::float) as Tax_Rate FROM( SELECT id AS order_id, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:tax_lines AS tax_lines FROM xyxx_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A)x,LATERAL FLATTEN (INPUT => x.tax_lines)B GROUP BY order_id, LINE_ITEM_ID; CREATE OR REPLACE TABLE xyxx_db.maplemonk.Shopify_All_Refunds AS WITH refund_line_items AS ( SELECT refunds.value:order_id::STRING AS order_id, line_items.value:line_item_id::string as LINE_ITEM_ID, try_to_timestamp(replace(refunds.value:\"created_at\",\'\"\',\'\')) AS refund_date, sum(ifnull(line_items.value:quantity::INT,0)) AS refund_quantity, sum(ifnull(line_items.value:subtotal::FLOAT,0)) AS refund_subtotal FROM xyxx_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN(input => Shopify_All_orders.refunds) refunds, LATERAL FLATTEN(input => refunds.value:refund_line_items) line_items group by refunds.value:order_id::STRING, line_items.value:line_item_id::string, try_to_timestamp(replace(refunds.value:\"created_at\",\'\"\',\'\')) ), order_adjustments AS ( SELECT order_adj.value:order_id::STRING AS order_id, try_to_timestamp(replace(refunds.value:\"created_at\",\'\"\',\'\')) adjustment_date, sum(ifnull(order_adj.value:amount::FLOAT,0)) AS adjustment FROM xyxx_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN(input => Shopify_All_orders.refunds) refunds, LATERAL FLATTEN(input => refunds.value:order_adjustments) order_adj group by order_adj.value:order_id::STRING, try_to_timestamp(replace(refunds.value:\"created_at\",\'\"\',\'\')) ), adj_refund as ( Select distinct order_id, line_item_id, date from ( select coalesce(rl.order_id,oa.order_id) order_id, rl.line_item_id, case when rl.refund_date = oa.adjustment_date then rl.refund_date else coalesce(oa.adjustment_date, rl.refund_date) end as date from refund_line_items rl full outer join order_adjustments oa on rl.order_id = oa.order_id ) ), refund_summary as ( select ar.order_id, ar.line_item_id, ar.date, ifnull(rl.refund_quantity,0) refund_quantity, ifnull(rl.refund_subtotal,0) refund_subtotal, ifnull(div0(oa.adjustment,count(1) over (partition by ar.order_id, ar.date)),0) as Adjustment_amount, (ifnull(rl.refund_subtotal,0) - ifnull(Adjustment_amount,0)) Total_Refund from adj_refund ar left join refund_line_items rl on ar.order_id = rl.order_id and ar.date = rl.refund_date and ar.line_item_id = rl.line_item_id left join order_adjustments oa on ar.order_id = oa.order_id and ar.date = oa.adjustment_date ), aggregate_summary AS ( SELECT order_id, line_item_id, date, sum(refund_quantity) AS Refund_Quantity, sum(Total_Refund) AS Refund_Amount, sum(Adjustment_amount) AS Adjustment_Amount, sum(refund_subtotal) AS Refund_Before_Adjustment FROM refund_summary GROUP BY order_id, line_item_id, date ) SELECT asum.order_id, asum.line_item_id, sum(asum.Refund_Quantity) Quantity, sum(asum.Refund_Amount) Amount, sum(asum.Adjustment_Amount) Adjustment_Amount, sum(asum.Refund_Before_Adjustment) Refund_Before_Adjustment, ARRAY_AGG( Object_construct( \'Refund_Date\', asum.date, \'Refund_Quantity\', ifnull(to_varchar(CAST(asum.Refund_Quantity AS DECIMAL(38,2))), \'0\'), \'Adjustment_Amount\', ifnull(to_varchar(CAST(asum.Adjustment_Amount AS DECIMAL(38,2))), \'0\'), \'Refund_Amount\', ifnull(to_varchar(CAST(asum.Refund_Amount AS DECIMAL(38,2))), \'0\') ) ) AS Refund_Details FROM aggregate_summary asum GROUP BY asum.order_id, asum.line_item_id; CREATE OR REPLACE TABLE xyxx_db.maplemonk.Shopify_All_orders_fulfillment AS SELECT A.value:order_id AS order_id, B.value:id Line_Item_ID, replace(A.VALUE:tracking_number,\'\"\',\'\') as AWB, Upper(replace(A.VALUE:tracking_company,\'\"\',\'\')) as Courier, Upper(replace(A.VALUE:shipment_status,\'\"\',\'\')) as Shipping_status, replace(A.VALUE:updated_at,\'\"\',\'\') as shipping_status_update_date, replace(A.VALUE:tracking_url,\'\"\',\'\') as tracking_url, replace(A.VALUE:created_at,\'\"\',\'\') as Shipping_created_at FROM xyxx_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => fulfillments)A,LATERAL FLATTEN (INPUT => A.value:line_items)B; create or replace table xyxx_db.maplemonk.shipping_lines_discount as SELECT id as Order_ID, SUM(ifnull(CAST(da.value:amount AS FLOAT),0)) AS total_shipping_discount FROM xyxx_db.maplemonk.shopify_all_orders, LATERAL FLATTEN(input => shipping_lines) AS sl, LATERAL FLATTEN(input => sl.value:discount_allocations) AS da group by 1; CREATE OR REPLACE TABLE xyxx_db.maplemonk.Shopify_All_orders_items AS WITH CTE AS (SELECT SHOP_NAME, ID::VARCHAR(16777216) AS ORDER_ID, NAME AS ORDER_NAME, CUSTOMER, replace(customer:default_address:name,\'\"\',\'\') NAME, PHONE, EMAIL, tags, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:sku::STRING AS SKU, A.VALUE:product_id::STRING AS PRODUCT_ID, A.VALUE:title::STRING AS PRODUCT_NAME, CURRENCY, CASE WHEN cancelled_at IS NOT NULL THEN \'CANCELLED\' ELSE \'Shopify_Processed\' END AS order_status, CREATED_AT::DATETIME AS order_timestamp, A.VALUE:price::FLOAT * A.VALUE:quantity::FLOAT AS LINE_ITEM_SALES, (TOTAL_SHIPPING_PRICE_SET:presentment_money:amount::FLOAT/ COUNT(ORDER_ID) OVER(PARTITION BY ORDER_ID ORDER BY ORDER_ID)) AS SHIPPING_PRICE, A.value:price/(1+A.value:tax_lines:rate), A.VALUE:quantity::FLOAT as QUANTITY, \'Shopify\' AS Source, MOMENTS_COUNT, DAYSTOCONVERT, SHOPIFYQL_FIRSTVISIT_UTM_SOURCE, SHOPIFYQL_MAPPED_SOURCE, SHOPIFYQL_MAPPED_CHANNEL, SHOPIFYQL_LAST_MOMENT_UTM_SOURCE, Shopifyql_LAST_VISIT_NON_UTM_SOURCE, Shopifyql_LAST_MOMENT_UTM_MEDIUM, Shopifyql_FIRSTVISIT_UTM_MEDIUM, ShopifyQL_MAPPED_FIRSTCLICK_SOURCE, ShopifyQL_MAPPED_FIRSTCLICK_CHANNEL, Shopifyql_FIRSTVISIT_UTM_CAMPAIGN, Shopifyql_LAST_VISIT_UTM_CAMPAIGN, FINAL_UTM_CHANNEL, FINAL_UTM_SOURCE, Referrer_Name, GOKWIK_MAPPED_SOURCE, GOKWIK_MAPPED_CHANNEL FROM xyxx_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A) SELECT CTE.*, IFNULL(T.TAX_RATE,0) AS TAX_RATE, IFNULL(D.DISCOUNT,0) AS DISCOUNT, CTE.LINE_ITEM_SALES AS GROSS_SALES_AFTER_TAX, CTE.LINE_ITEM_SALES/(1+IFNULL(T.TAX_RATE,0)) AS GROSS_SALES_BEFORE_TAX, CASE when ifnull(T.TAX,0)=0 then IFNULL(D.DISCOUNT,0) else IFNULL(D.DISCOUNT,0)/(1+IFNULL(T.TAX_RATE,0)) end AS DISCOUNT_BEFORE_TAX, CASE when ifnull(T.TAX,0)=0 then CTE.LINE_ITEM_SALES - IFNULL(D.DISCOUNT,0) else CTE.LINE_ITEM_SALES/(1+IFNULL(T.TAX_RATE,0)) - IFNULL(D.DISCOUNT,0)/(1+IFNULL(T.TAX_RATE,0)) end AS NET_SALES_BEFORE_TAX, IFNULL(T.TAX,0) AS TAX, case when ifnull(T.TAX,0)=0 then (CTE.LINE_ITEM_SALES) - IFNULL(D.DISCOUNT,0) - div0(ifnull(SD.TOTAL_SHIPPING_DISCOUNT,0),count(1) over (partition by CTE.order_id)) + IFNULL(T.TAX,0) + CTE.SHIPPING_PRICE else (CTE.LINE_ITEM_SALES/(1+IFNULL(T.TAX_RATE,0))) - (IFNULL(D.DISCOUNT,0)/(1+IFNULL(T.TAX_RATE,0))) - div0(ifnull(SD.TOTAL_SHIPPING_DISCOUNT,0),count(1) over (partition by CTE.order_id)) + IFNULL(T.TAX,0) + CTE.SHIPPING_PRICE end AS TOTAL_SALES, CASE WHEN R.QUANTITY IS NOT NULL THEN 1 ELSE 0 END AS IS_REFUND, R.Refund_details, R.AMOUNT REFUND_AMOUNT, F.AWB AWB, F.SHIPPING_STATUS Shopify_Shipping_Status, F.SHIPPING_STATUS_UPDATE_DATE Shopify_Shipping_Updated_Date, F.COURIER SHOPIFY_COURIER, div0(ifnull(SD.TOTAL_SHIPPING_DISCOUNT,0),count(1) over (partition by CTE.order_id)) TOTAL_SHIPPING_DISCOUNT FROM CTE LEFT JOIN xyxx_db.maplemonk.Shopify_All_orders_items_tax T ON CTE.ORDER_ID = T.ORDER_ID AND CTE.LINE_ITEM_ID = T.LINE_ITEM_ID LEFT JOIN xyxx_db.maplemonk.Shopify_All_orders_items_discount D ON CTE.ORDER_ID = D.ORDER_ID AND CTE.LINE_ITEM_ID = D.LINE_ITEM_ID LEFT JOIN xyxx_db.maplemonk.Shopify_All_Refunds R ON CTE.ORDER_ID = R.ORDER_ID AND CTE.LINE_ITEM_ID = R.LINE_ITEM_ID LEFT JOIN xyxx_db.maplemonk.Shopify_All_orders_fulfillment F ON CTE.ORDER_ID = F.ORDER_ID AND CTE.LINE_ITEM_ID = F.LINE_ITEM_ID LEFT JOIN xyxx_db.maplemonk.shipping_lines_discount SD ON CTE.ORDER_ID = SD.ORDER_ID; CREATE OR REPLACE TABLE xyxx_db.maplemonk.FACT_ITEMS_XYXX_INTERMEDIATE AS SELECT O.SHOP_NAME, O.ORDER_ID, O.ORDER_NAME, O.CUSTOMER:id::int AS customer_id, O.Name, O.EMAIL, O.PHONE, O.Tags, O.LINE_ITEM_ID, O.SKU, O.PRODUCT_ID, O.CURRENCY, O.IS_REFUND, CASE WHEN CD.city IS NULL OR CD.city = \'\' THEN \'NA\' ELSE upper(CD.city) END AS city, CASE WHEN CD.province IS NULL OR CD.province = \'\' THEN \'NA\' ELSE upper(CD.province) END AS state, CASE WHEN P.title = \'\' THEN \'NA\' ELSE P.title END AS product_name, CASE WHEN P.product_type = \'\' THEN \'NA\' ELSE P.product_type END AS category, P.Shopify_Product_Collection, O.order_status, O.order_timestamp, O.LINE_ITEM_SALES, (ifnull(O.SHIPPING_PRICE,0)-ifnull(O.TOTAL_SHIPPING_DISCOUNT,0)) as SHIPPING_PRICE, O.QUANTITY, O.TAX, O.TAX_RATE, O.DISCOUNT, O.DISCOUNT_BEFORE_TAX, O.GROSS_SALES_AFTER_TAX, O.GROSS_SALES_BEFORE_TAX, O.NET_SALES_BEFORE_TAX, O.TOTAL_SALES, O.Source, O.MOMENTS_COUNT, O.DAYSTOCONVERT, O.SHOPIFYQL_FIRSTVISIT_UTM_SOURCE, O.SHOPIFYQL_MAPPED_SOURCE, O.SHOPIFYQL_MAPPED_CHANNEL, O.SHOPIFYQL_LAST_MOMENT_UTM_SOURCE, O.Shopifyql_LAST_VISIT_NON_UTM_SOURCE, O.Shopifyql_FIRSTVISIT_UTM_MEDIUM, O.Shopifyql_LAST_MOMENT_UTM_MEDIUM, O.ShopifyQL_MAPPED_FIRSTCLICK_SOURCE, O.ShopifyQL_MAPPED_FIRSTCLICK_CHANNEL, O.FINAL_UTM_CHANNEL, O.FINAL_UTM_SOURCE, O.Referrer_Name, O.GOKWIK_MAPPED_SOURCE, O.GOKWIK_MAPPED_CHANNEL, O.REFUND_DETAILS, O.REFUND_AMOUNT, O.AWB, O.SHOPIFY_SHIPPING_STATUS, O.SHOPIFY_SHIPPING_UPDATED_DATE, O.SHOPIFY_COURIER, O.Shopifyql_FIRSTVISIT_UTM_CAMPAIGN, O.Shopifyql_LAST_VISIT_UTM_CAMPAIGN FROM xyxx_db.maplemonk.Shopify_All_orders_items O LEFT JOIN xyxx_db.maplemonk.Shopify_All_products P ON O.PRODUCT_ID = P.id LEFT JOIN(SELECT customer_id, city, province, row_number() OVER ( partition BY customer_id ORDER BY id DESC) rowid FROM xyxx_db.maplemonk.Shopify_All_customers_addresses) AS CD ON O.CUSTOMER:id::int = CD.customer_id AND CD.rowid = 1; ALTER TABLE xyxx_db.maplemonk.FACT_ITEMS_XYXX_INTERMEDIATE ADD COLUMN SHIPPING_TAX FLOAT; ALTER TABLE xyxx_db.maplemonk.FACT_ITEMS_XYXX_INTERMEDIATE ADD COLUMN SHIP_PROMOTION_DISCOUNT FLOAT; ALTER TABLE xyxx_db.maplemonk.FACT_ITEMS_XYXX_INTERMEDIATE ADD COLUMN GIFT_WRAP_PRICE FLOAT; ALTER TABLE xyxx_db.maplemonk.FACT_ITEMS_XYXX_INTERMEDIATE ADD COLUMN GIFT_WRAP_TAX FLOAT; ALTER TABLE xyxx_db.maplemonk.FACT_ITEMS_XYXX_INTERMEDIATE MODIFY COLUMN ORDER_STATUS VARCHAR(100); INSERT INTO XYXX_db.maplemonk.FACT_ITEMS_XYXX_INTERMEDIATE SELECT \'Amazon\' AS SHOP_NAME, \"amazon-order-id\" AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS NAME, NULL AS EMAIL, NULL AS PHONE, NULL AS tags, NULL AS LINE_ITEM_ID, SKU, ASIN AS PRODUCT_ID, CURRENCY, case when \"order-status\" in (\'Shipped - Returned to Seller\', \'Shipped - Returning to Seller\',\'Shipped - Rejected by Buyer\',\'Shipped - Damaged\') then 1 else 0 end AS IS_REFUND, upper(\"ship-city\") AS CITY, upper(\"ship-state\") AS STATE, \"product-name\" AS Product_Name, NULL AS CATEGORY, NULL AS Shopify_Product_Collection, \"order-status\" AS ORDER_STATUS, \"Purchase-datetime-PDT\" AS ORDER_TIMESTAMP, TRY_CAST(\"item-price\" AS FLOAT) AS LINE_ITEM_SALES, TRY_CAST(\"shipping-price\" AS FLOAT) AS SHIPPING_PRICE, TRY_CAST(QUANTITY AS FLOAT) AS QUANTITY, TRY_CAST(\"item-tax\" AS FLOAT) AS TAX, null as TAX_RATE, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT_BEFORE_TAX, NULL AS GROSS_SALES_AFTER_TAX, ifnull(TRY_CAST(\"item-price\" AS FLOAT),0)-TRY_CAST(\"item-tax\" AS FLOAT) AS GROSS_SALES_BEFORE_TAX, NULL AS NET_SALES_BEFORE_TAX, ifnull(TRY_CAST(\"item-price\" AS FLOAT),0)-ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0)AS TOTAL_SALES, \'Amazon\' AS SOURCE, NULL AS MOMENTSCOUNT, NULL AS DAYSTOCONVERT, NULL AS FIRST_VISIT_UTM_SOURCE, NULL AS LAST_VISIT_MAPPED_SOURCE, NULL AS LAST_VISIT_MAPPED_CHANNEL, NULL AS LAST_MOMENT_UTM_SOURCE, NULL AS Shopifyql_LAST_VISIT_NON_UTM_SOURCE, NULL AS Shopifyql_FIRSTVISIT_UTM_MEDIUM, NULL AS Shopifyql_LAST_MOMENT_UTM_MEDIUM, NULL AS ShopifyQL_MAPPED_FIRSTCLICK_SOURCE, NULL AS ShopifyQL_MAPPED_FIRSTCLICK_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS FINAL_UTM_SOURCE, NULL AS REFERRER_NAME, NULL AS GOKWIK_MAPPED_SOURCE, NULL AS GOKWIK_MAPPED_CHANNEL, NULL AS REFUND_DETAILS, NULL AS REFUND_AMOUNT, NULL AS AWB, NULL AS SHOPIFY_SHIPPING_STATUS, NULL AS SHOPIFY_SHIPPING_UPDATED_DATE, NULL AS SHOPIFY_COURIER, NULL AS Shopifyql_FIRSTVISIT_UTM_CAMPAIGN, NULL AS Shopifyql_LAST_VISIT_UTM_CAMPAIGN, TRY_CAST(\"shipping-tax\" AS FLOAT) AS SHIPPING_TAX, TRY_CAST(\"ship-promotion-discount\" AS FLOAT) AS SHIP_PROMOTION_DISCOUNT, TRY_CAST(\"gift-wrap-price\" AS FLOAT) AS GIFT_WRAP_PRICE, TRY_CAST(\"gift-wrap-tax\" AS FLOAT) AS GIFT_WRAP_TAX FROM (SELECT *, CONVERT_TIMEZONE(\'UTC\',\'Asia/Kolkata\', \"purchase-date\":: DATETIME) as \"Purchase-datetime-PDT\" FROM xyxx_db.maplemonk.ASP_IN_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL )X WHERE upper(CURRENCY) = \'INR\' AND \"item-price\" NOT IN(\'\',\'0.0\'); CREATE OR REPLACE TABLE XYXX_db.maplemonk.FACT_ITEMS_TEMP_Category as select fi.* ,fi.SKU AS SKU_CODE ,p.name as PRODUCT_NAME_Final ,coalesce(Upper(p.CATEGORY),upper(fi.category)) AS Product_Category ,Upper(p.collection) Collection ,upper(p.product_sub_Category) PRODUCT_SUB_CATEGORY ,Upper(q.super_category) as Product_Super_Category from XYXX_db.maplemonk.FACT_ITEMS_XYXX_INTERMEDIATE fi left join (select * from (select skucode, name, category, collection, product_sub_category, row_number() over (partition by skucode order by 1) rw from XYXX_DB.maplemonk.sku_master) where rw = 1 )p on fi.sku = p.skucode left join (select distinct super_category, category from XYXX_DB.maplemonk.product_type_category_mapping) q on lower(fi.category)=lower(q.category); CREATE OR REPLACE TABLE XYXX_db.maplemonk.FACT_ITEMS_XYXX_INTERMEDIATE AS SELECT * FROM XYXX_db.maplemonk.FACT_ITEMS_TEMP_Category; create or replace table XYXX_DB.maplemonk.Shopify_Final_customerID as with new_phone_numbers as ( select phone, contact_num ,19700000000 + row_number() over( order by contact_num asc ) as maple_monk_id from ( select distinct right(regexp_replace(replace(phone,\' \',\'\'), \'[^a-zA-Z0-9]+\'),10) as contact_num, phone from XYXX_DB.maplemonk.FACT_ITEMS_XYXX_INTERMEDIATE ) a ), int as ( select contact_num,email,coalesce(maple_monk_id,id2) as maple_monk_id from ( select contact_num, email,maple_monk_id,19800000000+row_number() over(partition by maple_monk_id is NULL order by email asc ) as id2 from ( select distinct coalesce(p.contact_num,right(regexp_replace(e.contact_num, \'[^a-zA-Z0-9]+\'),10)) as contact_num, e.email,maple_monk_id from ( select replace(phone,\' \',\'\') as contact_num,email from XYXX_DB.maplemonk.FACT_ITEMS_XYXX_INTERMEDIATE ) e left join new_phone_numbers p on p.contact_num = right(regexp_replace(e.contact_num, \'[^a-zA-Z0-9]+\'),10) ) a ) b ) select contact_num, email, maple_monk_id from int where coalesce(contact_num,email) is not NULL; create or replace table XYXX_DB.maplemonk.FACT_ITEMS_XYXX as select coalesce(m.maple_monk_id_phone, d.maple_monk_id) as Shopify_customer_id_final , min(ORDER_TIMESTAMP::date) over(partition by Shopify_customer_id_final) as shopify_acquisition_date , min(case when lower(order_status) not in (\'cancelled\') then ORDER_TIMESTAMP::date end) over(partition by Shopify_customer_id_final) as shopify_first_complete_order_date , m.* from ( select c.maple_monk_id as maple_monk_id_phone, o.* from XYXX_DB.maplemonk.FACT_ITEMS_XYXX_INTERMEDIATE o left join (select * from (select contact_num phone,maple_monk_id, row_number() over (partition by contact_num order by maple_monk_id asc) magic from XYXX_DB.maplemonk.Shopify_Final_customerID) where magic =1 )c on c.phone = right(regexp_replace(o.phone, \'[^a-zA-Z0-9]+\'),10) )m left join (select distinct maple_monk_id, email from XYXX_DB.maplemonk.Shopify_Final_customerID where contact_num is null )d on d.email = m.email ; ALTER TABLE XYXX_DB.maplemonk.FACT_ITEMS_XYXX ADD COLUMN shopify_new_customer_flag varchar(50); ALTER TABLE XYXX_DB.maplemonk.FACT_ITEMS_XYXX ADD COLUMN shopify_new_customer_flag_month varchar(50); ALTER TABLE XYXX_DB.maplemonk.FACT_ITEMS_XYXX ADD COLUMN shopify_acquisition_product varchar(16777216); ALTER TABLE XYXX_DB.maplemonk.FACT_ITEMS_XYXX ADD COLUMN shopify_acquisition_channel varchar(16777216); ALTER TABLE XYXX_DB.maplemonk.FACT_ITEMS_XYXX ADD COLUMN shopify_acquisition_source varchar(16777216); UPDATE xyxx_db.maplemonk.FACT_ITEMS_XYXX AS A SET A.shopify_new_customer_flag = B.flag FROM ( SELECT DISTINCT order_id, Shopify_customer_id_final, ORDER_TIMESTAMP, CASE WHEN ORDER_TIMESTAMP::date = shopify_first_complete_order_date then \'New\' WHEN ORDER_TIMESTAMP::date < shopify_first_complete_order_date or shopify_first_complete_order_date is null THEN \'Yet to make completed order\' WHEN ORDER_TIMESTAMP::date > shopify_first_complete_order_date then \'Repeat\' END AS Flag FROM xyxx_db.maplemonk.FACT_ITEMS_XYXX )AS B WHERE A.order_id = B.order_id AND A.Shopify_customer_id_final = B.Shopify_customer_id_final AND A.ORDER_TIMESTAMP::date=B.ORDER_TIMESTAMP::Date; UPDATE xyxx_db.maplemonk.FACT_ITEMS_XYXX SET shopify_new_customer_flag = CASE WHEN shopify_new_customer_flag IS NULL and (case when lower(order_status) is null then 1=1 else lower(order_status) not in (\'cancelled\') end) THEN \'New\' WHEN shopify_new_customer_flag IS NULL and (case when lower(order_status) is null then 1=1 else lower(order_status) in (\'cancelled\') end) THEN \'Yet to make completed order\' ELSE shopify_new_customer_flag END; UPDATE xyxx_db.maplemonk.FACT_ITEMS_XYXX AS A SET A.shopify_new_customer_flag_month = B.flag FROM ( SELECT DISTINCT order_id, shopify_customer_id_final, ORDER_TIMESTAMP::date Order_Date, CASE WHEN Last_day(ORDER_TIMESTAMP, \'month\') = Last_day(shopify_first_complete_order_date, \'month\') THEN \'New\' WHEN Last_day(ORDER_TIMESTAMP, \'month\') < Last_day(shopify_first_complete_order_date, \'month\') or shopify_acquisition_date is null THEN \'Yet to make completed order\' WHEN Last_day(order_date, \'month\') > Last_day(shopify_first_complete_order_date, \'month\') THEN \'Repeat\' END AS Flag FROM xyxx_db.maplemonk.FACT_ITEMS_XYXX )AS B WHERE A.order_id = B.order_id AND A.shopify_customer_id_final = B.shopify_customer_id_final; UPDATE xyxx_db.maplemonk.FACT_ITEMS_XYXX SET shopify_new_customer_flag_month = CASE WHEN shopify_new_customer_flag_month IS NULL and (case when lower(order_status) is null then 1=1 else lower(order_status) not in (\'cancelled\') end) THEN \'New\' ELSE shopify_new_customer_flag_month END; CREATE OR replace temporary TABLE XYXX_DB.maplemonk.temp_source_1 AS SELECT DISTINCT shopify_customer_id_final, channel , source FROM ( SELECT DISTINCT shopify_customer_id_final, order_timestamp::date order_Date, FINAL_UTM_SOURCE as SOURCE, FINAL_UTM_CHANNEL as CHANNEL, Min(case when lower(order_status) not in (\'cancelled\') then order_timestamp::date end) OVER (partition BY shopify_customer_id_final) firstOrderdate FROM XYXX_DB.maplemonk.FACT_ITEMS_XYXX ) res WHERE order_date=firstorderdate; UPDATE XYXX_DB.maplemonk.FACT_ITEMS_XYXX AS a SET a.shopify_acquisition_channel=b.channel FROM XYXX_DB.maplemonk.temp_source_1 b WHERE a.shopify_customer_id_final = b.shopify_customer_id_final; UPDATE XYXX_DB.maplemonk.FACT_ITEMS_XYXX AS a SET a.shopify_acquisition_source=b.SOURCE FROM XYXX_DB.maplemonk.temp_source_1 b WHERE a.shopify_customer_id_final = b.shopify_customer_id_final; CREATE OR replace temporary TABLE XYXX_DB.maplemonk.temp_product_1 AS SELECT DISTINCT shopify_customer_id_final, product_name_final, Row_number() OVER (partition BY shopify_customer_id_final ORDER BY total_sales DESC) rowid FROM ( SELECT DISTINCT shopify_customer_id_final, order_timestamp::date order_date, product_name_final, TOTAL_SALES , Min(case when lower(order_status) not in (\'cancelled\') then order_timestamp::date end) OVER (partition BY shopify_customer_id_final) firstOrderdate FROM XYXX_DB.maplemonk.FACT_ITEMS_XYXX )res WHERE order_date=firstorderdate; UPDATE XYXX_DB.maplemonk.FACT_ITEMS_XYXX AS A SET A.shopify_acquisition_product=B.product_name_final FROM ( SELECT * FROM XYXX_DB.maplemonk.temp_product_1 WHERE rowid=1)B WHERE A.shopify_customer_id_final = B.shopify_customer_id_final; CREATE OR REPLACE TABLE xyxx_db.maplemonk.FACT_ITEMS_SHOPIFY_XYXX AS SELECT FI.*, RI.* ,c.return_flag Return_flag ,c.Return_quantity Return_Quantity ,Total_sales*c.Return_quantity/QUANTITY as Return_Value ,c.shipping_last_update_date last_update_date ,c.shipping_status Shipping_status FROM xyxx_db.maplemonk.FACT_ITEMS_XYXX FI left join xyxx_db.maplemonk.region_iso_3166_codes RI on Upper(FI.state) = Upper(RI.Subdivision_name) left join (select * from (select order_id ,city ,state ,saleorderitemcode ,sales_order_item_id ,shippingpackagecode ,SHIPPINGPACKAGESTATUS ,shipping_status ,order_status ,Courier ,Dispatch_Date ,Delivered_date ,Return_flag ,Return_quantity ,cancelled_quantity ,shipping_last_update_date ,days_in_shipment ,awb ,payment_method ,row_number() over (partition by order_id, split_part(saleorderitemcode,\'-\',0) order by shipping_last_update_date desc) rw from XYXX_DB.maplemonk.UNICOMMERCE_FACT_ITEMS_XYXX_FINAL where lower(marketplace) like any (\'%shopify%\',\'%amazon%\')) where rw=1 )c on FI.order_id=c.order_id and FI.line_item_id=split_part(c.saleorderitemcode,\'-\',0) where lower(shop_name) like any (\'%shopify%\',\'%cred%\'); CREATE OR REPLACE TABLE xyxx_db.maplemonk.Shopify_All_Refunds_by_Date AS SELECT replace(A.value:\"Refund_Date\",\'\"\',\'\')::date Refund_Date, ORDER_NAME, ORDER_ID, shopifyql_mapped_firstclick_source, shopifyql_mapped_firstclick_channel, shopify_new_customer_flag, shopify_new_customer_flag_month, Shop_name, final_utm_channel, final_utm_source, referrer_name, gokwik_mapped_channel, gokwik_mapped_source, PRODUCT_ID, SKU, SKU_CODE, product_name_final, product_category, product_super_category, product_sub_category, Shopify_Product_Collection, collection, category, line_item_id, STATE, CITY, SUBDIVISION_NAME, sum(shipping_price)/COUNT(ORDER_ID) OVER(PARTITION BY Shop_name, final_utm_channel, final_utm_source, referrer_name, gokwik_mapped_channel, gokwik_mapped_source, PRODUCT_ID, SKU, SKU_CODE, product_name_final, product_category, product_super_category, product_sub_category, Shopify_Product_Collection, category, line_item_id, STATE, CITY, SUBDIVISION_NAME ORDER BY 1) AS REFUND_SHIPPING_PRICE, SUM(A.VALUE:Refund_Quantity) AS Refund_Quantity, SUM(A.VALUE:Refund_Amount) AS Refund_Amount, SUM(ifnull(A.VALUE:Refund_Amount,0))+ifnull(REFUND_SHIPPING_PRICE,0) Total_Return_Amount FROM xyxx_db.maplemonk.fact_items_shopify_xyxx, LATERAL FLATTEN(INPUT => refund_details) A WHERE replace(A.value:\"Refund_Date\",\'\"\',\'\')::date is not null GROUP BY Refund_Date, ORDER_NAME, ORDER_ID, shopifyql_mapped_firstclick_source, shopifyql_mapped_firstclick_channel, shopify_new_customer_flag, shopify_new_customer_flag_month, Shop_name, final_utm_channel, final_utm_source, referrer_name, gokwik_mapped_channel, gokwik_mapped_source, PRODUCT_ID, SKU, SKU_CODE, product_name_final, product_category, product_super_category, product_sub_category, Shopify_Product_Collection, collection, category, line_item_id, STATE, CITY, SUBDIVISION_NAME ; create or replace table xyxx_db.maplemonk.Website_Product_Channel_DSR_XYXX as with RV as ( select Refund_Date ,Shop_name ,shopifyql_mapped_firstclick_source ,shopifyql_mapped_firstclick_channel ,shopify_new_customer_flag ,shopify_new_customer_flag_month ,final_utm_channel ,final_utm_source ,referrer_name ,gokwik_mapped_channel ,gokwik_mapped_source ,PRODUCT_ID ,SKU ,SKU_CODE ,product_name_final ,product_category ,product_super_category ,product_sub_category ,Shopify_Product_Collection ,collection ,category ,STATE ,CITY ,SUBDIVISION_NAME ,sum(Total_Return_Amount) Return_Amount ,sum(refund_Quantity) Return_Quantity from xyxx_db.maplemonk.Shopify_All_Refunds_by_Date group by Refund_Date ,Shop_name ,shopifyql_mapped_firstclick_source ,shopifyql_mapped_firstclick_channel ,shopify_new_customer_flag ,shopify_new_customer_flag_month ,final_utm_channel ,final_utm_source ,referrer_name ,gokwik_mapped_channel ,gokwik_mapped_source ,PRODUCT_ID ,SKU ,SKU_CODE ,product_name_final ,product_category ,product_super_category ,product_sub_category ,Shopify_Product_Collection ,collection ,category ,STATE ,CITY ,SUBDIVISION_NAME ), Total_Orders as ( select Order_timestamp::date Order_date ,Shop_name ,shopifyql_mapped_firstclick_source ,shopifyql_mapped_firstclick_channel ,shopify_new_customer_flag ,shopify_new_customer_flag_month ,final_utm_channel ,final_utm_source ,referrer_name ,gokwik_mapped_channel ,gokwik_mapped_source ,STATE ,CITY ,SUBDIVISION_NAME ,count(distinct order_id) Orders ,count(distinct case when lower(order_status) not in (\'cancelled\') and (total_sales) > 0 then order_id end) Realised_Orders from xyxx_db.maplemonk.fact_items_shopify_xyxx group by Order_date ,Shop_name ,shopifyql_mapped_firstclick_source ,shopifyql_mapped_firstclick_channel ,shopify_new_customer_flag ,shopify_new_customer_flag_month ,final_utm_channel ,final_utm_source ,referrer_name ,gokwik_mapped_channel ,gokwik_mapped_source ,STATE ,CITY ,SUBDIVISION_NAME ), FI as ( select Order_timestamp::date Order_date ,Shop_name ,shopifyql_mapped_firstclick_source ,shopifyql_mapped_firstclick_channel ,shopify_new_customer_flag ,shopify_new_customer_flag_month ,final_utm_channel ,final_utm_source ,referrer_name ,gokwik_mapped_channel ,gokwik_mapped_source ,PRODUCT_ID ,SKU ,SKU_CODE ,product_name_final ,product_category ,product_super_category ,product_sub_category ,collection ,Shopify_Product_Collection ,category ,STATE ,CITY ,SUBDIVISION_NAME ,count(distinct order_id) Orders ,count(distinct case when lower(order_status) not in (\'cancelled\') and (total_sales) > 0 then order_id end) Realised_Orders ,sum(ifnull(FI.LINE_ITEM_SALES,0)) LINE_ITEM_SALES ,sum(ifnull(FI.SHIPPING_PRICE,0)) SHIPPING_PRICE ,sum(ifnull(FI.QUANTITY,0)) QUANTITY ,sum(ifnull(FI.TAX,0)) TAX ,sum(ifnull(FI.DISCOUNT,0)) DISCOUNT ,sum(ifnull(FI.DISCOUNT_BEFORE_TAX,0)) DISCOUNT_BEFORE_TAX ,sum(ifnull(FI.GROSS_SALES_AFTER_TAX,0)) GROSS_SALES_AFTER_TAX ,sum(ifnull(FI.GROSS_SALES_BEFORE_TAX,0)) GROSS_SALES_BEFORE_TAX ,sum(ifnull(FI.NET_SALES_BEFORE_TAX,0)) NET_SALES_BEFORE_TAX ,sum(ifnull(FI.TOTAL_SALES,0)) TOTAL_SALES_BEFORE_EXLC_RETURNS from xyxx_db.maplemonk.fact_items_shopify_xyxx FI group by Order_date ,Shop_name ,shopifyql_mapped_firstclick_source ,shopifyql_mapped_firstclick_channel ,shopify_new_customer_flag ,shopify_new_customer_flag_month ,final_utm_channel ,final_utm_source ,referrer_name ,gokwik_mapped_channel ,gokwik_mapped_source ,PRODUCT_ID ,SKU ,SKU_CODE ,product_name_final ,product_category ,product_super_category ,product_sub_category ,collection ,Shopify_Product_Collection ,category ,STATE ,CITY ,SUBDIVISION_NAME ) select coalesce(FI.order_date, RV.refund_date, TOTAL_ORDERS.order_Date) Date ,coalesce(FI.Shop_name,RV.shop_name, TOTAL_ORDERS.shop_name) SHOP_NAME ,coalesce(FI.shopifyql_mapped_firstclick_source,RV.shopifyql_mapped_firstclick_source, TOTAL_ORDERS.shopifyql_mapped_firstclick_source) shopifyql_mapped_firstclick_source ,coalesce(FI.shopifyql_mapped_firstclick_channel,RV.shopifyql_mapped_firstclick_channel, TOTAL_ORDERS.shopifyql_mapped_firstclick_channel) shopifyql_mapped_firstclick_channel ,coalesce(FI.shopify_new_customer_flag, RV.shopify_new_customer_flag, TOTAL_ORDERS.shopify_new_customer_flag) shopify_new_customer_flag ,coalesce(Fi.shopify_new_customer_flag_month, RV.shopify_new_customer_flag_month, TOTAL_ORDERS.Shopify_New_Customer_Flag_Month) Shopify_New_Customer_Flag_Month ,coalesce(FI.final_utm_channel, RV.final_utm_channel, TOTAL_ORDERS.FINAL_UTM_CHANNEL) FINAL_UTM_CHANNEL ,coalesce(FI.final_utm_source, RV.final_utm_source, TOTAL_ORDERS.final_utm_source) final_utm_source ,coalesce(FI.referrer_name, RV.referrer_name, TOTAL_ORDERS.Referrer_name) Referrer_name ,coalesce(FI.gokwik_mapped_channel, RV.gokwik_mapped_channel, TOTAL_ORDERS.gokwik_mapped_channel) gokwik_mapped_channel ,coalesce(FI.gokwik_mapped_source, RV.gokwik_mapped_source, TOTAL_ORDERS.GOKWIK_MAPPED_SOURCE) GOKWIK_MAPPED_SOURCE ,coalesce(FI.PRODUCT_ID, RV.PRODUCT_ID) PRODUCT_ID ,coalesce(FI.SKU, RV.SKU) SKU ,coalesce(FI.SKU_CODE, RV.SKU_CODE) SKU_CODE ,coalesce(FI.product_name_final, RV.product_name_final) PRODUCT_NAME_FINAL ,coalesce(FI.product_category, RV.product_category) PRODUCT_CATEGORY ,coalesce(FI.product_super_category, RV.product_super_category) PRODUCT_SUPER_CATEGORY ,coalesce(FI.collection,RV.collection) COLLECTION ,coalesce(FI.Shopify_Product_Collection,RV.Shopify_Product_Collection) Shopify_Product_Collection ,coalesce(FI.category, RV.category) CATEGORY ,coalesce(FI.STATE, RV.STATE, TOTAL_ORDERS.STATE) STATE ,coalesce(FI.CITY, RV.CITY, TOTAL_ORDERS.CITY) CITY ,coalesce(FI.SUBDIVISION_NAME, RV.SUBDIVISION_NAME, TOTAL_ORDERS.SUBDIVISION_NAME) SUBDIVISION_NAME ,div0(ifnull(TOTAL_ORDERS.Realised_Orders,0), count(1) over (partition by Date , coalesce(FI.Shop_name,RV.shop_name, TOTAL_ORDERS.shop_name) ,coalesce(FI.shopifyql_mapped_firstclick_source,RV.shopifyql_mapped_firstclick_source, TOTAL_ORDERS.shopifyql_mapped_firstclick_source) ,coalesce(FI.shopifyql_mapped_firstclick_channel,RV.shopifyql_mapped_firstclick_channel, TOTAL_ORDERS.shopifyql_mapped_firstclick_channel) ,coalesce(FI.shopify_new_customer_flag, RV.shopify_new_customer_flag, TOTAL_ORDERS.shopify_new_customer_flag) ,coalesce(Fi.shopify_new_customer_flag_month, RV.shopify_new_customer_flag_month, TOTAL_ORDERS.Shopify_New_Customer_Flag_Month) , coalesce(FI.final_utm_channel, RV.final_utm_channel, TOTAL_ORDERS.FINAL_UTM_CHANNEL) , coalesce(FI.final_utm_source, RV.final_utm_source, TOTAL_ORDERS.final_utm_source) , coalesce(FI.referrer_name, RV.referrer_name, TOTAL_ORDERS.Referrer_name) , coalesce(FI.gokwik_mapped_channel, RV.gokwik_mapped_channel, TOTAL_ORDERS.gokwik_mapped_channel) , coalesce(FI.gokwik_mapped_source, RV.gokwik_mapped_source, TOTAL_ORDERS.GOKWIK_MAPPED_SOURCE) , coalesce(FI.STATE, RV.STATE, TOTAL_ORDERS.STATE) , coalesce(FI.CITY, RV.CITY, TOTAL_ORDERS.CITY) , coalesce(FI.SUBDIVISION_NAME, RV.SUBDIVISION_NAME, TOTAL_ORDERS.SUBDIVISION_NAME) ) ) Realised_Orders ,div0(ifnull(TOTAL_ORDERS.orders,0), count(1) over (partition by Date , coalesce(FI.Shop_name,RV.shop_name, TOTAL_ORDERS.shop_name) ,coalesce(FI.shopifyql_mapped_firstclick_source,RV.shopifyql_mapped_firstclick_source, TOTAL_ORDERS.shopifyql_mapped_firstclick_source) ,coalesce(FI.shopifyql_mapped_firstclick_channel,RV.shopifyql_mapped_firstclick_channel, TOTAL_ORDERS.shopifyql_mapped_firstclick_channel) ,coalesce(FI.shopify_new_customer_flag, RV.shopify_new_customer_flag, TOTAL_ORDERS.shopify_new_customer_flag) ,coalesce(Fi.shopify_new_customer_flag_month, RV.shopify_new_customer_flag_month, TOTAL_ORDERS.Shopify_New_Customer_Flag_Month) , coalesce(FI.final_utm_channel, RV.final_utm_channel, TOTAL_ORDERS.FINAL_UTM_CHANNEL) , coalesce(FI.final_utm_source, RV.final_utm_source, TOTAL_ORDERS.final_utm_source) , coalesce(FI.referrer_name, RV.referrer_name, TOTAL_ORDERS.Referrer_name) , coalesce(FI.gokwik_mapped_channel, RV.gokwik_mapped_channel, TOTAL_ORDERS.gokwik_mapped_channel) , coalesce(FI.gokwik_mapped_source, RV.gokwik_mapped_source, TOTAL_ORDERS.GOKWIK_MAPPED_SOURCE) , coalesce(FI.STATE, RV.STATE, TOTAL_ORDERS.STATE) , coalesce(FI.CITY, RV.CITY, TOTAL_ORDERS.CITY) , coalesce(FI.SUBDIVISION_NAME, RV.SUBDIVISION_NAME, TOTAL_ORDERS.SUBDIVISION_NAME) ) ) Orders ,ifnull(FI.orders,0) Product_Orders ,ifnull(FI.realised_orders,0) Product_Realised_Orders ,ifnull(FI.LINE_ITEM_SALES,0) LINE_ITEM_SALES ,ifnull(FI.SHIPPING_PRICE,0) SHIPPING_PRICE ,ifnull(FI.QUANTITY,0) QUANTITY ,ifnull(FI.TAX,0) TAX ,ifnull(FI.DISCOUNT,0) DISCOUNT ,ifnull(FI.DISCOUNT_BEFORE_TAX,0) DISCOUNT_BEFORE_TAX ,ifnull(FI.GROSS_SALES_AFTER_TAX,0) GROSS_SALES_AFTER_TAX ,ifnull(FI.GROSS_SALES_BEFORE_TAX,0) GROSS_SALES_BEFORE_TAX ,ifnull(FI.NET_SALES_BEFORE_TAX,0) NET_SALES_BEFORE_TAX ,ifnull(FI.TOTAL_SALES_BEFORE_EXLC_RETURNS,0) TOTAL_SALES_BEFORE_EXLC_RETURNS ,ifnull(RV.Return_Amount,0) Return_Amount ,(ifnull(TOTAL_SALES_BEFORE_EXLC_RETURNS,0) - ifnull(Return_Amount,0)) Total_Sales ,ifnull(RV.RETURN_QUANTITY,0) RETURN_QUANTITY from FI full outer join RV on FI.ORDER_date = RV.refund_date and lower(FI.Shop_name)= lower(RV.Shop_name) and lower(FI.shopifyql_mapped_firstclick_source) = lower(RV.shopifyql_mapped_firstclick_source) and lower(FI.shopifyql_mapped_firstclick_channel) = lower(RV.shopifyql_mapped_firstclick_channel) and lower(FI.shopify_new_customer_flag) = lower(RV.shopify_new_customer_flag) and lower(FI.shopify_new_customer_flag_month) = lower(RV.shopify_new_customer_flag_month) and lower(FI.final_utm_channel)= lower(RV.final_utm_channel) and lower(FI.final_utm_source)= lower(RV.final_utm_source) and lower(FI.referrer_name)= lower(RV.referrer_name) and lower(FI.gokwik_mapped_channel)= lower(RV.gokwik_mapped_channel) and lower(FI.gokwik_mapped_source)= lower(RV.gokwik_mapped_source) and lower(FI.PRODUCT_ID)= lower(RV.PRODUCT_ID) and lower(FI.SKU)= lower(RV.SKU) and lower(FI.SKU_CODE)= lower(RV.SKU_CODE) and lower(FI.product_name_final)= lower(RV.product_name_final) and lower(FI.product_category)= lower(RV.product_category) and lower(FI.product_super_category)= lower(RV.product_super_category) and lower(FI.collection)= lower(RV.collection) and lower(FI.Shopify_Product_Collection) = lower(Rv.Shopify_Product_Collection) and lower(FI.category)= lower(RV.category) and lower(FI.STATE)= lower(RV.STATE) and lower(FI.CITY)= lower(RV.CITY) and lower(FI.SUBDIVISION_NAME)= lower(RV.SUBDIVISION_NAME) left join TOTAL_ORDERS on coalesce(FI.order_date::date, RV.refund_date::date) = TOTAL_ORDERS.order_date::date and lower(coalesce(FI.Shop_name,RV.shop_name)) = lower(TOTAL_ORDERS.SHOP_NAME) and lower(ifnull(coalesce(FI.shopifyql_mapped_firstclick_source,RV.shopifyql_mapped_firstclick_source),\'1\')) = lower(ifnull(TOTAL_ORDERS.shopifyql_mapped_firstclick_source,\'1\')) and lower(ifnull(coalesce(FI.shopifyql_mapped_firstclick_channel,RV.shopifyql_mapped_firstclick_channel),\'1\')) = lower(ifnull(TOTAL_ORDERS.shopifyql_mapped_firstclick_channel,\'1\')) and lower(ifnull(coalesce(FI.shopify_new_customer_flag, RV.shopify_new_customer_flag),\'1\')) = lower(ifnull(TOTAL_ORDERS.shopify_new_customer_flag,\'1\')) and lower(ifnull(coalesce(Fi.Shopify_New_Customer_Flag_Month, RV.Shopify_New_Customer_Flag_Month),\'1\')) = lower(ifnull(TOTAL_ORDERS.Shopify_New_Customer_Flag_Month,\'1\')) and lower(ifnull(coalesce(FI.FINAL_UTM_CHANNEL, RV.FINAL_UTM_CHANNEL),\'1\')) = lower(ifnull(TOTAL_ORDERS.FINAL_UTM_CHANNEL,\'1\')) and lower(ifnull(coalesce(FI.final_utm_source, RV.final_utm_source),\'1\')) = lower(ifnull(TOTAL_ORDERS.final_utm_source,\'1\')) and lower(ifnull(coalesce(FI.Referrer_name, RV.Referrer_name),\'1\')) = lower(ifnull(TOTAL_ORDERS.Referrer_name,\'1\')) and lower(ifnull(coalesce(FI.gokwik_mapped_channel, RV.gokwik_mapped_channel),\'1\')) = lower(ifnull(TOTAL_ORDERS.gokwik_mapped_channel,\'1\')) and lower(ifnull(coalesce(FI.GOKWIK_MAPPED_SOURCE, RV.GOKWIK_MAPPED_SOURCE),\'1\')) = lower(ifnull(TOTAL_ORDERS.GOKWIK_MAPPED_SOURCE,\'1\')) and lower(coalesce(FI.STATE, RV.STATE)) = lower(TOTAL_ORDERS.STATE) and lower(coalesce(FI.CITY, RV.CITY)) = lower(TOTAL_ORDERS.CITY) and lower(ifnull(coalesce(FI.SUBDIVISION_NAME, RV.SUBDIVISION_NAME),\'1\')) = lower(ifnull(TOTAL_ORDERS.SUBDIVISION_NAME,\'1\'));",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from XYXX_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        