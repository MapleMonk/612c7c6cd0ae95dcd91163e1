{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table almowear_db.maplemonk.shiprocket_data_temp as select replace(A.value:\"awb\",\'\"\',\'\') as AWB_NUMBER ,updated_at ,status ,sla ,expedited ,delay_reason ,customer_pincode ,replace(A.value:\"courier\",\'\"\',\'\') as Courier_partner ,replace(A.value:\"etd\",\'\"\',\'\') as ETD ,replace(A.value:\"delivered_date\",\'\"\',\'\') as delivered_date ,replace(D.value:\"applied_weight\",\'\"\',\'\') as applied_weight ,replace(D.value:\"applied_weight_amount\",\'\"\',\'\') as applied_weight_amount ,replace(D.value:\"cod_charges\",\'\"\',\'\') as cod_charges ,replace(D.value:\"freight_charges\",\'\"\',\'\') as freight_charges ,replace(D.value:\"zone\",\'\"\',\'\') as zone from shiprocket_orders, lateral flatten(SHIPMENTS) A,lateral flatten(AWB_DATA) D; create or replace table Almowear_db.Maplemonk.Order_Fulfillment_Report_AW as select order_id ,reference_code ,a.marketplace ,warehouse_name ,order_date::timestamp Order_Date ,same_day_cut_off ,max(import_date) Order_Import_Date ,max(manifest_date) Order_Manifest_Date ,a.EASY_ECOM_SYNC_FLAG ,max(coalesce(try_to_date(so.updated_at,\'DD Mon YYYY, HH24:MI AM\'),shipping_last_update_date )) Order_Shipping_Last_Update_Date ,so.status as ShipmentPartner_Status ,a.order_status as EasyEcom_status ,coalesce(am.\"Mapped Status\",pm.\"Mapped Status\") as final_status ,coalesce(so.awb_number, a.AWB_NUMBER) AWB_NUMBER ,so.expedited as expedited ,so.delay_reason as delay_reason ,coalesce(so.customer_pincode,a.PIN_CODE) as Pin_code ,Courier_partner ,ETD ,applied_weight ,applied_weight_amount ,cod_charges ,freight_charges ,zs.zone ,zs.\"TAT hrs\", case when EASY_ECOM_SYNC_FLAG=\'Synced\' then 0 else 1 end as not_synced_with_easy_ecom_flag, case when final_status = \'Order Yet To sync\' then 1 else 0 end as Order_yet_to_Sync_Order, case when final_status = \'Confirmed\' then 1 else 0 end as Confirmed_Order, case when final_status = \'Assigned\' then 1 else 0 end as Assigned_Order, case when final_status = \'Open\' then 1 else 0 end as Open_Order, case when final_status = \'Printed\' then 1 else 0 end as Printed_Order, case when final_status = \'Pending\' then 1 else 0 end as Pending_Order, case when final_status = \'In Transit\' then 1 else 0 end as In_Transit_order, case when final_status = \'Delivered\' then 1 else 0 end as delivered_order, case when final_status = \'RTO\' then 1 else 0 end as RTO_Order, case when final_status = \'RTS\' then 1 else 0 end as RTS_Order, case when final_status = \'Returned\' then 1 else 0 end as Returned_order, case when final_status = \'Pickup Error\' then 1 else 0 end as Pickup_Error, case when final_status = \'Lost\' then 1 else 0 end as Lost_Order, case when final_status = \'Exception\' then 1 else 0 end as Exception_Order, case when final_status = \'Misrouted\' then 1 else 0 end as Misrouted_Order, case when final_status = \'Underprocess\' then 1 else 0 end as Underprocess_Order, case when final_status = \'Damaged\' then 1 else 0 end as Damaged_Order, case when final_status = \'Indian Speed Post\' then 1 else 0 end as Incian_Speed_Post_Order, case when final_status = \'Cancelled\' then 1 else 0 end as cancelled_order, case when delivered_order = 1 then datediff(\'hour\',order_date::timestamp ,Order_Shipping_Last_Update_Date ) else datediff(\'hour\',order_date::timestamp ,convert_timezone(\'America/Los_Angeles\', \'Asia/Kolkata\', current_timestamp())) end as Time_From_Order, datediff(\'hour\',order_date::timestamp ,order_manifest_date) Dispatch_Speed, case when Dispatch_Speed < 2 then \'< 2 hours\' when Dispatch_Speed < 6 then \'2 - 6 hours\' when Dispatch_Speed < 12 then \'6 - 12 hours\' when Dispatch_Speed < 24 then \'12 - 24 hours\' when Dispatch_Speed < 48 then \'24-48 hours\' when Dispatch_Speed < 72 then \'48-72 hours\' when Dispatch_Speed < 96 then \'72-96 hours\' when order_manifest_date is not NULL then \'> 96 hours\' when order_manifest_date is NULL then \'Not Dispatched\' end as Dispatch_Speed_flag, greatest(case when hour(Order_Import_Date) < hour(try_cast(same_day_cut_off as time)) then datediff(\'day\',Order_Import_Date ,coalesce(order_manifest_date,convert_timezone(\'America/Los_Angeles\', \'Asia/Kolkata\', current_timestamp()) )) else datediff(\'day\',Order_Import_Date ,coalesce(order_manifest_date,convert_timezone(\'America/Los_Angeles\', \'Asia/Kolkata\', current_timestamp()) )) -1 end,0) as Almo_Dispatch_Flag, Case when Almo_Dispatch_Flag=0 then \'Same Day\' when Almo_Dispatch_Flag=1 then \'Next Day\' else \'2+ Days\' end as Final_Dispatch_Bucket, case when delivered_order = 1 then datediff(\'hour\',order_manifest_date , order_shipping_last_update_date ) end as Delivery_Speed, case when not_synced_with_easy_ecom_flag = 1 then NULL when delivered_order = 1 then datediff(\'hour\',order_manifest_date ,order_shipping_last_update_date ) else datediff(\'hour\',order_manifest_date ,convert_timezone(\'America/Los_Angeles\', \'Asia/Kolkata\', current_timestamp())) end as deliver_time, case when delivered_order = 1 and datediff(\'hour\',order_manifest_date,order_shipping_last_update_date ) < 24 then \'< 24 hours\' when delivered_order = 1 and datediff(\'hour\',order_manifest_date,order_shipping_last_update_date ) < 48 then \'24-48 hours\' when delivered_order = 1 and datediff(\'hour\',order_manifest_date,order_shipping_last_update_date ) < 72 then \'48-72 hours\' when delivered_order = 1 and datediff(\'hour\',order_manifest_date,order_shipping_last_update_date ) < 96 then \'72-96 hours\' when delivered_order = 1 then \'> 96 hours\' else \'Not Delivered\' end as delivery_time_flag, case when not_synced_with_easy_ecom_flag = 1 then \'Order Not available in Easy Ecom\' when order_manifest_date is NULL then \'Before Dispatch\' else \'After Dispatch\' end as dispatch_status ,case when (case when delivered_order=1 then (datediff(\'hours\',order_manifest_date,order_shipping_last_update_date)/24) end) > zs.\"TAT hrs\" then \'SLA BREACHED\' when (case when delivered_order=1 then (datediff(\'hours\',order_manifest_date,order_shipping_last_update_date)/24) end) <= zs.\"TAT hrs\" then \'SLA NOT BREACHED\' when (case when delivered_order=0 then (datediff(\'hours\',order_manifest_date,getdate())/24) end) > zs.\"TAT hrs\" then \'SLA BREACHED BEFORE DELIVERY\' when (case when delivered_order=0 then (datediff(\'hours\',order_manifest_date,getdate())/24) end) <= zs.\"TAT hrs\" then \'SLA NOT BREACHED-YET TO BE DELIVERED\' when order_manifest_date is null then \'YET TO BE PICKED UP\' when delivered_order =0 and zs.\"TAT hrs\" is null then \'SHIPPING SLA NOT AVAILABLE\' end as SLA_BREACH from ALMOWEAR_DB.maplemonk.sales_consolidated_AW a left join almo_marketplace_fulfillment_cutoff b on b.marketplace = case when a.marketplace in (select distinct marketplace from almo_marketplace_fulfillment_cutoff) then a.marketplace else \'Others\' end left join almowear_db.maplemonk.shiprocket_data_temp so on a.awb_number = so.awb_number left join almo_shipment_status_mapping am on lower(so.status) = lower(am.status) left join almo_shipment_status_mapping pm on lower(a.shipping_status) = lower(pm.status) left join almo_pincode_zone_mapping pz on a.pin_code = pz.pin_code left join almo_zone_to_sla_map zs on lower(pz.zone)= lower(zs.zone) group by order_id ,warehouse_name ,reference_code ,coalesce(so.awb_number,a.AWB_NUMBER) ,a.marketplace ,Order_Date ,EASY_ECOM_SYNC_FLAG ,same_day_cut_off ,ShipmentPartner_status ,a.order_status ,coalesce(am.\"Mapped Status\",pm.\"Mapped Status\") ,so.expedited ,so.delay_reason ,coalesce(so.customer_pincode,a.PIN_CODE) ,Courier_partner ,ETD ,applied_weight ,applied_weight_amount ,cod_charges ,freight_charges ,zs.zone ,zs.\"TAT hrs\";",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from ALMOWEAR_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        