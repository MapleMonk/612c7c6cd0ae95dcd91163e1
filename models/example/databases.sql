{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "Create or replace table XYXX_DB.MAPLEMONK.Sales_Cost_Source as with orders as ( select date(FI.order_date) Date ,FI.Channel ,FI.Source ,ifnull(sum(FI.gross_sales_before_tax),0) GROSS_SALES_BEFORE_TAX ,ifnull(sum(FI.selling_price),0) TOTAL_SALES ,count(distinct FI.order_id ) Orders ,count(distinct(case when lower(FI.new_customer_flag) like \'%new%\' then FI.order_id end)) as New_Customer_Orders ,count(distinct(case when lower(FI.new_customer_flag) like \'%new%\' then FI.customer_id_final end)) as New_Customers ,count(distinct(case when lower(FI.new_customer_flag) like \'%new%\' and lower(order_status) not in (\'cancelled\') then FI.customer_id_final end)) as New_Customers_NON_CANCELLED ,count(distinct FI.customer_id_final) as Unique_Customers ,count(distinct ( case when lower(FI.new_customer_flag) like \'%repeat%\' then FI.customer_id_final end)) as Repeat_Customers ,ifnull(sum(FI.DISCOUNT_PLATFORM),0) DISCOUNT ,ifnull(sum(FI.tax),0) TAX ,ifnull(sum(FI.shipping_price),0) SHIPPING_PRICE ,sum(case when lower(FI.new_customer_flag) = \'new\' then FI.DISCOUNT_PLATFORM end) as New_Customer_Discount ,ifnull(sum(FI.quantity) ,0) Gross_QUANTITY ,ifnull(sum(case when return_flag=1 then FI.quantity end),0) as Return_Quantity ,ifnull(sum(case when return_flag=1 then ifnull(FI.gross_sales_before_tax,0) end),0) as Return_Value ,count(distinct case when lower(order_status) in (\'cancelled\') then order_id end) Cancelled_Orders ,count(distinct case when lower(order_status) not in (\'cancelled\') then order_id end) Net_Orders from XYXX_DB.MAPLEMONK.sales_consolidated_xyxx FI where lower(FI.shop_name) like any (\'%shopify%\',\'%cred%\') group by 1,2,3 order by 1 desc ), spend as (select date ,case when lower(channel) like any (\'%facebook%\',\'%google%\') then \'Performance marketing & SM\' end channel ,channel Source ,sum(spend) as spend from XYXX_DB.MAPLEMONK.MARKETING_CONSOLIDATED_XYXX group by 1,2,3 union all select sent_date , \'Contlo\' as Source , \'Retention\' as Channel ,sum(total_cost) as Spend from XYXX_DB.MAPLEMONK.contlo_fact_items_xyxx group by 1,2,3 ), shopify_returns as ( select refund_date::date return_date ,final_utm_channel channel ,final_utm_source Source ,sum(total_return_amount) Shopify_Return_Amount ,sum(refund_quantity) Shopify_Refund_Quantity from xyxx_db.maplemonk.Shopify_All_Refunds_by_Date group by 1,2,3 order by 1 desc ), returns as (select last_update_date::date as return_received_date ,FINAL_UTM_CHANNEL Channel ,final_utm_source Source ,sum(return_quantity) Received_Return_Quantity ,sum(return_value) Received_Return_Value from XYXX_DB.MAPLEMONK.FACT_ITEMS_SHOPIFY_XYXX group by 1,2,3 ) select coalesce(fi.Date,MC.date, SR.return_date) as date, coalesce(FI.Channel, MC.channel, SR.channel) as channel, coalesce(FI.Source,MC.Source, SR.Source) as Source, GROSS_SALES_BEFORE_TAX, SR.Shopify_Return_Amount Shopify_Return_Amount, SR.Shopify_Refund_Quantity Shopify_Return_Quantity, Total_Sales, Orders, New_Customer_Orders, New_Customers, New_Customers_NON_CANCELLED, Unique_Customers, Repeat_Customers, DISCOUNT, TAX, SHIPPING_PRICE, New_Customer_DISCOUNT, Gross_QUANTITY, Return_Quantity, Return_Value, Cancelled_Orders, Net_Orders, spend as marketing_spend, Received_Return_Quantity, Received_Return_Value from orders FI full outer join spend MC on FI.Date = MC.date and lower(FI.Channel) = lower(MC.channel) and lower(FI.Source) = lower(MC.Source) left join returns RE on FI.Date=RE.return_received_date and coalesce(lower(FI.Channel),lower(MC.Channel)) = lower(RE.channel) and coalesce(lower(FI.Source),lower(MC.source)) = lower(RE.Source) full outer join shopify_returns SR on FI.Date = SR.Return_date and coalesce(lower(FI.Channel),lower(MC.channel)) = lower(SR.channel) and coalesce(lower(FI.Source),lower(MC.Source)) = lower(SR.Source);",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from XYXX_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        