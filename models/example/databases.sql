{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table eggozdb.maplemonk.darjan_sales as select oo.name as bill_name, rr.code as retailer_name, rr.area_classification, rr.beat_number, cast(timestampadd(minute, 660, oo.delivery_date) as date) as date, oo.order_price_amount, ol.quantity, case when lower(pp.slug) like \'%djn%\' then 30 else pp.SKU_Count end as SKU_Count, ol.single_sku_rate, ol.single_sku_mrp, ol.quantity * (case when lower(pp.slug) like \'%djn%\' then 30 else pp.SKU_Count end) eggs, ol.quantity * ol.single_sku_rate as sales, pp.slug, pp.brand_type from eggozdb.maplemonk.my_sql_order_order oo left join eggozdb.maplemonk.my_sql_order_orderline ol on ol.order_id = oo.id left join eggozdb.maplemonk.my_sql_product_product pp on pp.id = ol.product_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = oo.retailer_id where (lower(pp.slug) like \'%wd%\' or lower(pp.slug) like \'%djn%\') and lower(oo.status) in (\'completed\',\'delivered\') and ol.quantity > 0 group by oo.name, rr.code, cast(timestampadd(minute, 660, oo.delivery_date) as date), pp.slug, rr.area_classification, rr.beat_number, ol.quantity, pp.sku_count, ol.single_sku_rate, ol.single_sku_mrp, oo.order_price_amount, pp.brand_type ; create or replace table eggozdb.maplemonk.free_range_sales as select oo.name as bill_name, rr.code as retailer_name, rr.area_classification, rr.beat_number, cast(timestampadd(minute, 660, oo.delivery_date) as date) as date, oo.order_price_amount, ol.quantity, pp.SKU_Count, ol.single_sku_rate, ol.single_sku_mrp, ol.quantity * pp.SKU_Count eggs, ol.quantity * ol.single_sku_rate as sales, pp.slug, pp.brand_type from eggozdb.maplemonk.my_sql_order_order oo left join eggozdb.maplemonk.my_sql_order_orderline ol on ol.order_id = oo.id left join eggozdb.maplemonk.my_sql_product_product pp on pp.id = ol.product_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = oo.retailer_id where lower(pp.slug) like \'%fr%\' and lower(oo.status) in (\'completed\',\'delivered\') and ol.quantity > 0 group by oo.name, rr.code, cast(timestampadd(minute, 660, oo.delivery_date) as date), pp.slug, rr.area_classification, rr.beat_number, ol.quantity, pp.sku_count, ol.single_sku_rate, ol.single_sku_mrp, oo.order_price_amount, pp.brand_type ; Create or replace table eggozdb.maplemonk.Date_area_dim as select cast(Date as date) Date, area_classification from eggozdb.maplemonk.date_dim cross join (select distinct area_classification from eggozdb.maplemonk.my_sql_retailer_retailer); create or replace table eggozdb.maplemonk.secondary_sales_sku AS select rr2.code as distributor_name, tt.bill_name, tt.status, tt.delivery_date, sum(tt.gross_sale) sale, sum(tt.eggs_sold) eggs_sold, tt.sku, tt.retailer_id, tt.retailer_name, tt.area_classification, tt.beat_number_original, tt.cluster_name, tt.onboarding_status, tt.city_id, tt.distributor_id from ( select oo.name bill_name, oo.status, cast(timestampadd(minute, 330, oo.delivery_date) as date) delivery_date, sum(oo.order_price_amount) order_price_amount, ol.quantity * (ol.single_sku_rate + ol.single_sku_discount) gross_sale, CASE WHEN pp.name LIKE \'%liquid%\' THEN ol.quantity * 1000 / 35 ELSE ol.quantity * CASE WHEN pp.SKU_Count = 1 THEN CASE WHEN rr.area_classification = \'UP-UB\' THEN 1 ELSE 30 END ELSE pp.SKU_Count END END AS eggs_sold, concat(pp.sku_count,left(pp.name,1)) sku, pp.slug, ol.quantity, oo.retailer_id, rr.code as retailer_name, rr.area_classification, rr.beat_number beat_number_original, bc.cluster_name, rr.onboarding_status, rr.city_id, rr.distributor_id from eggozdb.maplemonk.my_sql_distributor_sales_secondaryorder oo left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = oo.retailer_id left join eggozdb.maplemonk.my_sql_distributor_sales_secondaryorderline ol on ol.order_id = oo.id left join eggozdb.maplemonk.my_sql_product_product pp on pp.id = ol.product_id left join eggozdb.maplemonk.my_sql_base_cluster bc on rr.cluster_id = bc.id group by cast(timestampadd(minute, 330, oo.delivery_date) as date), oo.retailer_id, oo.name, pp.name, pp.slug, oo.status, ol.quantity, pp.sku_count, rr.area_classification, pp.slug, rr.code, rr.beat_number, rr.onboarding_status, rr.city_id, rr.distributor_id, ol.single_sku_rate, ol.single_sku_discount, bc.cluster_name ) tt join eggozdb.maplemonk.my_sql_retailer_retailer rr2 on rr2.id = tt.distributor_id group by tt.bill_name, tt.status, tt.delivery_date, tt.retailer_id, tt.retailer_name, tt.area_classification, tt.beat_number_original, tt.onboarding_status, tt.city_id, tt.distributor_id, tt.sku, rr2.code, tt.cluster_name ; CREATE OR REPLACE TABLE eggozdb.maplemonk.secondary_return_replacement_promo AS select rr2.code as distributor, ret_rep.* from ( select orr.id as ret_rep_id, orr.type, orr.return_amount as total_ret_amount, cast(timestampadd(minute, 330, orr.return_date) as date) pickup_date, orr.retailer_id, orr.salesPerson_id, orr.status, rrl.quantity, rrl.single_sku_mrp, rrl.single_sku_discount, rrl.single_sku_rate, rrl.product_id, rr.code retailer_name, rr.area_classification, rr.beat_number, rr.city_id, rr.cluster_id, rr.distributor_id, pp.name, pp.slug, pp.SKU_Count, pp.brand_type from eggozdb.maplemonk.my_sql_distributor_sales_secondaryorderreturn orr left join eggozdb.maplemonk.my_sql_distributor_sales_secondaryorderreturnreplaceline rrl on rrl.return_order_id = orr.id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = orr.retailer_id left join eggozdb.maplemonk.my_sql_product_product pp on pp.id = rrl.product_id where distributor_id is not null ) ret_rep left join eggozdb.maplemonk.my_sql_retailer_retailer rr2 on rr2.id = ret_rep.distributor_id ; CREATE OR REPLACE TABLE eggozdb.maplemonk.Secondary_Sales_test as select rr2.code as distributor_name, tt.bill_name, tt.status, tt.delivery_date, sum(tt.gross_sale) sale, sum(tt.eggs_sold) eggs_sold, tt.retailer_id, tt.retailer_name, tt.area_classification, tt.beat_number_original, tt.onboarding_status, tt.city_id, tt.distributor_id from ( select oo.name bill_name, oo.status, cast(timestampadd(minute, 330, oo.delivery_date) as date) delivery_date, sum(oo.order_price_amount) order_price_amount, sum(ol.quantity) * (ol.single_sku_rate + sum(ol.single_sku_discount)) gross_sale, CASE WHEN pp.name LIKE \'%liquid%\' THEN sum(ol.quantity) * 1000 / 35 ELSE sum(ol.quantity) * CASE WHEN pp.SKU_Count = 1 THEN CASE WHEN rr.area_classification = \'UP-UB\' THEN 1 ELSE 30 END ELSE pp.SKU_Count END END AS eggs_sold, concat(pp.sku_count,left(pp.name,1)) sku, pp.slug, sum(ol.quantity) quantity, oo.retailer_id, rr.code as retailer_name, rr.area_classification, rr.beat_number beat_number_original, rr.onboarding_status, rr.city_id, rr.distributor_id from eggozdb.maplemonk.my_sql_distributor_sales_secondaryorder oo join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = oo.retailer_id join eggozdb.maplemonk.my_sql_distributor_sales_secondaryorderline ol on ol.order_id = oo.id join eggozdb.maplemonk.my_sql_product_product pp on pp.id = ol.product_id group by cast(timestampadd(minute, 330, oo.delivery_date) as date), oo.retailer_id, oo.name, pp.name, pp.slug, oo.status, ol.single_sku_rate, rr.code, rr.area_classification, rr.beat_number, rr.onboarding_status, rr.city_id, rr.distributor_id, pp.sku_count ) tt join eggozdb.maplemonk.my_sql_retailer_retailer rr2 on rr2.id = tt.distributor_id group by tt.bill_name, tt.status, tt.delivery_date, tt.retailer_id, tt.retailer_name, tt.area_classification, tt.beat_number_original, tt.onboarding_status, tt.city_id, tt.distributor_id, rr2.code ; create or replace table eggozdb.maplemonk.secondary_sales AS SELECT CAST(TIMESTAMPADD(MINUTE, 330, o.delivery_date) AS DATE) AS date, r.beat_number as Beat_number, concat(p.sku_count, left(p.name,1)) as SKU, p.name as Type, ol.single_sku_rate as Single_sku_rate, ol.single_sku_mrp as Single_sku_mrp, ol.single_sku_discount as Single_sku_discount, ol.quantity as Quantity, o.name as Bill_name, o.order_price_amount as Order_price_amount, r.code as Retailer_name, p.slug as Slug, ol.quantity * (ol.single_sku_rate + ol.single_sku_discount ) AS Order_gross_sales_amount, r.area_classification as Area_classification, CASE WHEN p.name LIKE \'%liquid%\' THEN ol.quantity * 1000 / 35 ELSE ol.quantity * CASE WHEN p.SKU_Count = 1 THEN CASE WHEN r.area_classification = \'UP-UB\' THEN 1 ELSE 30 END ELSE p.SKU_Count END END AS \"Eggs_Sold\" FROM eggozdb.maplemonk.my_sql_distributor_sales_secondaryorder o LEFT JOIN eggozdb.maplemonk.my_sql_distributor_sales_secondaryorderline ol ON ol.order_id = o.id LEFT JOIN eggozdb.maplemonk.my_sql_product_product p ON ol.product_id = p.id LEFT JOIN eggozdb.maplemonk.my_sql_retailer_retailer r ON o.retailer_id = r.id group BY date, Area_classification, Beat_number, Single_sku_rate, Single_sku_mrp, Quantity, Bill_name , Order_price_amount, Retailer_name, Slug , p.name, p.sku_count, ol.single_sku_discount ; CREATE OR REPLACE TABLE eggozdb.maplemonk.Inventory_Bifurcation_Table as SELECT p.DATE , sum(p.Eggs_Sold), sum(p.Eggs_Replaced), sum(p.Eggs_Return) , avg(p.packaging_ub), avg(p.Total_PPP_Loss), avg(p.Processing_UB), avg(p.Procurred_Egg) from (select a.*, b.packaging_ub ,c.PPP_Loss_Brown ,d.Processing_UB, e.Procurred_Egg, c.Total_PPP_Loss, c.PPP_Loss_Nutra,c.PPP_Loss_White from (select DATE , case when Area in (\'NCR-MT\', \'Delhi-GT\',\'Noida-GT\', \'Gurgaon-GT\', \'NCR-HORECA\', \'NCR-ON-MT\',\'NCR-OF-MT\') then \'1.NCR\' when Area in (\'NCR-UB\',\'Bangalore-UB\',\'UP-UB\',\'East-UB\',\'MP-UB\') then \'6.UB\' when Area in (\'Bangalore-MT\', \'Bangalore-GT\',\'Bangalore-Horeca\',\'Bangalore-HORECA\', \'Bangalore-ON-MT\', \'Bangalore-OF-MT\') then \'2.Bangalore\' when Area in (\'Allahabad-GT\', \'Lucknow-GT\', \'UP-MT\' , \'UP-ON-MT\', \'UP-OF-MT\') then \'4.UP\' when Area in (\'Indore-GT\', \'Bhopal-GT\',\'MP-MT\',\'MP-UB\', \'MP-ON-MT\', \'MP-OF-MT\') then \'3.MP\' when Area in (\'East-MT\',\'Kolkata-GT\', \'Patna-GT\', \'East-ON-MT\',\'East-OF-MT\') then \'5.East\' else \'9.Others\' end as Area_classification, sum(eggs_sold) as Eggs_Sold,sum(EGGS_SOLD_WHITE) as Eggs_Sold_White, sum(EGGS_SOLD_BROWN) as Eggs_Sold_Brown, sum(EGGS_SOLD_NUTRA), sum(EGGS_SOLD_LIQUID), sum(EGGS_REPLACED) as Eggs_Replaced, sum(EGGS_REPLACED_WHITE) , sum(EGGS_REPLACED_BROWN), sum(EGGS_REPLACED_LIQUID),SUM(EGGS_REPLACED_NUTRA) , sum(EGGS_RETURN)as Eggs_Return, sum(EGGS_RETURN_WHITE), sum(EGGS_RETURN_BROWN), sum(EGGS_RETURN_LIQUID) ,sum(EGGS_RETURN_NUTRA) from eggozdb.maplemonk.summary_reporting_table_beat_retailer WHERE Area_Classification = \'1.NCR\' group by DATE , Area, Area_classification ) a left join (select PDATE, sum(\"Packaging UB\") as packaging_ub from eggozdb.maplemonk.epm_pkg_loss group by 1) b on a.date = b.PDATE left JOIN (select DDATE, sum(\"Total PPP Loss\" ) as Total_PPP_loss, sum(\"PPP Loss(Brown)\" )as PPP_Loss_Brown, sum(\"PPP Loss(Nutra)\" )as PPP_Loss_Nutra, sum(\"PPP Loss(White)\" )as PPP_Loss_White From eggozdb.maplemonk.loss_daily_loss_log group by 1)c on a.DATE = c.DDATE left JOIN (Select PDATE, sum(UB) as Processing_UB from eggozdb.maplemonk.epm_sheet1 group by 1)d on a.DATE = d.PDATE left JOIN ( SELECT GRN_DATE, sum(EGGS) as Procurred_Egg from eggozdb.maplemonk.region_wise_procurement_masterdata where REGION= \'NCR\' group by 1 ) e on a.DATE = e.GRN_DATE) p group by 1 ;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from EGGOZDB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        