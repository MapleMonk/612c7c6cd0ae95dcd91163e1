{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table snitch_db.snitch.product_dim as with shopify_product as (select in1.*, \'SHOPIFY\' as source from (select CAST(sn.ID AS VARCHAR) AS \"PRODUCT_ID\", CAST (sn.HANDLE AS VARCHAR) AS \"HANDLE\", CAST(sn.product_type AS TEXT) AS \"PRODUCT_CATEGORY\", sn.VENDOR, CAST(sn.title as VARCHAR) AS \"PRODUCT_TITLE\", CAST(var.value:sku AS VARCHAR) AS \"SKU\", REVERSE(SUBSTRING(REVERSE(sku), CHARINDEX(\'-\', REVERSE(SKU)) + 1)) AS sku_group, CAST(var.value:price AS FLOAT) AS \"PRICE\", CAST(var.value:taxable AS VARCHAR) AS \"TAXABLE\", CASE WHEN c_color = \'option1\' THEN CAST(var.value:option1 AS varchar) WHEN c_color = \'option2\' THEN CAST(var.value:option2 AS varchar) ELSE \'\' END AS color, CASE WHEN s_size = \'option1\' THEN CAST(var.value:option1 AS varchar) WHEN s_size = \'option2\' THEN CAST(var.value:option2 AS varchar) ELSE \'\' END AS size, CAST(var.value:weight AS float) AS \"WEIGHT(KG)\", CAST (sn.created_at AS VARCHAR) AS \"product_CREATED\", CAST (sn.updated_at AS VARCHAR) AS product_updated, CAST (sn.status AS VARCHAR) AS \"product_status\", CAST (sn.published_scope AS VARCHAR) AS \"publish_scope\", CAST (sn.published_at AS VARCHAR) AS \"publish_date\", CAST(var.value:inventory_item_id AS varchar) AS \"inventory_item_id\", CAST(var.value:id AS int) AS \"variant_id\", CAST(var.value:created_at AS varchar) AS \"variant_created_date\", CAST(var.value:updated_at AS varchar) AS \"variant_updated_date\" from (select * from Snitch_db.maplemonk.shopifyindia_products sn LEFT JOIN (select t1.c_color,t2.s_size, case when t1.c_id is null then t2.s_id when t2.s_id is null then t1.c_id else t1.c_id end as \"C_ID\" from (select id as c_id , \"option\" as c_color from (select id, CAST(var.value:name AS varchar) AS \"COLOR\", CAST(var.value:position AS varchar) AS \"position\", concat(\'option\',\"position\") as \"option\" from Snitch_db.maplemonk.shopifyindia_products sn ,lateral flatten(input => sn.options) var) where color like \'Color%\' ) t1 full outer join (select id as s_id,\"option\" as s_size from (select id, CAST(var.value:name AS varchar) AS \"COLOR\", CAST(var.value:position AS varchar) AS \"position\", concat(\'option\',\"position\") as \"option\" from Snitch_db.maplemonk.shopifyindia_products sn ,lateral flatten(input => sn.options) var) where color like \'Size%\') t2 on t1.c_id = t2.s_id) c on sn.id= c.c_id) sn, lateral flatten(input => sn.variants) var ) in1 inner join (select sku,max(\"product_updated\") as product_updated from (select CAST(sn.ID AS VARCHAR) AS \"PRODUCT_ID\", CAST (sn.HANDLE AS VARCHAR) AS \"HANDLE\", CAST(sn.product_type AS TEXT) AS \"PRODUCT_CATEGORY\", sn.VENDOR, CAST(sn.title as VARCHAR) AS \"PRODUCT_TITLE\", CAST(var.value:sku AS VARCHAR) AS \"SKU\", REVERSE(SUBSTRING(REVERSE(sku), CHARINDEX(\'-\', REVERSE(SKU)) + 1)) AS sku_group, CAST(var.value:price AS FLOAT) AS \"PRICE\", CAST(var.value:taxable AS VARCHAR) AS \"TAXABLE\", CASE WHEN c_color = \'option1\' THEN CAST(var.value:option1 AS varchar) WHEN c_color = \'option2\' THEN CAST(var.value:option2 AS varchar) ELSE \'\' END AS color, CASE WHEN s_size = \'option1\' THEN CAST(var.value:option1 AS varchar) WHEN s_size = \'option2\' THEN CAST(var.value:option2 AS varchar) ELSE \'\' END AS size, CAST(var.value:weight AS float) AS \"WEIGHT(KG)\", CAST (sn.created_at AS VARCHAR) AS \"product_CREATED\", CAST (sn.updated_at AS VARCHAR) AS \"product_updated\", CAST (sn.status AS VARCHAR) AS \"product_status\", CAST (sn.published_scope AS VARCHAR) AS \"publish_scope\", CAST (sn.published_at AS VARCHAR) AS \"publish_date\", CAST(var.value:inventory_item_id AS varchar) AS \"inventory_item_id\", CAST(var.value:id AS int) AS \"variant_id\", CAST(var.value:created_at AS varchar) AS \"variant_created_date\", CAST(var.value:updated_at AS varchar) AS \"variant_updated_date\" from (select * from Snitch_db.maplemonk.shopifyindia_products sn LEFT JOIN (select t1.c_color,t2.s_size, case when t1.c_id is null then t2.s_id when t2.s_id is null then t1.c_id else t1.c_id end as \"C_ID\" from (select id as c_id , \"option\" as c_color from (select id, CAST(var.value:name AS varchar) AS \"COLOR\", CAST(var.value:position AS varchar) AS \"position\", concat(\'option\',\"position\") as \"option\" from Snitch_db.maplemonk.shopifyindia_products sn ,lateral flatten(input => sn.options) var) where color like \'Color%\' ) t1 full outer join (select id as s_id,\"option\" as s_size from (select id, CAST(var.value:name AS varchar) AS \"COLOR\", CAST(var.value:position AS varchar) AS \"position\", concat(\'option\',\"position\") as \"option\" from Snitch_db.maplemonk.shopifyindia_products sn ,lateral flatten(input => sn.options) var) where color like \'Size%\') t2 on t1.c_id = t2.s_id) c on sn.id= c.c_id) sn, lateral flatten(input => sn.variants) var ) group by SKU order by 2 desc) in2 ON in1.sku = in2.sku and in1.product_updated = in2.product_updated ) select * from shopify_product union all select distinct null as \"PRODUCT_ID\", null AS \"HANDLE\", null AS \"PRODUCT_CATEGORY\", null VENDOR, null AS \"PRODUCT_TITLE\", replace(A.Value:itemSku,\'\"\',\'\') AS \"SKU\", REVERSE(SUBSTRING(REVERSE(replace(A.Value:itemSku,\'\"\',\'\') ), CHARINDEX(\'-\', REVERSE(replace(A.Value:itemSku,\'\"\',\'\') )) + 1)) AS sku_group, null AS \"PRICE\", null AS \"TAXABLE\", null AS color, null as size, null AS \"WEIGHT(KG)\", null AS \"product_CREATED\", null AS product_updated, null AS \"product_status\", null AS \"publish_scope\", null AS \"publish_date\", null AS \"inventory_item_id\", null as \"variant_id\", null as \"variant_created_date\", null as \"variant_updated_date\", \'UNICOMMERCE\' as source from snitch_db.maplemonk.SNITCH_UNICOMMERCE_GET_ORDERS_BY_IDS_TEST, LATERAL FLATTEN (INPUT => saleorderdto:saleOrderItems)A where lower(replace(A.Value:itemSku,\'\"\',\'\')) not in (select distinct loweR(sku) from shopify_product); create or replace table snitch_db.snitch.product_dim as select distinct p_t.*, m_t.final_size_mapped from snitch_db.snitch.product_dim p_t left join snitch_db.maplemonk.dim_mapping_product_dim m_t on p_t.size = m_t.size and p_t.product_category = m_t.product_category; create or replace table snitch_db.snitch.product_dim_Dupes as ( select * , CASE WHEN ROW_NUMBER() OVER (PARTITION BY sku ORDER BY PRODUCT_UPDATED DESC) = 1 THEN \'N\' ELSE \'Y\' END AS duplicate from snitch_db.snitch.product_dim ); create or replace table snitch_db.snitch.product_dim as (select * from snitch_db.snitch.product_dim_Dupes where duplicate = \'N\')",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from snitch_db.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        