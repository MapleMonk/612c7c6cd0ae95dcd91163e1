{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table snitch_db.snitch.ORDERS_fact as select cast(coalesce(t2.customer_id_final, t3.customer_id_final) as varchar(255)) customer_id_final,o.* from (select \'Shopify_India\' as market_place, \'Shopify_India\' as marketplace_mapped, \'SHOPIFY\' as source, ID:: varchar as order_id , name :: varchar as order_name, coalesce(phone, replace(customer:default_address:phone,\'\"\',\'\')) phone, null as name, coalesce(email, replace(customer:email,\'\"\',\'\')) email, currency, CASE WHEN cancelled_at IS NOT NULL THEN \'CANCELLED\' ELSE \'Shopify_Processed\' END AS order_status, CREATED_AT::DATE AS order_date, CREATED_AT::DATETIME AS order_timestamp, null as quantity, null as SHIPPING_QUANTITY, total_discounts as discount, total_tax as tax, subtotal_price as selling_price, \'SHOPIFY\' as source_channel, TOTAL_LINE_ITEMS_PRICE as mrp, replace(D.value:code,\'\"\',\'\') as discount_code, replace(customer:default_address:zip,\'\"\',\'\') pincode, tags FROM Snitch_db.maplemonk.shopifyindia_orders, lateral flatten (input =>DISCOUNT_CODES,outer => true) as D) o left join (select distinct phone,customer_id_final from snitch_db.snitch.Customer_DIM )t2 on RIGHT(REGEXP_REPLACE(o.phone, \'[^a-zA-Z0-9]+\', \'\'), 10) = t2.phone left join (select * from (select lower(email) email,customer_id_final, row_number() over (partition by lower(email) order by lower(email)) rw from snitch_db.snitch.Customer_Details_DIM ) where rw = 1)t3 on lower(o.email)= lower(t3.email) union all select cast(COALESCE(t3.customer_id_final,t4.customer_id_final) as varchar(255)) as customer_id_final,t3.marketplace,t3.marketplace_mapped,t3.source,t3.order_id,t3.order_name, t3.phone,t3.name,t3.email,t3.currency, t3.order_status,t3.order_date,t3.order_timestamp,t3.SUBORDER_QUANTITY as quantity , t3.shipping_quantity,t3.discount,t3.tax,t3.selling_price,\'LOGICERP\' as source_channel,mrp , null as discount_code,null as pincode,null as tags from (select t1.*,t2.customer_id_final from (select Branch_Name::varchar as marketplace, Branch_Name::varchar as marketplace_mapped, BRANCH_SHORT_NAME::varchar as source, bill_no::varchar as order_id, new_bill_no::varchar as ordeR_name, retail_cust_mobile_no::varchar as phone, retail_cust_name::varchar as name, retail_cust_email_id::varchar as email, \'INR\' as currency, case when lower(bill_cancelled) = \'false\' then \'Processed\' else \'Cancelled\' end as ORDER_STATUS, to_date(bill_date, \'DD/MM/YYYY\') as order_date, null as order_timestamp, sum(A.Value:Quantity::int) as SUBORDER_QUANTITY, sum(A.Value:Quantity::int) as shipping_quantity, sum((A.Value:CD::float)*-1) as discount, sum((A.Value:Tax_Amt_1::float) + (A.Value:Tax_Amt_3::float)) as tax, sum(A.Value:Net_Amt::float) as SELLING_PRICE, sum(replace(A.Value:Item_MRP::varchar,\'\"\',\'\')::int) as MRP from snitch_db.maplemonk.LOGICERPConsolidated_GET_SALE_INVOICE, LATERAL FLATTEN (INPUT => LSTITEMS)A group by 1,2,3,4,5,6,7,8,9,10,11,12)t1 left join (select distinct phone,customer_id_final from snitch_db.snitch.Customer_DIM)t2 on RIGHT(REGEXP_REPLACE(t1.phone, \'[^a-zA-Z0-9]+\', \'\'), 10) = t2.phone) t3 left join (select distinct email,customer_id_final from snitch_db.snitch.customer_details_dim where phone is null)t4 on lower(t3.email)= lower(t4.email) union all select cast(COALESCE(t3.customer_id_final,t4.customer_id_final) as varchar(255)) as customer_id_final,t3.marketplace,t3.marketplace_mapped,t3.source,t3.order_id,t3.order_name, t3.phone,t3.name,t3.email,t3.currency, t3.order_status,t3.order_date,t3.order_timestamp,t3.SUBORDER_QUANTITY as quantity , t3.shipping_quantity,t3.discount,t3.tax,t3.selling_price,\'UNICOMMERCE\' as source_channel,mrp,null as discount_code,pincode, null as tags from (select t1.*,t2.customer_id_final from (select * from (select replace(saleorderdto:channel,\'\"\',\'\') marketplace, case when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%ajio%\' then \'AJIO\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%myntra%\' then \'MYNTRA\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%fynd%\' then \'FYND\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%amazon%\' then \'AMAZON\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%flipkart%\' then \'FLIPKART\' else replace(saleorderdto:channel,\'\"\',\'\') end as marketplace_mapped, replace(saleorderdto:source,\'\"\',\'\') as source, replace(saleorderdto:code,\'\"\',\'\') as order_id, replace(saleorderdto:displayOrderCode,\'\"\',\'\') as order_name, replace(saleorderdto:billingAddress:phone,\'\"\',\'\') as phone, replace(saleorderdto:billingAddress:name,\'\"\',\'\') as name, saleorderdto:billingAddress:email::varchar as email, replace(saleorderdto:currencyCode,\'\"\',\'\') as currency, replace(saleorderdto:status,\'\"\',\'\') as ORDER_STATUS, date(CONVERT_TIMEZONE(\'UTC\',\'Asia/Kolkata\',dateadd(\'ms\',saleorderdto:displayOrderDateTime,\'1970-01-01\'))) as order_date, CONVERT_TIMEZONE(\'UTC\',\'Asia/Kolkata\',dateadd(\'ms\',saleorderdto:displayOrderDateTime,\'1970-01-01\')) as order_timestamp, sum(A.Value:packetNumber::int) as SUBORDER_QUANTITY, null as shipping_quantity, sum(A.Value:discount::float) as discount, sum(A.Value:totalIntegratedGst::float) as tax, sum(A.Value:totalPrice::float) as SELLING_PRICE, sum(replace(A.Value:maxRetailPrice,\'\"\',\'\')::int )as MRP, replace(saleorderdto:billingAddress:pincode,\'\"\',\'\') as pincode from snitch_db.maplemonk.SNITCH_UNICOMMERCE_GET_ORDERS_BY_IDS_TEST, LATERAL FLATTEN (INPUT => saleorderdto:saleOrderItems)A group by 1,2,3,4,5,6,7,8,9,10,11,12,19) where marketplace != \'SHOPIFY\' )t1 left join (select distinct phone,customer_id_final from snitch_db.snitch.Customer_DIM)t2 on (RIGHT(REGEXP_REPLACE(t1.phone, \'[^a-zA-Z0-9]+\', \'\'), 10) = t2.phone)) t3 left join (select distinct email,customer_id_final from snitch_db.snitch.customer_details_dim where phone is null)t4 on lower(t3.email)= lower(t4.email) ; create or replace table snitch_db.snitch.orders_fact as select f.*,upper(pm.district) district,upper(state)state from( (select * from snitch_db.snitch.orders_fact) f left join ( select pincode,max(upper(district)) district,max(statename)State from snitch_db.maplemonk.pincode_mapping group by pincode ) pm on f.pincode = pm.pincode )",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from snitch_db.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        