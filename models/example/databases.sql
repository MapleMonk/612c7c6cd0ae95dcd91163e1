{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "Create or replace table vahdam_db.maplemonk.VAHDAM_ASP_IN_REFUND_SHIPMENT_ORDER_ID as With Refund as (Select POSTEDDATE::date as POSTEDDATE ,AMAZONORDERID ,SELLERSKU ,Currency ,sum(ifnull(QUANTITY,0)) QUANTITY ,sum(ifnull(REFUND_PROMOTION,0)) REFUND_PROMOTION ,sum(ifnull(TAX,0)) TAX ,sum(ifnull(PRINCIPAL,0)) PRINCIPAL ,sum(ifnull(SHIPPINGTAX,0)) SHIPPINGTAX ,sum(ifnull(SHIPPINGCHARGE,0)) SHIPPINGCHARGE ,sum(ifnull(GIFTWRAP,0)) GIFTWRAP ,sum(ifnull(GIFTWRAPTAX,0)) GIFTWRAPTAX ,sum(ifnull(\"TCS-IGST\",0)) \"TCS-IGST\" ,sum(ifnull(\"TCS-CGST\",0)) \"TCS-CGST\" ,sum(ifnull(\"TCS-SGST\",0)) \"TCS-SGST\" ,sum(ifnull(COMMISSION,0)) COMMISSION ,sum(ifnull(REFUNDCOMMISSION,0)) REFUNDCOMMISSION ,sum(ifnull(GIFTWRAPCHARGEBACK,0)) GIFTWRAPCHARGEBACK ,sum(ifnull(SHIPPINGCHARGEBACK,0)) SHIPPINGCHARGEBACK ,sum(ifnull(FIXEDCLOSINGFEE,0)) FIXEDCLOSINGFEE from VAHDAM_DB.MAPLEMONK.vahdam_IN_refund_event_list group by 1,2,3,4), Shipment as (select POSTEDDATE::date as POSTEDDATE ,AMAZONORDERID ,SELLERSKU ,MarketplaceName ,sum(ifnull(QUANTITY,0)) QUANTITY ,sum(ifnull(PROMOTION,0)) PROMOTION ,sum(ifnull(PRINCIPAL,0)) PRINCIPAL ,sum(ifnull(TAX,0)) TAX ,sum(ifnull(GIFTWRAP,0)) GIFTWRAP ,sum(ifnull(GIFTWRAPTAX,0)) GIFTWRAPTAX ,sum(ifnull(SHIPPINGCHARGE,0)) SHIPPINGCHARGE ,sum(ifnull(SHIPPINGTAX,0)) SHIPPINGTAX ,sum(ifnull(\"TCS-IGST\",0)) \"TCS-IGST\" ,sum(ifnull(\"TCS-CGST\",0)) \"TCS-CGST\" ,sum(ifnull(\"TCS-SGST\",0)) \"TCS-SGST\" ,sum(ifnull(ITEMTDS,0)) ITEMTDS ,sum(ifnull(FBAPERUNITFULFILLMENTFEE,0)) FBAPERUNITFULFILLMENTFEE ,sum(ifnull(FBAWEIGHTBASEDFEE,0)) FBAWEIGHTBASEDFEE ,sum(ifnull(COMMISSION,0)) COMMISSION ,sum(ifnull(FIXEDCLOSINGFEE,0)) FIXEDCLOSINGFEE ,sum(ifnull(GIFTWRAPCHARGEBACK,0)) GIFTWRAPCHARGEBACK ,sum(ifnull(SHIPPINGCHARGEBACK,0)) SHIPPINGCHARGEBACK ,sum(ifnull(VARIABLECLOSINGFEE,0)) VARIABLECLOSINGFEE ,sum(ifnull(TECHNOLOGYFEE,0)) TECHNOLOGYFEE from vahdam_db.maplemonk.vahdam_IN_shipment_event_list group by 1,2,3,4), Orders as ( select * from (select SKU , case when sku = \'Uncommingled.MSKU.1614859309584\' then \'B08Y1FH4ZP\' else ASIN end as ASIN , row_number() over (partition by SKU order by ASIN) rw from ( select distinct SKU, ASIN from Vahdam_db.maplemonk.ASP_IN_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL where year(\"purchase-date\"::date) >= \'2023\' and sku is not null ) ) where rw=1 ) select coalesce(S.POSTEDDATE,R.POSTEDDATE)::date POSTEDDATE ,coalesce(S.AMAZONORDERID,R.AMAZONORDERID) AMAZONORDERID ,coalesce(S.SELLERSKU,R.SELLERSKU) SELLERSKU ,O.ASIN as ASIN ,ifnull(S.QUANTITY,0) QUANTITY ,ifnull(S.PROMOTION,0) PROMOTION ,ifnull(S.PRINCIPAL,0) PRINCIPAL ,ifnull(S.TAX,0) TAX ,ifnull(S.GIFTWRAP,0) GIFTWRAP ,ifnull(S.GIFTWRAPTAX,0) GIFTWRAPTAX ,ifnull(S.SHIPPINGCHARGE,0) SHIPPINGCHARGE ,ifnull(S.SHIPPINGTAX,0) SHIPPINGTAX ,ifnull(S.\"TCS-IGST\",0) \"TCS-IGST\" ,ifnull(S.\"TCS-CGST\",0) \"TCS-CGST\" ,ifnull(S.\"TCS-SGST\",0) \"TCS-SGST\" ,ifnull(S.ITEMTDS,0) ITEMTDS ,ifnull(S.FBAPERUNITFULFILLMENTFEE,0) FBAPERUNITFULFILLMENTFEE ,ifnull(S.FBAWEIGHTBASEDFEE,0) FBAWEIGHTBASEDFEE ,ifnull(S.COMMISSION,0) COMMISSION ,ifnull(S.FIXEDCLOSINGFEE,0) FIXEDCLOSINGFEE ,ifnull(S.GIFTWRAPCHARGEBACK,0) GIFTWRAPCHARGEBACK ,ifnull(S.SHIPPINGCHARGEBACK,0) SHIPPINGCHARGEBACK ,ifnull(S.VARIABLECLOSINGFEE,0) VARIABLECLOSINGFEE ,ifnull(S.TECHNOLOGYFEE,0) TECHNOLOGYFEE ,ifnull(R.QUANTITY,0) Refund_QUANTITY ,ifnull(R.REFUND_PROMOTION,0) REFUND_PROMOTION ,ifnull(R.TAX,0) Refund_TAX ,ifnull(R.PRINCIPAL,0) Refund_PRINCIPAL ,ifnull(R.SHIPPINGTAX,0) Refund_SHIPPINGTAX ,ifnull(R.SHIPPINGCHARGE,0) Refund_SHIPPINGCHARGE ,ifnull(R.GIFTWRAP,0) Refund_GIFTWRAP ,ifnull(R.GIFTWRAPTAX,0) Refund_GIFTWRAPTAX ,ifnull(R.\"TCS-IGST\",0) \"Refund_TCS-IGST\" ,ifnull(R.\"TCS-CGST\",0) \"Refund_TCS-CGST\" ,ifnull(R.\"TCS-SGST\",0) \"Refund_TCS-SGST\" ,ifnull(R.COMMISSION,0) Refund_COMMISSION ,ifnull(R.REFUNDCOMMISSION,0) Refund_REFUNDCOMMISSION ,ifnull(R.GIFTWRAPCHARGEBACK,0) Refund_GIFTWRAPCHARGEBACK ,ifnull(R.SHIPPINGCHARGEBACK,0) Refund_SHIPPINGCHARGEBACK ,ifnull(R.FIXEDCLOSINGFEE,0) Refund_FIXEDCLOSINGFEE from Shipment S full outer join Refund R on S.AMAZONORDERID = R.AMAZONORDERID and lower(S.SELLERSKU) = lower(R.SELLERSKU) left join Orders O on lower(coalesce(S.SELLERSKU,R.SELLERSKU)) = lower(O.SKU) order by POSTEDDATE desc; Create or replace table vahdam_db.maplemonk.Amazon_IN_Budget_Comparison_Vahdam as With Payments as (select posteddate::date as Date ,SELLERSKU ,ASIN ,sum(ifnull(PRINCIPAL,0))+sum(ifnull(PROMOTION,0))+sum(ifnull(GIFTWRAP,0))+sum(ifnull(SHIPPINGCHARGE,0))+sum(ifnull(GIFTWRAPCHARGEBACK,0))+sum(ifnull(SHIPPINGCHARGEBACK,0))+sum(ifnull(TECHNOLOGYFEE,0))+sum(ifnull(REFUND_PROMOTION,0))+sum(ifnull(REFUND_PRINCIPAL,0))+sum(ifnull(REFUND_SHIPPINGCHARGE,0))+sum(ifnull(REFUND_GIFTWRAP,0))+sum(ifnull(REFUND_GIFTWRAPCHARGEBACK,0))+sum(ifnull(REFUND_SHIPPINGCHARGEBACK,0)) as Sales ,sum(ifnull(quantity,0)) as Quantity_sold ,sum(ifnull(refund_quantity,0)) Refund_Quanity ,sum(ifnull(quantity,0))-sum(ifnull(refund_quantity,0)) as Net_Quantity ,-1*(sum(ifnull(COMMISSION,0))+sum(ifnull(FIXEDCLOSINGFEE,0))+sum(ifnull(VARIABLECLOSINGFEE,0))+sum(ifnull(REFUND_COMMISSION,0))+sum(ifnull(REFUND_REFUNDCOMMISSION,0))+sum(ifnull(REFUND_FIXEDCLOSINGFEE,0)) ) as Commission ,-1*(sum(ifnull(FBAPERUNITFULFILLMENTFEE,0))+sum(ifnull(FBAWEIGHTBASEDFEE,0))) as FBA_Fees from vahdam_db.maplemonk.VAHDAM_ASP_IN_REFUND_SHIPMENT_ORDER_ID S group by 1,2,3), ADJUSTMENT AS (select posteddate::DATE AS DATE ,COALESCE(A.sellersku,O.SKU) SKU ,O.ASIN ,sum(ifnull(WAREHOUSE_DAMAGE_QUANTITY,0)) + sum(ifnull(REVERSAL_REIMBURSEMENT_QUANTITY,0)) + sum(ifnull(FREE_REPLACEMENT_REFUND_ITEMS_QUANTITY,0)) as TOTAL_ADJUSTMENT_QTY ,sum(ifnull(WAREHOUSE_DAMAGE_TOTAL_AMOUNT,0)) WAREHOUSE_DAMAGE_TOTAL_AMOUNT ,sum(ifnull(REVERSAL_REIMBURSEMENT_TOTAL_AMOUNT,0)) REVERSAL_REIMBURSEMENT_TOTAL_AMOUNT ,sum(ifnull(FREE_REPLACEMENT_REFUND_ITEMS_TOTAL_AMOUNT,0)) FREE_REPLACEMENT_REFUND_ITEMS_TOTAL_AMOUNT ,sum(ifnull(WAREHOUSE_DAMAGE_TOTAL_AMOUNT,0))+sum(ifnull(REVERSAL_REIMBURSEMENT_TOTAL_AMOUNT,0))+sum(ifnull(FREE_REPLACEMENT_REFUND_ITEMS_TOTAL_AMOUNT,0)) as OTHER_SALES from vahdam_db.maplemonk.vahdam_IN_adjustment_event_list A LEFT JOIN ( select * from (select SKU , case when sku = \'Uncommingled.MSKU.1614859309584\' then \'B08Y1FH4ZP\' else ASIN end as ASIN , row_number() over (partition by SKU order by ASIN) rw from ( select distinct SKU, ASIN from Vahdam_db.maplemonk.ASP_IN_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL where year(\"purchase-date\"::date) >= \'2023\' and sku is not null ) ) where rw=1 ) O ON LOWER(A.SELLERSKU) = LOWER(O.SKU) group by 1,2,3), Budget as ( Select Budget_month ,ASIN ,sum(Per_unit_Cogs) as Per_unit_Cogs ,sum(Per_unit_Outbound) as Per_unit_Outbound ,sum(Budget_units) as Budget_units ,sum(ASP) as Budget_ASP ,sum(Budget_revenue) as Budget_revenue ,sum(Budget_COGS) as Budget_COGS ,sum(Budget_Commission) as Budget_Commission ,sum(Budget_Outbound) as Budget_Outbound ,sum(Budget_Storage) as Budget_Storage ,sum(Budget_Last_mile) as Budget_FBA ,sum(Budget_PM_Spend) as Budget_PM_Spend ,sum(Budget_revenue)-sum(Budget_COGS)-sum(Budget_Commission)-sum(Budget_Outbound)-sum(Budget_Storage)-sum(Budget_Last_mile)-sum(Budget_PM_Spend) as Budget_CM2 ,sum(Budget_revenue)-sum(Budget_COGS)-sum(Budget_Commission)-sum(Budget_Outbound)-sum(Budget_Storage)-sum(Budget_Last_mile) as Budget_CM1 ,sum(ifnull(Budget_Revenue_INR,0)) Budget_Revenue_INR ,sum(ifnull(Budget_COGS_INR,0)) Budget_COGS_INR ,sum(ifnull(Budget_Commission_INR,0)) Budget_Commission_INR ,sum(ifnull(Budget_Outbound_INR,0)) Budget_Outbound_INR ,sum(ifnull(Budget_Storage_INR,0)) Budget_Storage_INR ,sum(ifnull(Budget_FBA_INR,0)) Budget_FBA_INR ,sum(ifnull(Budget_CM1_INR,0)) Budget_CM1_INR ,sum(ifnull(Budget_PM_SPEND_INR,0)) Budget_PM_SPEND_INR ,sum(ifnull(Budget_CM2_INR,0)) Budget_CM2_INR ,row_number() over (partition by Budget_month,asin order by sum(Budget_units) desc) rw from (select try_to_date(month) as Budget_Month ,asin as ASIN ,cast(\"Per Units COGS\" as float) as Per_Unit_COGS ,cast(\"Per Unit Outbound\" as float) as Per_unit_outbound ,cast(units as float) as Budget_units ,cast(ASP as float) as ASP ,cast(Revenue as float) as Budget_revenue ,cast(COGS as float) as Budget_COGS ,cast(\"Comm \" as float) as Budget_Commission ,cast(\"Outbound \" as float) as Budget_Outbound ,cast(Storage as float) as Budget_Storage ,cast(\"Last Mile \" as float) as Budget_Last_mile ,cast(\"PM SPEND\" as float) as Budget_PM_Spend ,cast(\"Revenue(INR)\" as float) as Budget_Revenue_INR ,cast(\"REVISED COGS\" as float) as Budget_COGS_INR ,cast(\"Comm (INR)\" as float) as Budget_Commission_INR ,cast(\"Outbound(INR)\" as float) as Budget_Outbound_INR ,cast(\"Storage(INR)\" as float) as Budget_Storage_INR ,cast(\"Last Mile (INR)\" as float) as Budget_FBA_INR ,cast(\"CM1 (INR)\" as float) as Budget_CM1_INR ,cast(\"PM SPEND (INR)\" as float) as Budget_PM_SPEND_INR ,cast(\"CM2\" as float) as Budget_CM2_INR ,row_number() over (partition by month,asin order by cast(units as float) desc) rw from vahdam_db.maplemonk.gs_fy24_budget_consol_backup where lower(channel) = \'amazon\' and lower(platform) = \'amazon sc\') where rw = 1 group by 1,2 ), ASINDATE as ( with RECURSIVE date_range AS ( SELECT TO_DATE(\'2023-04-01\') AS date_value UNION ALL SELECT date_value + INTERVAL \'1 day\' FROM date_range WHERE date_value + INTERVAL \'1 day\' <= CURRENT_DATE() ), ASIN as ( select distinct asin_new as ASIN from vahdam_db.maplemonk.amazonads_in_marketing ) SELECT date_value, ASIN FROM date_range cross join ASIN ), Amazonads as (select date ,case when asin_new is null then \'SB\' else asin_new end as ASIN ,sum(ifnull(spend,0)) as Total_amazon_spend ,sum(ifnull(sales_usd,0)) as Total_amazon_sales from vahdam_db.maplemonk.amazonads_in_marketing group by 1,2 order by date desc), REMOVALDISPOSAL AS ( select date, SUM( case when lower(fee_type) = \'fbadisposalfee\' then amount else 0 end) as FBA_DISPOSAL_FEE, SUM(case when lower(fee_type) = \'fbaremovalfee\' then amount else 0 end) as FBA_REMOVAL_FEE from vahdam_db.maplemonk.vahdam_in_removal_disposal_fees GROUP BY 1), Mapping as ( select * from (select \"MKT India\" ,weight ,brand ,\"Mother SKU\" ,\"Common Name\" ,category ,\"SUB CATEGORY\" ,\"LOOSE/TEA BAG/ POWDER\" ,\"Common SKU Description\" ,\"COMMON SKU ID\" ,row_number() over (partition by \"MKT India\" order by \"MKT India\") as rw from vahdam_db.maplemonk.sku_mapping_raw_data) where rw = 1 or rw is null ), STORAGE AS (SELECT case when COALESCE(A.MONTH,B.MONTH) = 1 then 13 else COALESCE(A.MONTH,B.MONTH) end Month ,case when COALESCE(A.MONTH,B.MONTH) = 1 then COALESCE(A.YEAR,B.YEAR)-1 else COALESCE(A.YEAR,B.YEAR) end Year ,SUM(IFNULL(A.STFS_CURRENT_MONTH,0)) STFS_CURRENT_MONTH ,SUM(IFNULL(A.LTFS_CURRENT_MONTH,0)) LTFS_CURRENT_MONTH ,SUM(IFNULL(B.STFS_CURRENT_MONTH,0)) STFS_LAST_MONTH ,SUM(IFNULL(B.LTFS_CURRENT_MONTH,0)) LTFS_LAST_MONTH FROM VAHDAM_DB.MAPLEMONK.VAHDAM_IN_MONTHLY_STORAGE_FEES_PR A LEFT JOIN VAHDAM_DB.MAPLEMONK.VAHDAM_IN_MONTHLY_STORAGE_FEES_PR B ON A.MONTH-1 = B.MONTH AND A.YEAR = B.YEAR GROUP BY 1,2 ORDER BY 2,1) select coalesce(P.date,ADJ.DATE,A.date,AD.date_value,B.Budget_month) as Date ,coalesce(P.ASIN,ADJ.ASIN,A.asin,AD.ASIN,B.ASIN,M.\"MKT India\") as ASIN ,ifnull(ADJ.OTHER_SALES,0) as OTHER_SALES ,ifnull(P.Sales,0) as Sales ,ifnull(P.Quantity_sold,0) Quantity_sold ,ifnull(P.Refund_Quanity,0) Refund_Quanity ,ifnull(P.Net_Quantity,0) as Units ,IFNULL(ADJ.TOTAL_ADJUSTMENT_QTY,0) AS TOTAL_ADJUSTMENT_QTY ,ifnull(P.Commission,0) as Commission ,ifnull(P.FBA_Fees,0) as FBA_Fees ,ifnull(A.Total_amazon_spend,0) as Total_Marketing_Spend ,B.Per_unit_Cogs ,B.Per_unit_Outbound ,0 as Add_Per_unit_Outbound ,R.FBA_DISPOSAL_FEE/count(1) over (partition by coalesce(P.date,ADJ.DATE,A.date,AD.date_value,B.Budget_month,R.DATE) order by coalesce(P.date,ADJ.DATE,A.date,AD.date_value,B.Budget_month,R.DATE)) FBA_DISPOSAL_FEE ,R.FBA_REMOVAL_FEE/count(1) over (partition by coalesce(P.date,ADJ.DATE,A.date,AD.date_value,B.Budget_month,R.DATE) order by coalesce(P.date,ADJ.DATE,A.date,AD.date_value,B.Budget_month,R.DATE)) FBA_REMOVAL_FEE ,B.Budget_ASP ,B.Budget_units/dayofmonth(last_day(coalesce(p.date,b.budget_month))) as Daily_Budget_Units ,B.Budget_Revenue/dayofmonth(last_day(coalesce(p.date,b.budget_month))) as Daily_Budget_Revenue ,B.Budget_COGS/dayofmonth(last_day(coalesce(p.date,b.budget_month))) as Daily_Budget_COGS ,B.Budget_Commission/dayofmonth(last_day(coalesce(p.date,b.budget_month))) as Daily_Budget_Commission ,B.Budget_Outbound/dayofmonth(last_day(coalesce(p.date,b.budget_month))) as Daily_Budget_Outbound ,B.Budget_Storage/dayofmonth(last_day(coalesce(p.date,b.budget_month))) as Daily_Budget_Storage ,B.Budget_FBA/dayofmonth(last_day(coalesce(p.date,b.budget_month))) as Daily_Budget_FBA ,B.Budget_PM_Spend/dayofmonth(last_day(coalesce(p.date,b.budget_month))) as Daily_Budget_PM_Spend ,B.Budget_CM2/dayofmonth(last_day(coalesce(p.date,b.budget_month))) as Daily_Budget_CM2 ,B.Budget_CM1/dayofmonth(last_day(coalesce(p.date,b.budget_month))) as Daily_Budget_CM1 ,B.Budget_Revenue_INR/dayofmonth(last_day(coalesce(p.date,b.budget_month))) as Daily_Budget_Revenue_INR ,B.Budget_COGS_INR/dayofmonth(last_day(coalesce(p.date,b.budget_month))) as Daily_Budget_COGS_INR ,B.Budget_Commission_INR/dayofmonth(last_day(coalesce(p.date,b.budget_month))) as Daily_Budget_Commission_INR ,B.Budget_Outbound_INR/dayofmonth(last_day(coalesce(p.date,b.budget_month))) as Daily_Budget_Outbound_INR ,B.Budget_Storage_INR/dayofmonth(last_day(coalesce(p.date,b.budget_month))) as Daily_Budget_Storage_INR ,B.Budget_FBA_INR/dayofmonth(last_day(coalesce(p.date,b.budget_month))) as Daily_Budget_FBA_INR ,B.Budget_CM1_INR/dayofmonth(last_day(coalesce(p.date,b.budget_month))) as Daily_Budget_CM1_INR ,B.Budget_PM_SPEND_INR/dayofmonth(last_day(coalesce(p.date,b.budget_month))) as Daily_Budget_PM_SPEND_INR ,B.Budget_CM2_INR/dayofmonth(last_day(coalesce(p.date,b.budget_month))) as Daily_Budget_CM2_INR ,CASE WHEN S.STFS_CURRENT_MONTH = 0 THEN S.STFS_LAST_MONTH ELSE S.STFS_CURRENT_MONTH END*div0(ifnull(P.Sales,0),sum(ifnull(P.Sales,0)) over (partition by coalesce(P.date,ADJ.DATE,A.date,AD.date_value,B.Budget_month,R.DATE) order by coalesce(P.date,ADJ.DATE,A.date,AD.date_value,B.Budget_month,R.DATE)))/31 STSF ,CASE WHEN S.LTFS_CURRENT_MONTH = 0 THEN S.LTFS_LAST_MONTH ELSE S.LTFS_CURRENT_MONTH END*div0(ifnull(P.Sales,0),sum(ifnull(P.Sales,0)) over (partition by coalesce(P.date,ADJ.DATE,A.date,AD.date_value,B.Budget_month,R.DATE) order by coalesce(P.date,ADJ.DATE,A.date,AD.date_value,B.Budget_month,R.DATE)))/31 LTSF ,M.weight ,M.brand ,M.\"Mother SKU\" ,M.\"Common Name\" ,M.category ,M.\"SUB CATEGORY\" ,M.\"LOOSE/TEA BAG/ POWDER\" ,M.\"Common SKU Description\" ,M.\"COMMON SKU ID\" from ASINDATE AD full outer join payments P on AD.date_value = P.date and AD.ASIN = P.ASIN FULL OUTER JOIN ADJUSTMENT ADJ ON COALESCE(AD.DATE_VALUE,P.DATE) = ADJ.DATE AND COALESCE(AD.ASIN,P.ASIN) = ADJ.ASIN full outer join AMAZONADS A on coalesce(AD.date_value,P.Date) = A.date and coalesce(AD.ASIN,P.ASIN) = A.ASIN full outer join Budget B on coalesce(date_trunc(\'month\',P.Date),date_trunc(\'month\',A.Date),date_trunc(\'month\',AD.date_value)) = date_trunc(\'month\',B.Budget_month) and coalesce(P.ASIN,A.ASIN,AD.ASIN) = B.ASIN LEFT JOIN REMOVALDISPOSAL R ON coalesce(P.date,ADJ.DATE,A.date,AD.date_value,B.Budget_month)=R.DATE left join MAPPING M on lower(coalesce(P.ASIN,B.ASIN,A.ASIN,AD.ASIN)) = lower(M.\"MKT India\") LEFT JOIN STORAGE S ON MONTH(coalesce(P.date,ADJ.DATE,A.date,AD.date_value,B.Budget_month,R.DATE)) = S.MONTH AND YEAR(coalesce(P.date,ADJ.DATE,A.date,AD.date_value,B.Budget_month,R.DATE))= S.YEAR order by Date desc;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from VAHDAM_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        