{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "CREATE OR REPLACE TABLE eggozdb.maplemonk.Untouched_Ranking as Select xx.*, yy.\"Score\", yy.\"Rank\", yy.\"Revenue\", yy.\"Cluster\", yy.\"Cumulative_Revenue_Contribution\", yy.\"Ranking_Average\" from (select tt.*, bgt.so from (SELECT CAST(TIMESTAMPADD(MINUTE, 330, db.beat_date) AS DATE) beat_date, case when rr.distributor_id is not null then \'Secondary_Retailer\' else case when rcc.name =\'Distributor\' then \'Distributor\' else \'Primary_Retailer\' end end as retailer_type, rr2.code as distributor, db.beat_number, db.beat_name, db.beat_type, rc.retailer_count, rr.code AS retailer_name, rr.area_classification, CAST(TIMESTAMPADD(MINUTE, 330, rr.onboarding_date) AS DATE) onboarding_date, rr.onboarding_status, oo2.last_order_date, oor2.last_pickup_date FROM eggozdb.maplemonk.my_sql_distributionchain_beatassignment db left JOIN eggozdb.maplemonk.my_sql_retailer_retailer rr ON rr.beat_number = db.beat_number AND rr.area_classification = db.demand_classification left join eggozdb.maplemonk.my_sql_retailer_customer_category rcc on rr.category_id = rcc.id left join (select id, code from eggozdb.maplemonk.my_sql_retailer_retailer) rr2 on rr.distributor_id = rr2.id LEFT JOIN (SELECT * FROM eggozdb.maplemonk.primary_and_secondary WHERE eggs_sold is not null and eggs_sold > 0 ) oo ON oo.beat_number_original = db.beat_number and oo.area_classification = db.demand_classification AND oo.date = CAST(TIMESTAMPADD(MINUTE, 330, db.beat_date) AS DATE) AND oo.retailer_name = rr.code LEFT JOIN (SELECT * FROM eggozdb.maplemonk.primary_and_secondary WHERE eggs_replaced is not null and eggs_return is not null and (eggs_replaced>0 or eggs_return>0) ) oor ON oor.beat_number_original = db.beat_number and oor.area_classification = db.demand_classification AND oor.date = CAST(TIMESTAMPADD(MINUTE, 330, db.beat_date) AS DATE) AND rr.code = oor.retailer_name LEFT JOIN (SELECT area_classification, beat_number, COUNT(code) retailer_count FROM eggozdb.maplemonk.my_sql_retailer_retailer where lower(onboarding_status) = \'active\' GROUP BY beat_number , area_classification) rc ON rc.area_classification = db.demand_classification AND rc.beat_number = db.beat_number LEFT JOIN (SELECT retailer_name, MAX(date) AS last_pickup_date FROM eggozdb.maplemonk.primary_and_secondary WHERE eggs_replaced is not null and eggs_return is not null and (eggs_replaced>0 or eggs_return>0) GROUP BY retailer_name) oor2 ON oor2.retailer_name = rr.code left join ( select retailer_name, max(date) as last_order_date from eggozdb.maplemonk.primary_and_secondary where eggs_sold is not null and eggs_sold > 0 group by retailer_name) oo2 on oo2.retailer_name = rr.code ) tt left join maplemonk.target_jse_gt bgt on bgt.beat_number_original = tt.beat_number and bgt.city = tt.area_classification )xx left join ( SELECT \"Retailer_name\" AS \"Retailer_name\", \"Area\" AS \"Area\", DATE_TRUNC(\'MONTH\', date_) AS \"date_\", sum(score) AS \"Score\", max(\"Rank\") AS \"Rank\", max(\"Revenue\") AS \"Revenue\", sum(\"Eggs Sold\") AS \"Eggs_Sold\", SUM(\"eggs_replaced\") AS \"Eggs_Replaced\", sum(\"eggs_return\") AS \"Return\", sum(\"landing_price\") AS \"Landing Price\", sum(cumulative_revenue_contribution) AS \"Cumulative_Revenue_Contribution\", sum(ranking_average)/2 AS \"Ranking_Average\", case when round(sum(ranking_average)/2, 1)*10 = 0 then 1 else (case when sum(cumulative_revenue_contribution) < 0.30 then (case when round(sum(ranking_average)/2, 1)*10 < 5 then round(sum(ranking_average)/2, 1)*10 +1 else round(sum(ranking_average)/2, 1)*10 end) else (case when sum(cumulative_revenue_contribution) > 0.70 then (case when round(sum(ranking_average)/2, 1)*10 > 2 then round(sum(ranking_average)/2, 1)*10 -1 else round(sum(ranking_average)/2, 1)*10 end) else round(sum(ranking_average)/2, 1)*10 END) end) end AS \"Cluster\" FROM maplemonk.retailer_ranking WHERE date_ >= TO_DATE(\'2022-12-01\') AND date_ < TO_DATE(\'2023-01-01\') AND ((\"Area\" not like \'%UB%\')) GROUP BY \"Retailer_name\", \"Area\", DATE_TRUNC(\'MONTH\', date_) ORDER BY \"Score\" DESC )yy on xx.retailer_name =yy.\"Retailer_name\" and xx.area_classification = yy.\"Area\" ;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from EGGOZDB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        