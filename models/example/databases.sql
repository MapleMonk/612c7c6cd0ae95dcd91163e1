{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table italiancolony_db.maplemonk.italiancolony_db_PandL as select coalesce(a.order_date,e.date, f.date) as Date ,a.order_id ,a.reference_code ,SALEORDERITEMCODE ,coalesce(a.shop_name,e.marketplace, f.marketplace) shop_name ,coalesce(a.marketplace,e.marketplace, f.marketplace) marketplace ,coalesce(a.source, e.channel, f.channel) as Marketing_Source ,coalesce(a.channel, e.channel, f.channel) as Marketing_Channel ,a.return_flag ,a.customer_id_final ,a.new_customer_flag ,payment_mode ,payment_gateway ,a.awb ,a.order_Status ,a.shipping_status ,a.final_shipping_status ,case when lower(ifnull(order_Status,\'a\')) like \'%cancel%\'or lower(ifnull(final_shipping_status,\'a\')) like \'%cancel%\' then \'CANCELLED\' else upper(coalesce(c.current_Status,final_shipping_status,order_status)) end final_status ,a.sku ,a.sku_code ,a.product_name_final PRODUCT_NAME_FINAL ,a.product_sub_category product_sub_category ,a.product_category PRODUCT_CATEGORY ,a.quantity ,a.selling_price Gross_sale ,a.shipping_price shipping_price ,a.tax tax ,b.mrp*a.quantity mrp_Sales ,b.cogs*a.quantity cogs ,div0(ifnull(e.spend,0), count(1) over (partition by coalesce(a.order_date,e.date, f.date), coalesce(a.marketplace, e.marketplace, f.marketplace),coalesce(a.channel, e.channel, f.channel))) as Paid_Marketing_Google ,div0(ifnull(f.spend,0), count(1) over (partition by coalesce(a.order_date,e.date, f.date) , coalesce(a.marketplace, e.marketplace, f.marketplace), coalesce(a.channel, e.channel, f.channel))) as Paid_Marketing_Facebook ,case when a.new_customer_flag = \'Repeat\' then LAG(a.order_date) IGNORE NULLS OVER (partition by a.customer_id_final ORDER BY a.order_date) end previous_date ,datediff(day,previous_date,a.order_Date) days_from_last_order from italiancolony_db.maplemonk.italiancolony_db_sales_consolidated a left join (select sku, mrp, cogs from (select \"Product Code\" sku, case when mrp = \'\' then 0 else mrp::float end mrp, case when \"Cost Price\" = \'\' then 0 else \"Cost Price\"::float end cogs, row_number() over (partition by \"Product Code\" order by 1) rw from italiancolony_db.maplemonk.unicommerce_get_product_master) where rw =1 ) b on a.sku = b.sku left join (select awb_number ,current_status from italiancolony_db.MAPLEMONK.italiancolony_DB_CLICKPOST_FACT_ITEMS )c on a.awb = c.awb_number full outer join (select date , channel , \'SHOPIFY_ITALIAN_COLONY\' MARKETPLACE , sum(spend) spend from italiancolony_db.maplemonk.italiancolony_db_MARKETING_CONSOLIDATED where lower(channel) like \'%google%\' group by 1,2,3 ) e on e.date = a.order_Date::date and lower(a.marketplace) = \'SHOPIFY_ITALIAN_COLONY\' and lower(case when lower(a.channel) like \'%google%\' then \'google\' end) like \'%google%\' full outer join (select date , channel , \'SHOPIFY_ITALIAN_COLONY\' MARKETPLACE , sum(spend) spend from italiancolony_db.maplemonk.italiancolony_db_MARKETING_CONSOLIDATED where lower(channel) like \'%facebook%\' group by 1,2,3 ) f on f.date = a.order_Date::date and lower(a.marketplace) = \'SHOPIFY_ITALIAN_COLONY\' and lower(case when lower(a.channel) like \'%facebook%\' then \'facebook\' end) like \'%facebook%\' ;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from italiancolony_db.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        