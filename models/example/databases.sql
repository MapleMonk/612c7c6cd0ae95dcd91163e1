{{ config(
            materialized='table',
                post_hook={
                    "sql": "create or replace table MINDFUL_DB.MAPLEMONK.MINDFUL_DB_inventory_Planning_Fact_items as With Inventory as ( Select DATA_FETCH_DATE ,SKU ,sum(ifnull(AVAILABLEINVENTORY,0)) as AVAILABLE_INVENTORY from ( select try_to_timestamp(DATA_FETCH_DATE)::date DATA_FETCH_DATE ,replace(SKU,\'\\'\',\'\') SKU ,companyid ,RESERVEDINVENTORY ,AVAILABLEINVENTORY ,location_key ,row_number() over (partition by companyid,location_key,replace(SKU,\'\\'\',\'\'), productid, data_fetch_date::date order by DATA_FETCH_DATE desc) rw from MINDFUL_DB.MAPLEMONK.MINDFUL_EASYECOM_inventory_details ) where rw = 1 and DATA_FETCH_DATE = (select max(data_fetch_date::date) from MINDFUL_DB.MAPLEMONK.MINDFUL_EASYECOM_inventory_details) group by 1,2 ), ROS as ( select SKU ,ceil(Div0(sum(ifnull(quantity,0)),(select value from mindful_db.maplemonk.mindful_db_inventory_inputs where parameter = \'Rate of sale\' limit 1))) as ROS from MINDFUL_DB.MAPLEMONK.MINDFUL_DB_sales_consolidated where not(lower(final_shipping_status) like \'%cancel%\' or lower(order_status) like \'%cancel%\') and datediff(day,order_date::date,current_date) between 0 and (select value from mindful_db.maplemonk.mindful_db_inventory_inputs where parameter = \'Rate of sale\' limit 1) group by 1 ), Inventory_ROS as ( select INV.*,R.ROS from Inventory INV left join ROS R on lower(INV.sku) = lower(R.SKU) ), PO_DATA as ( Select PO_CREATED_DATE::date as PO_DATE ,upper(REPLACE(SKU, \'\"\', \'\')) SKU ,case when datediff(day,dateadd(\'day\',30,PO_DATE::date),current_date()) between 0 and 60 then dateadd(\'day\',15,current_date::date) else dateadd(\'day\',30,PO_DATE::date) end as Estimated_delivery_date ,sum(PENDING_QUANTITY) IN_PRODUCTION_INVENTORY from MINDFUL_DB.MAPLEMONK.EASYECOM_PO_FACT_ITEMS where datediff(day,PO_DATE::date,current_date()) < 90 and po_status_id not in (5,7,1,2,4) group by 1,2 having sum(PENDING_QUANTITY) > 0 ), final_result as ( select sw.DATA_FETCH_DATE ::date date ,upper(sw.sku) as sku ,ROS ,available_inventory::int as Start_inventory ,IN_PRODUCTION_INVENTORY Incoming_Inventory ,case when ifnull(sw.Available_Inventory,0) + ifnull(po.IN_PRODUCTION_INVENTORY,0) > ROS then ifnull(sw.Available_Inventory,0) + ifnull(po.IN_PRODUCTION_INVENTORY,0) - ROS else 0 end as ending_Inventory ,case when ifnull(sw.Available_Inventory,0) + ifnull(po.IN_PRODUCTION_INVENTORY,0) < ROS then ROS - (ifnull(sw.Available_Inventory,0) + ifnull(po.IN_PRODUCTION_INVENTORY,0)) else 0 end as Inventory_Short ,case when ifnull(sw.Available_Inventory,0) + ifnull(po.IN_PRODUCTION_INVENTORY,0) < ROS then DATA_FETCH_DATE::date end as Out_of_stock_date ,case when ifnull(sw.Available_Inventory,0) < ROS then sw.DATA_FETCH_DATE ::date end as start_Of_Out_Of_Stock ,case when ifnull(sw.Available_Inventory,0) = 0 then ROS end as cummulative_Inventotory_Needed ,case when ifnull(sw.Available_Inventory,0) < ROS then sw.DATA_FETCH_DATE::date end as Stock_Order_Date ,sw.DATA_FETCH_DATE ::date Start_Date ,available_inventory::int as Initial_Start_inventory ,ifnull(po.IN_PRODUCTION_INVENTORY,0) as Po_Inventory ,dateadd(day,(select value from mindful_db.maplemonk.mindful_db_inventory_inputs where parameter = \'Keep_Stock_For\' limit 1) ,(select max(data_fetch_date::date) from MINDFUL_DB.MAPLEMONK.MINDFUL_EASYECOM_inventory_details)) Date_End from Inventory_ROS sw left join PO_DATA po on upper(po.sku) = upper(sw.sku) and sw.DATA_FETCH_DATE::date = po.Estimated_delivery_date::date union all select dateadd(day,1,sw.date) ::date date ,upper(sw.sku) as sku ,sw.ROS ,sw. ending_Inventory::int as Start_inventory ,po.IN_PRODUCTION_INVENTORY Incoming_Inventory ,case when ifnull(sw.ending_Inventory,0) + ifnull(po.IN_PRODUCTION_INVENTORY,0) > sw.ROS then ifnull(sw.ending_Inventory,0) + ifnull(po.IN_PRODUCTION_INVENTORY,0) - sw.ROS else 0 end as net_quantity ,case when ifnull(sw.ending_Inventory,0) + ifnull(po.IN_PRODUCTION_INVENTORY,0) < sw.ROS then sw.ROS - (ifnull(sw.ending_Inventory,0) + ifnull(po.IN_PRODUCTION_INVENTORY,0)) else 0 end as quantity_to_order ,case when ifnull(sw.ending_Inventory,0) + ifnull(po.IN_PRODUCTION_INVENTORY,0) < sw.ROS then dateadd(day,1,sw.date) ::date end as When_to_order ,case when ifnull(sw.ending_Inventory,0) = 0 and net_quantity = 0 then sw.start_Of_Out_Of_Stock ::date when ifnull(sw.ending_Inventory,0) > 0 and net_quantity = 0 then dateadd(day,1,sw.date) ::date end as start_Of_Out_Of_Stock ,case when ifnull(sw.ending_Inventory,0) = 0 and net_quantity = 0 and dateadd(day,-30,dateadd(day,1,sw.date)) >current_date then ifnull(sw.cummulative_Inventotory_Needed,0) + sw.ROS when ifnull(sw.ending_Inventory,0) > 0 and net_quantity = 0 and dateadd(day,-30,dateadd(day,1,sw.date)) >current_date then ROS end as cummulative_Inventotory_Needed ,case when (ifnull(sw.ending_Inventory,0) = 0 and net_quantity > 0 and cummulative_Inventotory_Needed is not null ) or (dateadd(day,1,sw.date)::date =Date_End::date) then coalesce(greatest(dateadd(day,-30,sw.start_Of_Out_Of_Stock),current_date),current_date) end Stock_Order_Date ,Start_Date ,Initial_Start_inventory ,ifnull(po.IN_PRODUCTION_INVENTORY,0) + ifnull(sw.Po_Inventory,0) as Po_Inventory ,sw.Date_End from final_result sw left join PO_DATA po on upper(po.sku) = upper(sw.sku) and dateadd(day,1,sw.date)::date = po.Estimated_delivery_date::date WHERE sw.date < sw.Date_End ) select FR.* ,upper(PM.PRODUCT_NAME) PRODUCT_NAME ,PM.PRODUCT_TYPE ,upper(PM.CATEGORY_NAME) as Category ,upper(coalesce(VN.VENDOR_NAME,VN_I.COMPANYNAME)) VENDOR_NAME ,VN.ITEM_PRICE ITEM_PRICE ,upper(sc.PRODUCT_CATEGORY) as Sales_Category ,upper(sc.product_name) as Sales_Product_Name from final_result FR left join ( select * from (select *, row_number() over(partition by sku order by UPDATED_AT desc)rw from mindful_db.maplemonk.product_master )where rw = 1 )PM on lower(pm.sku) = lower(FR.sku) left join ( select * from ( select * ,row_number() over(partition by sku order by PO_CREATED_DATE desc)rw from MINDFUL_DB.MAPLEMONK.EASYECOM_PO_FACT_ITEMS ) where rw =1 )VN on upper(REPLACE(VN.SKU, \'\"\', \'\')) = (FR.SKU) left join ( select * from ( select * ,row_number() over(partition by sku order by data_fetch_date desc)rw from MINDFUL_DB.MAPLEMONK.MINDFUL_EASYECOM_inventory_details )where rw = 1 )VN_I on lower(VN_I.sku) = lower(FR.SKU) left join ( select sku,PRODUCT_CATEGORY,product_name from ( select * ,row_number() over(partition by sku order by 1)rw from MINDFUL_DB.MAPLEMONK.MINDFUL_DB_SALES_CONSOLIDATED )where rw = 1 )SC on lower(SC.sku) = lower(FR.SKU) ;",
                    "transaction": true
                }
            ) }}
            with sample_data as (

                select * from MINDFUL_DB.information_schema.databases
            ),
            
            final as (
                select * from sample_data
            )
            select * from final
            