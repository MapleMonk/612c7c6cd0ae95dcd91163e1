{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "CREATE OR REPLACE TABLE RPSG_DB.MAPLEMONK.PRODUCT_TRAFFIC_SUMMARY as with sales as ( select order_date::date as order_date, sku, PRODUCT_NAME_MAPPED, category, product_id, final_channel, count(distinct order_id) as total_orders, sum(SUBORDER_QUANTITY) as total_quantity, sum(selling_price) as total_selling_price from rpsg_db.maplemonk.sales_consolidated_drv group by 1,2,3,4,5,6 ), pf_map1 as ( with sessions_users as ( WITH ranked_data AS ( select * from ( SELECT TO_DATE(date, \'YYYYMMDD\') AS date, RIGHT(itemid, 14) AS itemid, sessions, ENGAGEDSESSIONS, totalusers, ITEMSVIEWED, ITEMSCHECKEDOUT, ITEMSADDEDTOCART, SESSIONSOURCEMEDIUM, REPLACE(SPLIT(SESSIONSOURCEMEDIUM, \' / \')[0], \'\"\', \'\') AS source, REPLACE(SPLIT(SESSIONSOURCEMEDIUM, \' / \')[1], \'\"\', \'\') AS medium, ROW_NUMBER() OVER (PARTITION BY date, itemid, SESSIONSOURCEMEDIUM ORDER BY 1) AS rw FROM rpsg_db.maplemonk.products_funnel_metrics ) where rw=1 ) ,avg_itemsaddedtocart AS ( SELECT date, itemid, SESSIONSOURCEMEDIUM, AVG(CASE WHEN ITEMSADDEDTOCART < 10000 THEN ITEMSADDEDTOCART END) OVER (PARTITION BY itemid,SESSIONSOURCEMEDIUM ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS avg_last_7_days_itemsaddedtocart FROM ranked_data ) SELECT rd.date, rd.itemid, rd.sessions, rd.ENGAGEDSESSIONS, rd.totalusers, rd.ITEMSVIEWED, rd.ITEMSCHECKEDOUT, rd.SESSIONSOURCEMEDIUM, rd.source, rd.medium, COALESCE( CASE WHEN rd.ITEMSADDEDTOCART > 10000 THEN aiatc.avg_last_7_days_itemsaddedtocart::int ELSE rd.ITEMSADDEDTOCART END, rd.ITEMSADDEDTOCART ) AS ITEMSADDEDTOCART FROM ranked_data rd LEFT JOIN avg_itemsaddedtocart aiatc ON rd.date = aiatc.date AND rd.itemid = aiatc.itemid and rd.SESSIONSOURCEMEDIUM = aiatc.SESSIONSOURCEMEDIUM ), GA_CHANNEL_MAPPING as ( select * from ( select *, row_number() over (partition by lower(concat(lower(ifnull(ga_source,\'\')),lower(ifnull(ga_medium,\'\')))) order by 1) rw from rpsg_db.MAPLEMONK.ga_channel_mapping ) where rw=1 and lower(concat(ifnull(ga_source,\'\'),ifnull(ga_medium,\'\'))) is not null ), joined_table as( select pf.date, pf.itemid, pf.sessions, pf.ENGAGEDSESSIONS, pf.totalusers, pf.ITEMSVIEWED, pf.ITEMSCHECKEDOUT, pf.ITEMSADDEDTOCART, pf.source, pf.medium, SESSIONSOURCEMEDIUM, ga_mapping.FINAL_channel as ga_mapped_channel from sessions_users as pf left join GA_CHANNEL_MAPPING as ga_mapping on lower(concat(ifnull(pf.SOURCE,\'\'),ifnull(pf.MEDIUM,\'\'))) = lower(concat(ifnull(GA_MAPPING.ga_source,\'\'),ifnull(GA_MAPPING.ga_medium,\'\'))) ) select date, itemid, case when lower(ga_mapped_channel) like \'%google%\' then \'ACQUISITION GOOGLE\' when lower(ga_mapped_channel) like \'%retention%\' then \'RETENTION\' when lower(ga_mapped_channel) like \'%facebook%\' then \'ACQUISITION FACEBOOK\' else \'OTHERS\' END as ga_mapped_channel, sum(sessions) as sessions, sum(ENGAGEDSESSIONS) as ENGAGEDSESSIONS, sum(totalusers) as totalusers, sum(ITEMSVIEWED) as ITEMSVIEWED, sum(ITEMSADDEDTOCART) as ITEMSADDEDTOCART, sum(ITEMSCHECKEDOUT) as ITEMSCHECKEDOUT from joined_table group by 1,2,3 ), Get_mapping_id AS ( select date,sku,ga_mapped_channel, sum(sessions) as sessions, sum(ENGAGEDSESSIONS) as ENGAGEDSESSIONS, sum(totalusers) as totalusers, sum(ITEMSVIEWED) as ITEMSVIEWED, sum(ITEMSADDEDTOCART) as ITEMSADDEDTOCART, sum(ITEMSCHECKEDOUT) as ITEMSCHECKEDOUT from( select s.*,pv.sku from pf_map1 s left join ( select * from (select sku,id,row_number() over(partition by id order by UPDATED_AT desc)rw from RPSG_DB.maplemonk.Shopify_DRV_All_products_variants ) where rw=1)pv on lower(s.itemid) = lower(pv.id) ) group by 1,2,3 ) select s_c.order_date, s_c.sku, s_c.category, s_c.product_name_mapped, s_c.product_id, s_c.final_channel, s_c.total_orders, s_c.total_quantity, s_c.total_selling_price, pf_map1.date, pf_map1.totalusers, pf_map1.ITEMSVIEWED, pf_map1.sessions, pf_map1.ENGAGEDSESSIONS, pf_map1.ga_mapped_channel, pf_map1.ITEMSADDEDTOCART, pf_map1.ITEMSCHECKEDOUT FROM sales s_c full outer JOIN Get_mapping_id AS pf_map1 ON LOWER(s_c.final_channel) = LOWER(pf_map1.ga_mapped_channel) AND lower(s_c.sku) = lower(pf_map1.sku) and s_c.order_date::DATE = pf_map1.date::DATE",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from RPSG_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        