{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "CREATE TABLE IF NOT EXISTS SLEEPYCAT_DB.MAPLEMONK.SLEEPYCAT_DB_ga_sessions_consolidated ( date date, channel VARCHAR(16777216), shop_name VARCHAR(16777216), sessions int); Create or replace table SLEEPYCAT_DB.MAPLEMONK.SLEEPYCAT_DB_Sales_Cost_Source_intermediate as with Sessions as (select date date, channel marketing_channel, shop_name marketplace, sum(sessions) Sessions from SLEEPYCAT_DB.MAPLEMONK.SLEEPYCAT_DB_ga_sessions_consolidated group by 1,2,3 union all select try_cast(DATAENDTIME as date) Date ,\'AMAZON\' Marketing_Channel ,\'AMAZON\' Marketplace ,sum(ifnull(trafficbyasin:\"sessions\",0)) Sessions from SLEEPYCAT_DB.maplemonk.ASP_BR_SC_GET_SALES_AND_TRAFFIC_REPORT_ASIN group by 1,2,3 ), orders as ( select FI.order_date::date Date ,upper(marketplace) Marketplace ,upper(FI.CHANNEL) marketing_CHANNEL ,ifnull(sum(ifnull(FI.total_mrp,0)),0) mrp ,ifnull(sum(ifnull(total_mrp, 0)),0) - ifnull(sum(case when (lower(order_status)like \'%cancel%\' or lower(shipping_status)like \'%cancel%\') then ifnull(total_mrp,0) end),0) TOTAL_MRP_EXCL_CANCL ,ifnull(sum(ifnull(FI.SELLING_PRICE,0)),0) Total_Sales ,ifnull(sum(ifnull(selling_price,0)),0) - ifnull(sum(case when (lower(order_status)like \'%cancel%\' or lower(shipping_status)like \'%cancel%\') then ifnull(selling_price,0) end),0) TOTAL_SALES_EXCL_CANCL ,count(distinct case when return_exchange_flag = 0 then reference_code end )Total_Orders ,count(distinct case when return_exchange_flag = 0 then reference_code end ) - count(distinct case when return_exchange_flag = 0 and (lower(order_status) like \'%cancel%\' or lower(shipping_status) like \'%cancel%\') then reference_code end ) Orders_EXCL_CANCL ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' and return_exchange_flag = 0 then FI.order_id end)) as New_Customer_Orders ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' and return_exchange_flag = 0 then FI.order_id end)) - count(distinct case when return_exchange_flag = 0 and lower(FI.new_customer_flag) = \'new\' and (lower(order_status) like \'%cancel%\' or lower(shipping_status) like \'%cancel%\') then reference_code end ) as New_Customer_Orders_EXCL_CANCL ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' then FI.customer_id_final end)) as Total_New_Customers ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' then FI.customer_id_final end)) - count(distinct(case when lower(FI.new_customer_flag) = \'new\' and (lower(order_status) like \'%cancel%\' or lower(shipping_status) like \'%cancel%\') then FI.customer_id_final end)) New_Customers_EXCL_CANCL ,count(distinct FI.customer_id_final) as TOTAL_Unique_Customers ,(count(distinct FI.customer_id_final) - count(distinct case when (lower(order_status) like \'%cancel%\' or lower(shipping_status) like \'%cancel%\') then FI.customer_id_final end)) as Unique_Customers_EXCL_CANCL ,count(distinct(case when lower(FI.new_customer_flag) = \'repeat\' then FI.customer_id_final end)) as Repeat_Customers ,(count(distinct(case when lower(FI.new_customer_flag) = \'repeat\' then FI.customer_id_final end)) - count(distinct(case when lower(FI.new_customer_flag) = \'repeat\' and (lower(order_status) like \'%cancel%\' or lower(shipping_status) like \'%cancel%\') then FI.customer_id_final end))) Repeat_Customers_EXCL_CANCL ,ifnull(sum(ifnull(total_mrp,0) - ifnull(selling_price,0)),0) as TOTAL_DISCOUNT ,ifnull(sum(ifnull(total_mrp,0) - ifnull(selling_price,0)),0) - ifnull(sum(case when (lower(order_status)like \'%cancel%\' or lower(shipping_status)like \'%cancel%\') then ifnull(total_mrp,0) - ifnull(selling_price,0) end),0) TOTAL_DISCOUNT_EXCL_CANCL ,ifnull(sum(FI.tax),0) TOTAL_TAX ,ifnull(sum(ifnull(tax,0)),0) - ifnull(sum(case when (lower(order_status)like \'%cancel%\' or lower(shipping_status)like \'%cancel%\') then ifnull(tax,0) end),0) TAX_EXCL_CANCL ,ifnull(sum(FI.shipping_price),0) TOTAL_SHIPPING_PRICE ,(ifnull(sum(FI.shipping_price),0) - ifnull(sum(case when (lower(order_status)like \'%cancel%\' or lower(shipping_status)like \'%cancel%\') then FI.shipping_price end),0)) SHIPPING_PRICE_EXCL_CANCL ,ifnull(sum(case when lower(FI.new_customer_flag) = \'new\' then ifnull(total_mrp,0) - ifnull(selling_price,0) end),0) as New_Customer_Discount ,ifnull(sum(case when lower(FI.new_customer_flag) = \'new\' then ifnull(total_mrp,0) - ifnull(selling_price,0) end),0) - ifnull(sum(case when lower(FI.new_customer_flag) = \'new\' and (lower(order_status)like \'%cancel%\' or lower(shipping_status)like \'%cancel%\') then ifnull(total_mrp,0) - ifnull(selling_price,0) end),0) as New_Customer_Discount_EXCL_CANCL ,ifnull(sum(FI.quantity),0) TOTAL_QUANTITY ,(ifnull(sum(FI.quantity),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.quantity end),0)) QUANTITY_EXCL_CANCL ,sum(ifnull(EX_RETURNED_QUANTITY,0)) as EX_RETURNED_QUANTITY ,sum(ifnull(RETURN_AMOUNT,0)) as RETURN_AMOUNT ,sum(ifnull(return_tax,0)) as return_tax ,count(distinct case when return_exchange_flag = 0 and (lower(order_status) like \'%cancel%\' or lower(shipping_status) like \'%cancel%\') then reference_code end ) Cancelled_Orders ,count(distinct case when lower(order_status) not in (\'cancelled\') and lower(shipping_status) not in (\'cancelled\') and return_flag=0 and return_exchange_flag = 0 then order_id end) Net_Orders ,count(distinct case when lower(order_status) in (\'delivered\') and return_exchange_flag = 0 then order_id end) Delivered_Orders ,count(distinct case when lower(order_status) in (\'returned\',\'rto\') and return_exchange_flag = 0 then order_id end) Returned_Orders ,count(distinct case when dispatch_date is not null and lower(order_status) not in (\'cancelled\') and lower(shipping_status) not in (\'cancelled\') and return_exchange_flag = 0 then order_id end) Dispatched_Orders ,count(distinct case when lower(order_status) in (\'shipped\',\'printed\',\'confirmed\',\'returned\',\'ready to dispatch\') and return_exchange_flag = 0 then order_id end) Realised_Orders ,ifnull(sum(case when lower(order_status) in (\'delivered\') then ifnull(FI.SELLING_PRICE,0)-ifnull(FI.TAX,0) end),0) Delivered_Revenue ,ifnull(sum(case when dispatch_date is not null and lower(order_status) not in (\'cancelled\') and lower(shipping_status) not in (\'cancelled\') then ifnull(FI.SELLING_PRICE,0) end),0) Dispatched_Revenue ,ifnull(sum(case when lower(order_status) in (\'shipped\',\'printed\',\'confirmed\',\'returned\',\'ready to dispatch\') then ifnull(FI.SELLING_PRICE,0) end),0) Realised_Revenue ,count(case when date_trunc(\'month\',acquisition_date)>=dateadd(month,-3,date_trunc(\'month\',order_date)) and date_trunc(\'month\',acquisition_date)<date_trunc(\'month\',order_date) then customer_id_final end) L3M_Customers_Retained ,count(case when date_trunc(\'month\',acquisition_date)>=dateadd(month,-6,date_trunc(\'month\',order_date)) and date_trunc(\'month\',acquisition_date)<date_trunc(\'month\',order_date) then customer_id_final end) L6M_Customers_Retained ,count(case when date_trunc(\'month\',acquisition_date)>=dateadd(month,-3,date_trunc(\'month\',order_date)) and date_trunc(\'month\',acquisition_date)<date_trunc(\'month\',order_date) then customer_id_final end) L12M_Customers_Retained ,sum(case when lower(FI.new_customer_flag) = \'repeat\' then ifnull(FI.selling_price,0) end) Repeat_Customer_Revenue ,count(distinct case when lower(FI.payment_mode) in (\'cod\') and return_exchange_flag = 0 then FI.order_id end) as COD_Orders from SLEEPYCAT_DB.MAPLEMONK.SLEEPYCAT_DB_SALES_CONSOLIDATED FI group by 1,2,3 ), spendd2c as (select date ,case when lower(channel) like any (\'%facebook%\', \'%google%\') then \'WOOCOMMERCE\' when lower(channel) like any (\'%amazon%\') then \'AMAZON\' when lower(channel) like any (\'%flipkart%\') then \'FLIPKART\' else \'OTHERS\' end as Marketplace ,upper(channel) marketing_Channel ,sum(spend) as spend from SLEEPYCAT_DB.MAPLEMONK.SLEEPYCAT_DB_MARKETING_CONSOLIDATED group by 1,2,3 ) select coalesce(fi.Date,MC.date, SC.DATE) as date, upper(coalesce(fi.marketplace,MC.marketplace, SC.marketplace)) as Marketplace, upper(coalesce(fi.marketing_channel,MC.marketing_Channel, SC.marketing_channel)) as Marketing_Channel, Total_Sales, mrp, TOTAL_MRP_EXCL_CANCL, TOTAL_SALES_EXCL_CANCL, SC.sessions, Total_Orders, Orders_EXCL_CANCL, New_Customer_Orders, New_Customer_Orders_EXCL_CANCL, Total_New_Customers, New_Customers_EXCL_CANCL, TOTAL_Unique_Customers, Unique_Customers_EXCL_CANCL, Repeat_Customers, Repeat_Customers_EXCL_CANCL, TOTAL_DISCOUNT, TOTAL_DISCOUNT_EXCL_CANCL, TOTAL_TAX, TAX_EXCL_CANCL, TOTAL_SHIPPING_PRICE, SHIPPING_PRICE_EXCL_CANCL, New_Customer_DISCOUNT, New_Customer_Discount_EXCL_CANCL, TOTAL_QUANTITY, QUANTITY_EXCL_CANCL, EX_RETURNED_QUANTITY as Return_Quantity, RETURN_AMOUNT as Return_Value, return_tax as TOTAL_RETURN_TAX, Cancelled_Orders, Net_Orders, Delivered_Orders, Delivered_Revenue, Dispatched_Orders, Dispatched_Revenue, Realised_Orders, Realised_Revenue, spend as marketing_spend, COD_Orders, Repeat_Customer_Revenue from orders FI full outer join spendd2c MC on FI.Date = MC.date and lower(FI.marketing_channel)=lower(MC.marketing_channel) and lower(FI.Marketplace)=lower(MC.Marketplace) full outer join SESSIONS SC on FI.Date=SC.Date and lower(coalesce(FI.Marketing_Channel,MC.marketing_channel))=lower(SC.Marketing_Channel) and lower(coalesce(FI.marketplace,MC.marketplace))=lower(SC.Marketplace); Create or replace table SLEEPYCAT_DB.MAPLEMONK.SLEEPYCAT_DB_SALES_COST_SOURCE as select coalesce(a.date, b.date) as date, upper(coalesce(a.marketplace, b.marketplace)) Marketplace, upper(coalesce(a.marketing_channel,b.marketing_channel)) as marketing_Channel, Total_Sales, mrp, TOTAL_MRP_EXCL_CANCL, TOTAL_SALES_EXCL_CANCL, Sessions, Total_Orders, Orders_EXCL_CANCL, New_Customer_Orders, New_Customer_Orders_EXCL_CANCL, Total_New_Customers, New_Customers_EXCL_CANCL, TOTAL_Unique_Customers, Unique_Customers_EXCL_CANCL, Repeat_Customers, Repeat_Customers_EXCL_CANCL, TOTAL_DISCOUNT, TOTAL_DISCOUNT_EXCL_CANCL, TOTAL_TAX, TOTAL_RETURN_TAX, TAX_EXCL_CANCL, TOTAL_SHIPPING_PRICE, SHIPPING_PRICE_EXCL_CANCL, New_Customer_DISCOUNT, New_Customer_Discount_EXCL_CANCL, TOTAL_QUANTITY, QUANTITY_EXCL_CANCL, Return_Quantity, Return_Value, Cancelled_Orders, Net_Orders, Delivered_Orders, Delivered_Revenue, Dispatched_Orders, Dispatched_Revenue, Realised_Orders, Realised_Revenue, marketing_spend, COD_Orders, Repeat_Customer_Revenue, ifnull(b.customers,0) as MC_MP_Customer_Till_Date, ifnull(b.gross_sales,0) as MC_MP_Sales_Till_Date from SLEEPYCAT_DB.MAPLEMONK.SLEEPYCAT_DB_Sales_Cost_Source_intermediate a full outer join (select date ,marketplace ,marketing_channel ,sum(gross_sales) over (partition by date order by date asc rows between unbounded preceding and current row) gross_sales ,sum(customers) over (partition by date order by date asc rows between unbounded preceding and current row) customers from ( select B.date, B.marketplace Marketplace, B.Channel marketing_channel, sum(ifnull(selling_price,0)) gross_sales, count(distinct case when new_customer_flag = \'New\' then customer_id_final end) customers from SLEEPYCAT_DB.MAPLEMONK.SLEEPYCAT_DB_SALES_CONSOLIDATED A full outer join ( select * from (select distinct order_date::date date from SLEEPYCAT_DB.MAPLEMONK.SLEEPYCAT_DB_SALES_CONSOLIDATED X) cross join (select distinct marketplace, channel from SLEEPYCAT_DB.MAPLEMONK.SLEEPYCAT_DB_SALES_CONSOLIDATED) Y) B on A.order_date::date=B.date group by B.date, B.marketplace,B.channel order by B.date desc ) order by date desc ) b on a.Date = b.date and lower(a.marketing_channel) = lower(b.marketing_channel) and lower(a.marketplace) = lower(b.marketplace) order by 1 desc;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from SLEEPYCAT_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        