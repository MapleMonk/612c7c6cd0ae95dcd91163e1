{{ config(
            materialized='table',
                post_hook={
                    "sql": "create or replace table snitch_db.snitch.product_dim as with shopify_product as (select in1.*, \'SHOPIFY\' as source from (select CAST(sn.ID AS VARCHAR) AS PRODUCT_ID, CAST (sn.HANDLE AS VARCHAR) AS HANDLE, CAST(sn.product_type AS TEXT) AS PRODUCT_CATEGORY, sn.VENDOR, CAST(sn.title as VARCHAR) AS PRODUCT_TITLE, CAST(var.sku AS VARCHAR) AS SKU, REVERSE(SUBSTRING(REVERSE(var.sku), CHARINDEX(\'-\', REVERSE(var.sku)) + 1)) AS sku_group, CAST(var.price AS FLOAT) AS PRICE, CAST(var.taxable AS VARCHAR) AS TAXABLE, var.colour color, var.size size, CAST(var.weight AS float) AS \"WEIGHT(KG)\", CAST (sn.created_at AS VARCHAR) AS product_created, CAST (sn.updated_at AS VARCHAR) AS product_updated, CAST (sn.status AS VARCHAR) AS product_status, CAST (sn.published_scope AS VARCHAR) AS publish_scope, CAST (sn.published_at AS VARCHAR) AS publish_date, CAST(var.inventory_item_id AS varchar) AS inventory_item_id, CAST(var.id AS int) AS variant_id, CAST(var.created_at AS varchar) AS variant_created_date, CAST(var.updated_at AS varchar) AS variant_updated_date from Snitch_db.maplemonk.shopifyindia_products sn left join ( select distinct a.*, b.colour, c.size from snitch_db.maplemonk.shopifyindia_product_variants a left join (select id, A.value:value::string colour from snitch_db.maplemonk.shopifyindia_product_variants, lateral flatten (input => options) A where A.value:name::string in (\'Color\',\'Colour\')) b on a.id = b.id left join (select id, A.value:value::string Size from snitch_db.maplemonk.shopifyindia_product_variants, lateral flatten (input => options) A where A.value:name::string in (\'Size\')) c on a.id = c.id ) var on var.product_id = sn.id ) in1 inner join (select sku,max(product_updated) as product_updated from ( select CAST(sn.ID AS VARCHAR) AS PRODUCT_ID, CAST (sn.HANDLE AS VARCHAR) AS HANDLE, CAST(sn.product_type AS TEXT) AS PRODUCT_CATEGORY, sn.VENDOR, CAST(sn.title as VARCHAR) AS PRODUCT_TITLE, CAST(var.sku AS VARCHAR) AS SKU, REVERSE(SUBSTRING(REVERSE(var.sku), CHARINDEX(\'-\', REVERSE(var.sku)) + 1)) AS sku_group, CAST(var.price AS FLOAT) AS PRICE, CAST(var.taxable AS VARCHAR) AS TAXABLE, var.colour color, var.size size, CAST(var.weight AS float) AS \"WEIGHT(KG)\", CAST (sn.created_at AS VARCHAR) AS product_created, CAST (sn.updated_at AS VARCHAR) AS product_updated, CAST (sn.status AS VARCHAR) AS product_status, CAST (sn.published_scope AS VARCHAR) AS publish_scope, CAST (sn.published_at AS VARCHAR) AS publish_date, CAST(var.inventory_item_id AS varchar) AS inventory_item_id, CAST(var.id AS int) AS variant_id, CAST(var.created_at AS varchar) AS variant_created_date, CAST(var.updated_at AS varchar) AS variant_updated_date from Snitch_db.maplemonk.shopifyindia_products sn left join ( select distinct a.*, b.colour, c.size from snitch_db.maplemonk.shopifyindia_product_variants a left join (select id, A.value:value::string colour from snitch_db.maplemonk.shopifyindia_product_variants, lateral flatten (input => options) A where A.value:name::string in (\'Color\',\'Colour\')) b on a.id = b.id left join (select id, A.value:value::string Size from snitch_db.maplemonk.shopifyindia_product_variants, lateral flatten (input => options) A where A.value:name::string in (\'Size\')) c on a.id = c.id ) var on var.product_id = sn.id ) group by SKU order by 2 desc) in2 ON in1.sku = in2.sku and in1.product_updated = in2.product_updated ) select *, from shopify_product union all select distinct null as \"PRODUCT_ID\", null AS \"HANDLE\", null AS \"PRODUCT_CATEGORY\", null VENDOR, null AS \"PRODUCT_TITLE\", replace(A.Value:itemSku,\'\"\',\'\') AS \"SKU\", REVERSE(SUBSTRING(REVERSE(replace(A.Value:itemSku,\'\"\',\'\') ), CHARINDEX(\'-\', REVERSE(replace(A.Value:itemSku,\'\"\',\'\') )) + 1)) AS sku_group, null AS \"PRICE\", null AS \"TAXABLE\", null AS color, null as size, null AS \"WEIGHT(KG)\", null AS \"product_CREATED\", null AS product_updated, null AS \"product_status\", null AS \"publish_scope\", null AS \"publish_date\", null AS \"inventory_item_id\", null as \"variant_id\", null as \"variant_created_date\", null as \"variant_updated_date\", \'UNICOMMERCE\' as source from snitch_db.maplemonk.SNITCH_UNICOMMERCE_GET_ORDERS_BY_IDS_TEST, LATERAL FLATTEN (INPUT => saleorderdto:saleOrderItems)A where lower(replace(A.Value:itemSku,\'\"\',\'\')) not in (select distinct loweR(sku) from shopify_product); create or replace table snitch_db.snitch.product_dim as select distinct p_t.*, m_t.final_size_mapped from snitch_db.snitch.product_dim p_t left join snitch_db.maplemonk.dim_mapping_product_dim m_t on p_t.size = m_t.size and p_t.product_category = m_t.product_category; create or replace table snitch_db.snitch.product_dim_Dupes as ( select * , CASE WHEN ROW_NUMBER() OVER (PARTITION BY sku ORDER BY PRODUCT_UPDATED DESC) = 1 THEN \'N\' ELSE \'Y\' END AS duplicate from snitch_db.snitch.product_dim ); create or replace table snitch_db.snitch.product_dim as Select PRODUCT_ID ,HANDLE ,PRODUCT_CATEGORY ,VENDOR ,PRODUCT_TITLE ,SKU ,SKU_GROUP ,PRICE ,TAXABLE , COLOR ,SIZE ,\"WEIGHT(KG)\" ,product_CREATED ,PRODUCT_UPDATED ,product_status ,publish_scope ,publish_date ,inventory_item_id ,variant_id ,variant_created_date ,variant_updated_date ,SOURCE ,FINAL_SIZE_MAPPED ,DUPLICATE from snitch_db.snitch.product_dim_Dupes where duplicate = \'N\' ;",
                    "transaction": true
                }
            ) }}
            with sample_data as (

                select * from snitch_db.information_schema.databases
            ),
            
            final as (
                select * from sample_data
            )
            select * from final
            