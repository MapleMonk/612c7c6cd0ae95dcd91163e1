{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "--creating Customer Master Table-- CREATE OR REPLACE TABLE lilgoodness_db.maplemonk.Customer_Master_Intermediate AS select fi.customer_id, concat(c.first_name,\' \',c.last_name) name, c.email, c.phone, fi.source, min(fi.order_timestamp::date) Acquisition_Date, fi.Acquisition_Product, datediff(day,min(order_timestamp),current_date) days_since_first_purchase, max(case when fi.order_timestamp=fi1.max_order_date then Product_name end) last_product, ifnull(sum(LINE_ITEM_SALES_INR),0) total_spend_inr, count(distinct order_id) total_orders, count(distinct LINE_ITEM_ID) total_items, max(case when fi.order_timestamp=fi1.max_order_date then order_id end) last_order_id, datediff(day,max(order_timestamp),current_date) days_since_last_purchase, case when count(distinct order_id)=0 then null else datediff(day,min(order_timestamp),max(order_timestamp))/count(distinct order_id) end Avg_days_between_purchases, sum(fi.DISCOUNT_INR) discount_inr, case when sum(fi.LINE_ITEM_SALES_INR)=0 then null else sum(fi.DISCOUNT_INR)/sum(fi.LINE_ITEM_SALES_INR) end discount_percent from lilgoodness_db.maplemonk.FACT_ITEMS fi left join (select * from (select *, count(id) over(partition by id order by _AIRBYTE_EMITTED_AT desc)rw from lilgoodness_db.maplemonk.Shopify_All_customers)x where rw=1) c on fi.customer_id = c.id left join (select customer_id, max(order_timestamp) max_order_date from lilgoodness_db.maplemonk.FACT_ITEMS where source=\'Shopify\' group by customer_id )fi1 on fi.customer_id=fi1.customer_id where fi.customer_id is not null and fi.source=\'Shopify\' and order_timestamp is not null group by fi.customer_id, concat(c.first_name,\' \',c.last_name), c.email, c.phone, fi.source, fi.Acquisition_Product; --creating Customer Master RFM Table-- CREATE OR REPLACE TABLE lilgoodness_db.maplemonk.Customer_Master AS select x.*, rcm.category from(select c.*, m.\"Score\" as M_Score,r.\"Score\" as R_Score,f.\"Score\" as F_Score, (r.\"Score\"*1/3+f.\"Score\"*1/3+m.\"Score\"*1/3) as RFM_Score from (select *, row_number() over(order by TOTAL_SPEND_INR desc)/ (select count(distinct CUSTOMER_ID) from lilgoodness_db.maplemonk.Customer_Master_Intermediate) as Percentile_M, row_number() over(order by DAYS_SINCE_LAST_PURCHASE asc,CUSTOMER_ID)/(select count(distinct CUSTOMER_ID) from lilgoodness_db.maplemonk.Customer_Master_Intermediate) as Percentile_R, row_number() over(order by AVG_DAYS_BETWEEN_PURCHASES asc,CUSTOMER_ID)/(select count(distinct CUSTOMER_ID) from lilgoodness_db.maplemonk.Customer_Master_Intermediate) as Percentile_F from lilgoodness_db.maplemonk.Customer_Master_Intermediate) c left join lilgoodness_db.maplemonk.RFM_Score m on c.Percentile_M > m.\"Lower Limit\" and c.Percentile_M<=m.\"Upper Limit\" left join lilgoodness_db.maplemonk.RFM_Score r on c.Percentile_R > r.\"Lower Limit\" and c.Percentile_R<=r.\"Upper Limit\" left join lilgoodness_db.maplemonk.RFM_Score f on c.Percentile_F > f.\"Lower Limit\" and c.Percentile_F<=f.\"Upper Limit\")x left join lilgoodness_db.maplemonk.SHOPIFY_RFM_CUSTOMER_CATEGORY_MAPPING rcm on x.M_Score>rcm.M_START and x.M_Score<=M_END and x.R_Score>rcm.R_START and x.R_Score<=R_END and x.F_Score>rcm.F_START and x.F_Score<=F_END;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from LILGOODNESS_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        