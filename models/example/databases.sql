{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "CREATE OR REPLACE TABLE XYXX_DB.MAPLEMONK.Shopify_All_customers AS select *,\'Shopify_India\' AS Shop_Name from XYXX_DB.MAPLEMONK.SHOPIFY_IN_CUSTOMERS; create or replace table XYXX_DB.MAPLEMONK.Shopify_UTM_Parameters as select ShopifyQL.* ,upper(coalesce(UTM_MAPPING.CHANNEL,UTM_MAPPING_REF.CHANNEL)) as ShopifyQL_MAPPED_CHANNEL ,upper(coalesce(UTM_MAPPING.SOURCE,UTM_MAPPING_REF.SOURCE)) as ShopifyQL_MAPPED_SOURCE from (select * from (select A.id ,A.name ,A.createdat ,replace(A.customerjourneysummary:\"momentsCount\",\'\"\',\'\') Moments_Count ,replace(A.customerjourneysummary:\"daysToConversion\",\'\"\',\'\') DaysToConvert ,replace(A.CUSTOMERJOURNEYSUMMARY:\"lastVisit\":\"utmParameters\":\"source\",\'\"\',\'\') LastVisit_UTM_Source ,replace(A.CUSTOMERJOURNEYSUMMARY:\"lastVisit\":\"source\",\'\"\',\'\') LastVisit_NON_UTM_Source ,replace(A.CUSTOMERJOURNEYSUMMARY:\"firstVisit\":\"utmParameters\":\"source\",\'\"\',\'\') FirstVisit_UTM_Source ,replace(A.CUSTOMERJOURNEYSUMMARY:\"firstVisit\":\"utmParameters\":\"medium\",\'\"\',\'\') FirstVisit_UTM_Medium ,replace(B.Value:\"id\",\'gid://shopify/CustomerVisit/\',\'\') Moment_ID ,replace(B.value:\"utmParameters\":\"source\",\'\"\',\'\') Last_Moment_UTM_Source ,replace(B.value:\"utmParameters\":\"medium\",\'\"\',\'\') Last_Moment_UTM_Medium ,case when Moments_Count >1 then LastVisit_UTM_Source else FirstVisit_UTM_Source end CJSummary_utm_source ,referrerdisplaytext Referrer_Name ,customerjourneysummary ,customerjourney ,coalesce(Last_Moment_UTM_Source,LastVisit_NON_UTM_Source) ShopifyQL_Unmapped_Last_Source ,rank() over (partition by name order by MOMENT_ID desc) rw from XYXX_DB.MAPLEMONK.xyxx_shopify_utm_parameters A, lateral flatten (INPUT => customerjourney:\"moments\") B ) where rw=1 ) ShopifyQL left join (select * from (select * , row_number() over (partition by lower(utm_campaign_source) order by 1) rw from xyxx_db.maplemonk.xyxx_utm_campaign_mapping) where rw=1 and utm_campaign_source is not null ) UTM_MAPPING on lower(ShopifyQL.ShopifyQL_Unmapped_Last_Source) = lower(UTM_MAPPING.utm_campaign_source) left join (select * from (select * , row_number() over (partition by lower(utm_campaign_source) order by 1) rw from xyxx_db.maplemonk.xyxx_utm_campaign_mapping) where rw=1 and utm_campaign_source is not null ) UTM_MAPPING_REF on lower(ShopifyQL.referrer_name) = lower(UTM_MAPPING_REF.utm_campaign_source) ; create or replace table xyxx_db.maplemonk.GOKWIK_SOURCE as With GO_KWIK as ( select id ,note_attributes ,A.value:\"name\" ,case when lower(note_attributes) like \'%gokwik%\' and lower(replace(A.value:\"name\",\'\"\',\'\')) like \'%utm_source%\' then UPPER(replace(A.value:\"value\",\'\"\',\'\')) end as GOKWIK_UTM_SOURCE from shopify_in_orders, LATERAL flatten (INPUT => note_attributes) A where lower(note_attributes) like \'%gokwik%\' and GOKWIK_UTM_SOURCE is not null ) Select GO_KWIK.* ,Upper(UTM_MAPPING.CHANNEL) as GOKWIK_MAPPED_CHANNEL ,Upper(UTM_MAPPING.SOURCE) as GOKWIK_MAPPED_SOURCE from GO_KWIK left join (select * from (select * , row_number() over (partition by lower(utm_campaign_source) order by 1) rw from xyxx_db.maplemonk.xyxx_utm_campaign_mapping) where rw=1 and utm_campaign_source is not null ) UTM_MAPPING on lower(GO_KWIK.GOKWIK_UTM_SOURCE) = lower(UTM_MAPPING.utm_campaign_source) ; create or replace table xyxx_db.maplemonk.Shopify_All_orders as select AO.* ,UPPER(ShopifyQL.shopifyql_mapped_channel) shopifyql_mapped_channel ,UPPER(ShopifyQL.shopifyql_mapped_source) shopifyql_mapped_source ,UPPER(ShopifyQL.FIRSTVISIT_UTM_SOURCE) Shopifyql_FIRSTVISIT_UTM_SOURCE ,UPPER(ShopifyQL.LAST_MOMENT_UTM_SOURCE) Shopifyql_LAST_MOMENT_UTM_SOURCE ,UPPER(ShopifyQL.LastVisit_NON_UTM_Source) Shopifyql_LAST_VISIT_NON_UTM_SOURCE ,UPPER(ShopifyQL.LAST_MOMENT_UTM_MEDIUM) Shopifyql_LAST_MOMENT_UTM_MEDIUM ,UPPER(ShopifyQL.FIRSTVISIT_UTM_MEDIUM) Shopifyql_FIRSTVISIT_UTM_MEDIUM ,div0(ShopifyQL.MOMENTS_COUNT,count(1) over (partition by AO.name order by 1)) MOMENTS_COUNT ,div0(ShopifyQL.DAYSTOCONVERT,count(1) over (partition by AO.name order by 1)) DAYSTOCONVERT ,UPPER(GOKWIK.GOKWIK_UTM_SOURCE) GOKWIK_UTM_SOURCE ,UPPER(GOKWIK.GOKWIK_MAPPED_CHANNEL) GOKWIK_MAPPED_CHANNEL ,UPPER(GOKWIK.GOKWIK_MAPPED_SOURCE) GOKWIK_MAPPED_SOURCE ,UPPER(Referrer_Name) Referrer_Name ,Upper(coalesce(shopifyql_mapped_source,GOKWIK_MAPPED_SOURCE,\'Direct\')) FINAL_UTM_SOURCE ,Upper(coalesce(shopifyql_mapped_channel,GOKWIK_MAPPED_CHANNEL,\'Direct\')) FINAL_UTM_CHANNEL from (select * ,case when lower(tags) like \'%cred%\' then \'CRED\' else \'Shopify_India\' end AS Shop_Name from xyxx_db.MAPLEMONK.SHOPIFY_IN_ORDERS) AO left join xyxx_db.maplemonk.Shopify_UTM_Parameters ShopifyQL on AO.name = ShopifyQL.name left join xyxx_db.maplemonk.GOKWIK_SOURCE GOKWIK on AO.ID = GOKWIK.ID ; ALTER TABLE xyxx_db.maplemonk.Shopify_All_orders RENAME COLUMN _AIRBYTE_SHOPIFY_IN_ORDERS_HASHID to _AIRBYTE_ORDERS_HASHID; CREATE OR REPLACE TABLE xyxx_db.maplemonk.Shopify_All_products AS select *,\'Shopify_India\' AS Shop_Name from XYXX_DB.MAPLEMONK.SHOPIFY_IN_PRODUCTS; ALTER TABLE xyxx_db.maplemonk.Shopify_All_products RENAME COLUMN _AIRBYTE_SHOPIFY_IN_PRODUCTS_HASHID to _AIRBYTE_PRODUCTS_HASHID; CREATE OR REPLACE TABLE xyxx_db.maplemonk.Shopify_All_products_variants AS select *,\'Shopify_India\' AS Shop_Name from XYXX_DB.MAPLEMONK.SHOPIFY_IN_PRODUCTS_VARIANTS; ALTER TABLE XYXX_DB.MAPLEMONK.SHOPIFY_ALL_PRODUCTS_VARIANTS RENAME COLUMN _AIRBYTE_SHOPIFY_IN_PRODUCTS_HASHID to _AIRBYTE_PRODUCTS_HASHID; CREATE OR REPLACE TABLE XYXX_DB.maplemonk.Shopify_All_customers_addresses AS select *,\'Shopify_India\' AS Shop_Name from XYXX_DB.MAPLEMONK.SHOPIFY_IN_CUSTOMERS_ADDRESSES; CREATE OR REPLACE TABLE XYXX_DB.maplemonk.Shopify_All_orders_items_discount AS SELECT order_id, LINE_ITEM_ID, SUM(B.VALUE:amount::FLOAT) AS DISCOUNT FROM( SELECT id AS order_id, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:discount_allocations AS discount_allocations FROM xyxx_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A)x,LATERAL FLATTEN (INPUT => x.discount_allocations)B GROUP BY ORDER_ID, LINE_ITEM_ID; CREATE OR REPLACE TABLE XYXX_db.maplemonk.Shopify_All_orders_items_tax AS SELECT order_id, LINE_ITEM_ID, SUM(B.VALUE:price::FLOAT) AS TAX, sum(B.VALUE:rate::float) as Tax_Rate FROM( SELECT id AS order_id, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:tax_lines AS tax_lines FROM xyxx_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A)x,LATERAL FLATTEN (INPUT => x.tax_lines)B GROUP BY order_id, LINE_ITEM_ID; CREATE OR REPLACE TABLE xyxx_db.maplemonk.Shopify_All_Refunds AS SELECT Name, ID AS Order_ID, Shop_name, C.value:line_item_id AS line_item_id, array_agg(Object_construct(\'Refund_Date\',try_to_timestamp(replace(A.value:\"created_at\",\'\"\',\'\')), \'Refund_Quantity\',replace(C.value:\"quantity\",\'\"\',\'\'), \'Refund_Amount\',replace(C.value:\"subtotal\",\'\"\',\'\') ) )Refund_Details, SUM(C.VALUE:quantity) AS quantity, SUM(C.VALUE:subtotal) AS subtotal FROM xyxx_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN(INPUT => refunds)A, LATERAL FLATTEN(INPUT=>A.value)B, LATERAL FLATTEN(INPUT => B.value) C WHERE C.value:line_item_id IS NOT null GROUP BY Name, ID, Shop_name, C.value:line_item_id; CREATE OR REPLACE TABLE xyxx_db.maplemonk.Shopify_All_orders_items AS WITH CTE AS (SELECT SHOP_NAME, ID::VARCHAR(16777216) AS ORDER_ID, NAME AS ORDER_NAME, CUSTOMER, replace(customer:default_address:name,\'\"\',\'\') NAME, PHONE, EMAIL, tags, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:sku::STRING AS SKU, A.VALUE:product_id::STRING AS PRODUCT_ID, A.VALUE:title::STRING AS PRODUCT_NAME, CURRENCY, CASE WHEN cancelled_at IS NOT NULL THEN \'CANCELLED\' ELSE \'Shopify_Processed\' END AS order_status, CREATED_AT::DATETIME AS order_timestamp, A.VALUE:price::FLOAT * A.VALUE:quantity::FLOAT AS LINE_ITEM_SALES, (TOTAL_SHIPPING_PRICE_SET:presentment_money:amount::FLOAT/ COUNT(ORDER_ID) OVER(PARTITION BY ORDER_ID ORDER BY ORDER_ID)) AS SHIPPING_PRICE, A.value:price/(1+A.value:tax_lines:rate), A.VALUE:quantity::FLOAT as QUANTITY, \'Shopify\' AS Source, MOMENTS_COUNT, DAYSTOCONVERT, SHOPIFYQL_FIRSTVISIT_UTM_SOURCE, SHOPIFYQL_MAPPED_SOURCE, SHOPIFYQL_MAPPED_CHANNEL, SHOPIFYQL_LAST_MOMENT_UTM_SOURCE, Shopifyql_LAST_VISIT_NON_UTM_SOURCE, Shopifyql_LAST_MOMENT_UTM_MEDIUM, Shopifyql_FIRSTVISIT_UTM_MEDIUM, FINAL_UTM_CHANNEL, FINAL_UTM_SOURCE, Referrer_Name, GOKWIK_MAPPED_SOURCE, GOKWIK_MAPPED_CHANNEL FROM xyxx_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A) SELECT CTE.*, IFNULL(T.TAX_RATE,0) AS TAX_RATE, IFNULL(D.DISCOUNT,0) AS DISCOUNT, CTE.LINE_ITEM_SALES AS GROSS_SALES_AFTER_TAX, CTE.LINE_ITEM_SALES/(1+IFNULL(T.TAX_RATE,0)) AS GROSS_SALES_BEFORE_TAX, CASE when T.TAX=0 then IFNULL(D.DISCOUNT,0) else IFNULL(D.DISCOUNT,0)/(1+IFNULL(T.TAX_RATE,0)) end AS DISCOUNT_BEFORE_TAX, CASE when T.TAX=0 then CTE.LINE_ITEM_SALES - IFNULL(D.DISCOUNT,0) else CTE.LINE_ITEM_SALES/(1+IFNULL(T.TAX_RATE,0)) - IFNULL(D.DISCOUNT,0)/(1+IFNULL(T.TAX_RATE,0)) end AS NET_SALES_BEFORE_TAX, IFNULL(T.TAX,0) AS TAX, case when T.TAX=0 then (CTE.LINE_ITEM_SALES) - IFNULL(D.DISCOUNT,0) + IFNULL(T.TAX,0) + CTE.SHIPPING_PRICE else (CTE.LINE_ITEM_SALES/(1+IFNULL(T.TAX_RATE,0))) - (IFNULL(D.DISCOUNT,0)/(1+IFNULL(T.TAX_RATE,0))) + IFNULL(T.TAX,0) + CTE.SHIPPING_PRICE end AS TOTAL_SALES, CASE WHEN R.QUANTITY IS NOT NULL THEN 1 ELSE 0 END AS IS_REFUND, R.Refund_details FROM CTE LEFT JOIN xyxx_db.maplemonk.Shopify_All_orders_items_tax T ON CTE.ORDER_ID = T.ORDER_ID AND CTE.LINE_ITEM_ID = T.LINE_ITEM_ID LEFT JOIN xyxx_db.maplemonk.Shopify_All_orders_items_discount D ON CTE.ORDER_ID = D.ORDER_ID AND CTE.LINE_ITEM_ID = D.LINE_ITEM_ID LEFT JOIN xyxx_db.maplemonk.Shopify_All_Refunds R ON CTE.ORDER_ID = R.ORDER_ID AND CTE.LINE_ITEM_ID = R.LINE_ITEM_ID; CREATE OR REPLACE TABLE xyxx_db.maplemonk.FACT_ITEMS_XYXX AS SELECT O.SHOP_NAME, O.ORDER_ID, O.ORDER_NAME, O.CUSTOMER:id::int AS customer_id, O.Name, O.EMAIL, O.PHONE, O.Tags, O.LINE_ITEM_ID, O.SKU, O.PRODUCT_ID, O.CURRENCY, O.IS_REFUND, CASE WHEN CD.city IS NULL OR CD.city = \'\' THEN \'NA\' ELSE upper(CD.city) END AS city, CASE WHEN CD.province IS NULL OR CD.province = \'\' THEN \'NA\' ELSE upper(CD.province) END AS state, CASE WHEN P.title = \'\' THEN \'NA\' ELSE P.title END AS product_name, CASE WHEN P.product_type = \'\' THEN \'NA\' ELSE P.product_type END AS category, O.order_status, O.order_timestamp, O.LINE_ITEM_SALES, O.SHIPPING_PRICE, O.QUANTITY, O.TAX, O.TAX_RATE, O.DISCOUNT, O.DISCOUNT_BEFORE_TAX, O.GROSS_SALES_AFTER_TAX, O.GROSS_SALES_BEFORE_TAX, O.NET_SALES_BEFORE_TAX, O.TOTAL_SALES, O.Source, O.MOMENTS_COUNT, O.DAYSTOCONVERT, O.SHOPIFYQL_FIRSTVISIT_UTM_SOURCE, O.SHOPIFYQL_MAPPED_SOURCE, O.SHOPIFYQL_MAPPED_CHANNEL, O.SHOPIFYQL_LAST_MOMENT_UTM_SOURCE, O.Shopifyql_LAST_VISIT_NON_UTM_SOURCE, O.Shopifyql_FIRSTVISIT_UTM_MEDIUM, O.Shopifyql_LAST_MOMENT_UTM_MEDIUM, O.FINAL_UTM_CHANNEL, O.FINAL_UTM_SOURCE, O.Referrer_Name, O.GOKWIK_MAPPED_SOURCE, O.GOKWIK_MAPPED_CHANNEL, O.REFUND_DETAILS FROM xyxx_db.maplemonk.Shopify_All_orders_items O LEFT JOIN xyxx_db.maplemonk.Shopify_All_products P ON O.PRODUCT_ID = P.id LEFT JOIN(SELECT customer_id, city, province, row_number() OVER ( partition BY customer_id ORDER BY id DESC) rowid FROM xyxx_db.maplemonk.Shopify_All_customers_addresses) AS CD ON O.CUSTOMER:id::int = CD.customer_id AND CD.rowid = 1; ALTER TABLE xyxx_db.maplemonk.FACT_ITEMS_XYXX ADD COLUMN new_customer_flag varchar(50); ALTER TABLE xyxx_db.maplemonk.FACT_ITEMS_XYXX ADD COLUMN acquisition_channel varchar(16777216); ALTER TABLE xyxx_db.maplemonk.FACT_ITEMS_XYXX ADD COLUMN acquisition_product varchar(16777216); UPDATE XYXX_DB.maplemonk.FACT_ITEMS_XYXX AS A SET A.new_customer_flag = B.flag FROM ( SELECT DISTINCT order_id, customer_id, order_timestamp, CASE WHEN order_timestamp <> Min(order_timestamp) OVER ( partition BY customer_id) THEN \'Repeat\' ELSE \'New\' END AS Flag FROM XYXX_db.maplemonk.FACT_ITEMS_XYXX)AS B WHERE A.order_id = B.order_id AND A.customer_id = B.customer_id; UPDATE XYXX_db.maplemonk.FACT_ITEMS_XYXX SET new_customer_flag = CASE WHEN new_customer_flag IS NULL THEN \'New\' ELSE new_customer_flag END; CREATE OR replace temporary TABLE xyxx_db.maplemonk.temp_source AS SELECT DISTINCT customer_id, source FROM ( SELECT DISTINCT customer_id, order_timestamp, source, Min(order_timestamp) OVER ( partition BY customer_id) firstOrderdate FROM xyxx_db.maplemonk.FACT_ITEMS_XYXX)res WHERE order_timestamp=firstorderdate; UPDATE xyxx_db.maplemonk.FACT_ITEMS_XYXX AS a SET a.acquisition_channel=b.source FROM xyxx_db.maplemonk.temp_source b WHERE a.customer_id = b.customer_id; ALTER TABLE xyxx_db.maplemonk.FACT_ITEMS_XYXX ADD COLUMN SHIPPING_TAX FLOAT; ALTER TABLE xyxx_db.maplemonk.FACT_ITEMS_XYXX ADD COLUMN SHIP_PROMOTION_DISCOUNT FLOAT; ALTER TABLE xyxx_db.maplemonk.FACT_ITEMS_XYXX ADD COLUMN GIFT_WRAP_PRICE FLOAT; ALTER TABLE xyxx_db.maplemonk.FACT_ITEMS_XYXX ADD COLUMN GIFT_WRAP_TAX FLOAT; ALTER TABLE xyxx_db.maplemonk.FACT_ITEMS_XYXX MODIFY COLUMN ORDER_STATUS VARCHAR(100); INSERT INTO XYXX_db.maplemonk.FACT_ITEMS_XYXX SELECT \'Amazon\' AS SHOP_NAME, \"amazon-order-id\" AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS NAME, NULL AS EMAIL, NULL AS PHONE, NULL AS tags, NULL AS LINE_ITEM_ID, SKU, ASIN AS PRODUCT_ID, CURRENCY, case when \"order-status\" in (\'Shipped - Returned to Seller\', \'Shipped - Returning to Seller\',\'Shipped - Rejected by Buyer\',\'Shipped - Damaged\') then 1 else 0 end AS IS_REFUND, upper(\"ship-city\") AS CITY, upper(\"ship-state\") AS STATE, \"product-name\" AS Product_Name, NULL AS CATEGORY, \"order-status\" AS ORDER_STATUS, \"Purchase-datetime-PDT\" AS ORDER_TIMESTAMP, TRY_CAST(\"item-price\" AS FLOAT) AS LINE_ITEM_SALES, TRY_CAST(\"shipping-price\" AS FLOAT) AS SHIPPING_PRICE, TRY_CAST(QUANTITY AS FLOAT) AS QUANTITY, TRY_CAST(\"item-tax\" AS FLOAT) AS TAX, null as TAX_RATE, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT_BEFORE_TAX, NULL AS GROSS_SALES_AFTER_TAX, NULL AS GROSS_SALES_BEFORE_TAX, NULL AS NET_SALES_BEFORE_TAX, ifnull(TRY_CAST(\"item-price\" AS FLOAT),0)-ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0)AS TOTAL_SALES, \'Amazon\' AS SOURCE, NULL AS MOMENTSCOUNT, NULL AS DAYSTOCONVERT, NULL AS FIRST_VISIT_UTM_SOURCE, NULL AS LAST_VISIT_MAPPED_SOURCE, NULL AS LAST_VISIT_MAPPED_CHANNEL, NULL AS LAST_MOMENT_UTM_SOURCE, NULL AS Shopifyql_LAST_VISIT_NON_UTM_SOURCE, NULL AS Shopifyql_FIRSTVISIT_UTM_MEDIUM, NULL AS Shopifyql_LAST_MOMENT_UTM_MEDIUM, NULL AS FINAL_UTM_CHANNEL, NULL AS FINAL_UTM_SOURCE, NULL AS REFERRER_NAME, NULL AS GOKWIK_MAPPED_SOURCE, NULL AS GOKWIK_MAPPED_CHANNEL, NULL AS REFUND_DETAILS, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, TRY_CAST(\"shipping-tax\" AS FLOAT) AS SHIPPING_TAX, TRY_CAST(\"ship-promotion-discount\" AS FLOAT) AS SHIP_PROMOTION_DISCOUNT, TRY_CAST(\"gift-wrap-price\" AS FLOAT) AS GIFT_WRAP_PRICE, TRY_CAST(\"gift-wrap-tax\" AS FLOAT) AS GIFT_WRAP_TAX FROM (SELECT *, CONVERT_TIMEZONE(\'UTC\',\'Asia/Kolkata\', \"purchase-date\":: DATETIME) as \"Purchase-datetime-PDT\" FROM xyxx_db.maplemonk.ASP_IN_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL )X WHERE upper(CURRENCY) = \'INR\' AND \"item-price\" NOT IN(\'\',\'0.0\'); CREATE OR REPLACE TABLE XYXX_db.maplemonk.FACT_ITEMS_TEMP_Category as select fi.*,fi.SKU AS SKU_CODE,p.name as PRODUCT_NAME_Final,coalesce(Upper(p.CATEGORY),upper(fi.category)) AS Product_Category, Upper(q.category) as Product_Super_Category from XYXX_db.maplemonk.FACT_ITEMS_XYXX fi left join (select distinct skucode, name, category from XYXX_DB.maplemonk.sku_master) p on fi.sku = p.skucode left join (select distinct product_type, category from XYXX_DB.maplemonk.product_type_category_mapping) q on fi.category=q.product_type; CREATE OR REPLACE TABLE XYXX_db.maplemonk.FACT_ITEMS_XYXX AS SELECT * FROM XYXX_db.maplemonk.FACT_ITEMS_TEMP_Category; CREATE OR replace temporary TABLE xyxx_db.maplemonk.temp_product AS SELECT DISTINCT customer_id, product_name, Row_number() OVER (partition BY customer_id ORDER BY LINE_ITEM_SALES DESC) rowid FROM ( SELECT DISTINCT customer_id, order_timestamp, product_name, LINE_ITEM_SALES , Min(order_timestamp) OVER (partition BY customer_id) firstOrderdate FROM xyxx_db.maplemonk.FACT_ITEMS_XYXX )res WHERE order_timestamp=firstorderdate; UPDATE xyxx_db.maplemonk.FACT_ITEMS_XYXX AS A SET A.acquisition_product=B.product_name FROM ( SELECT * FROM xyxx_db.maplemonk.temp_product WHERE rowid=1)B WHERE A.customer_id = B.customer_id; CREATE OR REPLACE TABLE xyxx_db.maplemonk.FACT_ITEMS_SHOPIFY_XYXX AS SELECT FI.*, RI.* ,c.return_flag Return_flag ,c.Return_quantity Return_Quantity ,Total_sales*c.Return_quantity/QUANTITY as Return_Value ,c.shipping_last_update_date last_update_date ,c.shipping_status Shipping_status FROM xyxx_db.maplemonk.FACT_ITEMS_XYXX FI left join xyxx_db.maplemonk.region_iso_3166_codes RI on Upper(FI.state) = Upper(RI.Subdivision_name) left join (select * from (select order_id ,city ,state ,saleorderitemcode ,sales_order_item_id ,shippingpackagecode ,SHIPPINGPACKAGESTATUS ,shipping_status ,order_status ,Courier ,Dispatch_Date ,Delivered_date ,Return_flag ,Return_quantity ,cancelled_quantity ,shipping_last_update_date ,days_in_shipment ,awb ,payment_method ,row_number() over (partition by order_id, split_part(saleorderitemcode,\'-\',0) order by shipping_last_update_date desc) rw from XYXX_DB.maplemonk.UNICOMMERCE_FACT_ITEMS_XYXX_FINAL where lower(marketplace) like any (\'%shopify%\',\'%amazon%\')) where rw=1 )c on FI.order_id=c.order_id and FI.line_item_id=split_part(c.saleorderitemcode,\'-\',0) where lower(SOURCE) like (\'%shopify%\'); CREATE OR REPLACE TABLE xyxx_db.maplemonk.Shopify_All_Refunds_by_Date AS SELECT replace(A.value:\"Refund_Date\",\'\"\',\'\')::date Refund_Date, ORDER_NAME, ORDER_ID, Shop_name, final_utm_channel, final_utm_source, referrer_name, gokwik_mapped_channel, gokwik_mapped_source, PRODUCT_ID, SKU, SKU_CODE, product_name_final, product_category, product_super_category, category, line_item_id, STATE, CITY, SUBDIVISION_NAME, sum(shipping_price)/COUNT(ORDER_ID) OVER(PARTITION BY Shop_name, final_utm_channel, final_utm_source, referrer_name, gokwik_mapped_channel, gokwik_mapped_source, PRODUCT_ID, SKU, SKU_CODE, product_name_final, product_category, product_super_category, category, line_item_id, STATE, CITY, SUBDIVISION_NAME ORDER BY 1) AS REFUND_SHIPPING_PRICE, SUM(A.VALUE:Refund_Quantity) AS Refund_Quantity, SUM(A.VALUE:Refund_Amount) AS Refund_Amount, ifnull(Refund_Amount,0)+ifnull(REFUND_SHIPPING_PRICE,0) Total_Return_Amount FROM xyxx_db.maplemonk.fact_items_shopify_xyxx, LATERAL FLATTEN(INPUT => refund_details) A WHERE replace(A.value:\"Refund_Date\",\'\"\',\'\')::date is not null GROUP BY Refund_Date, ORDER_NAME, ORDER_ID, Shop_name, final_utm_channel, final_utm_source, referrer_name, gokwik_mapped_channel, gokwik_mapped_source, PRODUCT_ID, SKU, SKU_CODE, product_name_final, product_category, product_super_category, category, line_item_id, STATE, CITY, SUBDIVISION_NAME ; create or replace table xyxx_db.maplemonk.Website_Product_Channel_DSR_XYXX as with RV as ( select Refund_Date ,Shop_name ,final_utm_channel ,final_utm_source ,referrer_name ,gokwik_mapped_channel ,gokwik_mapped_source ,PRODUCT_ID ,SKU ,SKU_CODE ,product_name_final ,product_category ,product_super_category ,category ,STATE ,CITY ,SUBDIVISION_NAME ,sum(Total_Return_Amount) Return_Amount ,sum(refund_Quantity) Return_Quantity from xyxx_db.maplemonk.Shopify_All_Refunds_by_Date group by Refund_Date ,Shop_name ,final_utm_channel ,final_utm_source ,referrer_name ,gokwik_mapped_channel ,gokwik_mapped_source ,PRODUCT_ID ,SKU ,SKU_CODE ,product_name_final ,product_category ,product_super_category ,category ,STATE ,CITY ,SUBDIVISION_NAME ), FI as ( select Order_timestamp::date Order_date ,Shop_name ,final_utm_channel ,final_utm_source ,referrer_name ,gokwik_mapped_channel ,gokwik_mapped_source ,PRODUCT_ID ,SKU ,SKU_CODE ,product_name_final ,product_category ,product_super_category ,category ,STATE ,CITY ,SUBDIVISION_NAME ,count(distinct order_id) Orders ,sum(ifnull(FI.LINE_ITEM_SALES,0)) LINE_ITEM_SALES ,sum(ifnull(FI.SHIPPING_PRICE,0)) SHIPPING_PRICE ,sum(ifnull(FI.QUANTITY,0)) QUANTITY ,sum(ifnull(FI.TAX,0)) TAX ,sum(ifnull(FI.DISCOUNT,0)) DISCOUNT ,sum(ifnull(FI.DISCOUNT_BEFORE_TAX,0)) DISCOUNT_BEFORE_TAX ,sum(ifnull(FI.GROSS_SALES_AFTER_TAX,0)) GROSS_SALES_AFTER_TAX ,sum(ifnull(FI.GROSS_SALES_BEFORE_TAX,0)) GROSS_SALES_BEFORE_TAX ,sum(ifnull(FI.NET_SALES_BEFORE_TAX,0)) NET_SALES_BEFORE_TAX ,sum(ifnull(FI.TOTAL_SALES,0)) TOTAL_SALES_BEFORE_EXLC_RETURNS from xyxx_db.maplemonk.fact_items_shopify_xyxx FI group by Order_date ,Shop_name ,final_utm_channel ,final_utm_source ,referrer_name ,gokwik_mapped_channel ,gokwik_mapped_source ,PRODUCT_ID ,SKU ,SKU_CODE ,product_name_final ,product_category ,product_super_category ,category ,STATE ,CITY ,SUBDIVISION_NAME ) select coalesce(FI.order_date, RV.refund_date) Date ,coalesce(FI.Shop_name,RV.shop_name) SHOP_NAME ,coalesce(FI.final_utm_channel, RV.final_utm_channel) FINAL_UTM_CHANNEL ,coalesce(FI.final_utm_source, RV.final_utm_source) final_utm_source ,coalesce(FI.referrer_name, RV.referrer_name) Referrer_name ,coalesce(FI.gokwik_mapped_channel, RV.gokwik_mapped_channel) gokwik_mapped_channel ,coalesce(FI.gokwik_mapped_source, RV.gokwik_mapped_source) GOKWIK_MAPPED_SOURCE ,coalesce(FI.PRODUCT_ID, RV.PRODUCT_ID) PRODUCT_ID ,coalesce(FI.SKU, RV.SKU) SKU ,coalesce(FI.SKU_CODE, RV.SKU_CODE) SKU_CODE ,coalesce(FI.product_name_final, RV.product_name_final) PRODUCT_NAME_FINAL ,coalesce(FI.product_category, RV.product_category) PRODUCT_CATEGORY ,coalesce(FI.product_super_category, RV.product_super_category) PRODUCT_SUPER_CATEGORY ,coalesce(FI.category, RV.category) CATEGORY ,coalesce(FI.STATE, RV.STATE) STATE ,coalesce(FI.CITY, RV.CITY) CITY ,coalesce(FI.SUBDIVISION_NAME, RV.SUBDIVISION_NAME) SUBDIVISION_NAME ,ifnull(FI.orders,0) Orders ,ifnull(FI.LINE_ITEM_SALES,0) LINE_ITEM_SALES ,ifnull(FI.SHIPPING_PRICE,0) SHIPPING_PRICE ,ifnull(FI.QUANTITY,0) QUANTITY ,ifnull(FI.TAX,0) TAX ,ifnull(FI.DISCOUNT,0) DISCOUNT ,ifnull(FI.DISCOUNT_BEFORE_TAX,0) DISCOUNT_BEFORE_TAX ,ifnull(FI.GROSS_SALES_AFTER_TAX,0) GROSS_SALES_AFTER_TAX ,ifnull(FI.GROSS_SALES_BEFORE_TAX,0) GROSS_SALES_BEFORE_TAX ,ifnull(FI.NET_SALES_BEFORE_TAX,0) NET_SALES_BEFORE_TAX ,ifnull(FI.TOTAL_SALES_BEFORE_EXLC_RETURNS,0) TOTAL_SALES_BEFORE_EXLC_RETURNS ,ifnull(RV.Return_Amount,0) Return_Amount ,(ifnull(TOTAL_SALES_BEFORE_EXLC_RETURNS,0) - ifnull(Return_Amount,0)) Total_Sales ,ifnull(RV.RETURN_QUANTITY,0) RETURN_QUANTITY from FI full outer join RV on FI.ORDER_date = RV.refund_date and lower(FI.Shop_name)= lower(RV.Shop_name) and lower(FI.final_utm_channel)= lower(RV.final_utm_channel) and lower(FI.final_utm_source)= lower(RV.final_utm_source) and lower(FI.referrer_name)= lower(RV.referrer_name) and lower(FI.gokwik_mapped_channel)= lower(RV.gokwik_mapped_channel) and lower(FI.gokwik_mapped_source)= lower(RV.gokwik_mapped_source) and lower(FI.PRODUCT_ID)= lower(RV.PRODUCT_ID) and lower(FI.SKU)= lower(RV.SKU) and lower(FI.SKU_CODE)= lower(RV.SKU_CODE) and lower(FI.product_name_final)= lower(RV.product_name_final) and lower(FI.product_category)= lower(RV.product_category) and lower(FI.product_super_category)= lower(RV.product_super_category) and lower(FI.category)= lower(RV.category) and lower(FI.STATE)= lower(RV.STATE) and lower(FI.CITY)= lower(RV.CITY) and lower(FI.SUBDIVISION_NAME)= lower(RV.SUBDIVISION_NAME) ;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from XYXX_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        