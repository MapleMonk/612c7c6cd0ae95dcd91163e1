{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table EasyEcom.maplemonk.sales_consolidated_intermediate_BC as select SHOP_NAME ,CARRIER_ID ,COURIER ,CUSTOMER_NAME ,EMAIL ,contact_num phone ,MARKETPLACE ,MARKETPLACE_ID ,ORDER_ID ,SUBORDER_ID ,INVOICE_ID ,REFERENCE_CODE ,MANIFEST_DATE ,SHIPPING_LAST_UPDATE_DATE ,SHIPPING_STATUS ,SKU ,SKU_TYPE ,PRODUCT_ID ,Upper(PRODUCTNAME) PRODUCTNAME ,CURRENCY ,IS_REFUND ,CITY ,STATE ,ORDER_STATUS ,try_to_timestamp(ORDER_DATE) Order_Date ,SHIPPING_PRICE ,NUMBER_OF_PRODUCTS_IN_COMBO ,SUBORDER_QUANTITY ,SHIPPED_QUANTITY ,RETURNED_QUANTITY ,CANCELLED_QUANTITY ,RETURN_SALES ,CANCEL_SALES ,TAX ,SUBORDER_MRP ,Upper(category) as category ,DISCOUNT ,SELLING_PRICE ,MRP_SALES ,DISCOUNT_MRP ,NEW_CUSTOMER_FLAG ,NEW_CUSTOMER_FLAG_MONTH ,WAREHOUSE_NAME ,DAYS_IN_SHIPMENT ,CHANNEL ,PAYMENT_MODE ,try_to_timestamp(IMPORT_DATE) IMPORT_DATE ,try_to_timestamp(LAST_UPDATE_DATE) LAST_UPDATE_DATE ,try_to_timestamp(invoice_date) INVOICE_DATE ,company_name ,\'Synced\' as EasyEcom_Sync_Flag from EasyEcom.maplemonk.fact_items_easyecom_BC; select * from easyecom.maplemonk.Final_customerID where contact_num in (\'9999999991\',\'9999999999\') create or replace table easyecom.maplemonk.Final_customerID as with new_phone_numbers as ( select phone, contact_num ,19700000000 + row_number() over( order by contact_num asc ) as maple_monk_id from ( select distinct right(regexp_replace(phone, \'[^a-zA-Z0-9]+\'),10) as contact_num, phone from EasyEcom.maplemonk.sales_consolidated_intermediate_BC where not (right(regexp_replace(phone, \'[^a-zA-Z0-9]+\'),10) in (\'9999999991\',\'9999999999\')) ) a ), int as ( select contact_num,email,coalesce(maple_monk_id,id2) as maple_monk_id from ( select contact_num, email,maple_monk_id,19800000000+row_number() over(partition by maple_monk_id is NULL order by email asc ) as id2 from ( select distinct coalesce(p.contact_num,right(regexp_replace(e.contact_num, \'[^a-zA-Z0-9]+\'),10)) as contact_num, e.email,maple_monk_id from ( select phone as contact_num,email from EasyEcom.maplemonk.sales_consolidated_intermediate_BC ) e left join new_phone_numbers p on p.contact_num = right(regexp_replace(e.contact_num, \'[^a-zA-Z0-9]+\'),10) ) a ) b ) select contact_num, email, maple_monk_id from int where coalesce(contact_num,email) is not NULL; create or replace table EasyEcom.maplemonk.SALES_CONSOLIDATED_BC as select coalesce(case when right(regexp_replace(phone, \'[^a-zA-Z0-9]+\'),10) in (\'9999999991\',\'9999999999\') then null else m.maple_monk_id_phone end, d.maple_monk_id) as customer_id_final, min(order_date) over(partition by customer_id_final) as acquisition_date, m.* from (select c.maple_monk_id as maple_monk_id_phone, o.* from EasyEcom.maplemonk.sales_consolidated_intermediate_BC o left join (select * from (select contact_num phone,maple_monk_id, row_number() over (partition by contact_num order by maple_monk_id asc) magic from easyecom.maplemonk.Final_customerID) where magic =1 )c on c.phone = right(regexp_replace(o.phone, \'[^a-zA-Z0-9]+\'),10))m left join (select distinct maple_monk_id, email from easyecom.maplemonk.Final_customerID where contact_num is null or contact_num in (\'9999999991\',\'9999999999\'))d on d.email = m.email ; ALTER TABLE EasyEcom.maplemonk.SALES_CONSOLIDATED_BC drop COLUMN new_customer_flag ; ALTER TABLE EasyEcom.maplemonk.SALES_CONSOLIDATED_BC ADD COLUMN new_customer_flag varchar(50); ALTER TABLE EasyEcom.maplemonk.SALES_CONSOLIDATED_BC drop COLUMN new_customer_flag_month ; ALTER TABLE EasyEcom.maplemonk.SALES_CONSOLIDATED_BC ADD COLUMN new_customer_flag_month varchar(50); ALTER TABLE EasyEcom.maplemonk.SALES_CONSOLIDATED_BC ADD COLUMN acquisition_product varchar(16777216); ALTER TABLE EasyEcom.maplemonk.SALES_CONSOLIDATED_BC ADD COLUMN acquisition_marketplace varchar(16777216); ALTER TABLE EasyEcom.maplemonk.SALES_CONSOLIDATED_BC drop COLUMN ACQUISITION_DATE ; ALTER TABLE EasyEcom.maplemonk.SALES_CONSOLIDATED_BC ADD COLUMN ACQUISITION_DATE timestamp; ALTER TABLE EasyEcom.maplemonk.SALES_CONSOLIDATED_BC ADD COLUMN SAME_DAY_ORDERNO number; UPDATE EasyEcom.maplemonk.SALES_CONSOLIDATED_BC AS A SET A.SAME_DAY_ORDERNO = B.rw FROM ( select distinct customer_id_final ,order_id ,rank() over (partition by customer_id_final, order_date order by order_date, order_id) as rw from EasyEcom.maplemonk.SALES_CONSOLIDATED_BC ) AS B Where A.order_id = B.order_id; UPDATE EasyEcom.maplemonk.SALES_CONSOLIDATED_BC AS A SET A.ACQUISITION_DATE = B.ACQUISITION_DATE FROM ( select distinct customer_id_final , min(order_Date) OVER ( partition BY customer_id_final) ACQUISITION_DATE from EasyEcom.maplemonk.SALES_CONSOLIDATED_BC B where lower(order_status) not in (\'cancelled\',\'returned\') and lower(shipping_status) not in (\'cancelled\',\'returned\') ) AS B where A.customer_id_final = B.customer_id_final; UPDATE EasyEcom.maplemonk.SALES_CONSOLIDATED_BC AS A SET A.new_customer_flag = B.flag FROM ( SELECT DISTINCT order_id, customer_id_final, Order_Date, CASE WHEN Order_Date = ACQUISITION_DATE and lower(order_status) not in (\'cancelled\',\'returned\') and lower(shipping_status) not in (\'cancelled\',\'returned\') then \'New\' WHEN Order_Date < ACQUISITION_DATE THEN \'Yet to make completed order\' ELSE \'Repeat\' END AS Flag FROM EasyEcom.maplemonk.SALES_CONSOLIDATED_BC)AS B WHERE A.order_id = B.order_id AND A.customer_id_final = B.customer_id_final AND A.order_date::date=B.Order_date::Date; UPDATE EasyEcom.maplemonk.SALES_CONSOLIDATED_BC SET new_customer_flag = CASE WHEN new_customer_flag IS NULL and lower(order_status) not in (\'cancelled\',\'returned\') and lower(shipping_status) not in (\'cancelled\',\'returned\') THEN \'New\' WHEN new_customer_flag IS NULL and lower(order_status) in (\'cancelled\',\'returned\') and lower(shipping_status) not in (\'cancelled\',\'returned\') THEN \'Yet to make completed order\' ELSE new_customer_flag END; UPDATE EasyEcom.maplemonk.SALES_CONSOLIDATED_BC AS A SET A.new_customer_flag_month = B.flag FROM ( SELECT DISTINCT order_id, customer_id_final, Order_Date, CASE WHEN Last_day(order_date, \'month\') = Last_day(acquisition_date, \'month\') THEN \'New\' WHEN Last_day(order_date, \'month\') < Last_day(acquisition_date, \'month\') THEN \'Yet to make completed order\' ELSE \'Repeat\' END AS Flag FROM EasyEcom.maplemonk.SALES_CONSOLIDATED_BC)AS B WHERE A.order_id = B.order_id AND A.customer_id_final = B.customer_id_final; UPDATE EasyEcom.maplemonk.SALES_CONSOLIDATED_BC SET new_customer_flag_month = CASE WHEN new_customer_flag_month IS NULL and lower(order_status) not in (\'cancelled\',\'returned\') and lower(shipping_status) not in (\'cancelled\',\'returned\') THEN \'New\' ELSE new_customer_flag_month END; CREATE OR replace temporary TABLE easyecom.maplemonk.temp_source_1 AS SELECT DISTINCT customer_id_final, marketplace FROM ( SELECT DISTINCT customer_id_final, order_date, marketplace, Min(order_date) OVER ( partition BY customer_id_final) firstOrderdate FROM EasyEcom.maplemonk.SALES_CONSOLIDATED_BC where lower(order_status) not in (\'cancelled\',\'returned\') and lower(shipping_status) not in (\'cancelled\',\'returned\')) res WHERE order_date=firstorderdate; UPDATE EasyEcom.maplemonk.SALES_CONSOLIDATED_BC AS a SET a.acquisition_marketplace=b.marketplace FROM easyecom.maplemonk.temp_source_1 b WHERE a.customer_id_final = b.customer_id_final; CREATE OR replace temporary TABLE easyecom.maplemonk.temp_product_1 AS SELECT DISTINCT customer_id_final, category, Row_number() OVER (partition BY customer_id_final ORDER BY SELLING_PRICE DESC) rowid FROM ( SELECT DISTINCT customer_id_final, order_date, category, SELLING_PRICE , Min(order_date) OVER (partition BY customer_id_final) firstOrderdate FROM EasyEcom.maplemonk.SALES_CONSOLIDATED_BC where lower(order_status) not in (\'cancelled\',\'returned\') and lower(shipping_status) not in (\'cancelled\',\'returned\'))res WHERE order_date=firstorderdate; UPDATE EasyEcom.maplemonk.SALES_CONSOLIDATED_BC AS A SET A.acquisition_product=B.category FROM ( SELECT * FROM easyecom.maplemonk.temp_product_1 WHERE rowid=1)B WHERE A.customer_id_final = B.customer_id_final; create or replace table easyecom.MAPLEMONK.fact_items_easyecom_returns_detailed_BC as select ORDER_ID ,INVOICE_ID ,RI.VALUE:\"suborder_id\" SUBORDER_ID ,REFERENCE_CODE ,CREDIT_NOTE_ID ,try_to_timestamp(ORDER_DATE) ORDER_DATE ,try_to_timestamp(INVOICE_DATE) INVOICE_DATE ,try_to_timestamp(RETURN_DATE) RETURN_DATE ,try_to_timestamp(MANIFEST_DATE) MANIFEST_DATE ,try_to_timestamp(IMPORT_DATE) IMPORT_DATE ,try_to_timestamp(LAST_UPDATE_DATE) LAST_UPDATE_DATE ,RI.VALUE:company_product_id COMPANY_PRODUCT_ID ,replace(RI.VALUE:productName,\'\"\',\'\') PRODUCTNAME ,RI.VALUE:product_id PRODUCT_ID ,replace(RI.VALUE:sku,\'\"\',\'\') SKU ,MARKETPLACE ,MARKETPLACE_ID ,REPLACEMENT_ORDER ,replace(RI.VALUE:return_reason,\'\"\',\'\') RETURN_REASON ,ifnull(RI.VALUE:returned_item_quantity::float,0) RETURNED_QUANTITY ,ifnull(RI.Value:credit_note_total_item_excluding_tax::float,0) RETURN_AMOUNT_WITHOUT_TAX ,ifnull(RI.Value:credit_note_total_item_tax::float,0) RETURN_TAX ,ifnull(RI.Value:credit_note_total_item_shipping_charge::float,0) RETURN_SHIPPING_CHARGE ,ifnull(RI.VALUE:credit_note_total_item_miscellaneous::float,0) RETURN_MISC ,ifnull(RI.Value:credit_note_total_item_excluding_tax::float,0) + ifnull(RI.Value:credit_note_total_item_tax::float,0) + ifnull(RI.Value:credit_note_total_item_shipping_charge::float,0)+ifnull(RI.VALUE:credit_note_total_item_miscellaneous::float,0) TOTAL_RETURN_AMOUNT from easyecom.MAPLEMONK.easyecom__returns R, LATERAL flatten(INPUT => R.ITEMS) RI where ifnull(RI.Value:credit_note_total_item_excluding_tax::float,0) + ifnull(RI.Value:credit_note_total_item_tax::float,0) + ifnull(RI.Value:credit_note_total_item_shipping_charge::float,0)+ifnull(RI.VALUE:credit_note_total_item_miscellaneous::float,0) <0; create or replace table easyecom.MAPLEMONK.EASYECOM_RETURNS_SUMMARY_BC as select MARKETPLACE ,MARKETPLACE_ID ,Return_Date ,sum(RETURNED_QUANTITY) TOTAL_RETURNED_QUANTITY ,sum(TOTAL_RETURN_AMOUNT) TOTAL_RETURN_AMOUNT ,sum(RETURN_TAX) TOTAL_RETURN_TAX ,sum(RETURN_AMOUNT_WITHOUT_TAX) TOTAL_RETURN_AMOUNT_EXCL_TAX from easyecom.MAPLEMONK.fact_items_easyecom_returns_detailed_bc group by 1,2,3 order by 3 desc;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from EASYECOM.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        