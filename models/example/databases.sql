{{ config(
            materialized='table',
                post_hook={
                    "sql": "CREATE OR REPLACE TABLE SNITCH_DB.MAPLEMONK.sku_group_sample_to_live as with live_date as ( SELECT sku_group,published_at as live_date,status FROM ( SELECT *, REVERSE(SUBSTRING(REVERSE(REPLACE(A.value:sku, \'\"\"\', \'\')), CHARINDEX(\'-\', REVERSE(REPLACE(A.value:sku, \'\"\"\', \'\'))) + 1)) AS sku_group, ROW_NUMBER() OVER (PARTITION BY sku_group ORDER BY updated_at DESC) AS rw FROM snitch_db.maplemonk.shopify_all_products, LATERAL FLATTEN (input => variants) A ) WHERE rw = 1 ), catalog AS ( SELECT SKU_GROUP, status, latest_inward_date::date as latest_inward_date, new_inward_flag, SUM(units_on_hand) AS units_on_hand FROM snitch_db.maplemonk.Inventory_planning_summary_snitch GROUP BY SKU_GROUP, new_inward_flag, status, latest_inward_date HAVING SUM(units_on_hand) > 0 ), PSLJ AS( SELECT a.SKU as sku_group, b.live_date, b.status, a.\"Factory_\'\", a.owner as editor_owner, max(try_to_date(a.Sample_Received_Date, \'DD/MM/YYYY\')) as Sample_Received_Date, a.Photoshoot_Status, a.IMAGE_SELECTION, max(try_to_date(a.Recevied_Date_)) as edit_received_date, max(try_to_date(a.Completion_Date)) as edit_completed_date, max(try_to_date(a.\"Catalogix Batch Share Date\")) as catalogix_sent_timestamp, max(try_to_date(a.\"Catalogix Batch Recevied Date\")) as catalogix_received_timestamp, max(try_to_date(a.live_on_shopify_date, \'DD/MM/YYYY\')) as live_on_shopify_date, max(try_to_date(a.final_shoot_date, \'DD/MM/YYYY\')) as shoot_date, FROM snitch_db.maplemonk.pslj_PSLJ a left join live_date b on a.sku = b.sku_group group by 1,2,3,4,5,7,8 ), RTS AS ( SELECT SKU as sku_group, CLASS, REPEAT, VENDOR, WAEHOUSE, DESCIPTON, to_date(DELIVEY_DATE_, \'DD/MM/YYYY\') AS DELIVERY_DATE, online_qty, QC_STATUS, QC_REPORT FROM snitch_db.maplemonk.catalog_main where to_date(DELIVEY_DATE_, \'DD/MM/YYYY\') >= current_date ), main_data as ( select coalesce(a.sku_group,c.SKU_GROUP) as sku_group, a.Sample_Received_Date::date as sample_received_date, a.live_date::date as live_date, a.Photoshoot_Status, a.shoot_date::date as shoot_date, a.edit_received_date, a.edit_completed_date, a.catalogix_sent_timestamp, a.catalogix_received_timestamp, c.units_on_hand, c.latest_inward_date as inward_date, coalesce(a.status,c.status) as status, DATEDIFF(day, a.Sample_Received_Date, a.live_date) AS sr_live_tat, DATEDIFF(day, a.Sample_Received_Date, a.shoot_date) AS shoot_tat, datediff(day,a.shoot_date,a.edit_received_date) as shootdone_editreceived_tat, datediff(day,a.edit_received_date,a.edit_completed_date) as edit_tat, datediff(day,a.edit_completed_date,a.catalogix_sent_timestamp) as editdone_catalogixsent_tat, timediff(hour,a.catalogix_sent_timestamp,a.catalogix_received_timestamp) as catalogix_tat, timediff(hour,a.catalogix_received_timestamp,a.live_date) as live_tat from PSLJ a full outer join catalog c on a.sku_group=c.sku_group ) select *, CASE when live_date is null and sample_received_date is null then \'SAMPLE_NOT_RECEIVED\' when live_date is null and sample_received_date is not null and shoot_date is null then \'SHOOT_NOT_DONE\' when live_date is null and sample_received_date is not null and shoot_date is not null and edit_received_date is null then \'NOT_SEND_TO_EDIT\' when live_date is null and sample_received_date is not null and shoot_date is not null and edit_received_date is not null and edit_completed_date is null then \'EDITING\' when live_date is null and sample_received_date is not null and shoot_date is not null and edit_received_date is not null and edit_completed_date is not null and catalogix_sent_timestamp is null then \'NOT_SEND_TO_CATALOGIX\' when live_date is null and sample_received_date is not null and shoot_date is not null and edit_received_date is not null and edit_completed_date is not null and catalogix_sent_timestamp is not null and catalogix_received_timestamp is null then \'CATALOGIX\' when live_date is null and sample_received_date is not null and shoot_date is not null and edit_received_date is not null and edit_completed_date is not null and catalogix_sent_timestamp is not null and catalogix_received_timestamp is not null and inward_date is not null then \'QC\' when live_date is null and sample_received_date is not null and shoot_date is not null and edit_received_date is not null and edit_completed_date is not null and catalogix_sent_timestamp is not null and catalogix_received_timestamp is not null and inward_date is null then \'CATALOGING_DONE_BUT_NOT_INWARDED\' else \'NO_ISSUE\' end as final_status from main_data",
                    "transaction": true
                }
            ) }}
            with sample_data as (

                select * from snitch_db.information_schema.databases
            ),
            
            final as (
                select * from sample_data
            )
            select * from final
            