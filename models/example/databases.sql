{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "CREATE OR REPLACE TABLE snitch_db.maplemonk.offline_sales_update AS WITH SALES AS ( SELECT DATE_TRUNC(\'day\', ORDER_TIMESTAMP) AS order_date, MARKETPLACE_MAPPED, SUM(CASE WHEN EXTRACT(HOUR FROM ORDER_TIMESTAMP) < 13 THEN SELLING_PRICE ELSE 0 END) AS sales_before_1pm, SUM(CASE WHEN EXTRACT(HOUR FROM ORDER_TIMESTAMP) < 16 THEN SELLING_PRICE ELSE 0 END) AS sales_before_4pm, SUM(CASE WHEN EXTRACT(HOUR FROM ORDER_TIMESTAMP) < 19 THEN SELLING_PRICE ELSE 0 END) AS sales_before_7pm, SUM(CASE WHEN EXTRACT(HOUR FROM ORDER_TIMESTAMP) < 22 THEN SELLING_PRICE ELSE 0 END) AS sales_before_10pm, SUM(selling_price) AS clossing FROM SNITCH_DB.MAPLEMONK.STORE_fact_items_offline WHERE LOWER(ORDER_STATUS) LIKE \'%process%\' GROUP BY DATE_TRUNC(\'day\', ORDER_TIMESTAMP), MARKETPLACE_MAPPED ORDER BY order_date ), RETURNS AS ( SELECT DATE_TRUNC(\'day\', ORDER_TIMESTAMP) AS return_order_date, MARKETPLACE_MAPPED AS return_MARKETPLACE_MAPPED, COALESCE(SUM(CASE WHEN EXTRACT(HOUR FROM ORDER_TIMESTAMP) < 13 THEN SELLING_PRICE ELSE 0 END), 0) AS Returns_before_1pm, COALESCE(SUM(CASE WHEN EXTRACT(HOUR FROM ORDER_TIMESTAMP) < 16 THEN SELLING_PRICE ELSE 0 END), 0) AS Returns_before_4pm, COALESCE(SUM(CASE WHEN EXTRACT(HOUR FROM ORDER_TIMESTAMP) < 19 THEN SELLING_PRICE ELSE 0 END), 0) AS Returns_before_7pm, COALESCE(SUM(CASE WHEN EXTRACT(HOUR FROM ORDER_TIMESTAMP) < 22 THEN SELLING_PRICE ELSE 0 END), 0) AS Returns_before_10pm, SUM(selling_price) AS closing_return FROM SNITCH_DB.MAPLEMONK.store_returns_fact_items GROUP BY return_order_date, return_MARKETPLACE_MAPPED ORDER BY return_order_date ) SELECT A.*, B.*, sales_before_1pm - COALESCE(Returns_before_1pm, 0) AS Net_sales_before_1pm, sales_before_4pm - COALESCE(Returns_before_4pm, 0) AS Net_sales_before_4pm, sales_before_7pm - COALESCE(Returns_before_7pm, 0) AS Net_sales_before_7pm, sales_before_10pm - COALESCE(Returns_before_10pm, 0) AS Net_sales_before_10pm, clossing - COALESCE(closing_return, 0) AS Clossing_sales FROM SALES A LEFT JOIN RETURNS B ON A.order_date = B.return_order_date AND A.MARKETPLACE_MAPPED = B.return_MARKETPLACE_MAPPED; Create or replace Table snitch_db.maplemonk.MIS_Offline_stores AS With Sales as ( SELECT DATE_TRUNC(\'MONTH\',ORDER_DATE::DATE) AS Month, ORDER_DATE, MARKETPLACE_MAPPED, COUNT(DISTINCT ORDER_NAME) AS Total_Orders, COUNT(DISTINCT PHONE) AS TOTAL_CUSTOMERS, SUM(SUBORDER_QUANTITY) AS QTY, COUNT(DISTINCT SKU_GROUP) AS SKU_GROUP, DIV0((SUM(SELLING_PRICE) - SUM(TAX)), SUM(SUBORDER_QUANTITY)) AS ASP, DIV0((SUM(SELLING_PRICE) - SUM(TAX)), COUNT(DISTINCT ORDER_NAME)) AS AOV, DIV0((SUM(SELLING_PRICE) - SUM(TAX)), COUNT(DISTINCT PHONE)) AS AOV_Customer, SUM(MRP * SUBORDER_QUANTITY)AS MRP_SALES, SUM(SELLING_PRICE) - SUM(TAX) AS Gross_Sales_Pre_GST, sum(tax) as GST , SUM(SELLING_PRICE) AS Gross_Sales_Post_GST, SUM(discount) AS Discount, SUM(COGS_PRICE * SUBORDER_QUANTITY) AS SALES_COGS FROM SNITCH_DB.MAPLEMONK.STORE_fact_items_offline WHERE ORDER_STATUS =\'Processed\' and category !=\'CARRY BAG\' GROUP BY 1, 2,3 ) , store_size as ( select * from SNITCH_DB.MAPLEMONK.Store_Size ), returns as ( SELECT DATE_TRUNC(\'MONTH\',ORDER_DATE::DATE) AS Month, ORDER_DATE, MARKETPLACE_MAPPED, SUM(SELLING_PRICE) - SUM(TAX) AS Gross_Returns_Pre_GST, SUM(SELLING_PRICE) AS Gross_returns_Post_GST, SUM(COGS_PRICE * SUBORDER_QUANTITY) AS Returns_COGS FROM SNITCH_DB.MAPLEMONK.store_returns_fact_items GROUP BY 1, 2,3 ) select COALESCE(a.Month,b.Month) as month, COALESCE(a.ORDER_DATE,b.ORDER_DATE) as DAY, CASE WHEN upper(COALESCE(a.MARKETPLACE_MAPPED,b.MARKETPLACE_MAPPED)) LIKE \'%JAYANAGAR%\' THEN \'SNITCH - JAYANAGAR\' WHEN upper(COALESCE(a.MARKETPLACE_MAPPED,b.MARKETPLACE_MAPPED)) LIKE \'%VR%\' THEN \'SNITCH VR MALL\' WHEN upper(COALESCE(a.MARKETPLACE_MAPPED,b.MARKETPLACE_MAPPED)) LIKE \'%VARACHHA%\' THEN \'SNITCH MBH\' WHEN upper(COALESCE(a.MARKETPLACE_MAPPED,b.MARKETPLACE_MAPPED)) LIKE \'%MBH\' THEN \'SNITCH MBH\' WHEN upper(COALESCE(a.MARKETPLACE_MAPPED,b.MARKETPLACE_MAPPED)) LIKE \'%BRIGADE%\' THEN \'SNITCH BRIGADE ROAD\' WHEN upper(COALESCE(a.MARKETPLACE_MAPPED,b.MARKETPLACE_MAPPED)) LIKE \'%TRION%\' THEN \'SNITCH TRION -FR\' WHEN upper(COALESCE(a.MARKETPLACE_MAPPED,b.MARKETPLACE_MAPPED)) LIKE \'%HSR%\' THEN \'SNITCH HSR LAYOUT\' WHEN upper(COALESCE(a.MARKETPLACE_MAPPED,b.MARKETPLACE_MAPPED)) LIKE \'%GANDHI%\' THEN \'SNITCH GANDHI NAGAR\' WHEN upper(COALESCE(a.MARKETPLACE_MAPPED,b.MARKETPLACE_MAPPED)) LIKE \'%BEL%\' THEN \'SNITCH BEL ROAD\' WHEN upper(COALESCE(a.MARKETPLACE_MAPPED,b.MARKETPLACE_MAPPED)) LIKE \'%EVA%\' THEN \'SNITCH EVA MALL\' ELSE COALESCE(a.MARKETPLACE_MAPPED,b.MARKETPLACE_MAPPED) END AS MARKETPLACE_MAPPED, a.Total_Orders, a.TOTAL_CUSTOMERS, a.QTY, a.SKU_GROUP, a.ASP, a.AOV, a.AOV_Customer, a.MRP_SALES, a.Gross_Sales_Pre_GST, a.Gross_Sales_Post_GST, a.Discount, A.GST, a.SALES_COGS, b.Gross_Returns_Pre_GST, b.Gross_returns_Post_GST, b.Returns_COGS, c.Size from sales a FULL OUTER join returns b on a.Month =b.Month AND a.ORDER_DATE =b.ORDER_DATE and a.MARKETPLACE_MAPPED =b.MARKETPLACE_MAPPED Left Join store_size c on a.MARKETPLACE_MAPPED = c.MARKETPLACE_MAPPED; CREATE OR REPLACE TABLE snitch_db.maplemonk.Offline_Detailed_Summary AS WITH Sales AS ( SELECT DATE_TRUNC(\'Month\', ORDER_DATE::DATE) AS Month, DATE_TRUNC(\'Day\', ORDER_DATE::DATE) AS Date, branch_code, SUM(selling_price) AS TODAY_SALES, COUNT(DISTINCT ORDER_NAME) AS Total_Orders, SUM(SUBORDER_QUANTITY) AS QTY, DIV0((SUM(SELLING_PRICE) - SUM(TAX)), SUM(SUBORDER_QUANTITY)) AS ASP, DIV0((SUM(SELLING_PRICE) - SUM(TAX)), COUNT(DISTINCT ORDER_NAME)) AS ATV, DIV0(SUM(SUBORDER_QUANTITY), COUNT(DISTINCT ORDER_NAME)) AS UPT, DIV0(SUM(MRP * SUBORDER_QUANTITY) - SUM(SELLING_PRICE - TAX), SUM(MRP * SUBORDER_QUANTITY)) AS DISC, SUM(SUM(selling_price)) OVER (PARTITION BY branch_code, DATE_TRUNC(\'month\', ORDER_DATE::DATE) ORDER BY DATE_TRUNC(\'day\', ORDER_DATE::DATE) ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS MTD_SALES FROM SNITCH_DB.MAPLEMONK.STORE_fact_items_offline WHERE ORDER_STATUS = \'Processed\' AND category != \'CARRY BAG\' GROUP BY 1, 2, 3 ), Targets AS ( SELECT TRY_TO_DATE(\"Date \", \'DD/MM/YYYY\') AS DATE , CASE WHEN upper(\"Branch \") LIKE \'%JAYANAGAR%\' THEN \'SNITCH - COCO - JAYANAGAR\' WHEN upper(\"Branch \") LIKE \'%VR%\' THEN \'SNITCH - FOCO - VR MALL\' WHEN upper(\"Branch \") LIKE \'%VARACHHA%\' THEN \'SNITCH - FOCO - MBH\' WHEN upper(\"Branch \") LIKE \'%MBH\' THEN \'SNITCH - FOCO - MBH\' WHEN upper(\"Branch \") LIKE \'%BRIGADE%\' THEN \'SNITCH - COFO - BRIGADE ROAD\' WHEN upper(\"Branch \") LIKE \'%TRION%\' THEN \'SNITCH - FOCO - TRION\' WHEN upper(\"Branch \") LIKE \'%HSR%\' THEN \'SNITCH - COCO - HSR LAYOUT\' WHEN upper(\"Branch \") LIKE \'%GANDHI%\' THEN \'SNITCH - FOCO - GANDHI NAGAR\' WHEN upper(\"Branch \") LIKE \'%BEL%\' THEN \'SNITCH - COCO - BEL ROAD\' WHEN upper(\"Branch \") LIKE \'%EVA%\' THEN \'SNITCH - FOCO - EVA\' WHEN upper(\"Branch \") LIKE \'%SHYAMAL%\' THEN \'SNITCH - FOCO - SHYAMAL\' WHEN upper(\"Branch \") LIKE \'%AMANORA%\' THEN \'SNITCH - COFO - AMANORA\' WHEN upper(\"Branch \") LIKE \'%SARATH%\' THEN \'SNITCH - COFO - SARATH CITY\' ELSE \"Branch \" END AS Branch ,REPLACE(\"MTD \", \',\', \'\')::INT AS MTD ,REPLACE(\"Target \", \',\', \'\')::INT AS TARGET, CASE WHEN upper(\"Branch \") LIKE \'%JAYANAGAR%\' THEN 3 WHEN upper(\"Branch \") LIKE \'%VR%\' THEN 5 WHEN upper(\"Branch \") LIKE \'%VARACHHA%\' THEN 4 WHEN upper(\"Branch \") LIKE \'%MBH%\' THEN 4 WHEN upper(\"Branch \") LIKE \'%BRIGADE%\' THEN 6 WHEN upper(\"Branch \") LIKE \'%TRION%\' THEN 7 WHEN upper(\"Branch \") LIKE \'%HSR%\' THEN 13 WHEN upper(\"Branch \") LIKE \'%GANDHI%\' THEN 15 WHEN upper(\"Branch \") LIKE \'%BEL%\' THEN 14 WHEN upper(\"Branch \") LIKE \'%EVA%\' THEN 12 WHEN upper(\"Branch \") LIKE \'%SHYAMAL%\' THEN 18 WHEN upper(\"Branch \") LIKE \'%AMANORA%\' THEN 17 WHEN upper(\"Branch \") LIKE \'%SARATH%\' THEN 16 ELSE NULL END AS Branch_Code FROM SNITCH_DB.MAPLEMONK.MTD_TARGET ), Multies AS ( SELECT DATE_TRUNC(\'Day\', ORDER_DATE::DATE) AS Date, Branch_code, COUNT(DISTINCT order_id) AS Multies FROM ( SELECT ORDER_DATE, Branch_code, order_id, SUM(SHIPPING_QUANTITY) AS QTY FROM SNITCH_DB.MAPLEMONK.STORE_fact_items_offline WHERE SKU_GROUP NOT LIKE \'CB%\' GROUP BY 1, 2, 3 ) WHERE QTY >= 2 GROUP BY 1, 2 ), Returns AS ( SELECT DATE_TRUNC(\'Month\', ORDER_DATE::DATE) AS Month, DATE_TRUNC(\'Day\', ORDER_DATE::DATE) AS Date, BRANCH_CODE, SUM(selling_price) AS TODAY_Returns, SUM(SUBORDER_QUANTITY) AS Return_qty, SUM(MRP * SUBORDER_QUANTITY) AS MRP_Returns FROM SNITCH_DB.MAPLEMONK.store_returns_fact_items WHERE ORDER_STATUS = \'Processed\' AND category != \'CARRY BAG\' GROUP BY 1, 2, 3 ), Mapping as ( SELECT branch_code, marketplace_mapped FROM ( SELECT branch_code, marketplace_mapped, DATE_TRUNC(\'day\', ORDER_TIMESTAMP) AS order_date, ROW_NUMBER() OVER (PARTITION BY branch_code ORDER BY DATE_TRUNC(\'day\', ORDER_TIMESTAMP) DESC) AS rn FROM snitch_db.maplemonk.STORE_fact_items_offline ) subquery WHERE rn = 1 ) SELECT DATE_TRUNC(\'Month\', a.Date::DATE) AS Month, a.Date, a.Branch_code, e.marketplace_mapped, a.TODAY_SALES - COALESCE(d.TODAY_Returns, 0) AS Today_Sales, b.target, SUM(SUM(a.TODAY_SALES - COALESCE(d.TODAY_Returns, 0))) OVER (PARTITION BY a.Branch_code, DATE_TRUNC(\'month\', a.Date::DATE) ORDER BY DATE_TRUNC(\'day\', a.Date::DATE) ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS MTD_SALES, b.MTD, a.Total_Orders AS Bills, COALESCE(c.Multies, 0) AS Multies, a.QTY - COALESCE(d.Return_qty, 0) AS Qty, DIV0(SUM(a.TODAY_SALES - COALESCE(d.TODAY_Returns, 0)), a.Total_Orders) AS ATV, DIV0(SUM(a.QTY - COALESCE(d.Return_qty, 0)), a.Total_Orders) AS UPT, DIV0(SUM(a.TODAY_SALES - COALESCE(d.TODAY_Returns, 0)), SUM(a.QTY - COALESCE(d.Return_qty, 0))) AS ASP FROM Sales a LEFT JOIN Targets b ON a.Date = b.DATE AND lower(a.Branch_code) = lower(b.Branch_Code) LEFT JOIN Multies c ON a.Date = c.Date AND lower(a.Branch_Code) = lower(c.Branch_Code) LEFT JOIN Returns d ON a.Date = d.Date AND lower(a.Branch_Code) = lower(d.Branch_Code) LEFT JOIN Mapping e on lower(a.Branch_code) = lower(e.Branch_Code) GROUP BY DATE_TRUNC(\'Month\', a.Date::DATE), a.Date, a.Branch_Code,e.marketplace_mapped, a.TODAY_SALES, d.TODAY_Returns, b.target, a.Total_Orders, c.Multies, a.QTY, d.Return_qty, b.MTD ORDER BY a.Date DESC;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from snitch_db.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        