{{ config(
            materialized='table',
                post_hook={
                    "sql": "create or replace table hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report as with Amazon_sales_base as ( select distinct * from hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report_intermediate where lower(report_type) = \'amazon sales\' and lower(ORDER_STATUS) not like \'%cancel%\' ), Amazon_cancel_base as ( select distinct * from hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report_intermediate where lower(report_type) = \'amazon sales\' and lower(ORDER_STATUS) like \'%cancel%\' ), Amazon_return_base as ( select distinct * from hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report_intermediate where lower(report_type) in (\'amazon return\', \'amazon replacement\') ), EE_flipkart_sales_base as ( select distinct * from hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report_intermediate where lower(report_type) = \'easyecom sale\' and lower(ORDER_STATUS) not like \'%cancel%\' and lower(marketplace) = \'flipkart\' ), EE_flipkart_cancel_base as ( select distinct * from hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report_intermediate where lower(report_type) = \'easyecom sale\' and lower(ORDER_STATUS) like \'%cancel%\' and lower(marketplace) = \'flipkart\' ), EE_rest_MP_base as ( select distinct * from hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report_intermediate where lower(report_type) = \'easyecom sale\' and lower(marketplace) <> \'flipkart\' ), EE_return_base as ( select distinct * from hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report_intermediate where lower(report_type) = \'easyecom return\' ), blank_report as ( select distinct * from hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report_intermediate where lower(report_type) is null ), emiza_easyecom_base as ( select distinct * , case when marketplace = \'Amazon.in\' then \'Amazon EasyShip\' else marketplace end as marketplace_type, case when marketplace = \'Amazon.in\' then \'Amazon Sales\' else report_type end as reports from hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report_intermediate where lower(report_type) = \'easyecom sale\' and lower(ORDER_STATUS) not like \'%cancel%\' and marketplace IN (\'Shopify\', \'Flipkart\', \'CRED-API\', \'Yhimito National_sale\', \'Myntra PPMP\', \'Amazon.in\', \'GGN KIRANAKART TECHNOLOGIES PVT LTD\', \'MUM KIRANAKART TECHNOLOGIES PVT LTD\', \'TAMS GLOBAL PRIVATE LIMITED\', \'Scootsy Logistics Pvt LTD SGN\', \'MOONSTONE VENTURES LLP\', \'BLR KIRANAKART TECHNOLOGIES PVT LTD\', \'MUKUL VASHISHT R R SOLUTION_sale\', \'Scootsy Logistics Pvt LTD GGNFC\', \'Nykaa E-Retail Private Limited DEL2\', \'Nykaa BLR Two\', \'UNIMARCK PHARMA INDIA LTD_sale\', \'Ravi Enterprise_sale\', \'Aditya Mittal\', \'Nishant Poddar_sale\', \'CHN KIRANAKART TECHNOLOGIES PVT LTD\', \'HYD KIRANAKART TECHNOLOGIES PVT LTD\', \'PUN KIRANAKART TECHNOLOGIES PVT LTD\', \'KOL KIRANAKART TECHNOLOGIES PVT LTD\', \'Kufy Fabrics Private Limited_sale\', \'HAR KIRANAKART TECHNOLOGIES PVT LTD\', \'KIRANAKART TECHNOLOGIES PVT LTD MH-NLM-DRY-BLR\') ), shopify_shipping_charges as ( select REFERENCE_CODE, sum(FINAL_SHIPPING) as FINAL_SHIPPING from hox_db.maplemonk.HOX_BLANKO_Shopify_logistics_cost group by 1 ), Emiza_cost as ( select REFERENCE_CODE, marketplace_type as marketplace, reports as report_type, sum(EMIZA_COST)as EMIZA_COST from ( select distinct a.*, div0(EMIZA_COST, count(1) over (partition by a.report_month order by 1)) as EMIZA_COST from emiza_easyecom_base a left join ( select distinct date(try_cast(MONTH as timestamp)) as month_date, try_cast(EMIZA_COST as float) as EMIZA_COST from hox_db.maplemonk.Emiza_warehousing_Cost )as o on a.report_month = o.month_date )as o group by 1,2,3 ), Inward_logistics as ( select distinct date(try_cast(MONTH_DATE as timestamp)) as month_date, try_cast(TRL as float) as TRL, try_cast(PORTER as float) as PORTER, try_cast(V_TRANS as float) as V_TRANS, try_cast(RBL_BANK_RAZORPAY as float) as RBL_BANK_RAZORPAY, try_cast(INWARD_LOGISTIC_COST as float) as INWARD_LOGISTIC_COST from HOX_DB.MAPLEMONK.Inward_logistics_cost ), amazon_charges as ( select report_type, REFERENCE_CODE, ORDER_STATUS, final_SKU, date(report_date) as report_date, sum(coalesce(chargeback,0))as chargeback, sum(coalesce(COMMISSION_VALUE,0))as COMMISSION_VALUE, sum(coalesce(CLOSING_FEES,0)) as CLOSING_FEES, (sum(coalesce(FBA_pick_pack,0)) + sum(coalesce(fba_removal_fees,0))) as FBA_pick_pack, sum(coalesce(FINAL_SHIPPING,0)) as FINAL_SHIPPING, sum(coalesce(STORAGE_COST,0)) as storage_cost, sum(coalesce(fba_removal_fees,0)) as fba_removal_fees from ( select a.*, coalesce(b.common_sku, a.SKU) as final_SKU from hox_db.maplemonk.HOX_BLANKO_amazon_marketplace_fees a left join ( select order_id, sku, common_sku from HOX_DB.MAPLEMONK.HOX_DB_amazon_fact_items group by 1,2,3 )b on a.Reference_Code = b.order_id and lower(a.SKU) = lower(b.SKU) )as o group by 1,2,3,4,5 ), flipkart_charges as ( select REFERENCE_CODE, SKU, date(report_date)as report_date, sum(COMMISSION_VALUE)as COMMISSION_VALUE, sum(\"Closing_fees(fixed)\") as CLOSING_FEES, sum(COLLECTION_FEES) as COLLECTION_FEES, sum(FINAL_SHIPPING) as FINAL_SHIPPING from hox_db.maplemonk.HOX_BLANKO_flipkart_marketplace_fees group by 1,2,3 ), packaging_material_Data as ( select REFERENCE_CODE, MARKETPLACE, REPORT_TYPE, sum(case when lower(MARKETPLACE) = \'amazon fba\' then 0 when (REPORT_DATE between date(\'2023-08-01\') and date(\'2023-11-30\')) then 0 else packaging_cost end) as packaging_cost, sum(FINAL_ORDER_WEIGHT) as FINAL_ORDER_WEIGHT from hox_db.maplemonk.HOX_BLANKO_packaging_material group by 1,2,3 ), final_data_cost as ( Select distinct a.*, div0(chargeback, count(1) over (partition by a.Reference_Code, a.SKU, lower(a.REPORT_TYPE), date(a.REPORT_DATE) order by 1)) as chargeback, div0(COMMISSION_VALUE, count(1) over (partition by a.Reference_Code, a.SKU, lower(a.REPORT_TYPE),date(a.REPORT_DATE) order by 1)) as COMMISSION_VALUE, div0(CLOSING_FEES, count(1) over (partition by a.Reference_Code, a.SKU, lower(a.REPORT_TYPE), date(a.REPORT_DATE) order by 1)) as CLOSING_FEES, div0(FBA_pick_pack, count(1) over (partition by a.Reference_Code, a.SKU, lower(a.REPORT_TYPE), date(a.REPORT_DATE) order by 1)) as FBA_pick_pack, div0(FINAL_SHIPPING, count(1) over (partition by a.Reference_Code, a.SKU, lower(a.REPORT_TYPE), date(a.REPORT_DATE) order by 1)) as FINAL_SHIPPING, div0(STORAGE_COST, count(1) over (partition by a.Reference_Code, a.SKU, lower(a.REPORT_TYPE), date(a.REPORT_DATE) order by 1)) as STORAGE_COST from Amazon_sales_base a left join amazon_charges b on a.REFERENCE_CODE = b.REFERENCE_CODE and a.SKU = b.final_SKU and lower(a.REPORT_TYPE) = lower(b.REPORT_TYPE) and date(a.REPORT_DATE) = date(b.REPORT_DATE) union select *, 0 as chargeback, 0 as COMMISSION_VALUE, 0 as CLOSING_FEES, 0 as Pick_and_Pack_fees, 0 as FINAL_SHIPPING, 0 as STORAGE_COST from Amazon_cancel_base union select *, 0 as chargeback, 0 as COMMISSION_VALUE, 0 as CLOSING_FEES, 0 as Pick_and_Pack_fees, 0 as FINAL_SHIPPING, 0 as STORAGE_COST from Amazon_return_base union select *, 0 as chargeback, 0 as COMMISSION_VALUE, 0 as CLOSING_FEES, 0 as Pick_and_Pack_fees, 0 as FINAL_SHIPPING, 0 as STORAGE_COST from blank_report union select a.*, 0 as chargeback, div0(COMMISSION_VALUE, count(1) over (partition by a.Reference_Code, a.SKU, date(a.report_date) order by 1)) as COMMISSION_VALUE, ( div0(CLOSING_FEES, count(1) over (partition by a.Reference_Code, a.SKU, date(a.report_date) order by 1)) + div0(COLLECTION_FEES, count(1) over (partition by a.Reference_Code, a.SKU, date(a.report_date) order by 1)) ) as CLOSING_FEES, 0 as FBA_pick_pack, div0(FINAL_SHIPPING, count(1) over (partition by a.Reference_Code, a.SKU, date(a.report_date) order by 1)) as FINAL_SHIPPING, 0 as STORAGE_COST from EE_flipkart_sales_base a left join flipkart_charges b on a.REFERENCE_CODE = b.REFERENCE_CODE and a.SKU = b.SKU and date(a.report_date) = date(b.report_date) union select *, 0 as chargeback, 0 as COMMISSION_VALUE, 0 as CLOSING_FEES, 0 as Pick_and_Pack_fees, 0 as FINAL_SHIPPING, 0 as STORAGE_COST from EE_flipkart_cancel_base union select a.*, 0 as chargeback, 0 as COMMISSION_VALUE, 0 as CLOSING_FEES, 0 as Pick_and_Pack_fees, div0(b.FINAL_SHIPPING, count(1) over (partition by a.Reference_Code, date(a.REPORT_DATE) order by 1))as FINAL_SHIPPING, 0 as STORAGE_COST from EE_rest_MP_base a left join shopify_shipping_charges b on a.REFERENCE_CODE = b.REFERENCE_CODE union select *, 0 as chargeback, 0 as COMMISSION_VALUE, 0 as CLOSING_FEES, 0 as Pick_and_Pack_fees, 0 as FINAL_SHIPPING, 0 as STORAGE_COST from EE_return_base ), ILC as ( select REFERENCE_CODE, MARKETPLACE, REPORT_TYPE, sum(Inward_logistics_Cost) as Inward_logistics_Cost from ( select o.*, div0(INWARD_LOGISTIC_COST, count(1) over (partition by o.report_month order by 1)) as Inward_logistics_Cost from ( select * from final_data_cost where lower(report_type) in (\'easyecom sale\', \'amazon sales\') and lower(ORDER_STATUS) not like \'%cancel%\' and marketplace IN (\'Shopify\', \'Flipkart\', \'CRED-API\', \'Yhimito National_sale\', \'Myntra PPMP\', \'Amazon EasyShip\', \'Amazon FBA\', \'GGN KIRANAKART TECHNOLOGIES PVT LTD\', \'MUM KIRANAKART TECHNOLOGIES PVT LTD\', \'TAMS GLOBAL PRIVATE LIMITED\', \'Scootsy Logistics Pvt LTD SGN\', \'MOONSTONE VENTURES LLP\', \'BLR KIRANAKART TECHNOLOGIES PVT LTD\', \'MUKUL VASHISHT R R SOLUTION_sale\', \'Scootsy Logistics Pvt LTD GGNFC\', \'Nykaa E-Retail Private Limited DEL2\', \'Nykaa BLR Two\', \'UNIMARCK PHARMA INDIA LTD_sale\', \'Ravi Enterprise_sale\', \'Aditya Mittal\', \'Nishant Poddar_sale\', \'CHN KIRANAKART TECHNOLOGIES PVT LTD\', \'HYD KIRANAKART TECHNOLOGIES PVT LTD\', \'PUN KIRANAKART TECHNOLOGIES PVT LTD\', \'KOL KIRANAKART TECHNOLOGIES PVT LTD\', \'Kufy Fabrics Private Limited_sale\', \'HAR KIRANAKART TECHNOLOGIES PVT LTD\', \'KIRANAKART TECHNOLOGIES PVT LTD MH-NLM-DRY-BLR\') )as o left join Inward_logistics a on o.report_month = a.month_date )as o group by 1,2,3 ) select REPORT_TYPE, COMPANY_NAME, SELLER_GST, MARKETPLACE, REFERENCE_CODE, ORDER_TYPE, ORDER_STATUS, INVOICE_STATUS, REPORT_DATE, QUANTITY, SKU, COMPONENT_SKU_NAME, INVOICE_AMT, SELLING_PRICE, ABSOLUTE_INVOICE_AMOUNT, TAX_EXCLUSIVE_GROSS, TOTAL_TAX_AMOUNT, REPORT_MONTH, REPORT_WEEK, COST, COGS, WEIGHT, TOTAL_WEIGHT, FINAL_SPEND, SKU_TYPE, EASYECOM_COST, INTERAKT_COST, CLICKPOST_COST, CHARGEBACK, COMMISSION_VALUE, CLOSING_FEES, FBA_PICK_PACK, FINAL_SHIPPING, PACKAGING_COST, FINAL_ORDER_WEIGHT, Inward_logistics_Cost, (coalesce(FINAL_STORAGE_COST,0) + coalesce(STORAGE_COST,0)) as STORAGE_COST from ( select a.*, div0(PACKAGING_COST, count(1) over (partition by a.Reference_Code, a.REPORT_TYPE, a.MARKETPLACE order by 1)) as PACKAGING_COST, div0(FINAL_ORDER_WEIGHT, count(1) over (partition by a.Reference_Code, a.REPORT_TYPE, a.MARKETPLACE order by 1)) as FINAL_ORDER_WEIGHT, div0(EMIZA_COST, count(1) over (partition by a.Reference_Code, lower(a.MARKETPLACE), lower(a.REPORT_TYPE) order by 1)) as final_storage_cost, div0(Inward_logistics_Cost, count(1) over (partition by a.Reference_Code, lower(a.MARKETPLACE), lower(a.REPORT_TYPE) order by 1)) as Inward_logistics_Cost from final_data_cost a left join packaging_material_Data b on a.REFERENCE_CODE = b.REFERENCE_CODE and lower(a.REPORT_TYPE) = lower(b.REPORT_TYPE) and lower(a.MARKETPLACE) = lower(b.MARKETPLACE) left join Emiza_cost c on a.REFERENCE_CODE = c.REFERENCE_CODE and lower(a.MARKETPLACE) = lower(c.MARKETPLACE) and lower(a.REPORT_TYPE) = lower(c.REPORT_TYPE) left join ILC d on a.REFERENCE_CODE = d.REFERENCE_CODE and lower(a.MARKETPLACE) = lower(d.MARKETPLACE) and lower(a.REPORT_TYPE) = lower(d.REPORT_TYPE) ) as o",
                    "transaction": true
                }
            ) }}
            with sample_data as (

                select * from HOX_DB.information_schema.databases
            ),
            
            final as (
                select * from sample_data
            )
            select * from final
            