{{ config(
            materialized='table',
                post_hook={
                    "sql": "CREATE TABLE IF NOT EXISTS maplemonk.marketplace_fulfilment_cutoff ( Marketplace STRING, Same_Day_Cut_Off STRING ); CREATE TABLE IF NOT EXISTS maplemonk.zouk_CLICKPOST_FACT_ITEMS ( awb STRING, pickup_date DATETIME, delivery_date DATETIME, current_Date DATETIME, current_Status STRING, courier_partner STRING, Payment_method STRING ); CREATE TABLE IF NOT EXISTS maplemonk.Pincode_zone ( Source_Pincode STRING, Destination_Pincode STRING, Zone STRING ); CREATE TABLE IF NOT EXISTS maplemonk.zone_tat ( zone STRING, courier STRING, S2D_SLA STRING, O2D_SLA STRING ); WITH marketplace_fulfilment_cutoff AS ( SELECT \'Myntra\' AS marketplace, \'11:00:00\' AS cutoff_time UNION ALL SELECT \'Flipkart\', \'12:00:00\' UNION ALL SELECT \'Shopify_Zoukbags\', \'12:00:00\' UNION ALL SELECT \'Amazon\', \'14:00:00\' UNION ALL SELECT \'Others\', \'16:00:00\' ) select * from maplemonk.marketplace_fulfilment_cutoff where not exists(select distinct Marketplace, Same_Day_Cut_Off from maplemonk.marketplace_fulfilment_cutoff) union ALL select * from maplemonk.marketplace_fulfilment_cutoff; CREATE OR REPLACE TABLE maplemonk.zouk_Order_Fulfillment_Report AS WITH base_data AS ( SELECT a.order_id, a.awb, a.marketplace AS Final_Marketplace, a.reference_code, a.marketplace, a.source_pincode, a.pincode, a.warehouse AS warehouse_name, b.Same_Day_Cut_Off, a.order_date, a.order_time, CASE WHEN EXTRACT(HOUR FROM order_time) >= EXTRACT(HOUR FROM SAFE_CAST(b.Same_Day_Cut_Off AS TIME)) THEN DATE_ADD(order_date, INTERVAL 1 DAY) ELSE order_date END AS Target_dispatch_Pre, CASE WHEN FORMAT_DATE(\'%a\', CASE WHEN EXTRACT(HOUR FROM order_time) >= EXTRACT(HOUR FROM SAFE_CAST(b.Same_Day_Cut_Off AS TIME)) THEN DATE_ADD(order_date, INTERVAL 1 DAY) ELSE order_date END) = \'Sun\' THEN DATE_ADD(CASE WHEN EXTRACT(HOUR FROM order_time) >= EXTRACT(HOUR FROM SAFE_CAST(b.Same_Day_Cut_Off AS TIME)) THEN DATE_ADD(order_date, INTERVAL 1 DAY) ELSE order_date END, INTERVAL 1 DAY) ELSE CASE WHEN EXTRACT(HOUR FROM order_time) >= EXTRACT(HOUR FROM SAFE_CAST(b.Same_Day_Cut_Off AS TIME)) THEN DATE_ADD(order_date, INTERVAL 1 DAY) ELSE order_date END END AS Target_dispatch, CASE WHEN EXTRACT(HOUR FROM order_time) < 17 THEN order_date ELSE DATE_ADD(order_date, INTERVAL 1 DAY) END AS adjusted_order_date, coalesce(cast(cf.pickup_date as datetime),cast(a.dispatch_date as datetime)) AS Order_Manifest_date ,coalesce(cast(cf.current_Date as datetime),cast(shipping_last_update_date as datetime)) AS Order_Shipping_Last_Update_Date ,coalesce(cast(cf.delivery_date as datetime), cast(a.delivered_date as datetime)) AS order_delivered_date, UPPER(COALESCE(cf.current_status, a.shipping_status)) AS shipping_status, UPPER(a.order_status) AS order_status, COALESCE(cf.courier_partner, a.COURIER) AS COURIER, COALESCE(cf.Payment_method, a.payment_mode) AS payment_mode, upper(CASE WHEN LOWER(order_status) LIKE \'%cancel%\' OR LOWER(oms_order_status) LIKE \'%cancel%\' OR LOWER(final_shipping_status) LIKE \'%cancel%\' OR LOWER(cf.current_status) LIKE \'%cancel%\' THEN \'CANCELLED\' ELSE COALESCE(CASE WHEN LOWER(CURRENT_STATUS) LIKE \'deliver%\' THEN \'DELIVERED\' ELSE NULL END, FINAL_SHIPPING_STATUS, shipping_status, order_status) END) AS final_status ,TAT.ZONE , MAX(TARGET_TAT) AS s2d_sla , MAX(TARGET_TAT2) AS o2s_sla , MAX(TARGET_TAT1) AS o2d_sla ,MAX(TAT.TARGET_TAT) AS TARGET_TAT ,DATE_ADD(CAST(order_date AS DATE), INTERVAL SAFE_CAST(MAX(TARGET_TAT1) as INT64) DAY) AS promised_delivery_date FROM maplemonk.zouk_sales_consolidated a left join (select * from (select * , row_number() over (partition by awb_number order by current_Date desc) rw from maplemonk.zouk_CLICKPOST_FACT_ITEMS) where rw=1 ) cf on lower(cf.awb_number) = lower(a.awb) left join maplemonk.marketplace_fulfilment_cutoff b on lower(b.marketplace) = lower(a.marketplace) left join (select * from (select * ,row_number() over (partition by source_pincode, destination_pincode order by 1) rw from maplemonk.Pincode_zone ) where rw = 1 ) pincode on a.source_pincode = pincode.source_pincode and a.pincode = pincode.destination_pincode left join (select * from (select zone, Courier, S2d_sla, o2d_sla, S2d_SLA as TARGET_TAT, O2d_SLA as TARGET_TAT1, cast(O2d_SLA as int64) - cast(S2d_SLA as int64) as TARGET_TAT2 ,row_number() over (partition by lower(zone), lower(courier) order by 1) rw from maplemonk.zone_tat ) where rw=1) TAT on lower(pincode.zone) = lower(TAT.zone) and lower(a.courier) = lower(TAT.courier) group by a.order_id ,a.awb ,a.reference_code ,a.marketplace ,a.source_pincode ,a.pincode ,a.warehouse ,b.Same_Day_Cut_Off ,a.order_date ,a.order_Time ,coalesce(cast(cf.pickup_date as datetime),cast(a.dispatch_date as datetime)) ,coalesce(cast(cf.current_Date as datetime),cast(shipping_last_update_date as datetime)) ,coalesce(cast(cf.delivery_date as datetime), cast(a.delivered_date as datetime)) ,upper(coalesce(cf.current_status, shipping_status)) ,upper(a.order_status) ,coalesce(cf.courier_partner, a.COURIER) ,coalesce(cf.Payment_method,a.payment_mode) ,TAT.ZONE ,coalesce(cast(cf.delivery_date as datetime), cast(a.delivered_date as datetime)) ,upper(case when (lower(order_status) like \'%cancel%\' or lower(oms_order_status) like \'%cancel%\' or lower(final_shipping_status) like \'%cancel%\' or lower(cf.current_status) like \'%cancel%\') then \'CANCELLED\' else coalesce((case when lower(CURRENT_STATUS) like \'deliver%\' then \'DELIVERED\' else null end) ,FINAL_SHIPPING_STATUS,shipping_status,order_status) end) ), status_flags AS ( SELECT *, CASE WHEN final_status in (\'DELIVERED\',\'COMPLETE\') THEN 1 ELSE 0 END AS delivered_order, CASE WHEN final_status = \'ORDER YET TO SYNC\' THEN 1 ELSE 0 END AS Order_yet_to_Sync_Order, CASE WHEN final_status = \'CONFIRMED\' THEN 1 ELSE 0 END AS Confirmed_Order, CASE WHEN final_status = \'ASSIGNED\' THEN 1 ELSE 0 END AS Assigned_Order, CASE WHEN final_status = \'OPEN\' THEN 1 ELSE 0 END AS Open_Order, CASE WHEN final_status = \'PRINTED\' THEN 1 ELSE 0 END AS Printed_Order, CASE WHEN final_status = \'PENDING\' THEN 1 ELSE 0 END AS Pending_Order, CASE WHEN final_status = \'IN TRANSIT\' THEN 1 ELSE 0 END AS In_Transit_order, CASE WHEN final_status = \'RTO\' THEN 1 ELSE 0 END AS RTO_Order, CASE WHEN final_status = \'RTS\' THEN 1 ELSE 0 END AS RTS_Order, CASE WHEN final_status = \'RETURNED\' THEN 1 ELSE 0 END AS Returned_order, CASE WHEN final_status = \'PICKUP ERROR\' THEN 1 ELSE 0 END AS Pickup_Error, CASE WHEN final_status = \'LOST\' THEN 1 ELSE 0 END AS Lost_Order, CASE WHEN final_status = \'EXCEPTION\' THEN 1 ELSE 0 END AS Exception_Order, CASE WHEN final_status = \'MISROUTED\' THEN 1 ELSE 0 END AS Misrouted_Order, CASE WHEN final_status = \'UNDERPROCESS\' THEN 1 ELSE 0 END AS Underprocess_Order, CASE WHEN final_status = \'DAMAGED\' THEN 1 ELSE 0 END AS Damaged_Order, CASE WHEN final_status = \'CANCELLED\' THEN 1 ELSE 0 END AS cancelled_order FROM base_data ) , speeds AS ( SELECT *, CASE WHEN delivered_order = 1 THEN DATETIME_DIFF(ORDER_DELIVERED_DATE, order_time, HOUR) ELSE DATETIME_DIFF(order_time, DATETIME(TIMESTAMP(CURRENT_DATETIME(), \'Asia/Kolkata\')), HOUR) END AS Time_From_Order ,DATETIME_DIFF(Order_Manifest_date, CAST(order_Time AS DATETIME), HOUR) AS Dispatch_Speed ,DATETIME_DIFF(ORDER_DELIVERED_DATE, CAST(order_Time AS DATETIME), HOUR) AS o2d_delivery_Speed ,DATETIME_DIFF(ORDER_DELIVERED_DATE, Order_Manifest_date, HOUR) AS s2d_delivery_Speed ,CASE WHEN delivered_order = 1 THEN DATETIME_DIFF(ORDER_DELIVERED_DATE, Order_Manifest_date, HOUR) END AS Delivery_Speed ,CASE WHEN delivered_order = 1 THEN DATETIME_DIFF(ORDER_DELIVERED_DATE, Order_Manifest_date, HOUR) ELSE DATETIME_DIFF(DATETIME(TIMESTAMP(CURRENT_DATETIME(), \'Asia/Kolkata\')), Order_Manifest_date, HOUR) END AS deliver_time ,CASE WHEN EXTRACT(HOUR FROM order_Time) < EXTRACT(HOUR FROM safe_cast(same_day_cut_off as time)) THEN DATETIME_DIFF( coalesce(ORDER_MANIFEST_DATE, DATETIME(TIMESTAMP(CURRENT_DATETIME(), \'Asia/Kolkata\'))), CAST(order_date AS DATETIME), DAY ) ELSE DATETIME_DIFF( COALESCE(ORDER_MANIFEST_DATE, DATETIME(TIMESTAMP(CURRENT_DATETIME(), \'Asia/Kolkata\'))), CAST(order_date AS DATETIME), DAY ) - 1 END Dispatch_Flag ,CASE WHEN NOT LOWER(final_status) LIKE \'%cancel%\' THEN DATETIME_DIFF ( DATETIME_ADD( DATETIME_TRUNC(order_manifest_date, DAY), INTERVAL SAFE_CAST(TARGET_TAT AS INT64) + 1 DAY), order_manifest_date , HOUR ) END AS target_tat_hours ,CASE WHEN NOT LOWER(final_status) LIKE \'%cancel%\' THEN DATETIME_DIFF ( IFNULL( order_delivered_date, DATETIME(TIMESTAMP(CURRENT_DATETIME(), \'Asia/Kolkata\')) ), order_manifest_date, HOUR ) END AS DELIVERY_TAT ,CASE WHEN NOT LOWER(final_status) LIKE \'%cancel%\' THEN DATETIME_DIFF( IFNULL( order_manifest_date, DATETIME(TIMESTAMP(CURRENT_DATETIME(), \'Asia/Kolkata\')) ), order_time, HOUR ) END AS DELIVERY_TAT_o2s ,CASE WHEN NOT LOWER(final_status) LIKE \'%cancel%\' THEN DATETIME_DIFF( DATETIME_ADD ( DATETIME_TRUNC(order_time, DAY), INTERVAL SAFE_CAST(o2d_sla AS INT64) + 1 DAY ), order_time, HOUR ) END AS target_tat_hours_o2d ,CASE WHEN NOT LOWER(final_status) LIKE \'%cancel%\' THEN DATETIME_DIFF( IFNULL(order_delivered_date,DATETIME(TIMESTAMP(CURRENT_DATETIME(), \'Asia/Kolkata\'))), order_time, HOUR ) END AS DELIVERY_TAT_o2d FROM status_flags ), TIME_CATEGORIES AS ( SELECT *, CASE WHEN Time_From_Order <= 24 THEN \'1. <=24 hours\' WHEN Time_From_Order <= 48 THEN \'2. 25 - 48 hours\' WHEN Time_From_Order <= 72 THEN \'3. 49 - 72 hours\' WHEN Time_From_Order <= 96 THEN \'4. 73 - 96 hours\' WHEN Time_From_Order <= 120 THEN \'5. 97 - 120 hours\' ELSE \'6. >120 hours\' END AS TIME_FROM_ORDER_CATEGORY ,CASE WHEN Dispatch_Speed <= 24 THEN \'1. <=24 hours\' WHEN Dispatch_Speed <= 48 THEN \'2. 25 - 48 hours\' WHEN Dispatch_Speed <= 72 THEN \'3. 49 - 72 hours\' WHEN Dispatch_Speed <= 96 THEN \'4. 73 - 96 hours\' WHEN Dispatch_Speed <= 120 THEN \'5. 97 - 120 hours\' WHEN Dispatch_Speed is not NULL THEN \'6. >120 hours\' WHEN Dispatch_Speed is null then \'NOT DISPATCHED\' END AS Dispatch_Speed_flag ,CASE WHEN Dispatch_Flag=0 then \'Same Day\' WHEN Dispatch_Flag =1 then \'Next Day\' else \'2+ Days\' end as Final_Dispatch_Bucket ,CASE WHEN Delivery_Speed <= 24 THEN \'1. <=24 hours\' WHEN Delivery_Speed <= 48 THEN \'2. 25 - 48 hours\' WHEN Delivery_Speed <= 72 THEN \'3. 49 - 72 hours\' WHEN Delivery_Speed <= 96 THEN \'4. 73 - 96 hours\' WHEN Delivery_Speed <= 120 THEN \'5. 97 - 120 hours\' WHEN Delivery_Speed > 120 THEN \'5. > 120 hours\' ELSE \'NOT DELIVERED\' END AS delivery_time_flag ,CASE WHEN o2d_delivery_Speed <= 24 THEN \'1. <=24 hours\' WHEN o2d_delivery_Speed <= 48 THEN \'2. 25 - 48 hours\' WHEN o2d_delivery_Speed <= 72 THEN \'3. 49 - 72 hours\' WHEN o2d_delivery_Speed <= 96 THEN \'4. 73 - 96 hours\' WHEN o2d_delivery_Speed <= 120 THEN \'5. 97 - 120 hours\' WHEN o2d_delivery_Speed > 120 THEN \'5. > 120 hours\' ELSE \'NOT DELIVERED\' END AS delivery_time_flag_o2d ,CASE WHEN LOWER(final_status) LIKE \'%cancel%\' THEN \'CANCELLED\' WHEN NOT (LOWER(final_status) LIKE \'%cancel%\') AND order_manifest_Date IS NULL THEN \'NOT DISPATCHED\' WHEN order_manifest_Date IS NOT NULL THEN \'DISPATCHED\' END AS dispatch_status ,case when DELIVERY_TAT <= target_tat_hours then \'ON TIME\' when DELIVERY_TAT > target_tat_hours then \'DELAYED\' end TAT_PERFORMANCE ,upper (Case when (not(lower(final_status) like \'%cancel%\')) and order_delivered_date is null and DELIVERY_TAT <= target_tat_hours then \'In Transit - On Time\' when (not(lower(final_status) like \'%cancel%\')) and order_delivered_date is null and DELIVERY_TAT > target_tat_hours then \'In Transit - Delayed\' when (not(lower(final_status) like \'%cancel%\')) and order_delivered_date is not null and DELIVERY_TAT > target_tat_hours then \'delivered - Delayed\' when (not(lower(final_status) like \'%cancel%\')) and order_delivered_date is not null and DELIVERY_TAT <= target_tat_hours then \'delivered - On Time\' else \'zone not mapped\' end) as s2d_status ,upper(case when (not(lower(final_status) like \'%cancel%\') and order_manifest_date is null) then \'Not dispatched\' when (not(lower(final_status) like \'%cancel%\') and order_delivered_date is null and DELIVERY_TAT_o2d <= target_tat_hours_o2d ) then \'In Transit On Time\' when (not(lower(final_status) like \'%cancel%\') and order_delivered_date is null and DELIVERY_TAT_o2d > target_tat_hours_o2d ) then \'In Transit Delayed\' when (not(lower(final_status) like \'%cancel%\') and order_delivered_date is not null and DELIVERY_TAT_o2d > target_tat_hours_o2d) then \'delivered Delayed\' when (not(lower(final_status) like \'%cancel%\') and order_delivered_date is not null and DELIVERY_TAT_o2d <= target_tat_hours_o2d ) then \'delivered On Time\' else \'zone not mapped\' end) as o2d_status ,upper(CASE WHEN ( (NOT (LOWER(final_status) LIKE \'%cancel%\')) AND order_manifest_date IS NULL AND IFNULL(order_manifest_date, DATETIME(TIMESTAMP(CURRENT_DATETIME(), \'Asia/Kolkata\'))) <= Target_dispatch )THEN \'Not Dispatched On Time\' WHEN ( (NOT (LOWER(final_status) LIKE \'%cancel%\')) AND order_manifest_date IS NULL AND IFNULL(order_manifest_date, DATETIME(TIMESTAMP(CURRENT_DATETIME(), \'Asia/Kolkata\'))) > Target_dispatch ) THEN \'Not Dispatched Delayed\' WHEN ( (NOT (LOWER(final_status) LIKE \'%cancel%\')) AND order_manifest_date IS NOT NULL AND IFNULL(order_manifest_date, DATETIME(TIMESTAMP(CURRENT_DATETIME(), \'Asia/Kolkata\'))) > Target_dispatch ) THEN \'Dispatched Delayed\' WHEN ( (NOT (LOWER(final_status) LIKE \'%cancel%\')) AND order_manifest_date IS NOT NULL and IFNULL(order_manifest_date, DATETIME(TIMESTAMP(CURRENT_DATETIME(), \'Asia/Kolkata\'))) <= Target_dispatch ) THEN \'Dispatched On Time\' END) AS o2s_status ,upper(case when lower(final_status) like \'%cancel%\' then \'CANCELLED\' when not(lower(final_status) like \'%cancel%\') and order_delivered_date is NULL then \'NOT DELIVERED\' else \'DELIVERED\' end) as delivery_status FROM speeds ) SELECT * FROM TIME_CATEGORIES;",
                    "transaction": true
                }
            ) }}
            with sample_data as (

                select * from maplemonk.INFORMATION_SCHEMA.TABLES
            ),
            
            final as (
                select * from sample_data
            )
            select * from final
            