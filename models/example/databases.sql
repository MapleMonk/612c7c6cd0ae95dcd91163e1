{{ config(
            materialized='table',
                post_hook={
                    "sql": "create or replace table RPSG_DB.maplemonk.sales_consolidated_intermediate_drv as select b.SHOP_NAME, coalesce(b.awb,c.awb) as awb, coalesce(c.carrier_id ,NULL) as carrier_id, upper(coalesce(b.SHOPIFY_COURIER,c.courier ,NULL)) as courier, upper(coalesce(b.name ,c.Customer_Name)) as Customer_Name, coalesce(b.email ,c.email) as email, coalesce(b.phone ,c.contact_num) as phone, upper(b.SHOP_NAME) as MARKETPLACE, coalesce(MARKETPLACE_ID ,NULL) as MARKETPLACE_ID, b.ORDER_ID, line_item_id::varchar as Line_Item_ID, line_item_id::varchar as Invoice_ID, order_name as Reference_Code, coalesce(c.manifest_date::datetime,NULL) as manifest_date, coalesce(b.SHOPIFY_SHIPPING_UPDATED_DATE,c.shipping_last_update_date::datetime,NULL) as shipping_last_update_date, upper(coalesce(b.SHOPIFY_SHIPPING_STATUS, c.shipping_status ,NULL)) as shipping_status, b.sku as sku, coalesce(c.sku_type ,NULL) as sku_type, b.PRODUCT_ID, upper(b.PRODUCT_NAME) as PRODUCTNAME, b.CURRENCY, coalesce(c.IS_REFUND, b.IS_REFUND) as RETURN_FLAG, upper(b.CITY::varchar) City, upper(b.STATE:: varchar) State, upper(coalesce(c.order_status,b.order_status)) as Order_Status, b.ORDER_TIMESTAMP::datetime as ORDER_Date, b.shipping_price::float as SHIPPING_PRICE, coalesce(c.number_of_products_in_combo ,NULL) as number_of_products_in_combo, b.quantity::int suborder_quantity, b.quantity::int shipped_quantity, case when b.is_refund = 1 then b.quantity::int end returned_quantity, case when b.is_refund = 0 and lower(b.order_status) in (\'cancelled\') then quantity::int end cancelled_quantity, coalesce(c.return_sales,case when b.is_refund = 1 then total_sales end) as return_sales, case when b.is_refund = 0 and lower(b.order_status) in (\'cancelled\') then total_sales end as cancel_sales, coalesce(c.tax, b.TAX::float) Tax, max(c.suborder_mrp) over (partition by b.ORDER_TIMESTAMP::date, b.sku) as suborder_mrp, upper(coalesce(nsm.category,s.Product_Category_Mapped,sp.Product_Category_Mapped,c.category,b.category)) category, upper(coalesce(nsm.product_name,s.Product_name_mapped,sp.Product_name_mapped)) Product_Name_Mapped, upper(coalesce(nsm.report_category,s.Report_Category,sp.Report_Category)) Report_Category, upper(coalesce(nsm.pack,s.Product_Pack,sp.Product_Pack)) Product_Pack, coalesce(nsm.qty,s.product_quantity, sp.product_quantity) Product_quantity, b.discount_before_tax::float as discount, case when b.total_sales::float is null then 0 else b.total_sales::float end selling_price, coalesce(c.suborder_mrp,0)*suborder_quantity as mrp_sales, case when (mrp_sales is null or mrp_sales<(selling_price)) then b.discount else mrp_sales-selling_price end Discount_MRP, case when b.new_customer_flag = \'New\' then 1 else 0 end as new_customer_flag, case when b.new_customer_flag_month = \'New\' then 1 else 0 end as new_customer_flag_month, upper(coalesce(c.warehouse_name,\'NA\')) as Warehouse_Name, case when upper(coalesce(b.SHOPIFY_SHIPPING_STATUS, c.shipping_status)) in (\'DELIVERED\',\'DELIVERED TO ORIGIN\', \'RETURNED\', \'RTO\') then datediff(day,date(b.ORDER_TIMESTAMP),date(shipping_Last_update_date)) else datediff(day,date(b.ORDER_TIMESTAMP), getdate()) end::int AS DAYS_IN_SHIPMENT, upper(coalesce(FINAL_UTM_CHANNEL,\'OTHERS\')) as Channel, upper(coalesce(b.shopifyql_mapped_source,b.gokwik_utm_source)) Shopify_UTM_source, upper(b.GOKWIK_UTM_MEDIUM) Shopify_UTM_Medium, upper(Final_utm_campaign) as UTM_CAMPAIGN, c.payment_mode, c.import_date::datetime as import_date, c.last_update_date, c.invoice_date, c.company_name, c.pin_code, b.final_utm_campaign Shopify_utm_campaign, case when c.reference_code is null then \'Not Synced\' else \'Synced\' end as EasyEcom_Sync_Flag, b.cancelled_at, c.delivered_time, er.return_date, nsm.sku as exception_combined_sku from rpsg_db.maplemonk.FACT_ITEMS_SHOPIFY_DRV b left join (select * from ( select *,row_number()over(partition by reference_code, order_Date, Marketplace_LineItem_ID order by last_update_date desc) rw from rpsg_db.maplemonk.fact_items_easyecom_drv where lower(marketplace) like any (\'%shopify%\',\'%woocommerce%\') ) z where z.rw = 1 ) c on replace(b.order_name,\'#\',\'\') = c.reference_code and b.LINE_ITEM_ID=replace(c.Marketplace_LineItem_ID,\'\"\',\'\') left join (select * from (select sku, product_id, productname, Product_name_mapped, \"Product Category\" Product_Category_Mapped, \"Report Category\" Report_Category, \"Product Pack\" Product_Pack, \"Product Quantity\" Product_Quantity, row_number() over (partition by lower(sku) order by \"Product Category\") rw from rpsg_DB.maplemonk.new_sku_master where sku is not null) where rw=1 ) S on lower(b.sku)=lower(s.sku) left join (select * from (select sku, product_id, productname, Product_name_mapped, \"Product Category\" Product_Category_Mapped, \"Report Category\" Report_Category, \"Product Pack\" Product_Pack, \"Product Quantity\" Product_Quantity, row_number() over (partition by product_id order by \"Product Category\") rw from rpsg_DB.maplemonk.new_sku_master where product_id is not null) where rw=1 ) SP on lower(b.product_id)=lower(sp.product_id) left join ( select * from ( select reference_code as reference_code_er ,sku ,return_date ,row_number() over(partition by reference_code,sku order by 1) rw from RPSG_DB.MAPLEMONK.fact_items_easyecom_returns_detailed_drv ) where rw = 1 )er on replace(er.reference_code_er,\'#\',\'\') = replace(b.order_name,\'#\',\'\') and lower(er.sku) = lower(b.sku) left join ( select * from ( select *, row_number() over(partition by sku order by 1) rw from ( select SKU ,\"Product Category\" category ,\"Product Name mapped\" as Product_name ,\"Report Category\" as report_category , qty , pack from rpsg_db.maplemonk.drv_combined_sku_master )) where rw = 1 )nsm on b.sku = nsm.sku union all select b.SHOP_NAME, coalesce(b.awb,c.awb) as awb, coalesce(c.carrier_id ,NULL) as carrier_id, upper(coalesce(b.SHOPIFY_COURIER,c.courier ,NULL)) as courier, upper(coalesce(b.name ,c.Customer_Name)) as Customer_Name, coalesce(b.email ,c.email) as email, coalesce(b.phone ,c.contact_num) as phone, upper(b.SHOP_NAME) as MARKETPLACE, coalesce(MARKETPLACE_ID ,NULL) as MARKETPLACE_ID, b.ORDER_ID, line_item_id::varchar as Line_Item_ID, line_item_id::varchar as Invoice_ID, order_name as Reference_Code, coalesce(c.manifest_date::datetime,NULL) as manifest_date, coalesce(b.SHOPIFY_SHIPPING_UPDATED_DATE,c.shipping_last_update_date::datetime,NULL) as shipping_last_update_date, upper(coalesce(b.SHOPIFY_SHIPPING_STATUS, c.shipping_status ,NULL)) as shipping_status, b.sku as sku, coalesce(c.sku_type ,NULL) as sku_type, b.PRODUCT_ID, upper(b.PRODUCT_NAME) as PRODUCTNAME, b.CURRENCY, coalesce(c.IS_REFUND, b.IS_REFUND) as RETURN_FLAG, upper(b.CITY::varchar) City, upper(b.STATE:: varchar) State, upper(coalesce(c.order_status,b.order_status)) as Order_Status, b.ORDER_TIMESTAMP::datetime as ORDER_Date, b.shipping_price::float as SHIPPING_PRICE, coalesce(c.number_of_products_in_combo ,NULL) as number_of_products_in_combo, b.quantity::int suborder_quantity, b.quantity::int shipped_quantity, case when b.is_refund = 1 then b.quantity::int end returned_quantity, case when b.is_refund = 0 and lower(b.order_status) in (\'cancelled\') then quantity::int end cancelled_quantity, coalesce(c.return_sales,case when b.is_refund = 1 then total_sales end) as return_sales, case when b.is_refund = 0 and lower(b.order_status) in (\'cancelled\') then total_sales end as cancel_sales, coalesce(c.tax, b.TAX::float) Tax, max(c.suborder_mrp) over (partition by b.ORDER_TIMESTAMP::date, b.sku) as suborder_mrp, upper(coalesce(nsm.category,s.Product_Category_Mapped,sp.Product_Category_Mapped,c.category,b.category)) category, upper(coalesce(nsm.product_name,s.Product_name_mapped,sp.Product_name_mapped)) Product_Name_Mapped, upper(coalesce(nsm.report_category,s.Report_Category,sp.Report_Category)) Report_Category, upper(coalesce(nsm.pack,s.Product_Pack,sp.Product_Pack)) Product_Pack, coalesce(nsm.qty,s.product_quantity, sp.product_quantity) Product_quantity, b.discount_before_tax::float as discount, case when b.total_sales::float is null then 0 else b.total_sales::float end selling_price, coalesce(c.suborder_mrp,0)*suborder_quantity as mrp_sales, case when (mrp_sales is null or mrp_sales<(selling_price)) then b.discount else mrp_sales-selling_price end Discount_MRP, case when b.new_customer_flag = \'New\' then 1 else 0 end as new_customer_flag, case when b.new_customer_flag_month = \'New\' then 1 else 0 end as new_customer_flag_month, upper(coalesce(c.warehouse_name,\'NA\')) as Warehouse_Name, case when upper(coalesce(b.SHOPIFY_SHIPPING_STATUS, c.shipping_status)) in (\'DELIVERED\',\'DELIVERED TO ORIGIN\', \'RETURNED\', \'RTO\') then datediff(day,date(b.ORDER_TIMESTAMP),date(shipping_Last_update_date)) else datediff(day,date(b.ORDER_TIMESTAMP), getdate()) end::int AS DAYS_IN_SHIPMENT, upper(coalesce(FINAL_UTM_CHANNEL,\'OTHERS\')) as Channel, upper(coalesce(b.shopifyql_mapped_source,b.gokwik_utm_source)) Shopify_UTM_source, upper(b.GOKWIK_UTM_MEDIUM) Shopify_UTM_Medium, upper(Final_utm_campaign) as UTM_CAMPAIGN, c.payment_mode, c.import_date::datetime as import_date, c.last_update_date, c.invoice_date, c.company_name, c.pin_code, b.final_utm_campaign Shopify_utm_campaign, case when c.reference_code is null then \'Not Synced\' else \'Synced\' end as EasyEcom_Sync_Flag, b.cancelled_at, c.delivered_time, er.return_date, nsm.sku as exception_combined_sku from rpsg_db.maplemonk.FACT_ITEMS_SHOPIFY_HERBOBUILD b left join (select * from ( select *,row_number()over(partition by reference_code, order_Date, Marketplace_LineItem_ID order by last_update_date desc) rw from rpsg_db.maplemonk.fact_items_easyecom_drv where lower(marketplace) like any (\'%shopify%\',\'%woocommerce%\') ) z where z.rw = 1 ) c on replace(b.order_name,\'#\',\'\') = c.reference_code and b.LINE_ITEM_ID=replace(c.Marketplace_LineItem_ID,\'\"\',\'\') left join (select * from (select sku, product_id, productname, Product_name_mapped, \"Product Category\" Product_Category_Mapped, \"Report Category\" Report_Category, \"Product Pack\" Product_Pack, \"Product Quantity\" Product_Quantity, row_number() over (partition by lower(sku) order by \"Product Category\") rw from rpsg_DB.maplemonk.new_sku_master where sku is not null) where rw=1 ) S on lower(b.sku)=lower(s.sku) left join (select * from (select sku, product_id, productname, Product_name_mapped, \"Product Category\" Product_Category_Mapped, \"Report Category\" Report_Category, \"Product Pack\" Product_Pack, \"Product Quantity\" Product_Quantity, row_number() over (partition by product_id order by \"Product Category\") rw from rpsg_DB.maplemonk.new_sku_master where product_id is not null) where rw=1 ) SP on lower(b.product_id)=lower(sp.product_id) left join ( select * from ( select reference_code as reference_code_er ,sku ,return_date ,row_number() over(partition by reference_code,sku order by 1) rw from RPSG_DB.MAPLEMONK.fact_items_easyecom_returns_detailed_drv ) where rw = 1 )er on replace(er.reference_code_er,\'#\',\'\') = replace(b.order_name,\'#\',\'\') and lower(er.sku) = lower(b.sku) left join ( select * from ( select *, row_number() over(partition by sku order by 1) rw from ( select SKU ,\"Product Category\" category ,\"Product Name mapped\" as Product_name ,\"Report Category\" as report_category , qty , pack from rpsg_db.maplemonk.drv_combined_sku_master )) where rw = 1 )nsm on b.sku = nsm.sku union all select b.SHOP_NAME, coalesce(b.awb,c.awb) as awb, coalesce(c.carrier_id ,NULL) as carrier_id, upper(coalesce(b.SHOPIFY_COURIER,c.courier ,NULL)) as courier, upper(coalesce(b.name ,c.Customer_Name)) as Customer_Name, coalesce(b.email ,c.email) as email, coalesce(b.phone ,c.contact_num) as phone, upper(b.SHOP_NAME) as MARKETPLACE, coalesce(MARKETPLACE_ID ,NULL) as MARKETPLACE_ID, b.ORDER_ID, line_item_id::varchar as Line_Item_ID, line_item_id::varchar as Invoice_ID, order_name as Reference_Code, coalesce(c.manifest_date::datetime,NULL) as manifest_date, coalesce(b.SHOPIFY_SHIPPING_UPDATED_DATE,c.shipping_last_update_date::datetime,NULL) as shipping_last_update_date, upper(coalesce(b.SHOPIFY_SHIPPING_STATUS, c.shipping_status ,NULL)) as shipping_status, b.sku as sku, coalesce(c.sku_type ,NULL) as sku_type, b.PRODUCT_ID, upper(b.PRODUCT_NAME) as PRODUCTNAME, b.CURRENCY, coalesce(c.IS_REFUND, b.IS_REFUND) as RETURN_FLAG, upper(b.CITY::varchar) City, upper(b.STATE:: varchar) State, upper(coalesce(c.order_status,b.order_status)) as Order_Status, b.ORDER_TIMESTAMP::datetime as ORDER_Date, b.shipping_price::float as SHIPPING_PRICE, coalesce(c.number_of_products_in_combo ,NULL) as number_of_products_in_combo, b.quantity::int suborder_quantity, b.quantity::int shipped_quantity, case when b.is_refund = 1 then b.quantity::int end returned_quantity, case when b.is_refund = 0 and lower(b.order_status) in (\'cancelled\') then quantity::int end cancelled_quantity, coalesce(c.return_sales,case when b.is_refund = 1 then total_sales end) as return_sales, case when b.is_refund = 0 and lower(b.order_status) in (\'cancelled\') then total_sales end as cancel_sales, coalesce(c.tax, b.TAX::float) Tax, max(c.suborder_mrp) over (partition by b.ORDER_TIMESTAMP::date, b.sku) as suborder_mrp, upper(coalesce(nsm.category,s.Product_Category_Mapped,sp.Product_Category_Mapped,c.category,b.category)) category, upper(coalesce(nsm.product_name,s.Product_name_mapped,sp.Product_name_mapped)) Product_Name_Mapped, upper(coalesce(nsm.report_category,s.Report_Category,sp.Report_Category)) Report_Category, upper(coalesce(nsm.pack,s.Product_Pack,sp.Product_Pack)) Product_Pack, coalesce(nsm.qty,s.product_quantity, sp.product_quantity) Product_quantity, b.discount_before_tax::float as discount, case when b.total_sales::float is null then 0 else b.total_sales::float end selling_price, coalesce(c.suborder_mrp,0)*suborder_quantity as mrp_sales, case when (mrp_sales is null or mrp_sales<(selling_price)) then b.discount else mrp_sales-selling_price end Discount_MRP, case when b.new_customer_flag = \'New\' then 1 else 0 end as new_customer_flag, case when b.new_customer_flag_month = \'New\' then 1 else 0 end as new_customer_flag_month, upper(coalesce(c.warehouse_name,\'NA\')) as Warehouse_Name, case when upper(coalesce(b.SHOPIFY_SHIPPING_STATUS, c.shipping_status)) in (\'DELIVERED\',\'DELIVERED TO ORIGIN\', \'RETURNED\', \'RTO\') then datediff(day,date(b.ORDER_TIMESTAMP),date(shipping_Last_update_date)) else datediff(day,date(b.ORDER_TIMESTAMP), getdate()) end::int AS DAYS_IN_SHIPMENT, upper(coalesce(FINAL_UTM_CHANNEL,\'OTHERS\')) as Channel, upper(coalesce(b.shopifyql_mapped_source,b.gokwik_utm_source)) Shopify_UTM_source, upper(b.GOKWIK_UTM_MEDIUM) Shopify_UTM_Medium, upper(Final_utm_campaign) as UTM_CAMPAIGN, c.payment_mode, c.import_date::datetime as import_date, c.last_update_date, c.invoice_date, c.company_name, c.pin_code, b.final_utm_campaign Shopify_utm_campaign, case when c.reference_code is null then \'Not Synced\' else \'Synced\' end as EasyEcom_Sync_Flag, b.cancelled_at, c.delivered_time, er.return_date, nsm.sku as exception_combined_sku from rpsg_db.maplemonk.FACT_ITEMS_SHOPIFY_AYURVEDICSOURCE b left join (select * from ( select *,row_number()over(partition by reference_code, order_Date, Marketplace_LineItem_ID order by last_update_date desc) rw from rpsg_db.maplemonk.fact_items_easyecom_drv where lower(marketplace) like any (\'%shopify%\',\'%woocommerce%\') ) z where z.rw = 1 ) c on replace(b.order_name,\'#\',\'\') = c.reference_code and b.LINE_ITEM_ID=replace(c.Marketplace_LineItem_ID,\'\"\',\'\') left join (select * from (select sku, product_id, productname, Product_name_mapped, \"Product Category\" Product_Category_Mapped, \"Report Category\" Report_Category, \"Product Pack\" Product_Pack, \"Product Quantity\" Product_Quantity, row_number() over (partition by lower(sku) order by \"Product Category\") rw from rpsg_DB.maplemonk.new_sku_master where sku is not null) where rw=1 ) S on lower(b.sku)=lower(s.sku) left join (select * from (select sku, product_id, productname, Product_name_mapped, \"Product Category\" Product_Category_Mapped, \"Report Category\" Report_Category, \"Product Pack\" Product_Pack, \"Product Quantity\" Product_Quantity, row_number() over (partition by product_id order by \"Product Category\") rw from rpsg_DB.maplemonk.new_sku_master where product_id is not null) where rw=1 ) SP on lower(b.product_id)=lower(sp.product_id) left join ( select * from ( select reference_code as reference_code_er ,sku ,return_date ,row_number() over(partition by reference_code,sku order by 1) rw from RPSG_DB.MAPLEMONK.fact_items_easyecom_returns_detailed_drv ) where rw = 1 )er on replace(er.reference_code_er,\'#\',\'\') = replace(b.order_name,\'#\',\'\') and lower(er.sku) = lower(b.sku) left join ( select * from ( select *, row_number() over(partition by sku order by 1) rw from ( select SKU ,\"Product Category\" category ,\"Product Name mapped\" as Product_name ,\"Report Category\" as report_category , qty , pack from rpsg_db.maplemonk.drv_combined_sku_master )) where rw = 1 )nsm on b.sku = nsm.sku union all select case when lower(SHOP_NAME) like \'%amazon%\' then \'AMAZON\' when lower(sHOP_NAME) like \'%flipkart%\' then \'FLIPKART\' else shop_name end as shop_name ,awb ,CARRIER_ID ,COURIER ,CUSTOMER_NAME ,EMAIL ,contact_num ,case when lower(MARKETPLACE) like \'%amazon%\' then \'AMAZON\' when lower(MARKETPLACE) like \'%flipkart%\' then \'FLIPKART\' else shop_name end as MARKETPLACE ,MARKETPLACE_ID ,ORDER_ID ,SUBORDER_ID ,INVOICE_ID ,REFERENCE_CODE ,MANIFEST_DATE ,SHIPPING_LAST_UPDATE_DATE ,upper(SHIPPING_STATUS) SHIPPING_STATUS ,b.SKU ,b.SKU_TYPE ,b.PRODUCT_ID ,b.PRODUCTNAME ,CURRENCY ,IS_REFUND ,CITY ,STATE ,ORDER_STATUS ,ORDER_DATE ,SHIPPING_PRICE ,NUMBER_OF_PRODUCTS_IN_COMBO ,SUBORDER_QUANTITY ,SHIPPED_QUANTITY ,RETURNED_QUANTITY ,CANCELLED_QUANTITY ,RETURN_SALES ,CANCEL_SALES ,TAX ,SUBORDER_MRP ,upper(coalesce(nsm.category,s.Product_Category_Mapped,sp.Product_Category_Mapped,b.category)) category ,upper(coalesce(nsm.product_name,s.Product_name_mapped,sp.Product_name_mapped,b.PRODUCTNAME)) Product_Name_Mapped ,upper(coalesce(nsm.report_category,s.Report_Category,sp.Report_Category)) Report_Category ,upper(coalesce(nsm.pack,s.Product_Pack,sp.Product_Pack)) Product_Pack ,coalesce(nsm.qty,s.product_quantity, sp.product_quantity) Product_quantity ,DISCOUNT ,SELLING_PRICE ,MRP_SALES ,DISCOUNT_MRP ,NEW_CUSTOMER_FLAG ,NEW_CUSTOMER_FLAG_MONTH ,WAREHOUSE_NAME ,case when upper(shipping_STATUS) in (\'DELIVERED\',\'DELIVERED TO ORIGIN\', \'RETURNED\', \'RTO\') then datediff(day,date(b.ORDER_DATE),date(shipping_Last_update_date)) else datediff(day,date(b.ORDER_DATE), getdate()) end::int AS DAYS_IN_SHIPMENT ,CHANNEL ,NULL as Shopify_UTM_source ,NULL as Shopify_UTM_Medium ,NULL AS UTM_CAMPAIGN ,PAYMENT_MODE ,IMPORT_DATE ,LAST_UPDATE_DATE ,invoice_date ,company_name ,b.pin_code ,NULL as Shopify_utm_campaign ,\'Synced\' as EasyEcom_Sync_Flag, case when cancel_sales is not null then LAST_UPDATE_DATE end as cancelled_at, b.delivered_time, er.return_date, nsm.sku as exception_combined_sku from ( select * from rpsg_DB.maplemonk.fact_items_easyecom_drv where not(sku in (select distinct sku from rpsg_DB.maplemonk.three60_sku_master )))b left join (select * from (select sku, product_id, productname, Product_name_mapped, \"Product Category\" Product_Category_Mapped, \"Report Category\" Report_Category, \"Product Pack\" Product_Pack, \"Product Quantity\" Product_Quantity,marketplace as brand, row_number() over (partition by lower(sku) order by \"Product Category\") rw from rpsg_DB.maplemonk.new_sku_master where sku is not null) where rw=1 ) S on lower(b.sku)=lower(s.sku) left join (select * from (select sku, product_id, productname, Product_name_mapped, \"Product Category\" Product_Category_Mapped, \"Report Category\" Report_Category, \"Product Pack\" Product_Pack, \"Product Quantity\" Product_Quantity,marketplace as brand, row_number() over (partition by product_id order by \"Product Category\") rw from rpsg_DB.maplemonk.new_sku_master where product_id is not null) where rw=1 ) SP on lower(b.product_id)=lower(sp.product_id) left join ( select * from ( select reference_code as reference_code_er ,sku ,return_date ,row_number() over(partition by reference_code,sku order by 1) rw from RPSG_DB.MAPLEMONK.fact_items_easyecom_returns_detailed_drv ) where rw = 1 )er on replace(er.reference_code_er,\'#\',\'\') = replace(b.reference_code,\'#\',\'\') and lower(er.sku) = lower(b.sku) left join ( select * from ( select *, row_number() over(partition by sku order by 1) rw from ( select SKU ,\"Product Category\" category ,\"Product Name mapped\" as Product_name ,\"Report Category\" as report_category , qty , pack from rpsg_db.maplemonk.drv_combined_sku_master )) where rw = 1 )nsm on b.sku = nsm.sku where not(lower(b.marketplace) like \'%shopify%\'); create or replace table rpsg_db.maplemonk.AMAZON_FLIPKART_CONSOLIDATED_DRV as select \'amazon\' shop_name ,EEF.awb ,EEF.CARRIER_ID ,EEF.COURIER ,EEF.CUSTOMER_NAME ,EEF.EMAIL ,EEF.contact_num as phone ,\'AMAZON\' as marketplace, null as MARKETPLACE_ID, b.ORDER_ID, LINE_ITEM_ID::varchar as suborder_id, EEF.INVOICE_ID, b.ORDER_ID as reference_code, eef.manifest_date, null as SHIPPING_LAST_UPDATE_DATE, upper(EEF.SHIPPING_STATUS) SHIPPING_STATUS, b.sku, null as sku_type, b.product_id, product_name_final :: varchar as product_name, null as currency, b.is_refund, b.city, b.state, case when lower(b.order_status) like \'%cancel%\' then \'cancelled\' when lower(b.order_status) like \'%return%\' then \'returned\' else b.order_status end order_status, order_timestamp :: date as order_date, b.shipping_price, null as NUMBER_OF_PRODUCTS_IN_COMBO, quantity as suborder_quantity, null as SHIPPED_QUANTITY, null as RETURNED_QUANTITY, null as CANCELLED_QUANTITY, null as RETURN_SALES, null as CANCEL_SALES, eef.tax, null as SUBORDER_MRP, upper(coalesce(nsm.category,s.Product_Category_Mapped,sp.Product_Category_Mapped,b.category)) category, upper(coalesce(nsm.product_name,s.Product_name_mapped,sp.Product_name_mapped,product_name_final)) Product_Name_Mapped, upper(coalesce(nsm.report_category,s.Report_Category,sp.Report_Category)) Report_Category, upper(coalesce(nsm.pack,s.Product_Pack,sp.Product_Pack)) Product_Pack, coalesce(nsm.qty,s.product_quantity, sp.product_quantity) Product_quantity , null as DISCOUNT, coalesce(eef.SELLING_PRICE,total_sales) as selling_price, null as MRP_SALES, null as DISCOUNT_MRP, null as NEW_CUSTOMER_FLAG, null as NEW_CUSTOMER_FLAG_MONTH, WAREHOUSE_NAME, null as DAYS_IN_SHIPMENT, \'AMAZON\' as CHANNEL, NULL as Shopify_UTM_source, NULL as Shopify_UTM_Medium, NULL AS UTM_CAMPAIGN, eef.payment_mode, null as IMPORT_DATE, null as LAST_UPDATE_DATE, null as INVOICE_DATE, null as company_name, null as pin_code, NULL as FINAL_UTM_CAMPAIGN, \'Synced\' as EasyEcom_Sync_Flag, null as cancelled_at, null as delivered_time, er.return_date, s.sku as exception_sku from (SELECT * FROM RPSG_DB.MAPLEMONK.RPSG_DB_amazon_fact_items where not(sku in (select distinct sku from rpsg_DB.maplemonk.three60_sku_master ))) b LEFT JOIN ( select * from ( select * ,row_number() over(partition by reference_code,sku order by 1) rnw from RPSG_DB.MAPLEMONK.fact_items_easyecom_drv ) where rnw = 1 ) eeF ON b.ORDER_ID = EEF.reference_code AND LOWER(b.SKU) = LOWER(EEF.SKU) left join (select * from (select sku, product_id, productname, Product_name_mapped, \"Product Category\" Product_Category_Mapped, \"Report Category\" Report_Category, \"Product Pack\" Product_Pack, \"Product Quantity\" Product_Quantity,marketplace as brand, row_number() over (partition by lower(sku) order by \"Product Category\") rw from rpsg_DB.maplemonk.new_sku_master where sku is not null) where rw=1 ) S on lower(b.sku)=lower(s.sku) left join (select * from (select sku, product_id, productname, Product_name_mapped, \"Product Category\" Product_Category_Mapped, \"Report Category\" Report_Category, \"Product Pack\" Product_Pack, \"Product Quantity\" Product_Quantity,marketplace as brand, row_number() over (partition by product_id order by \"Product Category\") rw from rpsg_DB.maplemonk.new_sku_master where product_id is not null) where rw=1 ) SP on lower(b.product_id)=lower(sp.product_id) left join ( select * from ( select reference_code as reference_code_er ,sku ,return_date ,row_number() over(partition by reference_code,sku order by 1) rw from RPSG_DB.MAPLEMONK.fact_items_easyecom_returns_detailed_drv ) where rw = 1 )er on replace(er.reference_code_er,\'#\',\'\') = replace(b.ORDER_ID,\'#\',\'\') and lower(er.sku) = lower(b.sku) left join ( select * from ( select *, row_number() over(partition by sku order by 1) rw from ( select SKU ,\"Product Category\" category ,\"Product Name mapped\" as Product_name ,\"Report Category\" as report_category , qty , pack from rpsg_db.maplemonk.drv_combined_sku_master )) where rw = 1 )nsm on b.sku = nsm.sku union all SELECT \'flipkart\' shop_name, NULL AS awb, NULL AS CARRIER_ID, NULL AS COURIER, NULL AS CUSTOMER_NAME, NULL AS EMAIL, NULL AS phone, \'Flipkart\' AS MARKETPLACE, NULL AS MARKETPLACE_ID, b.order_id, order_item_id::VARCHAR AS SUBORDER_Id, BUYER_INVOICE_ID::VARCHAR AS INVOICE_ID, b.order_id AS REFERENCE_CODE, NULL AS MANIFEST_DATE, NULL AS SHIPPING_LAST_UPDATE_DATE, NULL AS SHIPPING_STATUS, (REGEXP_REPLACE(SUBSTRING(B.SKU, 8, 18), \'[^a-zA-Z0-9_-]\', \'\'))::VARCHAR SKU, NULL AS SKU_TYPE, null AS PRODUCT_ID, M.PRODUCT_NAME::VARCHAR AS PRODUCTNAME, NULL AS CURRENCY, NULL AS IS_REFUND, NULL AS CITY, customer_s_delivery_state AS STATE, case when lower(EVENT_SUB_TYPE) like \'%cancel%\' then \'cancelled\' when lower(EVENT_SUB_TYPE) like \'%sale%\' then \'delivered\' when lower(EVENT_SUB_TYPE) like \'%return%\' then \'RTO\' else EVENT_SUB_TYPE end AS ORDER_STATUS, try_TO_TIMESTAMP(replace(b.Order_Date,\'/\',\'-\'), \'YYYY-MM-DD HH24:MI:SS.FF\')::date AS order_date, try_cast(Shipping_Charges as int ) shipping_charges, NULL AS NUMBER_OF_PRODUCTS_IN_COMBO, try_cast(Item_Quantity as int) AS suborder_quantity, null as SHIPPED_QUANTITY, NULL AS RETURNED_QUANTITY, NULL AS CANCELLED_QUANTITY, NULL AS RETURN_SALES, NULL AS CANCEL_SALES, eef.tax , null AS SUBORDER_MRP, UPPER(M.Category) AS category, UPPER(M.Product_name) AS Product_Name_Mapped, UPPER(M.report_category) AS Report_Category, UPPER(M.Pack) AS Product_Pack, try_cast(ITEM_QUANTITY as int) AS Product_quantity, try_Cast(TOTAL_DISCOUNT as float) AS DISCOUNT, coalesce(eef.SELLING_PRICE,try_cast(Price_before_discount as float)) as selling_price, null AS MRP_SALES, try_cast(Total_Discount as int) AS DISCOUNT_MRP, NULL AS NEW_CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG_MONTH, Warehouse_ID AS WAREHOUSE_NAME, --NULL AS RETURN_FLAG, NULL AS DAYS_IN_SHIPMENT, NULL AS CHANNEL, NULL AS Shopify_UTM_source, NULL AS Shopify_UTM_Medium, NULL AS UTM_CAMPAIGN, coalesce(Order_Type,EEF.payment_mode) AS PAYMENT_MODE, NULL AS IMPORT_DATE, NULL AS LAST_UPDATE_DATE, null AS invoice_date, NULL AS company_name, customer_s_delivery_pincode AS pin_code, NULL AS FINAL_UTM_CAMPAIGN, \'Synced\' AS EasyEcom_Sync_Flag, CASE WHEN cancel_sales IS NOT NULL THEN LAST_UPDATE_DATE END AS cancelled_at, null as delivered_time, er.return_date, M.sku as exception_sku FROM (select * from (SELECT * ,row_number() over(partition by Order_ID,(LOWER(REGEXP_REPLACE(SUBSTRING(SKU, 8, 18), \'[^a-zA-Z0-9_-]\', \'\'))) order by buyer_invoice_date desc) rw FROM rpsg_db.maplemonk.three60you_flipkart_order_new where not((LOWER(REGEXP_REPLACE(SUBSTRING(SKU, 8, 18), \'[^a-zA-Z0-9_-]\', \'\'))) in (select distinct sku from rpsg_DB.maplemonk.three60_sku_master )) )where rw=1 )b LEFT JOIN (SELECT * FROM ( SELECT * ,ROW_NUMBER() OVER (PARTITION BY REFERENCE_CODE, SKU ORDER BY 1 DESC) RW FROM rpsg_DB.maplemonk.fact_items_easyecom_drv WHERE UPPER(MARKETPLACE) LIKE \'%FLIPKART%\' ) WHERE RW=1 ) eeF ON b.Order_ID = EEF.reference_code AND (LOWER(REGEXP_REPLACE(SUBSTRING(B.SKU, 8, 18), \'[^a-zA-Z0-9_-]\', \'\'))) = LOWER(EEF.SKU) left join (select * from (select sku, product_id, productname, Product_name_mapped, \"Product Category\" Product_Category_Mapped, \"Report Category\" Report_Category, \"Product Pack\" Product_Pack, \"Product Quantity\" Product_Quantity,marketplace as brand, row_number() over (partition by lower(sku) order by \"Product Category\") rw from rpsg_DB.maplemonk.new_sku_master where sku is not null) where rw=1 ) S on (LOWER(REGEXP_REPLACE(SUBSTRING(B.SKU, 8, 18), \'[^a-zA-Z0-9_-]\', \'\')))=lower(s.sku) left join ( select * from ( select reference_code as reference_code_er ,sku ,return_date ,row_number() over(partition by reference_code,sku order by 1) rw from RPSG_DB.MAPLEMONK.fact_items_easyecom_returns_detailed_drv ) where rw = 1 )er on replace(er.reference_code_er,\'#\',\'\') = replace(b.ORDER_ID,\'#\',\'\') and lower(er.sku) = (LOWER(REGEXP_REPLACE(SUBSTRING(B.SKU, 8, 18), \'[^a-zA-Z0-9_-]\', \'\'))) LEFT JOIN ( select * from ( select *, row_number() over(partition by sku order by 1) rw from ( select SKU ,\"Product Category\" category ,\"Product Name mapped\" as Product_name ,\"Report Category\" as report_category , qty , pack from rpsg_db.maplemonk.drv_combined_sku_master )) where rw = 1 and sku IS NOT NULL ) M ON (LOWER(REGEXP_REPLACE(SUBSTRING(B.SKU, 8, 18), \'[^a-zA-Z0-9_-]\', \'\'))) = (LOWER(M.sku)); create or replace table RPSG_DB.maplemonk.sales_consolidated_intermediate_drv as select * from RPSG_DB.maplemonk.sales_consolidated_intermediate_drv union all select * from rpsg_db.maplemonk.AMAZON_FLIPKART_CONSOLIDATED_DRV where not(concat(ifnull(reference_code,\'\'),ifnull(sku,\'\')) in (select distinct concat(ifnull(reference_code,\'\'),ifnull(sku,\'\')) from RPSG_DB.maplemonk.sales_consolidated_intermediate_drv)) ; create or replace table RPSG_DB.maplemonk.sales_consolidated_intermediate_drv as select * from RPSG_DB.maplemonk.sales_consolidated_intermediate_drv union all (select \'Historical_Data\' as SHOP_NAME ,null as awb ,null as carrier_id ,null as courier ,first_name_billing as CUSTOMER_NAME ,EMAIL_BILLING as email ,PHONE_BILLING as contact_num ,\'Historical_Data\' as MARKETPLACE ,null as MARKETPLACE_ID ,order_id ,concat(order_id,\'_\',replace(item,\'nan\',0)::int::varchar) as SUBORDER_ID ,null as INVOICE_ID ,order_number as REFERENCE_CODE ,null as MANIFEST_DATE ,null as SHIPPING_LAST_UPDATE_DATE , case when upper(SHIPPING_STATUS) like any (\'%DISPACTH/DELIVERED%\',\'%COMPLETED%\') THEN \'DELIVERED\' else SHIPPING_STATUS END AS SHIPPING_STATUS ,b.sku ,null as sku_type ,null as PRODUCT_ID ,itemname as PRODUCTNAME ,null as currency ,null as is_refund ,CITY_BILLING as city ,STATE_NAME_BILLING as state ,case when upper(ORDER_STATUS) like any (\'%DISPACTH/DELIVERED%\',\'%COMPLETED%\') THEN \'DELIVERED\' else ORDER_STATUS END as ORDER_STATUS ,TO_TIMESTAMP(ORDER_DATE, \'DD-MM-YYYY HH24:MI\') ORDER_DATE ,try_cast(SHIPPING_CHARGES as float) as SHIPPING_PRICE ,null as NUMBER_OF_PRODUCTS_IN_COMBO ,replace(QUANTITY,\'nan\',0)::int as SUBORDER_QUANTITY ,replace(QUANTITY,\'nan\',0)::int as SHIPPED_QUANTITY ,replace(QUANTITY,\'nan\',0)::int as RETURNED_QUANTITY ,replace(QUANTITY,\'nan\',0)::int as CANCELLED_QUANTITY ,try_cast(ORDERREFUNDAMOUNT as int) as RETURN_SALES ,null as CANCEL_SALES ,try_cast(ORDER_TOTAL_TAX_AMOUNT as int) as tax ,try_cast(mrp as int) as sUBORDER_MRP ,upper(coalesce(nsm.category,s.Product_Category_Mapped,itemname)) category ,upper(coalesce(nsm.product_name,s.Product_name_mapped,itemname)) Product_Name_Mapped ,upper(coalesce(nsm.report_category,s.Report_Category)) Report_Category ,upper(coalesce(nsm.pack,s.Product_Pack)) Product_Pack ,coalesce(nsm.qty,s.product_quantity) Product_quantity ,replace(discount_amount,\'nan\',0)::float as discount ,try_cast(ORDERSUBTOTALAMOUNT as int) as SELLING_PRICE ,try_cast(MRP as int) as MRP_SALES ,null DISCOUNT_MRP ,case when row_number() over(partition by right(regexp_replace(PHONE_BILLING, \'[^a-zA-Z0-9]+\'),10) order by TO_TIMESTAMP(ORDER_DATE, \'DD-MM-YYYY HH24:MI\') asc) = 1 then 1 else 0 end as NEW_CUSTOMER_FLAG ,null NEW_CUSTOMER_FLAG_MONTH ,null as WAREHOUSE_NAME ,null AS DAYS_IN_SHIPMENT ,null as CHANNEL ,NULL as Shopify_UTM_source ,NULL as Shopify_UTM_Medium ,NULL AS UTM_CAMPAIGN ,PAYMENT_METHOD_TITLE as PAYMENT_MODE ,null as IMPORT_DATE ,null as LAST_UPDATE_DATE ,case when lower(SHIPPING_STATUS) like \'%deliver%\' then ORDER_DATE else null end as invoice_date ,null as company_name ,POSTCODE_BILLING1 as pin_code ,NULL as Shopify_utm_campaign ,\'Synced\' as EasyEcom_Sync_Flag ,null as cancelled_at ,null as delivered_time ,null as return_date ,nsm.sku as exception_combined_sku from rpsg_db.maplemonk.historical_sales_data b left join (select * from (select sku, product_id, productname, Product_name_mapped, \"Product Category\" Product_Category_Mapped, \"Report Category\" Report_Category, \"Product Pack\" Product_Pack, \"Product Quantity\" Product_Quantity,marketplace as brand, row_number() over (partition by lower(sku) order by \"Product Category\") rw from rpsg_DB.maplemonk.new_sku_master where sku is not null) where rw=1 ) S on lower(b.sku)=lower(s.sku) left join ( select * from ( select *, row_number() over(partition by sku order by 1) rw from ( select SKU ,\"Product Category\" category ,\"Product Name mapped\" as Product_name ,\"Report Category\" as report_category , qty , pack from rpsg_db.maplemonk.drv_combined_sku_master )) where rw = 1 )nsm on b.sku = nsm.sku where order_id not in ( select distinct order_id from RPSG_DB.maplemonk.sales_consolidated_intermediate_drv ) ) ; create or replace table RPSG_DB.maplemonk.sales_consolidated_intermediate_drv as select * ,case when lower(order_status) like \'%cancel%\' or lower(shipping_status) like \'%cancel%\' then \'cancelled\' else upper(b.\"Mapped Status\") end as pre_Final_Status ,concat(\'\',DATE_PART(hour, order_date::timestamp),\'-\',DATE_PART(hour, order_date::timestamp)+1) as HOUR ,DAYNAME(TO_DATE(order_Date::date)) as DAYNAME from RPSG_DB.maplemonk.sales_consolidated_intermediate_drv a left join (select distinct status, \"Mapped Status\" from rpsg_db.maplemonk.shipment_status_mapping) b on lower(case when lower(a.order_status) in (\'cancelled\', \'returned\') then a.order_status else coalesce(a.shipping_status, a.order_status) end)= lower(b.status) where not( ifnull(sku,\'\') in (select distinct sku::varchar from rpsg_db.maplemonk.three60_sku_master) ); create or replace table RPSG_DB.maplemonk.sales_consolidated_intermediate_drv as select a.*,b.clickpost_status,c.status as offline_status, case when lower(pre_Final_Status) like any (\'%delivered%\',\'%cancelled%\',\'%rto%\') then pre_final_status else coalesce(c.status,clickpost_status,pre_final_status) end as final_status ,created_At_d as clickpost_delivered_date from RPSG_DB.maplemonk.sales_consolidated_intermediate_drv a left join (select waybill as AWb, case when lower(replace(LATEST_STATUS:clickpost_status_description,\'\',\'\"\')) like \'%rto%\' then \'RTO\' else lower(replace(LATEST_STATUS:clickpost_status_description,\'\',\'\"\')) end as clickpost_status, case when lower(clickpost_status) like \'deliver%\' then replace(LATEST_STATUS : created_at,\'\',\'\"\')::timestamp end as created_At_d from ( select *, row_number() over(partition by waybill order by _AIRBYTE_EMITTED_AT desc) rwn from rpsg_db.MAPLEMONK.clickpost_orders ) where rwn=1 )b on a.awb = b.awb left join (select * from (select *,row_number() over(partition by \"Order id\" order by 1)rw from rpsg_db.maplemonk.order_status_offline) where rw=1) c on replace(lower(a.reference_code),\'#\',\'\') = lower(c.\"Order id\") ; create or replace table RPSG_DB.maplemonk.sales_consolidated_intermediate_drv as select upper(coalesce(rf.channel,oi.channel,rf.GA_SOURCEMEDIUM,oi.GA_SOURCEMEDIUM)) as GA_Channel ,upper(coalesce(rf.GA_SOURCE,oi.GA_SOURCE)) GA_SOURCE ,upper(coalesce(rf.GA_MEDIUM,oi.GA_MEDIUM)) GA_MEDIUM ,coalesce(rf.sessioncampaignname,oi.sessioncampaignname) ga_campaign ,case when GA_CHANNEL is null then shopify_utm_source else upper(coalesce(rf.GA_SOURCE,oi.GA_SOURCE)) end as final_source ,case when GA_CHANNEL is null then shopify_utm_medium else upper(coalesce(rf.GA_MEDIUM,oi.GA_MEDIUM)) end as final_medium ,coalesce(rf.VIEW_ID,oi.VIEW_ID) as VIEW_ID ,case when GA_CHANNEL is null then utm_campaign else ga_campaign end as final_utm_campaign ,coalesce(GA_CHANNEL,SCID.channel) PRE_FINAL_CHANNEL ,case when Upper(PRE_FINAL_CHANNEL) in ( \'ORGANIC\', \'DIRECT\', \'REFERRAL\', \'BRANDING\', \'WOOCOMMERCE\', \'NOT MAPPED\', \'RETENTION\', \'CRITEO\', \'FB\', \'SOCIAL\', \'GOOGLE\', \'CRM\', \'SNAPCHAT\') then Upper(PRE_FINAL_CHANNEL) else \'OTHERS\' end final_channel ,SCID.* from RPSG_DB.maplemonk.sales_consolidated_intermediate_drv SCID left join ( select ch.*,sn.sessioncampaignname from (select * from (select * , Row_number() OVER (partition BY ga_transactionid ORDER BY _airbyte_emitted_at desc) rw from RPSG_DB.maplemonk.GA_FINAL_ORDER_BY_SOURCE_CONSOLIDATED_DRV ) where rw=1) ch left join ( select * from ( select transactionid ,sessioncampaignname ,row_number() over(partition by transactionid order by _airbyte_emitted_at desc ) rw from rpsg_db.maplemonk.drv_ga4_order_by_campaign_name ) where rw = 1 )sn on ch.ga_transactionid = sn.transactionid )rf on scid.reference_code = rf.ga_transactionid left join ( select ch.*,sn.sessioncampaignname from (select * from (select * , Row_number() OVER (partition BY ga_transactionid ORDER BY _airbyte_emitted_at desc) rw from RPSG_DB.maplemonk.GA_FINAL_ORDER_BY_SOURCE_CONSOLIDATED_DRV ) where rw=1) ch left join ( select * from ( select transactionid ,sessioncampaignname ,row_number() over(partition by transactionid order by _airbyte_emitted_at desc ) rw from rpsg_db.maplemonk.drv_ga4_order_by_campaign_name ) where rw = 1 )sn on ch.ga_transactionid = sn.transactionid )oi on scid.order_id = oi.ga_transactionid ; create or replace table rpsg_DB.maplemonk.Final_customerID as with new_phone_numbers as ( select phone, contact_num ,19700000000 + row_number() over( order by contact_num asc ) as maple_monk_id from ( select distinct right(regexp_replace(phone, \'[^a-zA-Z0-9]+\'),10) as contact_num, phone from rpsg_DB.maplemonk.SALES_CONSOLIDATED_INTERMEDIATE_DRV ) a ), int as ( select contact_num,email,coalesce(maple_monk_id,id2) as maple_monk_id from ( select contact_num, email,maple_monk_id,19800000000+row_number() over(partition by maple_monk_id is NULL order by email asc ) as id2 from ( select distinct coalesce(p.contact_num,right(regexp_replace(e.contact_num, \'[^a-zA-Z0-9]+\'),10)) as contact_num, e.email,maple_monk_id from ( select phone as contact_num,email from rpsg_DB.maplemonk.SALES_CONSOLIDATED_INTERMEDIATE_DRV ) e left join new_phone_numbers p on p.contact_num = right(regexp_replace(e.contact_num, \'[^a-zA-Z0-9]+\'),10) ) a ) b ) select contact_num, email, maple_monk_id from int where coalesce(contact_num,email) is not NULL; create or replace table rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre as select coalesce(m.maple_monk_id_phone, d.maple_monk_id) as customer_id_final, min(order_date) over(partition by customer_id_final) as acquisition_date, m.* from (select c.maple_monk_id as maple_monk_id_phone, o.* from rpsg_DB.maplemonk.SALES_CONSOLIDATED_INTERMEDIATE_DRV o left join (select * from (select contact_num phone,maple_monk_id, row_number() over (partition by contact_num order by maple_monk_id asc) magic from rpsg_DB.maplemonk.Final_customerID) where magic =1 )c on c.phone = right(regexp_replace(o.phone, \'[^a-zA-Z0-9]+\'),10))m left join (select distinct maple_monk_id, email from rpsg_DB.maplemonk.Final_customerID where contact_num is null )d on d.email = m.email ; ALTER TABLE rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre drop COLUMN new_customer_flag ; ALTER TABLE rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre ADD COLUMN new_customer_flag varchar(50); ALTER TABLE rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre drop COLUMN new_customer_flag_month ; ALTER TABLE rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre ADD COLUMN new_customer_flag_month varchar(50); ALTER TABLE rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre ADD COLUMN acquisition_product varchar(16777216); ALTER TABLE rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre ADD COLUMN acquisition_channel varchar(16777216); ALTER TABLE rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre ADD COLUMN acquisition_marketplace varchar(16777216); ALTER TABLE rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre drop COLUMN ACQUISITION_DATE ; ALTER TABLE rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre ADD COLUMN ACQUISITION_DATE timestamp; ALTER TABLE rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre ADD COLUMN SAME_DAY_ORDERNO number; UPDATE rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre AS A SET A.SAME_DAY_ORDERNO = B.rw FROM ( select distinct customer_id_final ,order_id ,rank() over (partition by customer_id_final, order_date order by order_date, order_id) as rw from rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre ) AS B Where A.order_id = B.order_id; UPDATE rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre AS A SET A.ACQUISITION_DATE = B.ACQUISITION_DATE FROM ( select distinct customer_id_final , min(order_Date) OVER ( partition BY customer_id_final) ACQUISITION_DATE from rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre B where (case when lower(order_status) is null then 1=1 else lower(order_status) not in (\'cancelled\',\'returned\') end) and (case when lower(shipping_status) is null then 1=1 else lower(shipping_status) not in (\'cancelled\',\'returned\') end) ) AS B where A.customer_id_final = B.customer_id_final; UPDATE rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre AS A SET A.new_customer_flag = B.flag FROM ( SELECT DISTINCT order_id, customer_id_final, Order_Date, CASE WHEN Order_Date = ACQUISITION_DATE and (case when lower(order_status) is null then 1=1 else lower(order_status) not in (\'cancelled\',\'returned\') end) and (case when lower(shipping_status) is null then 1=1 else lower(shipping_status) not in (\'cancelled\',\'returned\') end) then \'New\' WHEN Order_Date < ACQUISITION_DATE or acquisition_date is null THEN \'Yet to make completed order\' WHEN Order_Date > ACQUISITION_DATE then \'Repeat\' END AS Flag FROM rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre )AS B WHERE A.order_id = B.order_id AND A.customer_id_final = B.customer_id_final AND A.order_date::date=B.Order_date::Date; UPDATE rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre SET new_customer_flag = CASE WHEN new_customer_flag IS NULL and (case when lower(order_status) is null then 1=1 else lower(order_status) not in (\'cancelled\',\'returned\') end) and (case when lower(shipping_status) is null then 1=1 else lower(shipping_status) not in (\'cancelled\',\'returned\') end) THEN \'New\' WHEN new_customer_flag IS NULL and (case when lower(order_status) is null then 1=1 else lower(order_status) in (\'cancelled\',\'returned\') end) and (case when lower(shipping_status) is null then 1=1 else lower(shipping_status) in (\'cancelled\',\'returned\') end) THEN \'Yet to make completed order\' ELSE new_customer_flag END; UPDATE rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre AS A SET A.new_customer_flag_month = B.flag FROM ( SELECT DISTINCT order_id, customer_id_final, Order_Date, CASE WHEN Last_day(order_date, \'month\') = Last_day(acquisition_date, \'month\') THEN \'New\' WHEN Last_day(order_date, \'month\') < Last_day(acquisition_date, \'month\') or acquisition_date is null THEN \'Yet to make completed order\' WHEN Last_day(order_date, \'month\') > Last_day(acquisition_date, \'month\') THEN \'Repeat\' END AS Flag FROM rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre)AS B WHERE A.order_id = B.order_id AND A.customer_id_final = B.customer_id_final; UPDATE rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre SET new_customer_flag_month = CASE WHEN new_customer_flag_month IS NULL and (case when lower(order_status) is null then 1=1 else lower(order_status) not in (\'cancelled\',\'returned\') end) and (case when lower(shipping_status) is null then 1=1 else lower(shipping_status) not in (\'cancelled\',\'returned\') end) THEN \'New\' ELSE new_customer_flag_month END; CREATE OR replace temporary TABLE rpsg_DB.maplemonk.temp_source_1 AS SELECT DISTINCT customer_id_final, channel , marketplace FROM ( SELECT DISTINCT customer_id_final, order_date, FINAL_CHANNEL channel, marketplace, Min(order_date) OVER ( partition BY customer_id_final) firstOrderdate FROM rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre where (case when lower(order_status) is null then 1=1 else lower(order_status) not in (\'cancelled\',\'returned\') end) and (case when lower(shipping_status) is null then 1=1 else lower(shipping_status) not in (\'cancelled\',\'returned\') end)) res WHERE order_date=firstorderdate; UPDATE rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre AS a SET a.acquisition_channel=b.channel FROM rpsg_db.maplemonk.temp_source_1 b WHERE a.customer_id_final = b.customer_id_final; UPDATE rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre AS a SET a.acquisition_marketplace=b.marketplace FROM rpsg_DB.maplemonk.temp_source_1 b WHERE a.customer_id_final = b.customer_id_final; CREATE OR replace temporary TABLE rpsg_DB.maplemonk.temp_product_1 AS SELECT DISTINCT customer_id_final, category, Row_number() OVER (partition BY customer_id_final ORDER BY SELLING_PRICE DESC) rowid FROM ( SELECT DISTINCT customer_id_final, order_date, category, SELLING_PRICE , Min(order_date) OVER (partition BY customer_id_final) firstOrderdate FROM rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre where (case when lower(order_status) is null then 1=1 else lower(order_status) not in (\'cancelled\',\'returned\') end) and (case when lower(shipping_status) is null then 1=1 else lower(shipping_status) not in (\'cancelled\',\'returned\') end))res WHERE order_date=firstorderdate; UPDATE rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre AS A SET A.acquisition_product=B.category FROM ( SELECT * FROM rpsg_DB.maplemonk.temp_product_1 WHERE rowid=1)B WHERE A.customer_id_final = B.customer_id_final; create or replace table rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV as select *, datediff(month, acquisition_date::date, ordeR_date::date) months_from_acquisition ,dense_rank() over(partition by customer_id_final order by order_date::date asc) rw_c ,case when rw_c = 1 then \'new\' else \'repeat\' end as booked_customer_flag from rpsg_DB.maplemonk.SALES_CONSOLIDATED_DRV_pre ; create or replace table RPSG_DB.MAPLEMONK.fact_items_easyecom_returns_detailed_drv as select A.* ,coalesce(nsm.category,s.Product_Category_Mapped, sp.Product_Category_Mapped) as category ,coalesce(nsm.product_name,s.Product_name_mapped,sp.Product_name_mapped) Product_Name_Mapped ,coalesce(nsm.report_category,s.Report_Category,sp.Report_Category) report_category ,coalesce(nsm.pack,s.product_pack,sp.product_pack) Product_Pack ,coalesce(nsm.qty,s.Product_Quantity, sp.Product_Quantity) Product_Quantity from (select ORDER_ID ,INVOICE_ID ,RI.VALUE:\"suborder_id\" SUBORDER_ID ,REFERENCE_CODE ,CREDIT_NOTE_ID ,CREDIT_NOTE_NUMBER ,try_to_timestamp(ORDER_DATE) ORDER_DATE ,try_to_timestamp(INVOICE_DATE) INVOICE_DATE ,try_to_timestamp(RETURN_DATE) RETURN_DATE ,try_to_timestamp(MANIFEST_DATE) MANIFEST_DATE ,try_to_timestamp(IMPORT_DATE) IMPORT_DATE ,try_to_timestamp(LAST_UPDATE_DATE) LAST_UPDATE_DATE ,RI.VALUE:company_product_id COMPANY_PRODUCT_ID ,replace(RI.VALUE:productName,\'\"\',\'\') PRODUCTNAME ,RI.VALUE:product_id PRODUCT_ID ,replace(RI.VALUE:sku,\'\"\',\'\') SKU ,replace(RI.VALUE:mrp,\'\"\',\'\') MRP ,MARKETPLACE ,COMPANY_NAME ,MARKETPLACE_ID ,REPLACEMENT_ORDER ,replace(RI.VALUE:return_reason,\'\"\',\'\') RETURN_REASON ,ifnull(RI.VALUE:returned_item_quantity::float,0) RETURNED_QUANTITY ,ifnull(RI.Value:credit_note_total_item_excluding_tax::float,0) RETURN_AMOUNT_WITHOUT_TAX ,ifnull(RI.Value:credit_note_total_item_tax::float,0) RETURN_TAX ,ifnull(RI.Value:credit_note_total_item_shipping_charge::float,0) RETURN_SHIPPING_CHARGE ,ifnull(RI.VALUE:credit_note_total_item_miscellaneous::float,0) RETURN_MISC ,ifnull(RI.Value:credit_note_total_item_excluding_tax::float,0) + ifnull(RI.Value:credit_note_total_item_tax::float,0) + ifnull(RI.Value:credit_note_total_item_shipping_charge::float,0)+ifnull(RI.VALUE:credit_note_total_item_miscellaneous::float,0) TOTAL_RETURN_AMOUNT ,row_number() over (partition by credit_note_number, order_id, suborder_id, invoice_id, company_product_id order by last_update_date desc) rw from RPSG_DB.MAPLEMONK.easyecom_vl_returns R, LATERAL flatten(INPUT => R.ITEMS) RI ) A left join (select * from (select sku, product_id, productname, Product_name_mapped, \"Product Category\" Product_Category_Mapped, \"Report Category\" Report_Category, \"Product Pack\" Product_Pack, \"Product Quantity\" Product_Quantity, row_number() over (partition by lower(sku) order by \"Product Category\") rw from rpsg_DB.maplemonk.new_sku_master where sku is not null) where rw=1 ) S on lower(A.sku)=lower(s.sku) left join (select * from (select sku, product_id, productname, Product_name_mapped, \"Product Category\" Product_Category_Mapped, \"Report Category\" Report_Category, \"Product Pack\" Product_Pack, \"Product Quantity\" Product_Quantity, row_number() over (partition by product_id order by \"Product Category\") rw from rpsg_DB.maplemonk.new_sku_master where product_id is not null) where rw=1 ) SP on lower(A.product_id)=lower(sp.product_id) left join ( select * from ( select *, row_number() over(partition by sku order by 1) rw from ( select SKU ,\"Product Category\" category ,\"Product Name mapped\" as Product_name ,\"Report Category\" as report_category , qty , pack from rpsg_db.maplemonk.drv_combined_sku_master )) where rw = 1 )nsm on A.sku = nsm.sku where A.rw=1 ; Create or replace table RPSG_DB.MAPLEMONK.fact_items_easyecom_returns_detailed_drv as select ifnull(FE.channel,\'others\') CHANNEL ,FE.new_customer_flag ,FE.Customer_id_final ,FE.final_utm_campaign as final_campaign ,Fe.booked_customer_flag ,FE.phone ,FR.* from rpsg_db.maplemonk.fact_items_easyecom_returns_detailed_drv FR left join (select * from (select distinct replace(reference_code,\'#\',\'\') REFERENCE_CODE, FINAL_CHANNEL channel,final_utm_campaign, customer_id_final,new_customer_flag,booked_customer_flag, phone, row_number() over (partition by replace(reference_code,\'#\',\'\') order by 1) rw from RPSG_DB.MAPLEMONK.sales_consolidated_drv) where rw=1) FE on FR.REFERENCE_CODE = FE.REFERENCE_CODE; create or replace table RPSG_DB.MAPLEMONK.EASYECOM_RETURNS_SUMMARY_DRV as select MARKETPLACE ,COMPANY_NAME ,MARKETPLACE_ID ,Return_Date ,CHANNEL ,new_customer_flag ,booked_customer_flag ,sum(RETURNED_QUANTITY) TOTAL_RETURNED_QUANTITY ,sum(TOTAL_RETURN_AMOUNT) TOTAL_RETURN_AMOUNT ,sum(RETURN_TAX) TOTAL_RETURN_TAX ,sum(RETURN_AMOUNT_WITHOUT_TAX) TOTAL_RETURN_AMOUNT_EXCL_TAX from RPSG_DB.MAPLEMONK.fact_items_easyecom_returns_detailed_drv group by 1,2,3,4,5,6,7 order by 4 desc;",
                    "transaction": true
                }
            ) }}
            with sample_data as (

                select * from RPSG_DB.information_schema.databases
            ),
            
            final as (
                select * from sample_data
            )
            select * from final
            