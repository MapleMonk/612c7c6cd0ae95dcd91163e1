{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table snitch_db.snitch.customer_master_view as with lineitemwithc_id as (select t1.*,t2.final_size_mapped , t2.product_category from (select t3.*,r_t.returns,r_t.quantity as return_quantity, case when t3.order_status = \'CANCELLED\' then t3.suborder_quantity else 0 end as cancelled_quantity from ( (select cast(t2.customer_id_final as varchar) as customer_id_final ,t1.* from (select * from snitch_db.snitch.ORDER_LINEITEMS_FACT)t1 left join (select * from snitch_db.snitch.ORDERS_fact )t2 on t1.order_id = t2.order_id))t3 left join (select order_id,sku,sum(quantity) as quantity , \'True\' as returns from snitch_db.snitch.customer_returns_dim group by order_id,sku) r_t on t3.order_id = r_t.order_id and t3.sku = r_t.sku)t1 left join (select distinct p_t.sku ,m_t.final_size_mapped,p_t.product_category from snitch_db.snitch.product_dim p_t left join snitch_db.maplemonk.dim_mapping_product_dim m_t on p_t.size = m_t.size and p_t.product_category = m_t.product_category)t2 on t1.sku = t2.sku ) select t0.customer_id_final , t1.first_order_date, t1.last_order_date , COALESCE(t1.total_discount,0) as total_discount, COALESCE(t2.orders,0) as total_orders, COALESCE(t2.units,0) as total_units , COALESCE(t2.sales,0) as total_sales , COALESCE(t_c.orders,0) as total_cancel_orders , COALESCE(t_c.units,0) as total_cancel_units, COALESCE(t_c.sales,0) as total_cancel_sales, COALESCE(t_r.orders,0) as total_return_orders , COALESCE(t_r.units,0) as total_return_units, COALESCE(t_r.sales,0) as total_return_sales, f_p.product_id as frequently_purchased_productCategory , f_p.sku_group as frequently_purchased_sku_group, COALESCE(a_p.Average_Purchase_Value,0) as Average_Purchase_Value, f_o_hc.first_order_highest_sku , COALESCE(l3_s.orders,0) as last3_months_orders , COALESCE(l3_s.units,0) as last3_months_units , COALESCE(l3_s.sales,0) as last3_months_sales , COALESCE(l3_c.orders,0) as last3_months_cancel_orders , COALESCE(l3_c.units,0) as last3_months_cancel_units, COALESCE(l3_c.sales,0) as last3_months_cancel_sales, COALESCE(l3_r.orders,0) as last3_months_return_orders , COALESCE(l3_r.units,0) as last3_months_return_units, COALESCE(l3_r.sales,0) as last3_months_return_sales, COALESCE(l6_s.orders,0) as last6_months_orders , COALESCE(l6_s.units,0) as last6_months_units , COALESCE(l6_s.sales,0) as last6_months_sales , COALESCE(l6_c.orders,0) as last6_months_cancel_orders , COALESCE(l6_c.units,0) as last6_months_cancel_units, COALESCE(l6_c.sales,0) as last6_months_cancel_sales, COALESCE(l6_r.orders,0) as last6_months_return_orders , COALESCE(l6_r.units,0) as last6_months_return_units, COALESCE(l6_r.sales,0) as last6_months_return_sales, COALESCE(l12_s.orders,0) as last12_months_orders , COALESCE(l12_s.units,0) as last12_months_units , COALESCE(l12_s.sales,0) as last12_months_sales , COALESCE(l12_c.orders,0) as last12_months_cancel_orders , COALESCE(l12_c.units,0) as last12_months_cancel_units, COALESCE(l12_c.sales,0) as last12_months_cancel_sales, COALESCE(l12_r.orders,0) as last12_months_return_orders , COALESCE(l12_r.units,0) as last12_months_return_units, COALESCE(l12_r.sales,0) as last12_months_return_sales, p_p.primary_payment_type as preffered_payment_method, p_r.return_percentage, p_d.discount_percentage, p_c.cancel_percentage, f_s.final_size_mapped as recommended_size, m_o_p.cod_percentage as cod_percentage, m_o_p.prepaid_percentage as prepaid_percentage from (select distinct customer_id_final from lineitemwithc_id)t0 left join (select customer_id_final,min(order_date) as first_order_date,max(order_date) as last_order_date,sum(discount) as total_discount from lineitemwithc_id where order_status != \'CANCELLED\' group by customer_id_final)t1 on t0.customer_id_final = t1.customer_id_final left join (select customer_id_final,count(distinct order_id) as orders,count(distinct sales_order_item_id) as units ,sum(selling_price) as sales from lineitemwithc_id group by customer_id_final) t2 on t1.customer_id_final = t2.customer_id_final left join (select customer_id_final,count(distinct order_id) as orders,count(distinct sales_order_item_id) as units ,sum(selling_price) as sales from lineitemwithc_id where order_status = \'CANCELLED\' group by customer_id_final)t_c on t1.customer_id_final = t_c.customer_id_final left join (select customer_id_final,count(distinct order_id) as orders,sum(return_quantity) as units ,sum(div0(selling_price,suborder_quantity)*return_quantity) as sales from lineitemwithc_id where returns = \'True\' group by customer_id_final)t_r on t1.customer_id_final = t_r.customer_id_final left join (select customer_id_final,product_category as product_id,sku_group as sku_group from (SELECT customer_id_final, product_id, sku_group, product_category, count(*) as total_count, row_number() OVER (PARTITION BY customer_id_final ORDER BY sum(shipping_quantity) DESC) AS row_number FROM lineitemwithc_id GROUP BY customer_id_final, product_id,sku_group,product_category order by customer_id_final,4) where row_number = 1)f_p on t1.customer_id_final = f_p.customer_id_final left join (select customer_id_final,avg(selling_price) as Average_Purchase_Value from lineitemwithc_id where order_status !=\'CANCELLED\' group by customer_id_final)a_p on t1.customer_id_final = a_p.customer_id_final left join (SELECT customer_id_final, sku AS first_order_highest_sku FROM ( SELECT customer_id_final, sku, ROW_NUMBER() OVER (PARTITION BY customer_id_final ORDER BY selling_price DESC) AS row_number FROM ( SELECT * FROM snitch_db.maplemonk.lineitemwithc_id o INNER JOIN ( SELECT customer_id_final AS c_id, MIN(order_date) AS first_order_date FROM lineitemwithc_id WHERE order_status != \'CANCELLED\' GROUP BY customer_id_final ) t ON o.customer_id_final::varchar = t.c_id::varchar AND o.order_date = t.first_order_date ) ) WHERE row_number = 1)f_o_hc on t1.customer_id_final::varchar = f_o_hc.customer_id_final::varchar left join (select customer_id_final,count(distinct order_id) as orders,count(distinct sales_order_item_id) as units ,sum(selling_price) as sales from lineitemwithc_id where order_date >= (SELECT (MAX(order_date) - INTERVAL \'90 days\')::DATE FROM lineitemwithc_id) group by customer_id_final)l3_s on t1.customer_id_final = l3_s.customer_id_final left join (select customer_id_final,count(distinct order_id) as orders,count(distinct sales_order_item_id) as units ,sum(selling_price) as sales from lineitemwithc_id where order_status = \'CANCELLED\' and order_date >= (SELECT (MAX(order_date) - INTERVAL \'90 days\')::DATE FROM lineitemwithc_id) group by customer_id_final)l3_c on t1.customer_id_final = l3_c.customer_id_final left join (select customer_id_final,count(distinct order_id) as orders,sum(return_quantity) as units ,sum(div0(selling_price,suborder_quantity)*return_quantity) as sales from lineitemwithc_id where returns = \'True\' and order_date >= (SELECT (MAX(order_date) - INTERVAL \'90 days\')::DATE FROM lineitemwithc_id) group by customer_id_final)l3_r on t1.customer_id_final = l3_r.customer_id_final left join (select customer_id_final,count(distinct order_id) as orders,count(distinct sales_order_item_id) as units ,sum(selling_price) as sales from lineitemwithc_id where order_date >= (SELECT (MAX(order_date) - INTERVAL \'180 days\')::DATE FROM lineitemwithc_id) group by customer_id_final)l6_s on t1.customer_id_final = l6_s.customer_id_final left join (select customer_id_final,count(distinct order_id) as orders,count(distinct sales_order_item_id) as units ,sum(selling_price) as sales from lineitemwithc_id where order_status = \'CANCELLED\' and order_date >= (SELECT (MAX(order_date) - INTERVAL \'180 days\')::DATE FROM lineitemwithc_id) group by customer_id_final)l6_c on t1.customer_id_final = l6_c.customer_id_final left join (select customer_id_final,count(distinct order_id) as orders,sum(return_quantity) as units ,sum(div0(selling_price,suborder_quantity)*return_quantity) as sales from lineitemwithc_id where returns = \'True\' and order_date >= (SELECT (MAX(order_date) - INTERVAL \'180 days\')::DATE FROM lineitemwithc_id) group by customer_id_final)l6_r on t1.customer_id_final = l6_r.customer_id_final left join (select customer_id_final,count(distinct order_id) as orders,count(distinct sales_order_item_id) as units ,sum(selling_price) as sales from lineitemwithc_id where order_date >= (SELECT (MAX(order_date) - INTERVAL \'365 days\')::DATE FROM lineitemwithc_id) group by customer_id_final)l12_s on t1.customer_id_final = l12_s.customer_id_final left join (select customer_id_final,count(distinct order_id) as orders,count(distinct sales_order_item_id) as units ,sum(selling_price) as sales from lineitemwithc_id where order_status = \'CANCELLED\' and order_date >= (SELECT (MAX(order_date) - INTERVAL \'365 days\')::DATE FROM lineitemwithc_id) group by customer_id_final) l12_c on t1.customer_id_final = l12_c.customer_id_final left join (select customer_id_final,count(distinct order_id) as orders,sum(return_quantity) as units ,sum(div0(selling_price,suborder_quantity)*return_quantity) as sales from lineitemwithc_id where returns = \'True\' and order_date >= (SELECT (MAX(order_date) - INTERVAL \'365 days\')::DATE FROM lineitemwithc_id) group by customer_id_final)l12_r on t1.customer_id_final = l12_r.customer_id_final left join (select customer_id_final,primary_payment_type from (SELECT customer_id_final, primary_payment_type, count(*) as total_count, row_number() OVER (PARTITION BY customer_id_final ORDER BY count(primary_payment_type) DESC) AS row_number FROM lineitemwithc_id GROUP BY customer_id_final, primary_payment_type order by customer_id_final,4) where row_number = 1) p_p on t1.customer_id_final = p_p.customer_id_final left join (select customer_id_final,div0(sum(IFNULL(return_quantity, 0)), sum(ifnull(suborder_quantity,0)))*100 as return_percentage from lineitemwithc_id where order_status != \'CANCELLED\' group by customer_id_final)p_r on t1.customer_id_final = p_r.customer_id_final left join (select customer_id_final,div0(sum(IFNULL(discount, 0)), sum(ifnull(mrp,0)))*100 as discount_percentage from lineitemwithc_id group by customer_id_final)p_d on t1.customer_id_final = p_d.customer_id_final left join (select customer_id_final, div0(sum(cancelled_quantity),sum(suborder_quantity))*100 as cancel_percentage from lineitemwithc_id group by customer_id_final)p_c on t1.customer_id_final = p_c.customer_id_final left join (select customer_id_final,final_size_mapped from (SELECT customer_id_final, final_size_mapped, count(*) as total_count, row_number() OVER (PARTITION BY customer_id_final ORDER BY sum(shipping_quantity) DESC) AS row_number FROM lineitemwithc_id where order_status != \'CANCELLED\' GROUP BY customer_id_final, final_size_mapped order by customer_id_final) where row_number = 1)f_s on t1.customer_id_final = f_s.customer_id_final left join (SELECT customer_id_final, (SUM(CASE WHEN mode_of_payment = \'COD\' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS cod_percentage, (SUM(CASE WHEN mode_of_payment = \'Prepaid\' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS prepaid_percentage from lineitemwithc_id where order_status != \'CANCELLED\' group by customer_id_final) m_o_p on t1.customer_id_final = m_o_p.customer_id_final ;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from snitch_db.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        