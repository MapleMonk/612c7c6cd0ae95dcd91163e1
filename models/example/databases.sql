{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "CREATE OR REPLACE TABLE RPSG_DB.MAPLEMONK.Shopify_Herbobuild_All_customers AS select *,\'Shopify_Herbobuild\' AS Shop_Name from RPSG_DB.MAPLEMONK.Shopify_Herbobuild_CUSTOMERS; create or replace table RPSG_DB.MAPLEMONK.HB_SHOPIFY_UTM_PARAMETERS_FINAL as select ShopifyQL.* ,upper(coalesce(UTM_MAPPING.CHANNEL,UTM_MAPPING_REF.CHANNEL)) as ShopifyQL_MAPPED_CHANNEL ,upper(coalesce(UTM_MAPPING.SOURCE,UTM_MAPPING_REF.SOURCE)) as ShopifyQL_MAPPED_SOURCE ,upper(coalesce(UTM_MAPPING_FIRST_CLICK.SOURCE,ShopifyQL.FirstVisit_UTM_Source)) as ShopifyQL_MAPPED_FIRSTCLICK_SOURCE ,upper(UTM_MAPPING_FIRST_CLICK.CHANNEL) as ShopifyQL_MAPPED_FIRSTCLICK_CHANNEL from (select * from (select A.id ,A.name ,A.createdat ,replace(A.customerjourneysummary:\"momentsCount\",\'\"\',\'\') Moments_Count ,replace(A.customerjourneysummary:\"daysToConversion\",\'\"\',\'\') DaysToConvert ,replace(A.CUSTOMERJOURNEYSUMMARY:\"lastVisit\":\"utmParameters\":\"source\",\'\"\',\'\') LastVisit_UTM_Source ,replace(A.CUSTOMERJOURNEYSUMMARY:\"lastVisit\":\"source\",\'\"\',\'\') LastVisit_NON_UTM_Source ,replace(A.CUSTOMERJOURNEYSUMMARY:\"lastVisit\":\"utmParameters\":\"campaign\",\'\"\',\'\') LastVisit_UTM_Campaign ,replace(A.CUSTOMERJOURNEYSUMMARY:\"firstVisit\":\"utmParameters\":\"source\",\'\"\',\'\') FirstVisit_UTM_Source ,replace(A.CUSTOMERJOURNEYSUMMARY:\"firstVisit\":\"utmParameters\":\"medium\",\'\"\',\'\') FirstVisit_UTM_Medium ,replace(A.CUSTOMERJOURNEYSUMMARY:\"firstVisit\":\"utmParameters\":\"campaign\",\'\"\',\'\') FirstVisit_UTM_Campaign ,replace(B.Value:\"id\",\'gid://shopify/CustomerVisit/\',\'\') Moment_ID ,replace(B.value:\"utmParameters\":\"source\",\'\"\',\'\') Last_Moment_UTM_Source ,replace(B.value:\"utmParameters\":\"medium\",\'\"\',\'\') Last_Moment_UTM_Medium ,case when Moments_Count >1 then LastVisit_UTM_Source else FirstVisit_UTM_Source end CJSummary_utm_source ,referrerdisplaytext Referrer_Name ,customerjourneysummary ,customerjourney ,coalesce(Last_Moment_UTM_Source,LastVisit_NON_UTM_Source) ShopifyQL_Unmapped_Last_Source ,rank() over (partition by name order by MOMENT_ID desc) rw from rpsg_db.maplemonk.hb_shopify_utm_parameters A, lateral flatten (INPUT => customerjourney:\"moments\") B ) where rw=1 ) ShopifyQL left join (select * from (select * , row_number() over (partition by lower(concat(lower(source),lower(medium))) order by 1) rw from RPSG_DB.MAPLEMONK.utm_mapping) where rw=1 and concat(lower(source),lower(medium)) is not null ) UTM_MAPPING on lower(ShopifyQL.ShopifyQL_Unmapped_Last_Source) = lower(concat(lower(UTM_MAPPING.source),lower(UTM_MAPPING.medium))) left join (select * from (select * , row_number() over (partition by lower(concat(lower(source),lower(medium))) order by 1) rw from RPSG_DB.MAPLEMONK.utm_mapping) where rw=1 and concat(lower(source),lower(medium)) is not null ) UTM_MAPPING_REF on lower(ShopifyQL.referrer_name) = lower(concat(lower(UTM_MAPPING_REF.source),lower(UTM_MAPPING_REF.medium))) left join (select * from (select * , row_number() over (partition by lower(concat(lower(source),lower(medium))) order by 1) rw from RPSG_DB.MAPLEMONK.utm_mapping) where rw=1 and concat(lower(source),lower(medium)) is not null ) UTM_MAPPING_FIRST_CLICK on lower(ShopifyQL.FirstVisit_UTM_Source) = lower(concat(lower(UTM_MAPPING_FIRST_CLICK.source),lower(UTM_MAPPING_FIRST_CLICK.medium))) ; create or replace table RPSG_DB.MAPLEMONK.HB_GOKWIK_SOURCE as With GOKWIK as ( WITH utm_source_cte AS ( SELECT S.id, UPPER(A.value:\"value\") AS utm_source FROM RPSG_DB.MAPLEMONK.Shopify_Herbobuild_ORDERS S, LATERAL FLATTEN(INPUT => note_attributes) A where LOWER(S.note_attributes) LIKE \'%gokwik%\' AND LOWER(A.value:\"name\") = \'utm_source\' ), utm_medium_cte AS ( SELECT S.id, UPPER(A.value:\"value\") AS utm_medium FROM RPSG_DB.MAPLEMONK.Shopify_Herbobuild_ORDERS S, LATERAL FLATTEN(INPUT => note_attributes) A where LOWER(S.note_attributes) LIKE \'%gokwik%\' AND LOWER(A.value:\"name\") = \'utm_medium\' ), utm_campaign_cte AS ( SELECT S.id, UPPER(A.value:\"value\") AS utm_campaign FROM RPSG_DB.MAPLEMONK.Shopify_Herbobuild_ORDERS S, LATERAL FLATTEN(INPUT => note_attributes) A where LOWER(S.note_attributes) LIKE \'%gokwik%\' AND LOWER(A.value:\"name\") = \'utm_campaign\' ), utm_content_cte AS ( SELECT S.id ,UPPER(A.value:\"value\") AS utm_content FROM RPSG_DB.MAPLEMONK.Shopify_Herbobuild_ORDERS S, LATERAL FLATTEN(INPUT => note_attributes) A where LOWER(S.note_attributes) LIKE \'%gokwik%\' AND LOWER(A.value:\"name\") = \'utm_content\' ) SELECT S.id, S.tags, source_cte.utm_source AS GOKWIK_UTM_SOURCE, medium_cte.utm_medium AS GOKWIK_UTM_MEDIUM, campaign_cte.utm_campaign AS GOKWIK_UTM_CAMPAIGN, content_cte.utm_content AS GOKWIK_UTM_CONTENT FROM RPSG_DB.MAPLEMONK.Shopify_Herbobuild_ORDERS S JOIN utm_source_cte source_cte ON S.id = source_cte.id JOIN utm_medium_cte medium_cte ON S.id = medium_cte.id JOIN utm_campaign_cte campaign_cte ON S.id = campaign_cte.id JOIN utm_content_cte content_cte ON S.id = content_cte.id WHERE LOWER(S.note_attributes) LIKE \'%gokwik%\' AND source_cte.utm_source IS NOT NULL AND medium_cte.utm_medium IS NOT NULL AND campaign_cte.utm_campaign IS NOT NULL AND content_cte.utm_content IS NOT NULL ) Select GOKWIK.* ,coalesce(Upper(UTM_MAPPING.CHANNEL), upper(GOKWIK_UTM_SOURCE),\'DIRECT\') as GOKWIK_MAPPED_CHANNEL ,coalesce(Upper(UTM_MAPPING.MODE), upper(GOKWIK_UTM_SOURCE),\'DIRECT\') as GOKWIK_MAPPED_MODE from GOKWIK left join (select * from (select * , row_number() over (partition by lower(concat(lower(source),lower(medium))) order by 1) rw from RPSG_DB.MAPLEMONK.utm_mapping) where rw=1 and lower(concat(source,medium)) is not null ) UTM_MAPPING on lower(concat(GOKWIK.GOKWIK_UTM_SOURCE,GOKWIK.GOKWIK_UTM_MEDIUM)) = lower(concat(UTM_MAPPING.source,UTM_MAPPING.medium)); create or replace table RPSG_DB.MAPLEMONK.Shopify_Herbobuild_All_orders as select AO.* ,UPPER(ShopifyQL.shopifyql_mapped_channel) shopifyql_mapped_channel ,UPPER(ShopifyQL.shopifyql_mapped_source) shopifyql_mapped_source ,UPPER(ShopifyQL.FIRSTVISIT_UTM_SOURCE) Shopifyql_FIRSTVISIT_UTM_SOURCE ,UPPER(ShopifyQL.LAST_MOMENT_UTM_SOURCE) Shopifyql_LAST_MOMENT_UTM_SOURCE ,UPPER(ShopifyQL.LastVisit_NON_UTM_Source) Shopifyql_LAST_VISIT_NON_UTM_SOURCE ,upper(ShopifyQL.LastVisit_UTM_Campaign) Shopifyql_LAST_VISIT_UTM_CAMPAIGN ,UPPER(ShopifyQL.LAST_MOMENT_UTM_MEDIUM) Shopifyql_LAST_MOMENT_UTM_MEDIUM ,UPPER(ShopifyQL.FIRSTVISIT_UTM_MEDIUM) Shopifyql_FIRSTVISIT_UTM_MEDIUM ,UPPER(ShopifyQL.FirstVisit_UTM_Campaign) Shopifyql_FIRSTVISIT_UTM_CAMPAIGN ,UPPER(ShopifyQL.ShopifyQL_MAPPED_FIRSTCLICK_SOURCE) ShopifyQL_MAPPED_FIRSTCLICK_SOURCE ,UPPER(ShopifyQL.ShopifyQL_MAPPED_FIRSTCLICK_CHANNEL) ShopifyQL_MAPPED_FIRSTCLICK_CHANNEL ,div0(ShopifyQL.MOMENTS_COUNT,count(1) over (partition by AO.name order by 1)) MOMENTS_COUNT ,div0(ShopifyQL.DAYSTOCONVERT,count(1) over (partition by AO.name order by 1)) DAYSTOCONVERT ,UPPER(GOKWIK.GOKWIK_UTM_SOURCE) GOKWIK_UTM_SOURCE ,UPPER(GOKWIK.GOKWIK_UTM_MEDIUM) GOKWIK_UTM_MEDIUM ,UPPER(GOKWIK.GOKWIK_UTM_CAMPAIGN) GOKWIK_UTM_CAMPAIGN ,UPPER(GOKWIK.GOKWIK_MAPPED_CHANNEL) GOKWIK_MAPPED_CHANNEL ,UPPER(GOKWIK.GOKWIK_MAPPED_MODE) GOKWIK_MAPPED_MODE ,UPPER(GOKWIK.GOKWIK_UTM_CONTENT) GOKWIK_UTM_CONTENT ,UPPER(ShopifyQL.Referrer_Name) Referrer_Name ,UPPER(coalesce(Shopifyql_LAST_VISIT_UTM_CAMPAIGN,GOKWIK_UTM_CAMPAIGN)) FINAL_UTM_CAMPAIGN ,Upper(coalesce(shopifyql_mapped_source,GOKWIK_MAPPED_MODE)) FINAL_UTM_SOURCE ,Upper(coalesce(shopifyql_mapped_channel,GOKWIK_MAPPED_CHANNEL)) FINAL_UTM_CHANNEL from (select * ,case when tags like \'%CRED%\' then \'CRED\' else \'Shopify_Herbobuild\' end AS Shop_Name from RPSG_DB.MAPLEMONK.Shopify_Herbobuild_ORDERS) AO left join RPSG_DB.MAPLEMONK.HB_SHOPIFY_UTM_PARAMETERS_FINAL ShopifyQL on AO.name = ShopifyQL.name left join RPSG_DB.MAPLEMONK.HB_GOKWIK_SOURCE GOKWIK on AO.ID = GOKWIK.ID ;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from RPSG_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        