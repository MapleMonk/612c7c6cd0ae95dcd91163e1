{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "Create or replace table BBK_DB.MAPLEMONK.Fact_items_bbk as select a.\"GuestId\" GuestId ,a.\"CustomerName\" CustomerName ,a.\"GuestPhone\" GuestPhone ,case when a.\"SourceOfOrder\" in (\'Swiggy\',\'Hungerbox\',\'ubereats\',\'CallCenter\') then \'1\' when a.\"GuestPhone\" in (\'919910921161\',\'911111100000\',\'91919999999\',\'918360321496\',\'91+919999999\',\'919199999999\') then \'1\' when a.\"SourceOfOrder\" = \'Zomato\' and right(a.\"GuestPhone\",6) = \'000000\' then a.\"GuestId\" else a.\"GuestPhone\" end CustomerID ,a.\"Email\" Email ,a.\"Gender\" Gender ,a.\"UnitId\" UnitId ,c.outletname ,c.outletcity ,a.\"OrderId\" OrderId ,concat(a.\"UnitId\",a.\"InvoiceNumber\",a.\"SaleDateTime\") as UniqueID ,a.\"InvoiceNumber\" InvoiceNumber ,try_Cast(a.\"OrderDateTime\" as Date) as OrderDate ,a.\"Address\" Address ,a.\"Locality\" Locality ,sum(try_cast(a.\"TotalAmt\" as float))/sum(items) as SalesPerItem ,case when sum(try_cast(a.\"TotalAmt\" as float)) <= 300 then \'<300\' when sum(try_cast(a.\"TotalAmt\" as float)) <= 500 and sum(try_cast(a.\"TotalAmt\" as float)) > 300 then \'301-500\' when sum(try_cast(a.\"TotalAmt\" as float)) <= 800 and sum(try_cast(a.\"TotalAmt\" as float)) > 500 then \'501-800\' when sum(try_cast(a.\"TotalAmt\" as float)) <= 1000 and sum(try_cast(a.\"TotalAmt\" as float)) > 800 then \'801-1000\' when sum(try_cast(a.\"TotalAmt\" as float)) > 1000 then \'>1000\' end as sales_buckets ,try_cast(a.\"SaleDateTime\" as Datetime) SaleDateTime ,try_cast(a.\"SaleDateTime\" as Date) SaleDate ,hour(try_cast(a.\"SaleDateTime\" as Datetime)) HourOfSale ,month(try_cast(a.\"SaleDateTime\" as Datetime)) MonthNumberOfSale ,monthname(try_cast(a.\"SaleDateTime\" as Datetime)) MonthOfSale ,year(try_cast(a.\"SaleDateTime\" as Datetime)) YearOfSale ,a.\"DispatchTime\" DispatchTime ,case when a.\"SourceOfOrder\" in (\'zomato\',\'Zomato6\', \'ZOMATO \') then \'Zomato\' when a.\"SourceOfOrder\" = \'Foodpanda\' then \'FoodPanda\' when a.\"SourceOfOrder\" = \'magicpin\' then \'Magicpin\' when a.\"SourceOfOrder\" = \'dotpe\' then \'Dotpe\' when a.\"SourceOfOrder\" in (\'swiggy\',\'SWIGGY\') then \'Swiggy\' else a.\"SourceOfOrder\" end as SourceOfOrder ,a.\"PaymentMode\" PaymentMode ,a.\"OrderStatus\" OrderStatus ,try_cast(a.\"DiscPercent\" as Float) DiscPercent ,try_cast(a.\"DiscAmount\" as Float)/sum(items) DiscAmount ,try_Cast(a.\"AdhocDiscount\" as Float)/sum(items) AdhocDiscount ,case when a.\"OrderType\" = \'Home_delivery\' then \'Home_Delivery\' when a.\"OrderType\" = \'Home-Delivery\' then \'Home_Delivery\' else a.\"OrderType\" end OrderType ,a.\"Feedback\" Feedback ,b.\"ItemId\" ItemId ,b.\"ItemName\" ItemName ,try_Cast(b.\"Quantity\" as Float) Quantity ,try_Cast(b.\"Price\" as Float) Price ,b.\"GroupName\" GroupName ,b.\"ItemType\" ItemType from( select a.*,c.items from (select distinct * from BBK_DB.MAPLEMONK.\"Historical_Order_file\" where \"InvoiceNumber\" not in (\'nan\',\'0\')) a left join (select \"UnitId\", \"InvoiceNumber\", \"SaleDateTime\", COUNT(1) AS Items from BBK_DB.MAPLEMONK.\"Historical_Item_file\" group by \"UnitId\", \"InvoiceNumber\", \"SaleDateTime\") c ON a.\"UnitId\"=c.\"UnitId\" and a.\"InvoiceNumber\"=c.\"InvoiceNumber\" and a.\"SaleDateTime\"=c.\"SaleDateTime\" )a left join (select distinct * from BBK_DB.MAPLEMONK.\"Historical_Item_file\") b on a.\"UnitId\"=b.\"UnitId\" and a.\"InvoiceNumber\"=b.\"InvoiceNumber\" and a.\"SaleDateTime\"=b.\"SaleDateTime\" left join bbk_db.maplemonk.unit_city c on a.\"UnitId\" = c.unitid group by a.\"GuestId\" ,a.\"CustomerName\" ,a.\"GuestPhone\" ,a.\"Email\" ,a.\"Gender\" ,a.\"UnitId\" ,a.\"OrderId\" ,a.\"InvoiceNumber\" ,a.\"OrderDateTime\" ,a.\"Address\" ,a.\"Locality\" ,a.\"SaleDateTime\" ,a.\"DispatchTime\" ,a.\"SourceOfOrder\" ,a.\"PaymentMode\" ,a.\"OrderStatus\" ,a.\"DiscPercent\" ,a.\"DiscAmount\" ,a.\"AdhocDiscount\" ,a.\"OrderType\" ,a.\"Feedback\" ,b.\"ItemId\" ,b.\"ItemName\" ,b.\"Quantity\" ,b.\"Price\" ,b.\"GroupName\" ,b.\"ItemType\" ,c.outletname ,c.outletcity ALTER TABLE bbk_db.maplemonk.FACT_ITEMS_BBK ADD COLUMN new_customer_flag varchar(50); UPDATE bbk_DB.maplemonk.FACT_ITEMS_bbk AS A SET A.new_customer_flag = B.flag FROM ( SELECT DISTINCT uniqueid, customerid, saledate, CASE WHEN saledate <> Min(saledate) OVER ( partition BY customerid) THEN \'Repeat\' ELSE \'New\' END AS Flag FROM bbk_db.maplemonk.FACT_ITEMS_bbk)AS B WHERE A.uniqueid = B.uniqueid AND A.customerid = B.customerid; UPDATE bbk_db.maplemonk.FACT_ITEMS_bbk SET new_customer_flag = CASE WHEN new_customer_flag IS NULL THEN \'New\' ELSE new_customer_flag END;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from BBK_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        