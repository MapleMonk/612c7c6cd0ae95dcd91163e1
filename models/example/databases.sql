{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table eggozdb.maplemonk.retailer_ranking as select t2.code, t2.onboarding_status, t2.distributor_id, t2.category_id, t1.* from (select *, 10*1/(1+exp(-1*log(10,\"Revenue\"+1))) - 4*1/(1+exp(-1*(case when no_of_replacements = 0 then 0 else no_of_replacements end)/(case when no_of_bills = 0 then 1 else no_of_bills end))) - 6*1/(1+exp(-1*(\"eggs_replaced\"/(\"Eggs Sold\"+1)))) - 4*1/(1+exp(-1*(\"eggs_return\"/(\"Eggs Sold\"+1)))) + 7*1/(1+exp(-1*\"landing_price\")) + 3*1/(1+exp(-1*log(10,(\"Eggs Sold\"-(\"Eggs Sold\"/(case when no_of_bills = 0 then 1 else no_of_bills end)))+1))) as score, rank() over (partition by date_, \"Area\" order by score desc) as \"Rank\" from (select ps.*, case when ps1.no_of_bills is null then 0 else ps1.no_of_bills end as no_of_bills, case when ps2.no_of_replacements is null then 0 else ps2.no_of_replacements end as no_of_replacements from ( SELECT distinct retailer_name AS \"Retailer_name\", area_classification as \"Area\", date_from_parts(year(date), month(date), 01) date_, sum(revenue) over (partition by year(date),month(date),retailer_name,retailer_id,area_classification order by month(date)) AS \"Revenue\", sum(eggs_sold) over (partition by year(date),month(date),retailer_name,retailer_id,area_classification order by month(date)) AS \"Eggs Sold\", sum(revenue) over (partition by year(date),month(date),retailer_name,retailer_id,area_classification order by month(date))/sum(eggs_sold+1) over (partition by year(date),month(date),retailer_name,retailer_id,area_classification order by month(date)) as \"landing_price\", sum(eggs_return) over (partition by year(date),month(date),retailer_name,retailer_id,area_classification order by month(date)) as \"eggs_return\", sum(eggs_replaced) over (partition by year(date),month(date),retailer_name,retailer_id,area_classification order by month(date)) as \"eggs_replaced\", retailer_id FROM eggozdb.maplemonk.primary_and_secondary where revenue is not null ) ps left join ( select distinct retailer_name, date_from_parts(year(date), month(date), 01) date_, count(date) over (partition by year(date),month(date),retailer_name order by month(date)) no_of_bills from eggozdb.maplemonk.primary_and_secondary where eggs_sold is not null and eggs_sold > 0 ) ps1 on ps1.retailer_name = ps.\"Retailer_name\" and ps.date_ = ps1.date_ left join ( select distinct retailer_name, date_from_parts(year(date), month(date), 01) date_, count(date) over (partition by year(date),month(date),retailer_name order by month(date)) no_of_replacements from eggozdb.maplemonk.primary_and_secondary where eggs_replaced is not null and eggs_replaced > 0 ) ps2 on ps2.retailer_name = ps.\"Retailer_name\" and ps.date_ = ps2.date_ ) where date_ between \'2022-01-01\' and getdate() group by \"Retailer_name\",\"Area\",date_,\"Revenue\",\"Eggs Sold\",\"landing_price\",\"eggs_return\",\"eggs_replaced\",retailer_id, no_of_bills, no_of_replacements ) t1 right join eggozdb.maplemonk.my_sql_retailer_retailer t2 on t1.retailer_id = t2.id ;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from EGGOZDB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        