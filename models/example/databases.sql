{{ config(
            materialized='table',
                post_hook={
                    "sql": "ALTER SESSION SET TIMEZONE = \'Asia/Kolkata\'; create or replace table snitch_db.maplemonk.store_replen_1 as WITH size_extraction AS ( SELECT branch_code, branch_name, REVERSE(SUBSTRING(REVERSE(logicusercode), 1, POSITION(\'-\', REVERSE(logicusercode)) - 1)) AS size, CASE WHEN POSITION(\'-\' IN LOGICUSERCODE) > 0 AND LEFT(LOGICUSERCODE, 2) = \'SH\' THEN SPLIT_PART(LOGICUSERCODE, \'-\', 1) WHEN POSITION(\'-\' IN LOGICUSERCODE) > 0 THEN SPLIT_PART(LOGICUSERCODE, \'-\', 1) || \'-\' || SPLIT_PART(LOGICUSERCODE, \'-\', 2) ELSE LOGICUSERCODE END AS sku_group, logicusercode, stock_qty, CASE WHEN size=\'28\' THEN \'XS\' WHEN size=\'30\' THEN \'S\' WHEN size=\'32\' THEN \'M\' WHEN size=\'34\' THEN \'L\' WHEN size=\'36\' THEN \'XL\' WHEN size=\'38\' THEN \'XXL\' WHEN size=\'40\' THEN \'3XL\' WHEN size=\'42\' THEN \'4XL\' WHEN size=\'44\' THEN \'5XL\' WHEN size=\'46\' THEN \'6XL\' WHEN size=\'48\' THEN \'7XL\' WHEN size=\'50\' THEN \'8XL\' WHEN size=\'\' THEN \'NA\' WHEN size IS NULL THEN \'NA\' ELSE size END AS size_mapped FROM snitch_db.maplemonk.logicerp23_24_get_stock_in_hand WHERE date = CURRENT_DATE AND logicusercode NOT LIKE \'%CB%\' ), size_extraction_pivot_up AS ( SELECT branch_code, branch_name, sku_group, coalesce(SUM(CASE WHEN size_mapped = \'XS\' THEN stock_qty ELSE 0 END),0) AS XS_units_store, coalesce(SUM(CASE WHEN size_mapped = \'S\' THEN stock_qty ELSE 0 END),0) AS S_units_store, coalesce(SUM(CASE WHEN size_mapped = \'M\' THEN stock_qty ELSE 0 END),0) AS M_units_store, coalesce(SUM(CASE WHEN size_mapped = \'L\' THEN stock_qty ELSE 0 END),0) AS L_units_store, coalesce(SUM(CASE WHEN size_mapped = \'XL\' THEN stock_qty ELSE 0 END),0) AS XL_units_store, coalesce(SUM(CASE WHEN (size_mapped = \'XXL\' OR size_mapped = \'XXl\' or size_mapped = \'2XL\') THEN stock_qty ELSE 0 END),0) AS XXL_units_store, coalesce(SUM(CASE WHEN size_mapped = \'3XL\' THEN stock_qty ELSE 0 END),0) AS XL3_units_store, coalesce(SUM(CASE WHEN size_mapped = \'4XL\' THEN stock_qty ELSE 0 END),0) AS XL4_units_store, coalesce(SUM(CASE WHEN size_mapped = \'5XL\' THEN stock_qty ELSE 0 END),0) AS XL5_units_store, coalesce(SUM(CASE WHEN size_mapped = \'6XL\' THEN stock_qty ELSE 0 END),0) AS XL6_units_store, coalesce(SUM(CASE WHEN size_mapped = \'NA\' THEN stock_qty ELSE 0 END),0) AS NA_units_store FROM size_extraction GROUP BY sku_group, branch_code, branch_name ), size_count AS ( SELECT branch_code, sku_group, COUNT(DISTINCT size) AS num_size_available FROM size_extraction GROUP BY branch_code, sku_group ), store_priority AS ( SELECT BRANCH_CODE_PRIORITY, BRANCH_NAME_PRIORITY, SHORT_NAME, PRIORITY FROM snitch_db.maplemonk.storepriority ), ItemData AS ( SELECT branch_code, marketplace, sku, sku_group, category, REVERSE(SUBSTRING(REVERSE(sku), 1, POSITION(\'-\', REVERSE(sku)) - 1)) AS size, CASE WHEN size=\'28\' THEN \'XS\' WHEN size=\'30\' THEN \'S\' WHEN size=\'32\' THEN \'M\' WHEN size=\'34\' THEN \'L\' WHEN size=\'36\' THEN \'XL\' WHEN size=\'38\' THEN \'XXL\' WHEN size=\'40\' THEN \'3XL\' WHEN size=\'42\' THEN \'4XL\' WHEN size=\'44\' THEN \'5XL\' WHEN size=\'46\' THEN \'6XL\' WHEN size=\'48\' THEN \'7XL\' WHEN size=\'50\' THEN \'8XL\' WHEN size=\'\' THEN \'NA\' WHEN size IS NULL THEN \'NA\' ELSE size END AS size_mapped, SUM(suborder_quantity) AS units_sold FROM snitch_db.maplemonk.STORE_fact_items_offline WHERE order_date >= current_date - 30 AND sku NOT LIKE \'CB%\' AND category IN (\'SHIRT\') GROUP BY branch_code, sku, sku_group, size, size_mapped, marketplace, category ), CategoryUnitsSold AS ( SELECT branch_code, category, size_mapped, SUM(units_sold) AS category_units_sold FROM ItemData GROUP BY branch_code, category, size_mapped ), SizeRatio AS ( SELECT branch_code, size_mapped, ROUND((SUM(category_units_sold) / SUM(SUM(category_units_sold)) OVER (PARTITION BY branch_code,category)) * 100, 2) AS size_ratio_percentage FROM CategoryUnitsSold GROUP BY branch_code, size_mapped, category ), FinalData AS ( SELECT se.branch_code, se.branch_name, se.size, se.size_mapped, se.sku_group, se.logicusercode, se_pvup.XS_units_store, se_pvup.S_units_store, se_pvup.M_units_store, se_pvup.L_units_store, se_pvup.XL_units_store, se_pvup.XXL_units_store, se_pvup.XL3_units_store, se_pvup.XL4_units_store, se_pvup.XL5_units_store, se_pvup.XL6_units_store, se_pvup.NA_units_store, SUM(se.stock_qty) AS units_on_hand, sc.num_size_available, COALESCE(sr.size_ratio_percentage, 100) AS size_ratio_percentage, SUM(COALESCE(sr.size_ratio_percentage, 100)) OVER (PARTITION BY se.branch_code,se.sku_group) AS sum_size_ratio_percentage_by_sku_group FROM size_extraction se JOIN size_count sc ON se.sku_group = sc.sku_group and se.branch_code=sc.branch_code LEFT JOIN SizeRatio sr ON se.size_mapped = sr.size_mapped and se.branch_code=sr.branch_code LEFT JOIN size_extraction_pivot_up se_pvup ON se.sku_group=se_pvup.sku_group and se.branch_code=se_pvup.branch_code GROUP BY se.branch_code, se.branch_name, se.size, se.size_mapped, se.sku_group, se.logicusercode, sc.num_size_available, sr.size_ratio_percentage, se_pvup.XS_units_store, se_pvup.S_units_store, se_pvup.M_units_store, se_pvup.L_units_store, se_pvup.XL_units_store, se_pvup.XXL_units_store, se_pvup.XL3_units_store, se_pvup.XL4_units_store, se_pvup.XL5_units_store, se_pvup.XL6_units_store, se_pvup.NA_units_store ) SELECT fd.*, am.id, am.price, am.product_name, upper(am.category) as availability_category, am.xs_units, am.s_units, am.m_units, am.l_units, am.xl_units, am.xxl_units, am.xl3_units, am.xl4_units, am.xl5_units, am.xl6_units, am.sellable_inventory, am.sku_class, am.num_size_available as num_size_wh, sp.priority FROM FinalData fd LEFT JOIN snitch_db.maplemonk.availability_master_v2 am ON fd.sku_group = am.sku_group LEFT JOIN store_priority sp ON fd.branch_code=sp.BRANCH_CODE_PRIORITY ORDER BY sp.priority, fd.units_on_hand DESC;",
                    "transaction": true
                }
            ) }}
            with sample_data as (

                select * from snitch_db.information_schema.databases
            ),
            
            final as (
                select * from sample_data
            )
            select * from final
            