{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_customers AS select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_customers UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_customers UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_customers UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_customers UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_customers UNION ALL select *,\'Shopify_USA_Wholesale\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSAWHOLESALE_customers; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders AS SELECT *, iff(charindex(\'utm_medium=\', landing_site)=0,NULL,substring(landing_site, charindex(\'utm_medium=\', landing_site) + len(\'utm_medium=\'), ifnull(nullif(charindex(\'&\', insert(landing_site, 1, charindex(\'utm_medium=\', landing_site)-1, \'\')),0), len(insert(landing_site, 1, charindex(\'utm_medium=\', landing_site)-1, \'\'))+1) - len(\'utm_medium=\')-1)) as LANDING_UTM_MEDIUM, iff(charindex(\'utm_source=\', landing_site)=0,NULL,substring(landing_site, charindex(\'utm_source=\', landing_site) + len(\'utm_source=\'), ifnull(nullif(charindex(\'&\', insert(landing_site, 1, charindex(\'utm_source=\', landing_site)-1, \'\')),0), len(insert(landing_site, 1, charindex(\'utm_source=\', landing_site)-1, \'\'))+1) - len(\'utm_source=\')-1)) as LANDING_UTM_SOURCE, iff(charindex(\'utm_campaign=\', landing_site)=0,NULL,substring(landing_site, charindex(\'utm_campaign=\', landing_site) + len(\'utm_campaign=\'), ifnull(nullif(charindex(\'&\', insert(landing_site, 1, charindex(\'utm_campaign=\', landing_site)-1, \'\')),0), len(insert(landing_site, 1, charindex(\'utm_campaign=\', landing_site)-1, \'\'))+1) - len(\'utm_campaign=\')-1)) as LANDING_UTM_CAMPAIGN, iff(charindex(\'utm_medium=\', REFERRING_SITE)=0,NULL,substring(REFERRING_SITE, charindex(\'utm_medium=\', REFERRING_SITE) + len(\'utm_medium=\'), ifnull(nullif(charindex(\'&\', insert(REFERRING_SITE, 1, charindex(\'utm_medium=\', REFERRING_SITE)-1, \'\')),0), len(insert(REFERRING_SITE, 1, charindex(\'utm_medium=\', REFERRING_SITE)-1, \'\'))+1) - len(\'utm_medium=\')-1)) as REFERRING_UTM_MEDIUM, iff(charindex(\'utm_source=\', REFERRING_SITE)=0,NULL,substring(REFERRING_SITE, charindex(\'utm_source=\', REFERRING_SITE) + len(\'utm_source=\'), ifnull(nullif(charindex(\'&\', insert(REFERRING_SITE, 1, charindex(\'utm_source=\', REFERRING_SITE)-1, \'\')),0), len(insert(REFERRING_SITE, 1, charindex(\'utm_source=\', REFERRING_SITE)-1, \'\'))+1) - len(\'utm_source=\')-1)) as REFERRING_UTM_SOURCE, CASE WHEN LANDING_SITE LIKE \'%facebook.com%\' THEN \'Facebook\' WHEN LANDING_SITE LIKE \'%google.com%\' THEN \'Google\' WHEN LANDING_SITE LIKE \'%google.co%\' THEN \'Google\' WHEN LANDING_SITE LIKE \'%instagram.com%\' THEN \'Facebook\' WHEN LANDING_SITE LIKE \'%com.google%\' THEN \'Google\' ELSE NULL END AS LANDING_UTM_CHANNEL, CASE WHEN REFERRING_SITE LIKE \'%facebook.com%\' THEN \'Facebook\' WHEN REFERRING_SITE LIKE \'%google.com%\' THEN \'Google\' WHEN REFERRING_SITE LIKE \'%google.co%\' THEN \'Google\' WHEN REFERRING_SITE LIKE \'%instagram.com%\' THEN \'Instagram\' WHEN REFERRING_SITE LIKE \'%com.google%\' THEN \'Google\' ELSE NULL END AS REFERRING_UTM_CHANNEL FROM (select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_orders UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_orders UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_orders UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_orders UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_orders UNION ALL select *,\'Shopify_USA_Wholesale\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSAWHOLESALE_orders)X; UPDATE Vahdam_db.maplemonk.Shopify_All_orders AO SET AO.LANDING_UTM_CHANNEL = UTM.CHANNEL FROM Vahdam_db.maplemonk.SHOPIFY_UTM_MAPPING UTM WHERE AO.LANDING_UTM_CHANNEL IS NULL AND AO.LANDING_UTM_MEDIUM LIKE CONCAT(\'%\',UTM.\"UTM Medium\",\'%\') AND AO.LANDING_UTM_SOURCE LIKE CONCAT(\'%\',UTM.\"UTM Source\",\'%\'); UPDATE Vahdam_db.maplemonk.Shopify_All_orders AO SET AO.REFERRING_UTM_CHANNEL = UTM.CHANNEL FROM Vahdam_db.maplemonk.SHOPIFY_UTM_MAPPING UTM WHERE AO.REFERRING_UTM_CHANNEL IS NULL AND AO.REFERRING_UTM_MEDIUM LIKE CONCAT(\'%\',UTM.\"UTM Medium\",\'%\') AND AO.REFERRING_UTM_SOURCE LIKE CONCAT(\'%\',UTM.\"UTM Source\",\'%\'); UPDATE Vahdam_db.maplemonk.Shopify_All_orders SET LANDING_UTM_CHANNEL = \'Direct\' WHERE LANDING_UTM_CHANNEL IS NULL AND LANDING_UTM_MEDIUM IS NULL AND LANDING_UTM_SOURCE IS NULL AND REFERRING_UTM_MEDIUM IS NULL AND REFERRING_UTM_SOURCE IS NULL AND (LANDING_SITE LIKE \'%vahdamteas.in%\'or LANDING_SITE LIKE \'%vahdamteas.com%\'); UPDATE Vahdam_db.maplemonk.Shopify_All_orders SET REFERRING_UTM_CHANNEL = \'Direct\' WHERE REFERRING_UTM_CHANNEL IS NULL AND LANDING_UTM_MEDIUM IS NULL AND LANDING_UTM_SOURCE IS NULL AND REFERRING_UTM_MEDIUM IS NULL AND REFERRING_UTM_SOURCE IS NULL AND (REFERRING_SITE LIKE \'%vahdamteas.in%\'or REFERRING_SITE LIKE \'%vahdamteas.com%\'); ALTER TABLE Vahdam_db.maplemonk.Shopify_All_orders ADD COLUMN FINAL_UTM_CHANNEL varchar(16777216); UPDATE Vahdam_db.maplemonk.Shopify_All_orders SET FINAL_UTM_CHANNEL = COALESCE(LANDING_UTM_CHANNEL,REFERRING_UTM_CHANNEL,\'Others\') WHERE LANDING_UTM_CHANNEL IS NULL OR REFERRING_UTM_CHANNEL IS NULL; UPDATE Vahdam_db.maplemonk.Shopify_All_orders SET FINAL_UTM_CHANNEL = LANDING_UTM_CHANNEL WHERE LANDING_UTM_CHANNEL IS NOT NULL AND REFERRING_UTM_CHANNEL IS NOT NULL AND LANDING_UTM_CHANNEL = REFERRING_UTM_CHANNEL; UPDATE Vahdam_db.maplemonk.Shopify_All_orders SET FINAL_UTM_CHANNEL = LANDING_UTM_CHANNEL WHERE LANDING_UTM_CHANNEL IS NOT NULL AND REFERRING_UTM_CHANNEL IS NOT NULL AND LANDING_UTM_CHANNEL<>REFERRING_UTM_CHANNEL; UPDATE Vahdam_db.maplemonk.Shopify_All_orders SET LANDING_UTM_CHANNEL = \'Others\' WHERE LANDING_UTM_CHANNEL IS NULL; UPDATE Vahdam_db.maplemonk.Shopify_All_orders SET REFERRING_UTM_CHANNEL = \'Others\' WHERE REFERRING_UTM_CHANNEL IS NULL; ALTER TABLE Vahdam_db.maplemonk.Shopify_All_orders RENAME COLUMN _AIRBYTE_SHOPIFYINDIA_ORDERS_HASHID to _AIRBYTE_ORDERS_HASHID; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_products AS select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_products UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_products UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_products UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_products UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_products UNION ALL select *,\'Shopify_USA_Wholesale\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSAWHOLESALE_products; ALTER TABLE Vahdam_db.maplemonk.Shopify_All_products RENAME COLUMN _AIRBYTE_SHOPIFYINDIA_PRODUCTS_HASHID to _AIRBYTE_PRODUCTS_HASHID; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_products_variants AS select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_products_variants UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_products_variants UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_products_variants UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_products_variants UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_products_variants UNION ALL select *,\'Shopify_USA_Wholesale\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSAWHOLESALE_products_variants; ALTER TABLE Vahdam_db.maplemonk.Shopify_All_products_variants RENAME COLUMN _AIRBYTE_SHOPIFYINDIA_PRODUCTS_HASHID to _AIRBYTE_PRODUCTS_HASHID; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_customers_addresses AS select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_customers_addresses UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_customers_addresses UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_customers_addresses UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_customers_addresses UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_customers_addresses UNION ALL select *,\'Shopify_USA_Wholesale\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSAWHOLESALE_customers_addresses; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders_items_discount AS SELECT order_id, LINE_ITEM_ID, SUM(B.VALUE:amount::FLOAT) AS DISCOUNT FROM( SELECT id AS order_id, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:discount_allocations AS discount_allocations FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A)x,LATERAL FLATTEN (INPUT => x.discount_allocations)B GROUP BY ORDER_ID, LINE_ITEM_ID; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders_items_tax AS SELECT order_id, LINE_ITEM_ID, SUM(B.VALUE:price::FLOAT) AS TAX FROM( SELECT id AS order_id, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:tax_lines AS tax_lines FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A)x,LATERAL FLATTEN (INPUT => x.tax_lines)B GROUP BY order_id, LINE_ITEM_ID; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_Refunds AS SELECT Name, ID AS Order_ID, Shop_name, C.value:line_item_id AS line_item_id, SUM(C.VALUE:quantity) AS quantity, SUM(C.VALUE:subtotal) AS subtotal FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN(INPUT => refunds)A, LATERAL FLATTEN(INPUT=>A.value)B, LATERAL FLATTEN(INPUT => B.value) C WHERE C.value:line_item_id IS NOT null GROUP BY Name, ID, Shop_name, C.value:line_item_id; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders_items AS WITH CTE AS (SELECT SHOP_NAME, ID::VARCHAR(16777216) AS ORDER_ID, NAME AS ORDER_NAME, CUSTOMER, A.VALUE:id::STRING AS LINE_ITEM_ID, A.VALUE:sku::STRING AS SKU, A.VALUE:product_id::STRING AS PRODUCT_ID, A.VALUE:title::STRING AS PRODUCT_NAME, CURRENCY, CASE WHEN cancelled_at IS NOT NULL THEN \'CANCELLED\' ELSE \'Shopify_Processed\' END AS order_status, CREATED_AT::DATETIME AS order_timestamp, A.VALUE:price::FLOAT * A.VALUE:quantity::FLOAT AS LINE_ITEM_SALES, (TOTAL_SHIPPING_PRICE_SET:presentment_money:amount::FLOAT/ COUNT(ORDER_ID) OVER(PARTITION BY ORDER_ID ORDER BY ORDER_ID)) AS SHIPPING_PRICE, A.VALUE:quantity::FLOAT as QUANTITY, \'Shopify\' AS Source, LANDING_UTM_MEDIUM, LANDING_UTM_SOURCE, LANDING_UTM_CAMPAIGN, REFERRING_UTM_MEDIUM, REFERRING_UTM_SOURCE, LANDING_UTM_CHANNEL, REFERRING_UTM_CHANNEL, FINAL_UTM_CHANNEL FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A) SELECT CTE.*, IFNULL(T.TAX,0) AS TAX, IFNULL(D.DISCOUNT,0) AS DISCOUNT, CTE.LINE_ITEM_SALES - IFNULL(D.DISCOUNT,0) + IFNULL(CTE.SHIPPING_PRICE,0) AS NET_SALES, CASE WHEN R.QUANTITY IS NOT NULL THEN 1 ELSE 0 END AS IS_REFUND FROM CTE LEFT JOIN Vahdam_db.maplemonk.Shopify_All_orders_items_tax T ON CTE.ORDER_ID = T.ORDER_ID AND CTE.LINE_ITEM_ID = T.LINE_ITEM_ID LEFT JOIN Vahdam_db.maplemonk.Shopify_All_orders_items_discount D ON CTE.ORDER_ID = D.ORDER_ID AND CTE.LINE_ITEM_ID = D.LINE_ITEM_ID LEFT JOIN Vahdam_db.maplemonk.Shopify_All_Refunds R ON CTE.ORDER_ID = R.ORDER_ID AND CTE.LINE_ITEM_ID = R.LINE_ITEM_ID; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.FACT_ITEMS AS SELECT O.SHOP_NAME, O.ORDER_ID, O.ORDER_NAME, O.CUSTOMER:id::int AS customer_id, O.LINE_ITEM_ID, O.SKU, O.PRODUCT_ID, O.CURRENCY, O.IS_REFUND, CASE WHEN CD.city IS NULL OR CD.city = \'\' THEN \'NA\' ELSE CD.city END AS city, CASE WHEN CD.province IS NULL OR CD.province = \'\' THEN \'NA\' ELSE CD.province END AS state, CASE WHEN P.product_type = \'\' THEN \'NA\' ELSE P.product_type END AS category, O.order_status, O.order_timestamp, O.LINE_ITEM_SALES, O.SHIPPING_PRICE, O.QUANTITY, O.TAX, O.DISCOUNT, O.NET_SALES, O.Source, O.LANDING_UTM_MEDIUM, O.LANDING_UTM_SOURCE, O.LANDING_UTM_CAMPAIGN, O.REFERRING_UTM_MEDIUM, O.REFERRING_UTM_SOURCE, O.LANDING_UTM_CHANNEL, O.REFERRING_UTM_CHANNEL, O.FINAL_UTM_CHANNEL FROM Vahdam_db.maplemonk.Shopify_All_orders_items O LEFT JOIN Vahdam_db.maplemonk.Shopify_All_products P ON O.PRODUCT_ID = P.id LEFT JOIN(SELECT customer_id, city, province, row_number() OVER ( partition BY customer_id ORDER BY id DESC) rowid FROM Vahdam_db.maplemonk.Shopify_All_customers_addresses) AS CD ON O.CUSTOMER:id::int = CD.customer_id AND CD.rowid = 1; UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS A SET A.city=case when B.\"New city\" is null then INITCAP(A.city) else INITCAP(B.\"New city\") end FROM Vahdam_db.maplemonk.shopify_all_cities_mapping B WHERE UPPER(A.city)=UPPER(B.city); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN customer_flag varchar(50); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN new_customer_flag varchar(50); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN acquisition_channel varchar(16777216); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN acquisition_product varchar(16777216); UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS A SET A.customer_flag = B.flag FROM ( SELECT DISTINCT order_id, customer_id, order_timestamp, CASE WHEN order_timestamp <> Min(order_timestamp) OVER ( partition BY customer_id) THEN \'Repeated\' ELSE \'New\' END AS Flag FROM Vahdam_db.maplemonk.FACT_ITEMS)AS B WHERE A.order_id = B.order_id AND A.customer_id = B.customer_id; UPDATE Vahdam_db.maplemonk.FACT_ITEMS SET customer_flag = CASE WHEN customer_flag IS NULL THEN \'New\' ELSE customer_flag END; UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS A SET A.new_customer_flag = B.flag FROM ( SELECT DISTINCT order_id, customer_id, order_timestamp, CASE WHEN Last_day(order_timestamp, \'month\') <> Last_day(Min(order_timestamp) OVER ( partition BY customer_id)) THEN \'Repeated\' ELSE \'New\' END AS Flag FROM Vahdam_db.maplemonk.FACT_ITEMS)AS B WHERE A.order_id = B.order_id AND A.customer_id = B.customer_id; UPDATE Vahdam_db.maplemonk.FACT_ITEMS SET new_customer_flag = CASE WHEN new_customer_flag IS NULL THEN \'New\' ELSE new_customer_flag END; CREATE OR replace temporary TABLE Vahdam_db.maplemonk.temp_source AS SELECT DISTINCT customer_id, source FROM ( SELECT DISTINCT customer_id, order_timestamp, source, Min(order_timestamp) OVER ( partition BY customer_id) firstOrderdate FROM Vahdam_db.maplemonk.FACT_ITEMS)res WHERE order_timestamp=firstorderdate; UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS a SET a.acquisition_channel=b.source FROM Vahdam_db.maplemonk.temp_source b WHERE a.customer_id = b.customer_id; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.AMAZON_All_COUNTRIES AS SELECT \'Amazon_USA\' AS SHOP_NAME, \"amazon-order-id\" AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, SKU, ASIN AS PRODUCT_ID, CURRENCY, 0 AS IS_REFUND, \"ship-city\" AS CITY, \"ship-state\" AS STATE, NULL AS CATEGORY, \"order-status\" AS ORDER_STATUS, \"Purchase-datetime-PDT\" AS ORDER_TIMESTAMP, TRY_CAST(\"item-price\" AS FLOAT) AS LINE_ITEM_SALES, TRY_CAST(\"shipping-price\" AS FLOAT) AS SHIPPING_PRICE, TRY_CAST(QUANTITY AS FLOAT) AS QUANTITY, TRY_CAST(\"item-tax\" AS FLOAT) AS TAX, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT, TRY_CAST(\"item-price\" AS FLOAT) AS NET_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, TRY_CAST(\"shipping-tax\" AS FLOAT) AS SHIPPING_TAX, TRY_CAST(\"ship-promotion-discount\" AS FLOAT) AS SHIP_PROMOTION_DISCOUNT, TRY_CAST(\"gift-wrap-price\" AS FLOAT) AS GIFT_WRAP_PRICE, TRY_CAST(\"gift-wrap-tax\" AS FLOAT) AS GIFT_WRAP_TAX FROM (SELECT *, CONVERT_TIMEZONE(\'UTC\',\'America/Los_Angeles\', \"purchase-date\":: DATETIME) as \"Purchase-datetime-PDT\" FROM Vahdam_db.maplemonk.ASP_USA_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL)X WHERE \"Purchase-datetime-PDT\"::DATE >=\'2022-02-01\' AND CURRENCY = \'USD\' AND \"order-status\" NOT IN(\'Cancelled\') AND \"item-price\" NOT IN(\'\',\'0.0\') UNION ALL SELECT \'Amazon_UK\' AS SHOP_NAME, \"amazon-order-id\" AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, SKU, ASIN AS PRODUCT_ID, CURRENCY, 0 AS IS_REFUND, \"ship-city\" AS CITY, \"ship-state\" AS STATE, NULL AS CATEGORY, \"order-status\" AS ORDER_STATUS, \"Purchase-datetime-UK\" AS ORDER_TIMESTAMP, TRY_CAST(\"item-price\" AS FLOAT) AS LINE_ITEM_SALES, TRY_CAST(\"shipping-price\" AS FLOAT) AS SHIPPING_PRICE, TRY_CAST(QUANTITY AS FLOAT) AS QUANTITY, TRY_CAST(\"item-tax\" AS FLOAT) AS TAX, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT, TRY_CAST(\"item-price\" AS FLOAT) AS NET_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, TRY_CAST(\"shipping-tax\" AS FLOAT) AS SHIPPING_TAX, TRY_CAST(\"ship-promotion-discount\" AS FLOAT) AS SHIP_PROMOTION_DISCOUNT, TRY_CAST(\"gift-wrap-price\" AS FLOAT) AS GIFT_WRAP_PRICE, TRY_CAST(\"gift-wrap-tax\" AS FLOAT) AS GIFT_WRAP_TAX FROM (SELECT *, CONVERT_TIMEZONE(\'UTC\',\'Europe/London\', \"purchase-date\":: DATETIME) as \"Purchase-datetime-UK\" FROM Vahdam_db.maplemonk.ASP_UK_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL)X WHERE \"Purchase-datetime-UK\"::DATE >=\'2022-02-01\' AND (\"ship-country\" = \'GB\' or (\"ship-country\" = \'\' and \"sales-channel\" like \'%uk%\')) and \"order-status\" NOT IN (\'Cancelled\') AND \"item-price\" NOT IN(\'\',\'0.0\') UNION ALL SELECT \'Amazon_FR\' AS SHOP_NAME, \"amazon-order-id\" AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, SKU, ASIN AS PRODUCT_ID, CURRENCY, 0 AS IS_REFUND, \"ship-city\" AS CITY, \"ship-state\" AS STATE, NULL AS CATEGORY, \"order-status\" AS ORDER_STATUS, \"Purchase-datetime-FR\" AS ORDER_TIMESTAMP, TRY_CAST(\"item-price\" AS FLOAT) AS LINE_ITEM_SALES, TRY_CAST(\"shipping-price\" AS FLOAT) AS SHIPPING_PRICE, TRY_CAST(QUANTITY AS FLOAT) AS QUANTITY, TRY_CAST(\"item-tax\" AS FLOAT) AS TAX, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT, TRY_CAST(\"item-price\" AS FLOAT) AS NET_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, TRY_CAST(\"shipping-tax\" AS FLOAT) AS SHIPPING_TAX, TRY_CAST(\"ship-promotion-discount\" AS FLOAT) AS SHIP_PROMOTION_DISCOUNT, TRY_CAST(\"gift-wrap-price\" AS FLOAT) AS GIFT_WRAP_PRICE, TRY_CAST(\"gift-wrap-tax\" AS FLOAT) AS GIFT_WRAP_TAX FROM (SELECT *, CONVERT_TIMEZONE(\'UTC\',\'Europe/Paris\', \"purchase-date\":: DATETIME) as \"Purchase-datetime-FR\" FROM Vahdam_db.maplemonk.ASP_UK_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL)X WHERE \"Purchase-datetime-FR\"::DATE >=\'2022-02-01\' AND (\"ship-country\" = \'FR\' or (\"ship-country\" = \'\' and \"sales-channel\" like \'%fr%\')) and \"order-status\" NOT IN (\'Cancelled\') AND \"item-price\" NOT IN(\'\',\'0.0\') UNION ALL SELECT \'Amazon_DE\' AS SHOP_NAME, \"amazon-order-id\" AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, SKU, ASIN AS PRODUCT_ID, CURRENCY, 0 AS IS_REFUND, \"ship-city\" AS CITY, \"ship-state\" AS STATE, NULL AS CATEGORY, \"order-status\" AS ORDER_STATUS, \"Purchase-datetime-DE\" AS ORDER_TIMESTAMP, TRY_CAST(\"item-price\" AS FLOAT) AS LINE_ITEM_SALES, TRY_CAST(\"shipping-price\" AS FLOAT) AS SHIPPING_PRICE, TRY_CAST(QUANTITY AS FLOAT) AS QUANTITY, TRY_CAST(\"item-tax\" AS FLOAT) AS TAX, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT, TRY_CAST(\"item-price\" AS FLOAT) AS NET_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, TRY_CAST(\"shipping-tax\" AS FLOAT) AS SHIPPING_TAX, TRY_CAST(\"ship-promotion-discount\" AS FLOAT) AS SHIP_PROMOTION_DISCOUNT, TRY_CAST(\"gift-wrap-price\" AS FLOAT) AS GIFT_WRAP_PRICE, TRY_CAST(\"gift-wrap-tax\" AS FLOAT) AS GIFT_WRAP_TAX FROM (SELECT *, CONVERT_TIMEZONE(\'UTC\',\'Europe/Berlin\', \"purchase-date\":: DATETIME) as \"Purchase-datetime-DE\" FROM Vahdam_db.maplemonk.ASP_UK_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL)X WHERE \"Purchase-datetime-DE\"::DATE >=\'2022-02-01\' AND (\"ship-country\" = \'DE\' or (\"ship-country\" = \'\' and \"sales-channel\" like \'%de%\')) and \"order-status\" NOT IN (\'Cancelled\') AND \"item-price\" NOT IN(\'\',\'0.0\') UNION ALL SELECT \'Amazon_IT\' AS SHOP_NAME, \"amazon-order-id\" AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, SKU, ASIN AS PRODUCT_ID, CURRENCY, 0 AS IS_REFUND, \"ship-city\" AS CITY, \"ship-state\" AS STATE, NULL AS CATEGORY, \"order-status\" AS ORDER_STATUS, \"Purchase-datetime-IT\" AS ORDER_TIMESTAMP, TRY_CAST(\"item-price\" AS FLOAT) AS LINE_ITEM_SALES, TRY_CAST(\"shipping-price\" AS FLOAT) AS SHIPPING_PRICE, TRY_CAST(QUANTITY AS FLOAT) AS QUANTITY, TRY_CAST(\"item-tax\" AS FLOAT) AS TAX, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT, TRY_CAST(\"item-price\" AS FLOAT) AS NET_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, TRY_CAST(\"shipping-tax\" AS FLOAT) AS SHIPPING_TAX, TRY_CAST(\"ship-promotion-discount\" AS FLOAT) AS SHIP_PROMOTION_DISCOUNT, TRY_CAST(\"gift-wrap-price\" AS FLOAT) AS GIFT_WRAP_PRICE, TRY_CAST(\"gift-wrap-tax\" AS FLOAT) AS GIFT_WRAP_TAX FROM (SELECT *, CONVERT_TIMEZONE(\'UTC\',\'Europe/Rome\', \"purchase-date\":: DATETIME) as \"Purchase-datetime-IT\" FROM Vahdam_db.maplemonk.ASP_UK_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL)X WHERE \"Purchase-datetime-IT\"::DATE >=\'2022-02-01\' AND (\"ship-country\" = \'IT\' or (\"ship-country\" = \'\' and \"sales-channel\" like \'%it%\')) and \"order-status\" NOT IN (\'Cancelled\') AND \"item-price\" NOT IN(\'\',\'0.0\') UNION ALL SELECT \'Amazon_ESP\' AS SHOP_NAME, \"amazon-order-id\" AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, SKU, ASIN AS PRODUCT_ID, CURRENCY, 0 AS IS_REFUND, \"ship-city\" AS CITY, \"ship-state\" AS STATE, NULL AS CATEGORY, \"order-status\" AS ORDER_STATUS, \"Purchase-datetime-ESP\" AS ORDER_TIMESTAMP, TRY_CAST(\"item-price\" AS FLOAT) AS LINE_ITEM_SALES, TRY_CAST(\"shipping-price\" AS FLOAT) AS SHIPPING_PRICE, TRY_CAST(QUANTITY AS FLOAT) AS QUANTITY, TRY_CAST(\"item-tax\" AS FLOAT) AS TAX, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT, TRY_CAST(\"item-price\" AS FLOAT) AS NET_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, TRY_CAST(\"shipping-tax\" AS FLOAT) AS SHIPPING_TAX, TRY_CAST(\"ship-promotion-discount\" AS FLOAT) AS SHIP_PROMOTION_DISCOUNT, TRY_CAST(\"gift-wrap-price\" AS FLOAT) AS GIFT_WRAP_PRICE, TRY_CAST(\"gift-wrap-tax\" AS FLOAT) AS GIFT_WRAP_TAX FROM (SELECT *, CONVERT_TIMEZONE(\'UTC\',\'Europe/Madrid\', \"purchase-date\":: DATETIME) as \"Purchase-datetime-ESP\" FROM Vahdam_db.maplemonk.ASP_UK_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL)X WHERE \"Purchase-datetime-ESP\"::DATE >=\'2022-02-01\' AND (\"ship-country\" = \'ES\' or (\"ship-country\" = \'\' and \"sales-channel\" like \'%es%\')) and \"order-status\" NOT IN (\'Cancelled\') AND \"item-price\" NOT IN(\'\',\'0.0\'); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN SHIPPING_TAX FLOAT; ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN SHIP_PROMOTION_DISCOUNT FLOAT; ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN GIFT_WRAP_PRICE FLOAT; ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN GIFT_WRAP_TAX FLOAT; INSERT INTO Vahdam_db.maplemonk.FACT_ITEMS SELECT * FROM Vahdam_db.maplemonk.AMAZON_All_COUNTRIES; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.FACT_ITEMS_TEMP_CONV AS ( SELECT FI.*, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.LINE_ITEM_SALES * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.LINE_ITEM_SALES WHEN FI.CURRENCY = \'USD\' THEN FI.LINE_ITEM_SALES * EX.USD_INR WHEN FI.CURRENCY = \'GBP\' THEN FI.LINE_ITEM_SALES * EX.GBP_INR END AS LINE_ITEM_SALES_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.TAX * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.TAX WHEN FI.CURRENCY = \'USD\' THEN FI.TAX * EX.USD_INR WHEN FI.CURRENCY = \'GBP\' THEN FI.TAX * EX.GBP_INR END AS TAX_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.DISCOUNT * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.DISCOUNT WHEN FI.CURRENCY = \'USD\' THEN FI.DISCOUNT * EX.USD_INR WHEN FI.CURRENCY = \'GBP\' THEN FI.DISCOUNT * EX.GBP_INR END AS DISCOUNT_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.NET_SALES * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.NET_SALES WHEN FI.CURRENCY = \'USD\' THEN FI.NET_SALES * EX.USD_INR WHEN FI.CURRENCY = \'GBP\' THEN FI.NET_SALES * EX.GBP_INR END AS NET_SALES_INR FROM Vahdam_db.maplemonk.FACT_ITEMS FI LEFT JOIN( SELECT date, RATES:INR AS EUR_INR, (RATES:EUR/RATES:USD)*RATES:INR AS USD_INR, (RATES:EUR/RATES:GBP)*RATES:INR AS GBP_INR FROM( SELECT *, ROW_NUMBER()OVER(PARTITION BY BASE, DATE ORDER BY _AIRBYTE_EMITTED_AT DESC) RW FROM VAHDAM_DB.MAPLEMONK.EXCHANGE_RATES ) A WHERE RW = 1 ) EX ON FI.ORDER_TIMESTAMP::DATE = EX.date WHERE FI.ORDER_TIMESTAMP::DATE >= \'2021-12-01\' UNION ALL SELECT FI.*, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.LINE_ITEM_SALES * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.LINE_ITEM_SALES WHEN FI.CURRENCY = \'USD\' THEN FI.LINE_ITEM_SALES * EX.USD_INR END AS LINE_ITEM_SALES_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.TAX * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.TAX WHEN FI.CURRENCY = \'USD\' THEN FI.TAX * EX.USD_INR END AS TAX_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.DISCOUNT * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.DISCOUNT WHEN FI.CURRENCY = \'USD\' THEN FI.DISCOUNT * EX.USD_INR END AS DISCOUNT_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.NET_SALES * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.NET_SALES WHEN FI.CURRENCY = \'USD\' THEN FI.NET_SALES * EX.USD_INR END AS NET_SALES_INR FROM Vahdam_db.maplemonk.FACT_ITEMS FI LEFT JOIN( SELECT DATE, USD_INR, USD_INR/USD_EUR AS EUR_INR FROM (SELECT YEARMONTH , DATEFROMPARTS(LEFT(YEARMONTH,4),RIGHT(YEARMONTH,2),01) AS DATE, SUM(CASE WHEN LOCATION = \'IND\' THEN VALUE END) AS USD_INR, SUM(CASE WHEN LOCATION = \'EA19\' THEN VALUE END) AS USD_EUR FROM Vahdam_db.maplemonk.HISTORICAL_MONTHLY_EXCHANGE_RATES WHERE LOCATION IN (\'EA19\',\'IND\') AND DATEFROMPARTS(LEFT(YEARMONTH,4),RIGHT(YEARMONTH,2),01)<\'2021-12-01\' GROUP BY YEARMONTH, DATEFROMPARTS(LEFT(YEARMONTH,4),RIGHT(YEARMONTH,2),01))B ) EX ON date_trunc(\'MONTH\', FI.ORDER_TIMESTAMP::DATE) = date_trunc(\'MONTH\', EX.date::DATE) WHERE FI.ORDER_TIMESTAMP::DATE < \'2021-12-01\'); CREATE OR REPLACE TABLE Vahdam_db.maplemonk.FACT_ITEMS AS SELECT * FROM Vahdam_db.maplemonk.FACT_ITEMS_TEMP_CONV; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.FACT_ITEMS_TEMP_Category AS ( select x.*, ssm.PRODUCT_NAME, ssm.\"CATEGORY_1\", ssm.\"Category_2-Type_of_Tea\", ssm.\"Category_3-Type_of_Product\", ssm.\"Category_4-Pack_type\", NULL as MOTHER_SKU from ( select fi.*, spm.\"Common Sku Id\'s\" as Common_SKU from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select distinct ORDER_NAME,VARIANT_SKU,\"Common Sku Id\'s\" from Vahdam_db.maplemonk.shopifyindia_productmapping union select distinct ORDER_NAME,VARIANT_SKU,\"Common sku Id\'s\" from Vahdam_db.maplemonk.shopifygermany_productmapping union select distinct ORDER_NAME,VARIANT_SKU,\"Common Sku Id\'s\" from Vahdam_db.maplemonk.shopifyitaly_productmapping union select distinct ORDER_NAME,VARIANT_SKU,\"Common Sku Id\'s\" from Vahdam_db.maplemonk.shopifyglobal_productmapping union select distinct ORDER_NAME,VARIANT_SKU,\"Common Sku ID\'s\" from Vahdam_db.maplemonk.shopifyusa_productmapping) spm on fi.ORDER_NAME = spm.order_name and fi.sku = spm.VARIANT_SKU where fi.ORDER_TIMESTAMP::date <= \'2022-03-22\' and fi.Source=\'Shopify\' Union all select fi.*, apm.\"Common SKU Id\'s\" as Common_SKU from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select \"(Child) ASIN\",\"Common SKU Id\'s\" from Vahdam_db.maplemonk.amazonusa_productmapping union select \"(Child) ASIN\",\"Common Sku Id\'s\" from Vahdam_db.maplemonk.amazonindia_productmapping) apm on fi.product_id = apm.\"(Child) ASIN\" where fi.ORDER_TIMESTAMP::date <= \'2022-03-22\' and fi.Source=\'Amazon\' )x left join vahdam_db.maplemonk.shopify_sku_mapping ssm on x.common_sku=ssm.common_sku); CREATE OR REPLACE TABLE Vahdam_db.maplemonk.FACT_ITEMS_TEMP_2_Category AS ( select fi.*, smg.COMMON_SKU_ID as Common_SKU, smg.COMMON_SKU_DESCRIPTION as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.SUB_CATEGORY as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA_BAG/POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.MOTHER_SKU from Vahdam_db.maplemonk.FACT_ITEMS fi left join Vahdam_db.maplemonk.SKU_MAPPING_GLOBAL_CATALOGUE_MASTER___NEW smg on fi.sku = smg.D2C_INDIA where fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name=\'Shopify_India\' Union all select fi.*, smg.COMMON_SKU_ID as Common_SKU, smg.COMMON_SKU_DESCRIPTION as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.SUB_CATEGORY as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA_BAG/POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.MOTHER_SKU from Vahdam_db.maplemonk.FACT_ITEMS fi left join Vahdam_db.maplemonk.SKU_MAPPING_GLOBAL_CATALOGUE_MASTER___NEW smg on fi.sku = smg.D2C_GLOBAL where fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name=\'Shopify_Global\' Union all select fi.*, smg.COMMON_SKU_ID as Common_SKU, smg.COMMON_SKU_DESCRIPTION as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.SUB_CATEGORY as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA_BAG/POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.MOTHER_SKU from Vahdam_db.maplemonk.FACT_ITEMS fi left join Vahdam_db.maplemonk.SKU_MAPPING_GLOBAL_CATALOGUE_MASTER___NEW smg on fi.sku = smg.D2C_US where fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name=\'Shopify_USA\' Union all select fi.*, smg.COMMON_SKU_ID as Common_SKU, smg.COMMON_SKU_DESCRIPTION as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.SUB_CATEGORY as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA_BAG/POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.MOTHER_SKU from Vahdam_db.maplemonk.FACT_ITEMS fi left join Vahdam_db.maplemonk.SKU_MAPPING_GLOBAL_CATALOGUE_MASTER___NEW smg on fi.product_id = smg.AMAZON_USA where fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name=\'Amazon_USA\'); CREATE OR REPLACE TABLE Vahdam_db.maplemonk.FACT_ITEMS AS (SELECT * FROM Vahdam_db.maplemonk.FACT_ITEMS_TEMP_Category Union all SELECT * FROM Vahdam_db.maplemonk.FACT_ITEMS_TEMP_2_Category); CREATE OR replace temporary TABLE Vahdam_db.maplemonk.temp_product AS SELECT DISTINCT customer_id, product_name, Row_number() OVER (partition BY customer_id ORDER BY LINE_ITEM_SALES DESC) rowid FROM ( SELECT DISTINCT customer_id, order_timestamp, product_name, LINE_ITEM_SALES , Min(order_timestamp) OVER (partition BY customer_id) firstOrderdate FROM Vahdam_db.maplemonk.FACT_ITEMS )res WHERE order_timestamp=firstorderdate; UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS A SET A.acquisition_product=B.product_name FROM ( SELECT * FROM Vahdam_db.maplemonk.temp_product WHERE rowid=1)B WHERE A.customer_id = B.customer_id;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from VAHDAM_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        