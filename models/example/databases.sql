{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_customers AS select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_customers UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_customers UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_customers UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_customers UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_customers UNION ALL select *,\'Shopify_USA_Wholesale\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSAWHOLESALE_customers; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders AS select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_orders UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_orders UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_orders UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_orders UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_orders UNION ALL select *,\'Shopify_USA_Wholesale\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSAWHOLESALE_orders; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_products AS select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_products UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_products UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_products UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_products UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_products UNION ALL select *,\'Shopify_USA_Wholesale\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSAWHOLESALE_products; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_products_variants AS select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_products_variants UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_products_variants UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_products_variants UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_products_variants UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_products_variants UNION ALL select *,\'Shopify_USA_Wholesale\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSAWHOLESALE_products_variants; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders_line_items AS select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_orders_line_items UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_orders_line_items UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_orders_line_items UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_orders_line_items UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_orders_line_items UNION ALL select *,\'Shopify_USA_Wholesale\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSAWHOLESALE_orders_line_items; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_customers_addresses AS select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_customers_addresses UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_customers_addresses UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_customers_addresses UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_customers_addresses UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_customers_addresses UNION ALL select *,\'Shopify_USA_Wholesale\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSAWHOLESALE_customers_addresses; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_Refunds AS SELECT Name, ID AS Order_ID, C.value:line_item_id AS line_item_id, C.value:quantity AS quantity, C.value:subtotal AS subtotal, Shop_name FROM Vahdam_db.maplemonk.Shopify_All_orders, lateral flatten(input => refunds)A, lateral flatten(input=>A.value)B, lateral flatten(input => B.value) C WHERE C.value:line_item_id IS NOT null; ALTER TABLE Vahdam_db.maplemonk.Shopify_All_orders RENAME COLUMN _AIRBYTE_SHOPIFYINDIA_ORDERS_HASHID to _AIRBYTE_ORDERS_HASHID; ALTER TABLE Vahdam_db.maplemonk.Shopify_All_orders_line_items RENAME COLUMN _AIRBYTE_SHOPIFYINDIA_ORDERS_HASHID to _AIRBYTE_ORDERS_HASHID; ALTER TABLE Vahdam_db.maplemonk.Shopify_All_products_variants RENAME COLUMN _AIRBYTE_SHOPIFYINDIA_PRODUCTS_HASHID to _AIRBYTE_PRODUCTS_HASHID; ALTER TABLE Vahdam_db.maplemonk.Shopify_All_products RENAME COLUMN _AIRBYTE_SHOPIFYINDIA_PRODUCTS_HASHID to _AIRBYTE_PRODUCTS_HASHID; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.FACT_ITEMS AS SELECT o.Shop_Name as shop_name, Cast(o.id AS VARCHAR(16777216)) AS order_id, o.name as order_name, o.CUSTOMER:id::int customer_id, ol1.id AS item_id, cast(ol1.sku AS varchar(16777216)) product_id, pv.barcode, o.currency, CASE WHEN p1.Product_Name IS NULL THEN \'NA\' ELSE p1.Product_Name END AS product_name, case when r.quantity is not null then 1 else 0 end as IsRefund, CASE WHEN cd.city IS NULL OR cd.city = \'\' THEN \'NA\' ELSE cd.city END AS city, CASE WHEN cd.province IS NULL OR cd.province = \'\' THEN \'NA\' ELSE cd.province END AS state, CASE WHEN p.product_type = \'\' THEN \'NA\' ELSE p.product_type END AS category, CASE WHEN o.cancelled_at IS NOT NULL THEN \'CANCELLED\' ELSE \'Shopify_Processed\' END AS order_status, cast(o.created_at AS datetime) order_timestamp, sum(ol1.price * ol1.quantity) AS sales, sum(o.total_tax) / sum(ol2.items) AS tax, a1.amount as Discount, sum(ol1.quantity) quantity, sum(ol1.price * ol1.quantity)-ifnull(a1.amount,0) as Net_Sales, \'Shopify\' AS source FROM Vahdam_db.maplemonk.Shopify_All_orders o LEFT JOIN Vahdam_db.maplemonk.Shopify_All_orders_line_items ol1 ON o._airbyte_orders_hashid = ol1._airbyte_orders_hashid left join Vahdam_db.maplemonk.Shopify_All_Refunds r on r.line_item_id = ol1.id left join ( select id, sum(LI.value:amount::float) amount from Vahdam_db.maplemonk.Shopify_all_orders_line_items, lateral flatten(input => discount_allocations)LI group by id having sum(LI.value:amount::float) is not null ) a1 on a1.id=ol1.id LEFT JOIN ( SELECT _airbyte_orders_hashid, count(1) AS items FROM Vahdam_db.maplemonk.Shopify_All_orders_line_items GROUP BY _airbyte_orders_hashid) ol2 ON o._airbyte_orders_hashid = ol2._airbyte_orders_hashid LEFT JOIN (SELECT * FROM ( SELECT DISTINCT NAME, _AIRBYTE_ORDERS_HASHID, LO.VALUE:product_id AS product_id, LO.VALUE:title::VARCHAR(16777216) AS Product_Name, ROW_NUMBER() OVER(PARTITION BY NAME, LO.VALUE:product_id ORDER BY NAME, LO.VALUE:product_id) AS rowid from vahdam_db.maplemonk.shopify_all_orders, lateral flatten(input=>LINE_ITEMS)LO) xyz where rowid=1 ) p1 ON ol1.product_id = p1.product_id AND ol1._airbyte_orders_hashid=p1._AIRBYTE_ORDERS_HASHID LEFT JOIN Vahdam_db.maplemonk.Shopify_All_products p ON ol1.product_id = p.id LEFT JOIN (select distinct _AIRBYTE_PRODUCTS_HASHID,barcode from Vahdam_db.maplemonk.Shopify_All_products_variants where barcode<>\'\') pv ON p._AIRBYTE_PRODUCTS_HASHID = pv._AIRBYTE_PRODUCTS_HASHID LEFT JOIN ( SELECT customer_id, city, province, row_number() OVER ( partition BY customer_id ORDER BY id DESC) rowid FROM Vahdam_db.maplemonk.Shopify_All_customers_addresses) AS cd ON o.CUSTOMER:id::int = cd.customer_id AND cd.rowid = 1 GROUP BY o.Shop_Name, a1.amount, cast(o.id AS varchar(16777216)), o.name, o.CUSTOMER:id::int, ol1.id, cast(ol1.sku AS varchar(16777216)), pv.barcode, o.currency, CASE WHEN p1.Product_Name IS NULL THEN \'NA\' ELSE p1.Product_Name END, CASE WHEN cd.city IS NULL OR cd.city = \'\' THEN \'NA\' ELSE cd.city END, CASE WHEN cd.province IS NULL OR cd.province = \'\' THEN \'NA\' ELSE cd.province END, CASE WHEN p.product_type = \'\' THEN \'NA\' ELSE p.product_type END, CASE WHEN o.cancelled_at IS NOT NULL THEN \'CANCELLED\' ELSE \'Shopify_Processed\' END, cast(o.created_at AS datetime), case when r.quantity is not null then 1 else 0 end; UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS A SET A.city=case when B.\"New city\" is null then INITCAP(A.city) else INITCAP(B.\"New city\") end FROM Vahdam_db.maplemonk.shopify_all_cities_mapping B WHERE UPPER(A.city)=UPPER(B.city); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN customer_flag varchar(50); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN new_customer_flag varchar(50); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN acquisition_channel varchar(16777216); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN acquisition_product varchar(16777216); UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS A SET A.customer_flag = B.flag FROM ( SELECT DISTINCT order_id, customer_id, order_timestamp, CASE WHEN order_timestamp <> Min(order_timestamp) OVER ( partition BY customer_id) THEN \'Repeated\' ELSE \'New\' END AS Flag FROM Vahdam_db.maplemonk.FACT_ITEMS)AS B WHERE A.order_id = B.order_id AND A.customer_id = B.customer_id; UPDATE Vahdam_db.maplemonk.FACT_ITEMS SET customer_flag = CASE WHEN customer_flag IS NULL THEN \'New\' ELSE customer_flag END; UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS A SET A.new_customer_flag = B.flag FROM ( SELECT DISTINCT order_id, customer_id, order_timestamp, CASE WHEN Last_day(order_timestamp, \'month\') <> Last_day(Min(order_timestamp) OVER ( partition BY customer_id)) THEN \'Repeated\' ELSE \'New\' END AS Flag FROM Vahdam_db.maplemonk.FACT_ITEMS)AS B WHERE A.order_id = B.order_id AND A.customer_id = B.customer_id; UPDATE Vahdam_db.maplemonk.FACT_ITEMS SET new_customer_flag = CASE WHEN new_customer_flag IS NULL THEN \'New\' ELSE new_customer_flag END; CREATE OR replace temporary TABLE Vahdam_db.maplemonk.temp_source AS SELECT DISTINCT customer_id, source FROM ( SELECT DISTINCT customer_id, order_timestamp, source, Min(order_timestamp) OVER ( partition BY customer_id) firstOrderdate FROM Vahdam_db.maplemonk.FACT_ITEMS)res WHERE order_timestamp=firstorderdate; UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS a SET a.acquisition_channel=b.source FROM Vahdam_db.maplemonk.temp_source b WHERE a.customer_id = b.customer_id; CREATE OR replace temporary TABLE Vahdam_db.maplemonk.temp_product AS SELECT DISTINCT customer_id, product_name, Row_number() OVER (partition BY customer_id ORDER BY sales DESC) rowid FROM ( SELECT DISTINCT customer_id, order_timestamp, product_name, sales , Min(order_timestamp) OVER (partition BY customer_id) firstOrderdate FROM Vahdam_db.maplemonk.FACT_ITEMS )res WHERE order_timestamp=firstorderdate; UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS A SET A.acquisition_product=B.product_name FROM ( SELECT * FROM Vahdam_db.maplemonk.temp_product WHERE rowid=1)B WHERE A.customer_id = B.customer_id; --Including INR Sales and Category into Fact Items table-- CREATE OR REPLACE TEMPORARY TABLE Vahdam_db.maplemonk.FACT_ITEMS_TEMP AS ( SELECT FI.*, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.SALES * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.SALES WHEN FI.CURRENCY = \'USD\' THEN FI.SALES * EX.USD_INR END AS SALES_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.TAX * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.TAX WHEN FI.CURRENCY = \'USD\' THEN FI.TAX * EX.USD_INR END AS TAX_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.DISCOUNT * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.DISCOUNT WHEN FI.CURRENCY = \'USD\' THEN FI.DISCOUNT * EX.USD_INR END AS DISCOUNT_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.NET_SALES * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.NET_SALES WHEN FI.CURRENCY = \'USD\' THEN FI.NET_SALES * EX.USD_INR END AS NET_SALES_INR FROM Vahdam_db.maplemonk.FACT_ITEMS FI LEFT JOIN( SELECT date, RATES:INR AS EUR_INR, (RATES:EUR/RATES:USD)*RATES:INR AS USD_INR FROM( SELECT *, ROW_NUMBER()OVER(PARTITION BY BASE, DATE ORDER BY _AIRBYTE_EMITTED_AT DESC) RW FROM VAHDAM_DB.MAPLEMONK.EXCHANGE_RATES ) A WHERE RW = 1 ) EX ON FI.ORDER_TIMESTAMP::DATE = EX.date WHERE FI.ORDER_TIMESTAMP::DATE >= \'2021-12-01\' UNION ALL SELECT FI.*, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.SALES * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.SALES WHEN FI.CURRENCY = \'USD\' THEN FI.SALES * EX.USD_INR END AS SALES_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.TAX * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.TAX WHEN FI.CURRENCY = \'USD\' THEN FI.TAX * EX.USD_INR END AS TAX_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.DISCOUNT * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.DISCOUNT WHEN FI.CURRENCY = \'USD\' THEN FI.DISCOUNT * EX.USD_INR END AS DISCOUNT_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.NET_SALES * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.NET_SALES WHEN FI.CURRENCY = \'USD\' THEN FI.NET_SALES * EX.USD_INR END AS NET_SALES_INR FROM Vahdam_db.maplemonk.FACT_ITEMS FI LEFT JOIN( SELECT DATE, USD_INR, USD_INR/USD_EUR AS EUR_INR FROM (SELECT YEARMONTH , DATEFROMPARTS(LEFT(YEARMONTH,4),RIGHT(YEARMONTH,2),01) AS DATE, SUM(CASE WHEN LOCATION = \'IND\' THEN VALUE END) AS USD_INR, SUM(CASE WHEN LOCATION = \'EA19\' THEN VALUE END) AS USD_EUR FROM Vahdam_db.maplemonk.HISTORICAL_MONTHLY_EXCHANGE_RATES WHERE LOCATION IN (\'EA19\',\'IND\') AND DATEFROMPARTS(LEFT(YEARMONTH,4),RIGHT(YEARMONTH,2),01)<\'2021-12-01\' GROUP BY YEARMONTH, DATEFROMPARTS(LEFT(YEARMONTH,4),RIGHT(YEARMONTH,2),01))B ) EX ON date_trunc(\'MONTH\', FI.ORDER_TIMESTAMP::DATE) = date_trunc(\'MONTH\', EX.date::DATE) WHERE FI.ORDER_TIMESTAMP::DATE < \'2021-12-01\'); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN SALES_INR float; ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN TAX_INR float; ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN DISCOUNT_INR float; ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN NET_SALES_INR float; UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS FI1 SET FI1.SALES_INR = FI2.SALES_INR, FI1.TAX_INR = FI2.TAX_INR, FI1.DISCOUNT_INR = FI2.DISCOUNT_INR, FI1.NET_SALES_INR = FI2.NET_SALES_INR FROM Vahdam_db.maplemonk.FACT_ITEMS_TEMP AS FI2 WHERE FI1.ORDER_ID = FI2.ORDER_ID AND FI1.ITEM_ID = FI2.ITEM_ID; --CREATE LINE ITEM DISCOUNT TABLE-- CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders_items_discount AS SELECT order_id, LINE_ITEM_ID, sum(B.VALUE:amount::FLOAT) AS DISCOUNT FROM( SELECT id as order_id, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:discount_allocations AS discount_allocations FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A)x,LATERAL FLATTEN (INPUT => x.discount_allocations)B GROUP BY ORDER_ID, LINE_ITEM_ID; --CREATE LINE ITEM TAX TABLE-- CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders_items_tax AS SELECT order_id, LINE_ITEM_ID, SUM(B.VALUE:price::FLOAT) AS TAX FROM( SELECT id as order_id, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:tax_lines AS tax_lines FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A)x,LATERAL FLATTEN (INPUT => x.tax_lines)B GROUP BY order_id, LINE_ITEM_ID; --CREATE REFUNDS TABLE-- CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_Refunds AS SELECT Name, ID AS Order_ID, Shop_name, C.value:line_item_id AS line_item_id, SUM(C.VALUE:quantity) AS quantity, SUM(C.VALUE:subtotal) AS subtotal FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN(INPUT => refunds)A, LATERAL FLATTEN(INPUT=>A.value)B, LATERAL FLATTEN(INPUT => B.value) C WHERE C.value:line_item_id IS NOT null GROUP BY Name, ID, Shop_name, C.value:line_item_id; --CREATE ALL ORDERS LINE ITEM TABLE-- CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders_items AS WITH CTE AS (SELECT SHOP_NAME, ID::VARCHAR(16777216) AS ORDER_ID, NAME AS ORDER_NAME, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:sku::STRING AS PRODUCT_ID, A.VALUE:title::STRING AS PRODUCT_NAME, CURRENCY, CASE WHEN cancelled_at IS NOT NULL THEN \'CANCELLED\' ELSE \'Shopify_Processed\' END AS order_status, CREATED_AT::DATETIME AS order_timestamp, A.VALUE:price::FLOAT * A.VALUE:quantity::FLOAT AS LINE_ITEM_SALES, (TOTAL_SHIPPING_PRICE_SET:presentment_money:amount::FLOAT/ COUNT(ORDER_ID) OVER(PARTITION BY ORDER_ID ORDER BY ORDER_ID)) AS SHIPPING_PRICE, A.VALUE:quantity::FLOAT as QUANTITY, \'Shopify\' AS Source FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A) SELECT CTE.*, IFNULL(T.TAX,0) AS TAX, IFNULL(D.DISCOUNT,0) AS DISCOUNT, CTE.LINE_ITEM_SALES AS NET_SALES, CASE WHEN R.QUANTITY IS NOT NULL THEN 1 ELSE 0 END AS IS_REFUND FROM CTE LEFT JOIN Vahdam_db.maplemonk.Shopify_All_orders_items_tax T ON CTE.ORDER_ID = T.ORDER_ID AND CTE.LINE_ITEM_ID = T.LINE_ITEM_ID LEFT JOIN Vahdam_db.maplemonk.Shopify_All_orders_items_discount D ON CTE.ORDER_ID = D.ORDER_ID AND CTE.LINE_ITEM_ID = D.LINE_ITEM_ID LEFT JOIN Vahdam_db.maplemonk.Shopify_All_Refunds R ON CTE.ORDER_ID = R.ORDER_ID AND CTE.LINE_ITEM_ID = R.LINE_ITEM_ID;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from VAHDAM_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        