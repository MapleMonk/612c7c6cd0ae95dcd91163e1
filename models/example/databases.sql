{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report as with Amazon_sales_base as ( select distinct * from hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report_intermediate where lower(report_type) = \'amazon sales\' and lower(ORDER_STATUS) not like \'%cancel%\' ), Amazon_cancel_base as ( select distinct * from hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report_intermediate where lower(report_type) = \'amazon sales\' and lower(ORDER_STATUS) like \'%cancel%\' ), Amazon_return_base as ( select distinct * from hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report_intermediate where lower(report_type) in (\'amazon return\', \'amazon replacement\') ), EE_flipkart_sales_base as ( select distinct * from hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report_intermediate where lower(report_type) = \'easyecom sale\' and lower(ORDER_STATUS) not like \'%cancel%\' and lower(marketplace) = \'flipkart\' ), EE_flipkart_cancel_base as ( select distinct * from hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report_intermediate where lower(report_type) = \'easyecom sale\' and lower(ORDER_STATUS) like \'%cancel%\' and lower(marketplace) = \'flipkart\' ), EE_rest_MP_base as ( select distinct * from hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report_intermediate where lower(report_type) = \'easyecom sale\' and lower(marketplace) <> \'flipkart\' ), EE_return_base as ( select distinct * from hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report_intermediate where lower(report_type) = \'easyecom return\' ), blank_report as ( select distinct * from hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report_intermediate where lower(report_type) is null ), shopify_shipping_charges as ( select REFERENCE_CODE, sum(FINAL_SHIPPING) as FINAL_SHIPPING from hox_db.maplemonk.HOX_BLANKO_Shopify_logistics_cost group by 1 ), amazon_charges as ( select report_type, REFERENCE_CODE, ORDER_STATUS, final_SKU, date(report_date) as report_date, sum(chargeback)as chargeback, sum(COMMISSION_VALUE)as COMMISSION_VALUE, sum(CLOSING_FEES) as CLOSING_FEES, sum(FBA_pick_pack) as FBA_pick_pack, sum(FINAL_SHIPPING) as FINAL_SHIPPING, sum(STORAGE_COST) as storage_cost from ( select a.*, coalesce(b.common_sku, a.SKU) as final_SKU from hox_db.maplemonk.HOX_BLANKO_amazon_marketplace_fees a left join ( select order_id, sku, common_sku from HOX_DB.MAPLEMONK.HOX_DB_amazon_fact_items group by 1,2,3 )b on a.Reference_Code = b.order_id and lower(a.SKU) = lower(b.SKU) )as o group by 1,2,3,4,5 ), flipkart_charges as ( select REFERENCE_CODE, SKU, date(report_date)as report_date, sum(COMMISSION_VALUE)as COMMISSION_VALUE, sum(\"Closing_fees(fixed)\") as CLOSING_FEES, sum(COLLECTION_FEES) as COLLECTION_FEES, sum(FINAL_SHIPPING) as FINAL_SHIPPING from hox_db.maplemonk.HOX_BLANKO_flipkart_marketplace_fees group by 1,2,3 ), packaging_material_Data as ( select REFERENCE_CODE, MARKETPLACE, REPORT_TYPE, sum(case when lower(MARKETPLACE) = \'amazon fba\' then 0 when (REPORT_DATE between date(\'2023-08-01\') and date(\'2023-11-30\')) then 0 else packaging_cost end) as packaging_cost, sum(FINAL_ORDER_WEIGHT) as FINAL_ORDER_WEIGHT from hox_db.maplemonk.HOX_BLANKO_packaging_material group by 1,2,3 ), final_data_cost as ( Select distinct a.*, div0(chargeback, count(1) over (partition by a.Reference_Code, a.SKU, lower(a.REPORT_TYPE), date(a.REPORT_DATE) order by 1)) as chargeback, div0(COMMISSION_VALUE, count(1) over (partition by a.Reference_Code, a.SKU, lower(a.REPORT_TYPE),date(a.REPORT_DATE) order by 1)) as COMMISSION_VALUE, div0(CLOSING_FEES, count(1) over (partition by a.Reference_Code, a.SKU, lower(a.REPORT_TYPE), date(a.REPORT_DATE) order by 1)) as CLOSING_FEES, div0(FBA_pick_pack, count(1) over (partition by a.Reference_Code, a.SKU, lower(a.REPORT_TYPE), date(a.REPORT_DATE) order by 1)) as FBA_pick_pack, div0(FINAL_SHIPPING, count(1) over (partition by a.Reference_Code, a.SKU, lower(a.REPORT_TYPE), date(a.REPORT_DATE) order by 1)) as FINAL_SHIPPING, div0(STORAGE_COST, count(1) over (partition by a.Reference_Code, a.SKU, lower(a.REPORT_TYPE), date(a.REPORT_DATE) order by 1)) as STORAGE_COST from Amazon_sales_base a left join amazon_charges b on a.REFERENCE_CODE = b.REFERENCE_CODE and a.SKU = b.final_SKU and lower(a.REPORT_TYPE) = lower(b.REPORT_TYPE) and date(a.REPORT_DATE) = date(b.REPORT_DATE) union select *, 0 as chargeback, 0 as COMMISSION_VALUE, 0 as CLOSING_FEES, 0 as Pick_and_Pack_fees, 0 as FINAL_SHIPPING, 0 as STORAGE_COST from Amazon_cancel_base union select *, 0 as chargeback, 0 as COMMISSION_VALUE, 0 as CLOSING_FEES, 0 as Pick_and_Pack_fees, 0 as FINAL_SHIPPING, 0 as STORAGE_COST from Amazon_return_base union select *, 0 as chargeback, 0 as COMMISSION_VALUE, 0 as CLOSING_FEES, 0 as Pick_and_Pack_fees, 0 as FINAL_SHIPPING, 0 as STORAGE_COST from blank_report union select a.*, 0 as chargeback, div0(COMMISSION_VALUE, count(1) over (partition by a.Reference_Code, a.SKU, date(a.report_date) order by 1)) as COMMISSION_VALUE, ( div0(CLOSING_FEES, count(1) over (partition by a.Reference_Code, a.SKU, date(a.report_date) order by 1)) + div0(COLLECTION_FEES, count(1) over (partition by a.Reference_Code, a.SKU, date(a.report_date) order by 1)) ) as CLOSING_FEES, 0 as FBA_pick_pack, div0(FINAL_SHIPPING, count(1) over (partition by a.Reference_Code, a.SKU, date(a.report_date) order by 1)) as FINAL_SHIPPING, 0 as STORAGE_COST from EE_flipkart_sales_base a left join flipkart_charges b on a.REFERENCE_CODE = b.REFERENCE_CODE and a.SKU = b.SKU and date(a.report_date) = date(b.report_date) union select *, 0 as chargeback, 0 as COMMISSION_VALUE, 0 as CLOSING_FEES, 0 as Pick_and_Pack_fees, 0 as FINAL_SHIPPING, 0 as STORAGE_COST from EE_flipkart_cancel_base union select a.*, 0 as chargeback, 0 as COMMISSION_VALUE, 0 as CLOSING_FEES, 0 as Pick_and_Pack_fees, div0(b.FINAL_SHIPPING, count(1) over (partition by a.Reference_Code, date(a.REPORT_DATE) order by 1))as FINAL_SHIPPING, 0 as STORAGE_COST from EE_rest_MP_base a left join shopify_shipping_charges b on a.REFERENCE_CODE = b.REFERENCE_CODE union select *, 0 as chargeback, 0 as COMMISSION_VALUE, 0 as CLOSING_FEES, 0 as Pick_and_Pack_fees, 0 as FINAL_SHIPPING, 0 as STORAGE_COST from EE_return_base ) select a.*, div0(PACKAGING_COST, count(1) over (partition by a.Reference_Code, a.REPORT_TYPE, a.MARKETPLACE order by 1)) as PACKAGING_COST, div0(FINAL_ORDER_WEIGHT, count(1) over (partition by a.Reference_Code, a.REPORT_TYPE, a.MARKETPLACE order by 1)) as FINAL_ORDER_WEIGHT from final_data_cost a left join packaging_material_Data b on a.REFERENCE_CODE = b.REFERENCE_CODE and lower(a.REPORT_TYPE) = lower(b.REPORT_TYPE) and lower(a.MARKETPLACE) = lower(b.MARKETPLACE)",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from HOX_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        