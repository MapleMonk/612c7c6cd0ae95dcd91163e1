{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table Almowear_db.Maplemonk.Fulfillment_Report_AW as select invoice_id, a.marketplace, warehouse_name, order_status, shipping_status, order_date::timestamp Order_Date, try_cast(manifest_date as datetime) Manifest_Date, try_cast(shipping_last_update_date as datetime) Shipping_Last_Update_Date, case when reference_code is NULL then 1 else 0 end as not_synced_with_easy_ecom_flag, case when reference_code is NULL then \'Not Synced With EasyEcom\' when lower(Order_Status) in (\'assigned\', \'open\', \'confirmed\') then \'Open\' when lower(Order_Status) in (\'cancelled\') then \'Cancelled\' when lower(Order_Status) in (\'returned\') then \'Returned\' when lower(shipping_status) in (\'delivered\') then \'Delivered\' when lower(shipping_status) in (\'out for delivery\',\'in transit\', \'pickup scheduled\') then \'In Transit\' when lower(shipping_status) is not NULL then \'Other Shipment Statuses\' when lower(shipping_status) is NULL and manifest_date is not NULL then \'Dispatched and yet to be picked\' when lower(shipping_status) is NULL then \'No Shipping Status\' end as status, case when status = \'Not Synced With EasyEcom\' then 1 else 0 end as Not_Synced_Order, case when status = \'Delivered\' then 1 else 0 end as delivered_order, case when status = \'Returned\' then 1 else 0 end as Returned_order, case when status = \'Cancelled\' then 1 else 0 end as cancelled_order, case when status = \'Open\' then 1 else 0 end as Open_Order, case when status = \'In Transit\' then 1 else 0 end as Intransit_Order, case when status = \'No Shipping Status\' then 1 else 0 end as shipping_status_NA, case when status = \'Other shipment Statuses\' then 1 else 0 end as Other_Order, case when status = \'Dispatched and yet to be picked\' then 1 else 0 end as dispatched_yet_to_be_picked_Order, case when delivered_order = 1 then datediff(\'hour\',try_cast(manifest_date as datetime) ,try_cast(shipping_last_update_date as datetime)) end as Delivery_Speed, case when delivered_order = 1 and datediff(\'hour\',try_cast(manifest_date as datetime) ,try_cast(shipping_last_update_date as datetime)) < 24 then \'< 24 hours\' when delivered_order = 1 and datediff(\'hour\',try_cast(manifest_date as datetime) ,try_cast(shipping_last_update_date as datetime)) < 48 then \'24-48 hours\' when delivered_order = 1 and datediff(\'hour\',try_cast(manifest_date as datetime) ,try_cast(shipping_last_update_date as datetime)) < 72 then \'48-72 hours\' when delivered_order = 1 and datediff(\'hour\',try_cast(manifest_date as datetime) ,try_cast(shipping_last_update_date as datetime)) < 96 then \'72-96 hours\' when delivered_order = 1 then \'> 96 hours\' else \'Not Delivered\' end as delivery_time_flag, case when not_synced_with_easy_ecom_flag = 1 then NULL when delivered_order = 1 then datediff(\'hour\',try_cast(manifest_date as datetime) ,try_cast(shipping_last_update_date as datetime)) else datediff(\'hour\',try_cast(manifest_date as datetime) ,current_timestamp() ) end as deliver_time, datediff(\'hour\',order_date::timestamp ,try_cast(manifest_date as datetime)) Dispatch_Speed, case when datediff(\'hour\',order_date::timestamp ,try_cast(manifest_date as datetime)) < 2 then \'< 2 hours\' when datediff(\'hour\',order_date::timestamp ,try_cast(manifest_date as datetime)) < 6 then \'2 - 6 hours\' when datediff(\'hour\',order_date::timestamp ,try_cast(manifest_date as datetime)) < 12 then \'6 - 12 hours\' when datediff(\'hour\',order_date::timestamp ,try_cast(manifest_date as datetime)) < 24 then \'12 - 24 hours\' when datediff(\'hour\',order_date::timestamp ,try_cast(manifest_date as datetime)) < 48 then \'24-48 hours\' when datediff(\'hour\',order_date::timestamp ,try_cast(manifest_date as datetime)) < 72 then \'48-72 hours\' when datediff(\'hour\',order_date::timestamp ,try_cast(manifest_date as datetime)) < 96 then \'72-96 hours\' when try_cast(manifest_date as datetime) is not NULL then \'> 96 hours\' when try_cast(manifest_date as datetime) is NULL then \'Not Dispatched\' end as Dispatch_Speed_flag, case when not_synced_with_easy_ecom_flag = 1 then datediff(\'hour\',order_date::timestamp ,current_timestamp() ) else datediff(\'hour\',order_date::timestamp ,try_cast(manifest_date as datetime)) end as dispatch_time, case when not_synced_with_easy_ecom_flag = 1 then \'Order Not available in Easy Ecom\' when try_cast(manifest_date as datetime) is NULL then \'Before Dispatch\' else \'After Dispatch\' end as dispatch_status, payment_mode, courier , greatest(case when hour(try_cast(a.import_date as timestamp)) < hour(try_cast(same_day_cut_off as time)) then datediff(\'day\',try_cast(import_date as datetime) ,try_cast(manifest_date as datetime)) else datediff(\'day\',try_cast(import_date as datetime) ,try_cast(manifest_date as datetime)) -1 end,0) as fulfillment_flag from ALMOWEAR_DB.maplemonk.sales_consolidated_AW a left join almo_marketplace_fulfillment_cutoff b on b.marketplace = case when a.marketplace in (select distinct marketplace from almo_marketplace_fulfillment_cutoff) then a.marketplace else \'Others\' end;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from ALMOWEAR_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        