{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_customers AS select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_customers UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_customers UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_customers UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_customers UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_customers; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders AS SELECT *, iff(charindex(\'utm_medium=\', landing_site)=0,NULL,substring(landing_site, charindex(\'utm_medium=\', landing_site) + len(\'utm_medium=\'), ifnull(nullif(charindex(\'&\', insert(landing_site, 1, charindex(\'utm_medium=\', landing_site)-1, \'\')),0), len(insert(landing_site, 1, charindex(\'utm_medium=\', landing_site)-1, \'\'))+1) - len(\'utm_medium=\')-1)) as LANDING_UTM_MEDIUM, iff(charindex(\'utm_source=\', landing_site)=0,NULL,substring(landing_site, charindex(\'utm_source=\', landing_site) + len(\'utm_source=\'), ifnull(nullif(charindex(\'&\', insert(landing_site, 1, charindex(\'utm_source=\', landing_site)-1, \'\')),0), len(insert(landing_site, 1, charindex(\'utm_source=\', landing_site)-1, \'\'))+1) - len(\'utm_source=\')-1)) as LANDING_UTM_SOURCE, iff(charindex(\'utm_campaign=\', landing_site)=0,NULL,substring(landing_site, charindex(\'utm_campaign=\', landing_site) + len(\'utm_campaign=\'), ifnull(nullif(charindex(\'&\', insert(landing_site, 1, charindex(\'utm_campaign=\', landing_site)-1, \'\')),0), len(insert(landing_site, 1, charindex(\'utm_campaign=\', landing_site)-1, \'\'))+1) - len(\'utm_campaign=\')-1)) as LANDING_UTM_CAMPAIGN, iff(charindex(\'utm_medium=\', REFERRING_SITE)=0,NULL,substring(REFERRING_SITE, charindex(\'utm_medium=\', REFERRING_SITE) + len(\'utm_medium=\'), ifnull(nullif(charindex(\'&\', insert(REFERRING_SITE, 1, charindex(\'utm_medium=\', REFERRING_SITE)-1, \'\')),0), len(insert(REFERRING_SITE, 1, charindex(\'utm_medium=\', REFERRING_SITE)-1, \'\'))+1) - len(\'utm_medium=\')-1)) as REFERRING_UTM_MEDIUM, iff(charindex(\'utm_source=\', REFERRING_SITE)=0,NULL,substring(REFERRING_SITE, charindex(\'utm_source=\', REFERRING_SITE) + len(\'utm_source=\'), ifnull(nullif(charindex(\'&\', insert(REFERRING_SITE, 1, charindex(\'utm_source=\', REFERRING_SITE)-1, \'\')),0), len(insert(REFERRING_SITE, 1, charindex(\'utm_source=\', REFERRING_SITE)-1, \'\'))+1) - len(\'utm_source=\')-1)) as REFERRING_UTM_SOURCE, CASE WHEN LANDING_SITE LIKE \'%facebook.com%\' THEN \'Facebook\' WHEN LANDING_SITE LIKE \'%google.com%\' THEN \'Google\' WHEN LANDING_SITE LIKE \'%google.co%\' THEN \'Google\' WHEN LANDING_SITE LIKE \'%instagram.com%\' THEN \'Instagram\' WHEN LANDING_SITE LIKE \'%com.google%\' THEN \'Google\' ELSE NULL END AS LANDING_UTM_CHANNEL, CASE WHEN REFERRING_SITE LIKE \'%facebook.com%\' THEN \'Facebook\' WHEN REFERRING_SITE LIKE \'%google.com%\' THEN \'Google\' WHEN REFERRING_SITE LIKE \'%google.co%\' THEN \'Google\' WHEN REFERRING_SITE LIKE \'%instagram.com%\' THEN \'Instagram\' WHEN REFERRING_SITE LIKE \'%com.google%\' THEN \'Google\' ELSE NULL END AS REFERRING_UTM_CHANNEL FROM (select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_orders UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_orders UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_orders where name like \'%#G0%\' UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_orders UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_orders)X; UPDATE Vahdam_db.maplemonk.Shopify_All_orders AO SET AO.LANDING_UTM_CHANNEL = UTM.CHANNEL FROM Vahdam_db.maplemonk.SHOPIFY_UTM_MAPPING UTM WHERE AO.LANDING_UTM_CHANNEL IS NULL AND AO.LANDING_UTM_MEDIUM LIKE CONCAT(\'%\',UTM.\"UTM Medium\",\'%\') AND AO.LANDING_UTM_SOURCE LIKE CONCAT(\'%\',UTM.\"UTM Source\",\'%\'); UPDATE Vahdam_db.maplemonk.Shopify_All_orders AO SET AO.REFERRING_UTM_CHANNEL = UTM.CHANNEL FROM Vahdam_db.maplemonk.SHOPIFY_UTM_MAPPING UTM WHERE AO.REFERRING_UTM_CHANNEL IS NULL AND AO.REFERRING_UTM_MEDIUM LIKE CONCAT(\'%\',UTM.\"UTM Medium\",\'%\') AND AO.REFERRING_UTM_SOURCE LIKE CONCAT(\'%\',UTM.\"UTM Source\",\'%\'); UPDATE Vahdam_db.maplemonk.Shopify_All_orders SET LANDING_UTM_CHANNEL = \'Direct\' WHERE LANDING_UTM_CHANNEL IS NULL AND LANDING_UTM_MEDIUM IS NULL AND LANDING_UTM_SOURCE IS NULL AND REFERRING_UTM_MEDIUM IS NULL AND REFERRING_UTM_SOURCE IS NULL AND (LANDING_SITE LIKE \'%vahdamteas.in%\'or LANDING_SITE LIKE \'%vahdamteas.com%\'); UPDATE Vahdam_db.maplemonk.Shopify_All_orders SET REFERRING_UTM_CHANNEL = \'Direct\' WHERE REFERRING_UTM_CHANNEL IS NULL AND LANDING_UTM_MEDIUM IS NULL AND LANDING_UTM_SOURCE IS NULL AND REFERRING_UTM_MEDIUM IS NULL AND REFERRING_UTM_SOURCE IS NULL AND (REFERRING_SITE LIKE \'%vahdamteas.in%\'or REFERRING_SITE LIKE \'%vahdamteas.com%\'); ALTER TABLE Vahdam_db.maplemonk.Shopify_All_orders ADD COLUMN FINAL_UTM_CHANNEL varchar(16777216); UPDATE Vahdam_db.maplemonk.Shopify_All_orders SET FINAL_UTM_CHANNEL = COALESCE(LANDING_UTM_CHANNEL,REFERRING_UTM_CHANNEL,\'Others\') WHERE LANDING_UTM_CHANNEL IS NULL OR REFERRING_UTM_CHANNEL IS NULL; UPDATE Vahdam_db.maplemonk.Shopify_All_orders SET FINAL_UTM_CHANNEL = LANDING_UTM_CHANNEL WHERE LANDING_UTM_CHANNEL IS NOT NULL AND REFERRING_UTM_CHANNEL IS NOT NULL AND LANDING_UTM_CHANNEL = REFERRING_UTM_CHANNEL; UPDATE Vahdam_db.maplemonk.Shopify_All_orders SET FINAL_UTM_CHANNEL = LANDING_UTM_CHANNEL WHERE LANDING_UTM_CHANNEL IS NOT NULL AND REFERRING_UTM_CHANNEL IS NOT NULL AND LANDING_UTM_CHANNEL<>REFERRING_UTM_CHANNEL; UPDATE Vahdam_db.maplemonk.Shopify_All_orders SET LANDING_UTM_CHANNEL = \'Others\' WHERE LANDING_UTM_CHANNEL IS NULL; UPDATE Vahdam_db.maplemonk.Shopify_All_orders SET REFERRING_UTM_CHANNEL = \'Others\' WHERE REFERRING_UTM_CHANNEL IS NULL; ALTER TABLE Vahdam_db.maplemonk.Shopify_All_orders RENAME COLUMN _AIRBYTE_SHOPIFYINDIA_ORDERS_HASHID to _AIRBYTE_ORDERS_HASHID; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_products AS select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_products UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_products UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_products UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_products UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_products; ALTER TABLE Vahdam_db.maplemonk.Shopify_All_products RENAME COLUMN _AIRBYTE_SHOPIFYINDIA_PRODUCTS_HASHID to _AIRBYTE_PRODUCTS_HASHID; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_products_variants AS select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_products_variants UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_products_variants UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_products_variants UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_products_variants UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_products_variants; ALTER TABLE Vahdam_db.maplemonk.Shopify_All_products_variants RENAME COLUMN _AIRBYTE_SHOPIFYINDIA_PRODUCTS_HASHID to _AIRBYTE_PRODUCTS_HASHID; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_customers_addresses AS select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_customers_addresses UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_customers_addresses UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_customers_addresses UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_customers_addresses UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_customers_addresses; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders_items_discount AS SELECT order_id, LINE_ITEM_ID, SUM(B.VALUE:amount::FLOAT) AS DISCOUNT FROM( SELECT id AS order_id, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:discount_allocations AS discount_allocations FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A)x,LATERAL FLATTEN (INPUT => x.discount_allocations)B GROUP BY ORDER_ID, LINE_ITEM_ID; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders_items_tax AS SELECT order_id, LINE_ITEM_ID, SUM(B.VALUE:price::FLOAT) AS TAX, sum(B.VALUE:rate::float) as Tax_Rate FROM( SELECT id AS order_id, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:tax_lines AS tax_lines FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A)x,LATERAL FLATTEN (INPUT => x.tax_lines)B GROUP BY order_id, LINE_ITEM_ID; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_Refunds AS SELECT Name, ID AS Order_ID, Shop_name, C.value:line_item_id AS line_item_id, SUM(C.VALUE:quantity) AS quantity, SUM(C.VALUE:subtotal) AS subtotal FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN(INPUT => refunds)A, LATERAL FLATTEN(INPUT=>A.value)B, LATERAL FLATTEN(INPUT => B.value) C WHERE C.value:line_item_id IS NOT null GROUP BY Name, ID, Shop_name, C.value:line_item_id; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders_items AS WITH CTE AS (SELECT SHOP_NAME, ID::VARCHAR(16777216) AS ORDER_ID, NAME AS ORDER_NAME, CUSTOMER, A.VALUE:id::STRING AS LINE_ITEM_ID, A.VALUE:sku::STRING AS SKU, A.VALUE:product_id::STRING AS PRODUCT_ID, A.VALUE:title::STRING AS PRODUCT_title, A.value:variant_title::string as Variant_title, CURRENCY, CASE WHEN cancelled_at IS NOT NULL THEN \'CANCELLED\' ELSE \'Shopify_Processed\' END AS order_status, CREATED_AT::DATETIME AS order_timestamp, A.VALUE:price::FLOAT * A.VALUE:quantity::FLOAT AS LINE_ITEM_SALES, (TOTAL_SHIPPING_PRICE_SET:presentment_money:amount::FLOAT/ COUNT(ORDER_ID) OVER(PARTITION BY ORDER_ID ORDER BY ORDER_ID)) AS SHIPPING_PRICE, A.value:price/(1+A.value:tax_lines:rate), A.VALUE:quantity::FLOAT as QUANTITY, \'Shopify\' AS Source, LANDING_UTM_MEDIUM, LANDING_UTM_SOURCE, LANDING_UTM_CAMPAIGN, REFERRING_UTM_MEDIUM, REFERRING_UTM_SOURCE, LANDING_UTM_CHANNEL, REFERRING_UTM_CHANNEL, FINAL_UTM_CHANNEL FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A) SELECT CTE.*, IFNULL(T.TAX_RATE,0) AS TAX_RATE, IFNULL(D.DISCOUNT,0) AS DISCOUNT, CTE.LINE_ITEM_SALES AS GROSS_SALES_AFTER_TAX, CTE.LINE_ITEM_SALES/(1+IFNULL(T.TAX_RATE,0)) AS GROSS_SALES_BEFORE_TAX, CASE when T.TAX=0 then IFNULL(D.DISCOUNT,0) else IFNULL(D.DISCOUNT,0)/(1+IFNULL(T.TAX_RATE,0)) end AS DISCOUNT_BEFORE_TAX, CASE when T.TAX=0 then CTE.LINE_ITEM_SALES - IFNULL(D.DISCOUNT,0) else CTE.LINE_ITEM_SALES/(1+IFNULL(T.TAX_RATE,0)) - IFNULL(D.DISCOUNT,0)/(1+IFNULL(T.TAX_RATE,0)) end AS NET_SALES_BEFORE_TAX, IFNULL(T.TAX,0) AS TAX, case when T.TAX=0 then (CTE.LINE_ITEM_SALES) - IFNULL(D.DISCOUNT,0) + IFNULL(T.TAX,0) + CTE.SHIPPING_PRICE else (CTE.LINE_ITEM_SALES/(1+IFNULL(T.TAX_RATE,0))) - (IFNULL(D.DISCOUNT,0)/(1+IFNULL(T.TAX_RATE,0))) + CTE.SHIPPING_PRICE end AS TOTAL_SALES, CASE WHEN R.QUANTITY IS NOT NULL THEN 1 ELSE 0 END AS IS_REFUND FROM CTE LEFT JOIN Vahdam_db.maplemonk.Shopify_All_orders_items_tax T ON CTE.ORDER_ID = T.ORDER_ID AND CTE.LINE_ITEM_ID = T.LINE_ITEM_ID LEFT JOIN Vahdam_db.maplemonk.Shopify_All_orders_items_discount D ON CTE.ORDER_ID = D.ORDER_ID AND CTE.LINE_ITEM_ID = D.LINE_ITEM_ID LEFT JOIN Vahdam_db.maplemonk.Shopify_All_Refunds R ON CTE.ORDER_ID = R.ORDER_ID AND CTE.LINE_ITEM_ID = R.LINE_ITEM_ID; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.FACT_ITEMS AS SELECT O.SHOP_NAME, O.ORDER_ID, O.ORDER_NAME, O.CUSTOMER:id::int AS customer_id, O.LINE_ITEM_ID, case when O.PRODUCT_ID = \'5174904586378\' then \'FO-JW5B-4IOE\' when O.PRODUCT_ID = \'5174029615242\' then \'BJ-CMNT-91WV\' when O.PRODUCT_ID = \'5177945456778\' then \'VY-V800-U4GD\' when O.PRODUCT_ID = \'5177823002762\' then \'R9-M5E0-GUG9\' when O.PRODUCT_ID = \'5174951051402\' then \'W9-41V2-83T9\' when O.PRODUCT_ID = \'5177891487882\' then \'AMZBT2-100\' when O.PRODUCT_ID = \'5174903963786\' then \'B3-GVNM-ACPG\' when O.PRODUCT_ID = \'5174036430986\' then \'3U-2PKZ-RC2B\' when O.PRODUCT_ID = \'5171626475658\' then \'85-Z800-4BXE\' when O.PRODUCT_ID = \'5174910058634\' then \'BX-X1CK-7GJ2\' when O.PRODUCT_ID = \'5173959065738\' then \'G9-9891-DX4Y\' when O.PRODUCT_ID = \'5174905143434\' then \'KC-UQ2N-ARR8\' when O.PRODUCT_ID = \'5177941983370\' then \'EZ-8UGC-B12M\' when O.PRODUCT_ID = \'5174049800330\' then \'IM-UNQG-GH9N\' when O.PRODUCT_ID = \'5172891549834\' then \'EL-HUYB-0CK7\' when O.PRODUCT_ID = \'5171630506122\' then \'RO-OWFL-UZKW\' when O.PRODUCT_ID = \'5177948110986\' then \'6E-IGO1-0PT0\' when O.PRODUCT_ID = \'5172875821194\' then \'1A-9FT5-L1VJ\' when O.PRODUCT_ID = \'5177842040970\' then \'9K-0F08-CQDM\' when O.PRODUCT_ID = \'5173980299402\' then \'C4-SMXD-IPJ7\' when O.PRODUCT_ID = \'5174906355850\' then \'SK-A51K-GSRK\' when O.PRODUCT_ID = \'5177928056970\' then \'AMZBT4-100\' when O.PRODUCT_ID = \'5174911238282\' then \'KC-UQ2N-ARR8\' when O.PRODUCT_ID = \'5177874907274\' then \'55-R4EG-DB7Y\' when O.PRODUCT_ID = \'5177895682186\' then \'Q3-NJYD-UKCN\' when O.PRODUCT_ID = \'5172658143370\' then \'SV-IE2B-3I61\' when O.PRODUCT_ID = \'5177880641674\' then \'03-N8P2-V4FX\' when O.PRODUCT_ID = \'5177868583050\' then \'4X-3CP7-R1KK\' when O.PRODUCT_ID = \'5177848561802\' then \'T2-33XI-6ZKD\' when O.PRODUCT_ID = \'5177856589962\' then \'6E-WNEV-X0MA\' when O.PRODUCT_ID = \'5174003925130\' then \'2R-SN0B-RTK1\' when O.PRODUCT_ID = \'5174941712522\' then \'WO-EPY2-EZWD\' when O.PRODUCT_ID = \'5177933201546\' then \'35-J5SP-UW3Y\' when O.PRODUCT_ID = \'5171646398602\' then \'7C-VSUQ-D3LC\' when O.PRODUCT_ID = \'5172831486090\' then \'S6-HT5N-AQ4A\' when O.PRODUCT_ID = \'5171633684618\' then \'GJ-Y9HP-H0WD\' when O.PRODUCT_ID = \'5174045900938\' then \'YX-JKEQ-7VH1\' when O.PRODUCT_ID = \'5174001467530\' then \'MN-BD1L-SWQV\' when O.PRODUCT_ID = \'5177837518986\' then \'6U-NOIC-S7JF\' when O.PRODUCT_ID = \'5174872866954\' then \'NG-X1CR-U86W\' when O.PRODUCT_ID = \'5177825362058\' then \'J6-EZKV-Q10K\' when O.PRODUCT_ID = \'5174874243210\' then \'GU-ZDH1-NA5O\' when O.PRODUCT_ID = \'5174030991498\' then \'4U-LYQ1-78G8\' when O.PRODUCT_ID = \'5173970141322\' then \'G2-R5O8-APAK\' when O.PRODUCT_ID = \'5171628834954\' then \'FU-SBFM-TPI2\' when O.PRODUCT_ID = \'5172837974154\' then \'G1-B7K2-NFTL\' when O.PRODUCT_ID = \'5171917750410\' then \'QA-SA5O-XS2J\' when O.PRODUCT_ID = \'5177938706570\' then \'2R-CW5Q-RGYS\' when O.PRODUCT_ID = \'5177924485258\' then \'WS-0SRQ-W5LG\' when O.PRODUCT_ID = \'4583452147758\' then \'55-R4EG-DB7Y\' when O.PRODUCT_ID = \'4580469145646\' then \'3U-2PKZ-RC2B\' when O.PRODUCT_ID = \'4581226283054\' then \'W9-41V2-83T9\' when O.PRODUCT_ID = \'4583425998894\' then \'AMZWT1-100\' when O.PRODUCT_ID = \'4578309537838\' then \'85-Z800-4BXE\' when O.PRODUCT_ID = \'1996933693486\' then \'CB00010393-BN\' when O.PRODUCT_ID = \'4583459160110\' then \'AMZBT2-100\' when O.PRODUCT_ID = \'4583490125870\' then \'6E-IGO1-0PT0\' when O.PRODUCT_ID = \'4583486259246\' then \'EZ-8UGC-B12M\' when O.PRODUCT_ID = \'4583449428014\' then \'4X-3CP7-R1KK\' when O.PRODUCT_ID = \'4583479312430\' then \'35-J5SP-UW3Y\' when O.PRODUCT_ID = \'4583472267310\' then \'WS-0SRQ-W5LG\' when O.PRODUCT_ID = \'4581136990254\' then \'NG-X1CR-U86W\' when O.PRODUCT_ID = \'4583390511150\' then \'EL-1YIV-4FG4\' when O.PRODUCT_ID = \'4579653255214\' then \'G1-B7K2-NFTL\' when O.PRODUCT_ID = \'4580460920878\' then \'ZX-T5H5-1CTB\' when O.PRODUCT_ID = \'4580389453870\' then \'MN-BD1L-SWQV\' when O.PRODUCT_ID = \'4581142560814\' then \'B3-GVNM-ACPG\' when O.PRODUCT_ID = \'4583388774446\' then \'HK-RHMC-CXN4\' when O.PRODUCT_ID = \'4580390633518\' then \'2R-SN0B-RTK1\' when O.PRODUCT_ID = \'4583475347502\' then \'AMZBT4-100\' when O.PRODUCT_ID = \'4578321858606\' then \'GJ-Y9HP-H0WD\' when O.PRODUCT_ID = \'4580365959214\' then \'C4-SMXD-IPJ7\' when O.PRODUCT_ID = \'6708520058926\' then \'14-NQ4R-FU85\' when O.PRODUCT_ID = \'4581194629166\' then \'T7-9OCS-8BKZ\' when O.PRODUCT_ID = \'4581189320750\' then \'BX-X1CK-7GJ2\' when O.PRODUCT_ID = \'4580387192878\' then \'HG-I37M-JQ2G\' when O.PRODUCT_ID = \'4581214715950\' then \'WO-EPY2-EZWD\' when O.PRODUCT_ID = \'4581218287662\' then \'H3-DK3D-UQ10\' when O.PRODUCT_ID = \'4579655516206\' then \'KL-610N-C9JW\' when O.PRODUCT_ID = \'4580472094766\' then \'VJ-HUM9-X53U\' when O.PRODUCT_ID = \'10881775235\' then \'CB020001740-BN(IND)\' when O.PRODUCT_ID = \'4856625987663\' then \'TB00600564-GT(IND)\' when O.PRODUCT_ID = \'4801601732687\' then \'CB020001744-BN(IND)\' when O.PRODUCT_ID = \'4797955670095\' then \'CB020001735-BN(IND)\' when O.PRODUCT_ID = \'4801537671247\' then \'CB020001745-BN(IND)\' when O.PRODUCT_ID = \'6623470813263\' then \'TB00600745-HT\' when O.PRODUCT_ID = \'4812517376079\' then \'CB020001736-BN(IND)\' when O.PRODUCT_ID = \'6790177292367\' then \'TA00010014-DW\' when O.PRODUCT_ID = \'4786716508239\' then \'TA00010014-DW\' when O.PRODUCT_ID = \'4856628379727\' then \'CB020001748-BN(IND)\' when O.PRODUCT_ID = \'398010286115\' then \'CB020001741-BN(IND)\' when O.PRODUCT_ID = \'1386711580707\' then \'CB020001740-BN(IND)\' when O.PRODUCT_ID = \'1838546026531\' then \'CB020001733-BN(IND)\' when O.PRODUCT_ID = \'397987643427\' then \'CB020001734-BN(IND)\' when O.PRODUCT_ID = \'6595591209039\' then \'LF01000894-SE\' when O.PRODUCT_ID = \'4812567740495\' then \'CB020001737-BN(IND)\' when O.PRODUCT_ID = \'10881775235\' then \'CB020001740-BN(IND)\' when O.PRODUCT_ID = \'6759283589199\' then \'LF005001591-HT(IND)\' when O.PRODUCT_ID = \'6595591995471\' then \'LF01000292-DT\' when O.PRODUCT_ID = \'6895027617871\' then \'LF005001827-HT(IND)\' when O.PRODUCT_ID = \'10881852739\' then \'CB020001739-BN(IND)\' when O.PRODUCT_ID = \'10881926019\' then \'TB00600522-BT(IND)\' when O.PRODUCT_ID = \'6743505797199\' then \'CB000101582-BN\' when O.PRODUCT_ID = \'4786709987407\' then \'TA00010720-DW\' when O.PRODUCT_ID = \'6922064003151\' then \'LF005001842-BT\' when O.PRODUCT_ID = \'4801601732687\' then \'TB00600546-GT(IND)\' when O.PRODUCT_ID = \'1838565130275\' then \'TB00600486-HT(IND)\' when O.PRODUCT_ID = \'4815516991567\' then \'TB020001682-HT(IND)\' when O.PRODUCT_ID = \'6623464980559\' then \'TB00600696-HT\' when O.PRODUCT_ID = \'10881950979\' then \'TB00600531-GT(IND)\' when O.PRODUCT_ID = \'6748928770127\' then \'LF040001659-BT\' when O.PRODUCT_ID = \'4801624866895\' then \'CB020001743-BN(IND)\' when O.PRODUCT_ID = \'6623471927375\' then \'TB00600696-HT\' when O.PRODUCT_ID = \'6851159851087\' then \'GF000101805-MB\' when O.PRODUCT_ID = \'4856628379727\' then \'TB00600570-GT(IND)\' when O.PRODUCT_ID = \'4801624866895\' then \'TB00600543-GT(IND)\' when O.PRODUCT_ID = \'10881894851\' then \'TB00600513-BT(IND)\' when O.PRODUCT_ID = \'6897007493199\' then \'CRTBLID\' when O.PRODUCT_ID = \'6642942738511\' then \'ADTLID\' when O.PRODUCT_ID = \'6896984653903\' then \'CATBLID\' when O.PRODUCT_ID = \'6545118625871\' then \'CB000101546-BN\' when O.PRODUCT_ID = \'4806776684623\' then \'TB00600495-HT(IND)\' when O.PRODUCT_ID = \'6844889497679\' then \'TA00010014-DW\' when O.PRODUCT_ID = \'6897027055695\' then \'HUTBLID\' when O.PRODUCT_ID = \'10881775235\' then \'TB00600528-GT(IND)\' when O.PRODUCT_ID = \'4812567740495\' then \'TB00600507-HT(IND)\' when O.PRODUCT_ID = \'10881875971\' then \'TB00600519-BT(IND)\' when O.PRODUCT_ID = \'6695928528975\' then \'TA00010778-DW\' when O.PRODUCT_ID = \'398010286115\' then \'TB00600534-GT(IND)\' when O.PRODUCT_ID = \'6665855139919\' then \'TB010001151-GT(IND)\' when O.PRODUCT_ID = \'397973848099\' then \'TB00600525-BT(IND)\' when O.PRODUCT_ID = \'6641572839503\' then \'LF01000937-BT\' when O.PRODUCT_ID = \'6584053399631\' then \'LF01000300-AT\' when O.PRODUCT_ID = \'6582165831759\' then \'LF01000890-SE\' when O.PRODUCT_ID = \'6790179684431\' then \'TA00010720-DW\' when O.PRODUCT_ID = \'6582161735759\' then \'LF01000886-SE\' when O.PRODUCT_ID = \'6595590455375\' then \'LF01000893-SE\' when O.PRODUCT_ID = \'6582163800143\' then \'LF01000295-DT\' when O.PRODUCT_ID = \'6796069896271\' then \'TA00010778-DW\' when O.PRODUCT_ID = \'1641096937515\' then \'E-GIFT\' when O.PRODUCT_ID = \'1641105162283\' then \'E-GIFT\' when O.PRODUCT_ID = \'4440432607275\' then \'E-GIFT\' when O.PRODUCT_ID = \'4440431886379\' then \'E-GIFT\' when O.PRODUCT_ID = \'4434445467691\' then \'E-GIFT\' when O.PRODUCT_ID = \'1641106473003\' then \'E-GIFT\' when O.PRODUCT_ID = \'4831747244075\' then \'UU-X7JD-PFU9\' when O.PRODUCT_ID = \'6540391940139\' then \'K3-VLTM-UZT6\' when O.PRODUCT_ID = \'7059620888619\' then \'KF-0HCV-T32W\' when O.PRODUCT_ID = \'4816366436395\' then \'CB00010680-BN\' when O.PRODUCT_ID = \'6953952215083\' then \'CB000101750-BN\' when O.PRODUCT_ID = \'6540391940139\' then \'K3-VLTM-UZT6\' when O.PRODUCT_ID = \'6805357133867\' then \'SX-SQO9-E18I\' when O.PRODUCT_ID = \'4489761652779\' then \'LF01000293-DT\' when O.PRODUCT_ID = \'6805362376747\' then \'II-GW0Q-F6CE\' when O.PRODUCT_ID = \'6805367947307\' then \'ON-OJY9-2QUZ\' when O.PRODUCT_ID = \'6805373681707\' then \'GD-DRPJ-GC8L\' when O.PRODUCT_ID = \'6805274525739\' then \'Z2-XKB7-GERQ\' when O.PRODUCT_ID = \'6597392269355\' then \'LF00500899-SE\' when O.PRODUCT_ID = \'6805373681707\' then \'GD-DRPJ-GC8L\' when O.PRODUCT_ID = \'6805373681707\' then \'GD-DRPJ-GC8L\' when O.PRODUCT_ID = \'6882194718763\' then \'LF005001663-BT\' when O.PRODUCT_ID = \'4478439817259\' then \'DZ-0VYA-PJ20\' when O.PRODUCT_ID = \'6882194718763\' then \'LF020001664-BT\' when O.PRODUCT_ID = \'6892545409067\' then \'UP-SR6G-0QXC\' when O.PRODUCT_ID = \'1577081667627\' then \'QT-PYMT-K1ZE\' when O.PRODUCT_ID = \'6805274525739\' then \'CB030001469-BN\' when O.PRODUCT_ID = \'4812560924715\' then \'Uncommingled.MSKU.1614859309584\' when O.PRODUCT_ID = \'4479507169323\' then \'U3-W9V1-2ORQ\' when O.PRODUCT_ID = \'4479522603051\' then \'ST-OUQ0-RJ5M\' when O.PRODUCT_ID = \'4479524732971\' then \'4Y-L7EQ-50WA\' when O.PRODUCT_ID = \'4479510151211\' then \'IJ-UE4N-HG6K\' when O.PRODUCT_ID = \'6707166380075\' then \'1H-UJK7-5CRV\' when O.PRODUCT_ID = \'6821791629355\' then \'DR-MOM\' when O.PRODUCT_ID = \'6592387481643\' then \'41-5MTB-U2EA\' when O.PRODUCT_ID = \'4479523848235\' then \'AF-M4T7-POBV\' when O.PRODUCT_ID = \'1577084387371\' then \'RC-FNNG-8AIM\' when O.PRODUCT_ID = \'4479510151211\' then \'IJ-UE4N-HG6K\' when O.PRODUCT_ID = \'6815641600043\' then \'YF-XG1U-Z90C\' when O.PRODUCT_ID = \'6821893636139\' then \'DR-GMA\' when O.PRODUCT_ID = \'6707151831083\' then \'KP-JCRA-9REN\' when O.PRODUCT_ID = \'6845428236331\' then \'CB000101649-BN\' when O.PRODUCT_ID = \'6845428236331\' then \'CB000101649-BN\' when O.PRODUCT_ID = \'6597393219627\' then \'LF01000893-SE\' when O.PRODUCT_ID = \'6707146162219\' then \'GK-TMJO-IZ9K\' when O.PRODUCT_ID = \'4812560924715\' then \'Uncommingled.MSKU.1614859309584\' when O.PRODUCT_ID = \'6819396419627\' then \'YZ-N3R3-C16O\' when O.PRODUCT_ID = \'4479522603051\' then \'ST-OUQ0-RJ5M\' when O.PRODUCT_ID = \'6539530666027\' then \'9S-PQT6-VP0D\' when O.PRODUCT_ID = \'6591825149995\' then \'SG-BMO4-XE5Y\' when O.PRODUCT_ID = \'6815412944939\' then \'YE-VMAP-Y1EO\' when O.PRODUCT_ID = \'4489667346475\' then \'4G-MJ7V-0I0Y\' when O.PRODUCT_ID = \'6793212559403\' then \'YE-P2RF-6CKP\' when O.PRODUCT_ID = \'6707157991467\' then \'S9-OJXV-0W38\' when O.PRODUCT_ID = \'6809768263723\' then \'9J-ILH9-5A6S\' when O.PRODUCT_ID = \'6793196273707\' then \'SZ-NW59-CEKI\' when O.PRODUCT_ID = \'6707155468331\' then \'XN-UQ31-UW5W\' when O.PRODUCT_ID = \'6535302971435\' then \'B9-H07C-10GG\' when O.PRODUCT_ID = \'6821860540459\' then \'44-MRO7-5X6P\' when O.PRODUCT_ID = \'4812560924715\' then \'Uncommingled.MSKU.1614859309584\' when O.PRODUCT_ID = \'6986112073771\' then \'WQ-10MT-EVBV\' when O.PRODUCT_ID = \'6707147702315\' then \'OU-SPMW-9YKZ\' when O.PRODUCT_ID = \'6819399041067\' then \'IQ-4ZYI-X4UM\' when O.PRODUCT_ID = \'6986115547179\' then \'WQ-10MT-EVBV\' when O.PRODUCT_ID = \'7150528856111\' then \'LF034001156-CT\' when O.PRODUCT_ID = \'4533643313199\' then \'E-GIFT\' when O.PRODUCT_ID = \'7024748036143\' then \'LF010001579-DT(2022)\' when O.PRODUCT_ID = \'7024748036143\' then \'CB050001324-BN\' when O.PRODUCT_ID = \'10461553869\' then \'LF01000292-DT\' when O.PRODUCT_ID = \'7024748036143\' then \'CB050001324-BN\' when O.PRODUCT_ID = \'4533674901551\' then \'E-GIFT\' when O.PRODUCT_ID = \'4533679128623\' then \'E-GIFT\' when O.PRODUCT_ID = \'7024748036143\' then \'LF010001579-DT(2022)\' when O.PRODUCT_ID = \'7024765698095\' then \'LF005001580-DT(2022)\' when O.PRODUCT_ID = \'7068264071215\' then \'LF020001662-BT\' when O.PRODUCT_ID = \'7068264071215\' then \'LF00500899-SE\' when O.PRODUCT_ID = \'6967689674799\' then \'SF01500884-IM\' when O.PRODUCT_ID = \'6784581140527\' then \'E-GIFT\' when O.PRODUCT_ID = \'7024765698095\' then \'CB025001323-BN\' when O.PRODUCT_ID = \'4533643313199\' then \'E-GIFT\' when O.PRODUCT_ID = \'4864805830703\' then \'TB02000234-BT\' when O.PRODUCT_ID = \'7012932059183\' then \'SF01500881-IM\' when O.PRODUCT_ID = \'7024765698095\' then \'CB025001323-BN\' when O.PRODUCT_ID = \'4675224993839\' then \'LF01000295-DT\' when O.PRODUCT_ID = \'7053469843503\' then \'LF040001660-BT\' when O.PRODUCT_ID = \'6967708647471\' then \'SF01500883-IM\' when O.PRODUCT_ID = \'4523817893935\' then \'E-GIFT\' when O.PRODUCT_ID = \'6953705209903\' then \'LF010001446-BT(2022)\' when O.PRODUCT_ID = \'7243815551023\' then \'LF007501534-CT\' when O.PRODUCT_ID = \'54467199002\' then \'LF02000110-HT\' when O.PRODUCT_ID = \'1103814623279\' then \'SF00500042-MT\' when O.PRODUCT_ID = \'6747041464367\' then \'CB025001459-BN\' when O.PRODUCT_ID = \'6946541764655\' then \'LF010001443-BT(2022)\' when O.PRODUCT_ID = \'7003153760303\' then \'LF010001537-DT(2022)\' when O.PRODUCT_ID = \'6747045199919\' then \'LF01000894-SE\' when O.PRODUCT_ID = \'4174287809\' then \'LF01000189-ABT\' when O.PRODUCT_ID = \'6587632484399\' then \'LF01000885-SE\' when O.PRODUCT_ID = \'4626585255983\' then \'LF02000105-GT\' when O.PRODUCT_ID = \'4675224993839\' then \'LF01000295-DT\' when O.PRODUCT_ID = \'7000013111343\' then \'LF010001507-BT(2022)\' when O.PRODUCT_ID = \'961399783471\' then \'LF00500141-WT\' when O.PRODUCT_ID = \'569292816417\' then \'SM01500352-LF\' when O.PRODUCT_ID = \'7053547700271\' then \'LF010001651-BT\' when O.PRODUCT_ID = \'6767468773423\' then \'GF02400711-TB\' when O.PRODUCT_ID = \'6763103289391\' then \'GF00500308-SC\' when O.PRODUCT_ID = \'5297624513\' then \'LF02000188-ABT\' when O.PRODUCT_ID = \'4153881281\' then \'LF02000059-CT\' when O.PRODUCT_ID = \'5333515521\' then \'SM00500347-LF\' when O.PRODUCT_ID = \'6861260324911\' then \'TB004001141-BT\' when O.PRODUCT_ID = \'991909150767\' then \'GF00500315-PR\' when O.PRODUCT_ID = \'4167098753\' then \'LF02000063-CT\' when O.PRODUCT_ID = \'6739181240367\' then \'LF01000891-SE\' when O.PRODUCT_ID = \'6544310435919\' then \'TA00010715-DW\' when O.PRODUCT_ID = \'6584986468431\' then \'LF01000299-AT\' when O.PRODUCT_ID = \'6703156723791\' then \'LF005001400-BT\' when O.PRODUCT_ID = \'6584047632463\' then \'LF01000194-SE\' when O.PRODUCT_ID = \'6794666803279\' then \'LF01000056-CT\' when O.PRODUCT_ID = \'6584051236943\' then \'LF01000891-SE\' when O.PRODUCT_ID = \'6582162423887\' then \'LF01000887-SE\' else O.SKU end as SKU, O.PRODUCT_ID, O.CURRENCY, O.IS_REFUND, CASE WHEN CD.city IS NULL OR CD.city = \'\' THEN \'NA\' ELSE CD.city END AS city, CASE WHEN CD.province IS NULL OR CD.province = \'\' THEN \'NA\' ELSE CD.province END AS state, CASE WHEN CD.country_name IS NULL OR CD.country_name = \'\' THEN \'NA\' ELSE CD.country_name END AS country, CASE WHEN P.product_type = \'\' THEN \'NA\' ELSE P.product_type END AS category, O.order_status, O.order_timestamp, O.LINE_ITEM_SALES, O.SHIPPING_PRICE, O.QUANTITY, O.TAX, O.TAX_RATE, O.DISCOUNT, O.DISCOUNT_BEFORE_TAX, O.GROSS_SALES_AFTER_TAX, O.GROSS_SALES_BEFORE_TAX, O.NET_SALES_BEFORE_TAX, O.TOTAL_SALES, O.Source, O.LANDING_UTM_MEDIUM, O.LANDING_UTM_SOURCE, O.LANDING_UTM_CAMPAIGN, O.REFERRING_UTM_MEDIUM, O.REFERRING_UTM_SOURCE, O.LANDING_UTM_CHANNEL, O.REFERRING_UTM_CHANNEL, O.FINAL_UTM_CHANNEL, O.product_title PRODUCT_title, O.Variant_title Variant_title FROM Vahdam_db.maplemonk.Shopify_All_orders_items O LEFT JOIN Vahdam_db.maplemonk.Shopify_All_products P ON O.PRODUCT_ID = P.id LEFT JOIN(SELECT customer_id, city, province, country_name, row_number() OVER ( partition BY customer_id ORDER BY id DESC) rowid FROM Vahdam_db.maplemonk.Shopify_All_customers_addresses) AS CD ON O.CUSTOMER:id::int = CD.customer_id AND CD.rowid = 1; UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS A SET A.city=case when B.\"New city\" is null then INITCAP(A.city) else INITCAP(B.\"New city\") end FROM Vahdam_db.maplemonk.shopify_all_cities_mapping B WHERE UPPER(A.city)=UPPER(B.city); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN customer_flag varchar(50); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN new_customer_flag varchar(50); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN acquisition_channel varchar(16777216); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN acquisition_product varchar(16777216); UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS A SET A.customer_flag = B.flag FROM ( SELECT DISTINCT order_id, customer_id, order_timestamp, CASE WHEN order_timestamp <> Min(order_timestamp) OVER ( partition BY customer_id) THEN \'Repeated\' ELSE \'New\' END AS Flag FROM Vahdam_db.maplemonk.FACT_ITEMS)AS B WHERE A.order_id = B.order_id AND A.customer_id = B.customer_id; UPDATE Vahdam_db.maplemonk.FACT_ITEMS SET customer_flag = CASE WHEN customer_flag IS NULL THEN \'New\' ELSE customer_flag END; UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS A SET A.new_customer_flag = B.flag FROM ( SELECT DISTINCT order_id, customer_id, order_timestamp, CASE WHEN Last_day(order_timestamp, \'month\') <> Last_day(Min(order_timestamp) OVER ( partition BY customer_id)) THEN \'Repeated\' ELSE \'New\' END AS Flag FROM Vahdam_db.maplemonk.FACT_ITEMS)AS B WHERE A.order_id = B.order_id AND A.customer_id = B.customer_id; UPDATE Vahdam_db.maplemonk.FACT_ITEMS SET new_customer_flag = CASE WHEN new_customer_flag IS NULL THEN \'New\' ELSE new_customer_flag END; CREATE OR replace temporary TABLE Vahdam_db.maplemonk.temp_source AS SELECT DISTINCT customer_id, source FROM ( SELECT DISTINCT customer_id, order_timestamp, source, Min(order_timestamp) OVER ( partition BY customer_id) firstOrderdate FROM Vahdam_db.maplemonk.FACT_ITEMS)res WHERE order_timestamp=firstorderdate; UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS a SET a.acquisition_channel=b.source FROM Vahdam_db.maplemonk.temp_source b WHERE a.customer_id = b.customer_id; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.AMAZON_All_COUNTRIES AS SELECT \'Amazon_USA\' AS SHOP_NAME, \"amazon-order-id\" AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, SKU, CASE WHEN ASIN = \'B09R1P7BCC\' THEN \'B0BCKGS74K\' WHEN ASIN = \'B09R1P7KGG\' THEN \'B0BCKFGKFQ\' WHEN ASIN = \'B09R1PQXQS\' THEN \'B0BCKGXTZ2\' WHEN ASIN = \'B09WW68356\' THEN \'B015IQF9SS\' WHEN ASIN = \'B09R1P72GN\' THEN \'B0BCKF5274\' WHEN ASIN = \'B0BHT8XM53\' THEN \'B0B46MB9N2\' WHEN ASIN = \'B09Y5YN1LC\' THEN \'B0BMXTMTTV\' WHEN ASIN = \'B08HXVFDQR\' THEN \'B08Y1FH4ZP\' WHEN ASIN = \'B01BTYZ3AC\' THEN \'B01BTYZ3AW\' WHEN ASIN = \'B08R43TPNS\' THEN \'B08LYLS4PM\' WHEN ASIN = \'B00Q2JGIHC\' THEN \'B08DRLSF5F\' WHEN ASIN = \'B00VIDZ0J4\' THEN \'B07RGK4H2B\' WHEN ASIN = \'B00VIDZBES\' THEN \'B07RJRJC7V\' WHEN ASIN = \'B00QIJXY50\' THEN \'B01M706JM3\' ELSE ASIN END AS PRODUCT_ID, CURRENCY, 0 AS IS_REFUND, \"ship-city\" AS CITY, \"ship-state\" AS STATE, \"ship-country\" AS COUNTRY, NULL AS CATEGORY, \"order-status\" AS ORDER_STATUS, \"Purchase-datetime-PDT\" AS ORDER_TIMESTAMP, TRY_CAST(\"item-price\" AS FLOAT) AS LINE_ITEM_SALES, TRY_CAST(\"shipping-price\" AS FLOAT) AS SHIPPING_PRICE, TRY_CAST(QUANTITY AS FLOAT) AS QUANTITY, TRY_CAST(\"item-tax\" AS FLOAT) AS TAX, null as TAX_RATE, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT_BEFORE_TAX, NULL AS GROSS_SALES_AFTER_TAX, NULL AS GROSS_SALES_BEFORE_TAX, NULL AS NET_SALES_BEFORE_TAX, ifnull(TRY_CAST(\"item-price\" AS FLOAT),0)-ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0)AS TOTAL_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, \"product-name\" as Product_Name, \"product-name\" as Variant_Name, TRY_CAST(\"shipping-tax\" AS FLOAT) AS SHIPPING_TAX, TRY_CAST(\"ship-promotion-discount\" AS FLOAT) AS SHIP_PROMOTION_DISCOUNT, TRY_CAST(\"gift-wrap-price\" AS FLOAT) AS GIFT_WRAP_PRICE, TRY_CAST(\"gift-wrap-tax\" AS FLOAT) AS GIFT_WRAP_TAX FROM (SELECT *, CONVERT_TIMEZONE(\'UTC\',\'America/Los_Angeles\', \"purchase-date\":: DATETIME) as \"Purchase-datetime-PDT\" FROM Vahdam_db.maplemonk.ASP_USA_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL)X WHERE \"sales-channel\" = \'Amazon.com\' AND \"order-status\" NOT IN(\'Cancelled\') AND \"item-price\" NOT IN(\'\',\'0.0\') union ALL SELECT \'Amazon_USA\' AS SHOP_NAME, \"amazon-order-id\" AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, SKU, ASIN AS PRODUCT_ID, CURRENCY, 0 AS IS_REFUND, \"ship-city\" AS CITY, \"ship-state\" AS STATE, \"ship-country\" AS COUNTRY, NULL AS CATEGORY, \"order-status\" AS ORDER_STATUS, \"Purchase-datetime-PDT\" AS ORDER_TIMESTAMP, TRY_CAST(\"item-price\" AS FLOAT) AS LINE_ITEM_SALES, TRY_CAST(\"shipping-price\" AS FLOAT) AS SHIPPING_PRICE, TRY_CAST(QUANTITY AS FLOAT) AS QUANTITY, TRY_CAST(\"item-tax\" AS FLOAT) AS TAX, null as TAX_RATE, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT_BEFORE_TAX, NULL AS GROSS_SALES_AFTER_TAX, NULL AS GROSS_SALES_BEFORE_TAX, NULL AS NET_SALES_BEFORE_TAX, ifnull(TRY_CAST(\"item-price\" AS FLOAT),0)-ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0)AS TOTAL_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, \"product-name\" as Product_Name, \"product-name\" as Variant_Name, TRY_CAST(\"shipping-tax\" AS FLOAT) AS SHIPPING_TAX, TRY_CAST(\"ship-promotion-discount\" AS FLOAT) AS SHIP_PROMOTION_DISCOUNT, TRY_CAST(\"gift-wrap-price\" AS FLOAT) AS GIFT_WRAP_PRICE, TRY_CAST(\"gift-wrap-tax\" AS FLOAT) AS GIFT_WRAP_TAX FROM (SELECT *, CONVERT_TIMEZONE(\'UTC\',\'America/Los_Angeles\', \"purchase-date\":: DATETIME) as \"Purchase-datetime-PDT\" FROM Vahdam_db.maplemonk.ASP_USA_HISTORICAL_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL)X WHERE \"amazon-order-id\" not in (select distinct \"amazon-order-id\" from Vahdam_db.maplemonk.ASP_USA_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL) AND \"sales-channel\" = \'Amazon.com\' AND \"order-status\" NOT IN(\'Cancelled\') AND \"item-price\" NOT IN(\'\',\'0.0\') UNION ALL SELECT \'Amazon_UK\' AS SHOP_NAME, \"amazon-order-id\" AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, SKU, CASE WHEN ASIN = \'B00QV5HPDS\' THEN \'B0B5RXL19V\' WHEN ASIN = \'B01BTYZ3AC\' THEN \'B01BTYZ3AW\' WHEN ASIN = \'B0B528DFWL\' THEN \'B0B52451FP\' WHEN ASIN = \'B01619H5AG\' THEN \'B0B5Y4DB2B\' ELSE ASIN END AS PRODUCT_ID, CURRENCY, 0 AS IS_REFUND, \"ship-city\" AS CITY, \"ship-state\" AS STATE, \"ship-country\" AS COUNTRY, NULL AS CATEGORY, \"order-status\" AS ORDER_STATUS, \"Purchase-datetime-UK\" AS ORDER_TIMESTAMP, TRY_CAST(\"item-price\" AS FLOAT) AS LINE_ITEM_SALES, TRY_CAST(\"shipping-price\" AS FLOAT) AS SHIPPING_PRICE, TRY_CAST(QUANTITY AS FLOAT) AS QUANTITY, TRY_CAST(\"item-tax\" AS FLOAT) AS TAX, null as TAX_RATE, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT_BEFORE_TAX, NULL AS GROSS_SALES_AFTER_TAX, NULL AS GROSS_SALES_BEFORE_TAX, NULL AS NET_SALES_BEFORE_TAX, ifnull(TRY_CAST(\"item-price\" AS FLOAT),0)-ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0)AS TOTAL_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, \"product-name\" as Product_Name, \"product-name\" as Variant_Name, TRY_CAST(\"shipping-tax\" AS FLOAT) AS SHIPPING_TAX, TRY_CAST(\"ship-promotion-discount\" AS FLOAT) AS SHIP_PROMOTION_DISCOUNT, TRY_CAST(\"gift-wrap-price\" AS FLOAT) AS GIFT_WRAP_PRICE, TRY_CAST(\"gift-wrap-tax\" AS FLOAT) AS GIFT_WRAP_TAX FROM (SELECT *, CONVERT_TIMEZONE(\'UTC\',\'Europe/London\', \"purchase-date\":: DATETIME) as \"Purchase-datetime-UK\" FROM Vahdam_db.maplemonk.ASP_UK_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL)X WHERE \"Purchase-datetime-UK\"::DATE >=\'2022-02-01\' AND \"sales-channel\" = \'Amazon.co.uk\' and \"order-status\" NOT IN (\'Cancelled\') AND \"item-price\" NOT IN(\'\',\'0.0\') UNION ALL SELECT \'Amazon_US_1P\' AS SHOP_NAME, NULL AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, Null as SKU, ASIN PRODUCT_ID, SHIPPEDCOGS:currencyCode::varchar CURRENCY, 0 AS IS_REFUND, NULL AS CITY, NULL AS STATE, NULL AS COUNTRY, NULL AS CATEGORY, NULL AS ORDER_STATUS, STARTDATE::date AS ORDER_TIMESTAMP, SHIPPEDCOGS:amount::float AS LINE_ITEM_SALES, NULL AS SHIPPING_PRICE, TRY_CAST(SHIPPEDUNITS AS FLOAT) AS QUANTITY, NULL AS TAX, null as TAX_RATE, NULL AS DISCOUNT, NULL AS DISCOUNT_BEFORE_TAX, NULL AS GROSS_SALES_AFTER_TAX, NULL AS GROSS_SALES_BEFORE_TAX, NULL AS NET_SALES_BEFORE_TAX, ifnull(SHIPPEDCOGS:amount::float,0) AS TOTAL_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, NULL as Product_Name, NULL as Variant_Name, NULL AS SHIPPING_TAX, NULL AS SHIP_PROMOTION_DISCOUNT, NULL AS GIFT_WRAP_PRICE, NULL AS GIFT_WRAP_TAX FROM vahdam_db.maplemonk.avp_man_us_get_vendor_sales_report UNION ALL SELECT \'Amazon_UK_1P\' AS SHOP_NAME, NULL AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, Null as SKU, ASIN PRODUCT_ID, SHIPPEDCOGS:currencyCode::varchar CURRENCY, 0 AS IS_REFUND, NULL AS CITY, NULL AS STATE, NULL AS COUNTRY, NULL AS CATEGORY, NULL AS ORDER_STATUS, STARTDATE::date AS ORDER_TIMESTAMP, SHIPPEDCOGS:amount::float AS LINE_ITEM_SALES, NULL AS SHIPPING_PRICE, TRY_CAST(SHIPPEDUNITS AS FLOAT) AS QUANTITY, NULL AS TAX, null as TAX_RATE, NULL AS DISCOUNT, NULL AS DISCOUNT_BEFORE_TAX, NULL AS GROSS_SALES_AFTER_TAX, NULL AS GROSS_SALES_BEFORE_TAX, NULL AS NET_SALES_BEFORE_TAX, ifnull(SHIPPEDCOGS:amount::float,0) AS TOTAL_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, NULL as Product_Name, NULL as Variant_Name, NULL AS SHIPPING_TAX, NULL AS SHIP_PROMOTION_DISCOUNT, NULL AS GIFT_WRAP_PRICE, NULL AS GIFT_WRAP_TAX FROM vahdam_db.maplemonk.avp_uk_man_get_vendor_sales_report UNION ALL SELECT \'Amazon_DE_1P\' AS SHOP_NAME, NULL AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, Null as SKU, ASIN PRODUCT_ID, SHIPPEDCOGS:currencyCode::varchar CURRENCY, 0 AS IS_REFUND, NULL AS CITY, NULL AS STATE, NULL AS COUNTRY, NULL AS CATEGORY, NULL AS ORDER_STATUS, STARTDATE::date AS ORDER_TIMESTAMP, SHIPPEDCOGS:amount::float AS LINE_ITEM_SALES, NULL AS SHIPPING_PRICE, TRY_CAST(SHIPPEDUNITS AS FLOAT) AS QUANTITY, NULL AS TAX, null as TAX_RATE, NULL AS DISCOUNT, NULL AS DISCOUNT_BEFORE_TAX, NULL AS GROSS_SALES_AFTER_TAX, NULL AS GROSS_SALES_BEFORE_TAX, NULL AS NET_SALES_BEFORE_TAX, ifnull(SHIPPEDCOGS:amount::float,0) AS TOTAL_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, NULL as Product_Name, NULL as Variant_Name, NULL AS SHIPPING_TAX, NULL AS SHIP_PROMOTION_DISCOUNT, NULL AS GIFT_WRAP_PRICE, NULL AS GIFT_WRAP_TAX FROM vahdam_db.maplemonk.avp_de_man_get_vendor_sales_report UNION ALL SELECT \'Amazon_ES_1P\' AS SHOP_NAME, NULL AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, Null as SKU, ASIN PRODUCT_ID, SHIPPEDCOGS:currencyCode::varchar CURRENCY, 0 AS IS_REFUND, NULL AS CITY, NULL AS STATE, NULL AS COUNTRY, NULL AS CATEGORY, NULL AS ORDER_STATUS, STARTDATE::date AS ORDER_TIMESTAMP, SHIPPEDCOGS:amount::float AS LINE_ITEM_SALES, NULL AS SHIPPING_PRICE, TRY_CAST(SHIPPEDUNITS AS FLOAT) AS QUANTITY, NULL AS TAX, null as TAX_RATE, NULL AS DISCOUNT, NULL AS DISCOUNT_BEFORE_TAX, NULL AS GROSS_SALES_AFTER_TAX, NULL AS GROSS_SALES_BEFORE_TAX, NULL AS NET_SALES_BEFORE_TAX, ifnull(SHIPPEDCOGS:amount::float,0) AS TOTAL_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, NULL as Product_Name, NULL as Variant_Name, NULL AS SHIPPING_TAX, NULL AS SHIP_PROMOTION_DISCOUNT, NULL AS GIFT_WRAP_PRICE, NULL AS GIFT_WRAP_TAX FROM vahdam_db.maplemonk.avp_man_es_get_vendor_sales_report UNION ALL SELECT \'Amazon_IT_1P\' AS SHOP_NAME, NULL AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, Null as SKU, ASIN PRODUCT_ID, SHIPPEDCOGS:currencyCode::varchar CURRENCY, 0 AS IS_REFUND, NULL AS CITY, NULL AS STATE, NULL AS COUNTRY, NULL AS CATEGORY, NULL AS ORDER_STATUS, STARTDATE::date AS ORDER_TIMESTAMP, SHIPPEDCOGS:amount::float AS LINE_ITEM_SALES, NULL AS SHIPPING_PRICE, TRY_CAST(SHIPPEDUNITS AS FLOAT) AS QUANTITY, NULL AS TAX, null as TAX_RATE, NULL AS DISCOUNT, NULL AS DISCOUNT_BEFORE_TAX, NULL AS GROSS_SALES_AFTER_TAX, NULL AS GROSS_SALES_BEFORE_TAX, NULL AS NET_SALES_BEFORE_TAX, ifnull(SHIPPEDCOGS:amount::float,0) AS TOTAL_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, NULL as Product_Name, NULL as Variant_Name, NULL AS SHIPPING_TAX, NULL AS SHIP_PROMOTION_DISCOUNT, NULL AS GIFT_WRAP_PRICE, NULL AS GIFT_WRAP_TAX FROM vahdam_db.maplemonk.avp_it_man_get_vendor_sales_report UNION ALL SELECT \'Amazon_FR\' AS SHOP_NAME, \"amazon-order-id\" AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, SKU, CASE WHEN ASIN = \'B01619H5AG\' THEN \'B0B5ZDMF53\' WHEN ASIN = \'B0161C3YFI\' THEN \'B0B5X4SM7K\' WHEN ASIN = \'B01BTYZ3AC\' THEN \'B01BTYZ3AW\' ELSE ASIN END AS PRODUCT_ID, CURRENCY, 0 AS IS_REFUND, \"ship-city\" AS CITY, \"ship-state\" AS STATE, \"ship-country\" AS COUNTRY, NULL AS CATEGORY, \"order-status\" AS ORDER_STATUS, \"Purchase-datetime-FR\" AS ORDER_TIMESTAMP, TRY_CAST(\"item-price\" AS FLOAT) AS LINE_ITEM_SALES, TRY_CAST(\"shipping-price\" AS FLOAT) AS SHIPPING_PRICE, TRY_CAST(QUANTITY AS FLOAT) AS QUANTITY, TRY_CAST(\"item-tax\" AS FLOAT) AS TAX, null as TAX_RATE, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT_BEFORE_TAX, NULL AS GROSS_SALES_AFTER_TAX, NULL AS GROSS_SALES_BEFORE_TAX, NULL AS NET_SALES_BEFORE_TAX, ifnull(TRY_CAST(\"item-price\" AS FLOAT),0)-ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0)AS TOTAL_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, \"product-name\" as Product_Name, \"product-name\" as Variant_Name, TRY_CAST(\"shipping-tax\" AS FLOAT) AS SHIPPING_TAX, TRY_CAST(\"ship-promotion-discount\" AS FLOAT) AS SHIP_PROMOTION_DISCOUNT, TRY_CAST(\"gift-wrap-price\" AS FLOAT) AS GIFT_WRAP_PRICE, TRY_CAST(\"gift-wrap-tax\" AS FLOAT) AS GIFT_WRAP_TAX FROM (SELECT *, CONVERT_TIMEZONE(\'UTC\',\'Europe/Paris\', \"purchase-date\":: DATETIME) as \"Purchase-datetime-FR\" FROM Vahdam_db.maplemonk.ASP_UK_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL)X WHERE \"Purchase-datetime-FR\"::DATE >=\'2022-02-01\' AND \"sales-channel\" = \'Amazon.fr\' and \"order-status\" NOT IN (\'Cancelled\') AND \"item-price\" NOT IN(\'\',\'0.0\') UNION ALL SELECT \'Amazon_DE\' AS SHOP_NAME, \"amazon-order-id\" AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, SKU, CASE WHEN ASIN = \'B01619H5AG\' THEN \'B0B5ZDMF53\' WHEN ASIN = \'B0161C3YFI\' THEN \'B0B5X4SM7K\' WHEN ASIN = \'B01BTYZ3AC\' THEN \'B01BTYZ3AW\' ELSE ASIN END AS PRODUCT_ID, CURRENCY, 0 AS IS_REFUND, \"ship-city\" AS CITY, \"ship-state\" AS STATE, \"ship-country\" AS COUNTRY, NULL AS CATEGORY, \"order-status\" AS ORDER_STATUS, \"Purchase-datetime-DE\" AS ORDER_TIMESTAMP, TRY_CAST(\"item-price\" AS FLOAT) AS LINE_ITEM_SALES, TRY_CAST(\"shipping-price\" AS FLOAT) AS SHIPPING_PRICE, TRY_CAST(QUANTITY AS FLOAT) AS QUANTITY, TRY_CAST(\"item-tax\" AS FLOAT) AS TAX, null as TAX_RATE, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT_BEFORE_TAX, NULL AS GROSS_SALES_AFTER_TAX, NULL AS GROSS_SALES_BEFORE_TAX, NULL AS NET_SALES_BEFORE_TAX, ifnull(TRY_CAST(\"item-price\" AS FLOAT),0)-ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0)AS TOTAL_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, \"product-name\" as Product_Name, \"product-name\" as Variant_Name, TRY_CAST(\"shipping-tax\" AS FLOAT) AS SHIPPING_TAX, TRY_CAST(\"ship-promotion-discount\" AS FLOAT) AS SHIP_PROMOTION_DISCOUNT, TRY_CAST(\"gift-wrap-price\" AS FLOAT) AS GIFT_WRAP_PRICE, TRY_CAST(\"gift-wrap-tax\" AS FLOAT) AS GIFT_WRAP_TAX FROM (SELECT *, CONVERT_TIMEZONE(\'UTC\',\'Europe/Berlin\', \"purchase-date\":: DATETIME) as \"Purchase-datetime-DE\" FROM Vahdam_db.maplemonk.ASP_UK_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL)X WHERE \"Purchase-datetime-DE\"::DATE >=\'2022-02-01\' AND \"sales-channel\" = \'Amazon.de\' and \"order-status\" NOT IN (\'Cancelled\') AND \"item-price\" NOT IN(\'\',\'0.0\') UNION ALL SELECT \'Amazon_IT\' AS SHOP_NAME, \"amazon-order-id\" AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, SKU, CASE WHEN ASIN = \'B01619H5AG\' THEN \'B0B5ZDMF53\' WHEN ASIN = \'B0161C3YFI\' THEN \'B0B5X4SM7K\' ELSE ASIN END AS PRODUCT_ID, CURRENCY, 0 AS IS_REFUND, \"ship-city\" AS CITY, \"ship-state\" AS STATE, \"ship-country\" AS COUNTRY, NULL AS CATEGORY, \"order-status\" AS ORDER_STATUS, \"Purchase-datetime-IT\" AS ORDER_TIMESTAMP, TRY_CAST(\"item-price\" AS FLOAT) AS LINE_ITEM_SALES, TRY_CAST(\"shipping-price\" AS FLOAT) AS SHIPPING_PRICE, TRY_CAST(QUANTITY AS FLOAT) AS QUANTITY, TRY_CAST(\"item-tax\" AS FLOAT) AS TAX, null as TAX_RATE, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT_BEFORE_TAX, NULL AS GROSS_SALES_AFTER_TAX, NULL AS GROSS_SALES_BEFORE_TAX, NULL AS NET_SALES_BEFORE_TAX, ifnull(TRY_CAST(\"item-price\" AS FLOAT),0)-ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0)AS TOTAL_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, \"product-name\" as Product_Name, \"product-name\" as Variant_Name, TRY_CAST(\"shipping-tax\" AS FLOAT) AS SHIPPING_TAX, TRY_CAST(\"ship-promotion-discount\" AS FLOAT) AS SHIP_PROMOTION_DISCOUNT, TRY_CAST(\"gift-wrap-price\" AS FLOAT) AS GIFT_WRAP_PRICE, TRY_CAST(\"gift-wrap-tax\" AS FLOAT) AS GIFT_WRAP_TAX FROM (SELECT *, CONVERT_TIMEZONE(\'UTC\',\'Europe/Rome\', \"purchase-date\":: DATETIME) as \"Purchase-datetime-IT\" FROM Vahdam_db.maplemonk.ASP_UK_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL)X WHERE \"Purchase-datetime-IT\"::DATE >=\'2022-02-01\' AND \"sales-channel\" = \'Amazon.it\' and \"order-status\" NOT IN (\'Cancelled\') AND \"item-price\" NOT IN(\'\',\'0.0\') UNION ALL SELECT \'Amazon_AU\' AS SHOP_NAME, \"amazon-order-id\" AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, SKU, CASE WHEN ASIN = \'B09HS7BMB5\' THEN \'B078PGYH7K\' WHEN ASIN = \'B08HXVFDQR\' THEN \'B08Y1FH4ZP\' ELSE ASIN END AS PRODUCT_ID, CURRENCY, 0 AS IS_REFUND, \"ship-city\" AS CITY, \"ship-state\" AS STATE, \"ship-country\" AS COUNTRY, NULL AS CATEGORY, \"order-status\" AS ORDER_STATUS, \"Purchase-datetime-AU\" AS ORDER_TIMESTAMP, TRY_CAST(\"item-price\" AS FLOAT) AS LINE_ITEM_SALES, TRY_CAST(\"shipping-price\" AS FLOAT) AS SHIPPING_PRICE, TRY_CAST(QUANTITY AS FLOAT) AS QUANTITY, TRY_CAST(\"item-tax\" AS FLOAT) AS TAX, null as TAX_RATE, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT_BEFORE_TAX, NULL AS GROSS_SALES_AFTER_TAX, NULL AS GROSS_SALES_BEFORE_TAX, NULL AS NET_SALES_BEFORE_TAX, ifnull(TRY_CAST(\"item-price\" AS FLOAT),0)-ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0)AS TOTAL_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, \"product-name\" as Product_Name, \"product-name\" as Variant_Name, TRY_CAST(\"shipping-tax\" AS FLOAT) AS SHIPPING_TAX, TRY_CAST(\"ship-promotion-discount\" AS FLOAT) AS SHIP_PROMOTION_DISCOUNT, TRY_CAST(\"gift-wrap-price\" AS FLOAT) AS GIFT_WRAP_PRICE, TRY_CAST(\"gift-wrap-tax\" AS FLOAT) AS GIFT_WRAP_TAX FROM (SELECT *, dateadd(hour, 2,\"purchase-date\"::datetime) as \"Purchase-datetime-AU\" FROM Vahdam_db.maplemonk.ASP_AU_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL)X WHERE \"Purchase-datetime-AU\"::DATE >=\'2022-02-01\' AND \"sales-channel\" = \'Amazon.com.au\' and \"order-status\" NOT IN (\'Cancelled\') AND \"item-price\" NOT IN(\'\',\'0.0\') UNION all SELECT \'Amazon_JP\' AS SHOP_NAME, \"amazon-order-id\" AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, SKU, ASIN AS PRODUCT_ID, CURRENCY, 0 AS IS_REFUND, \"ship-city\" AS CITY, \"ship-state\" AS STATE, \"ship-country\" AS COUNTRY, NULL AS CATEGORY, \"order-status\" AS ORDER_STATUS, \"Purchase-datetime-JP\" AS ORDER_TIMESTAMP, TRY_CAST(\"item-price\" AS FLOAT) AS LINE_ITEM_SALES, TRY_CAST(\"shipping-price\" AS FLOAT) AS SHIPPING_PRICE, TRY_CAST(QUANTITY AS FLOAT) AS QUANTITY, TRY_CAST(\"item-tax\" AS FLOAT) AS TAX, null as TAX_RATE, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT_BEFORE_TAX, NULL AS GROSS_SALES_AFTER_TAX, NULL AS GROSS_SALES_BEFORE_TAX, NULL AS NET_SALES_BEFORE_TAX, ifnull(TRY_CAST(\"item-price\" AS FLOAT),0)-ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0)AS TOTAL_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, \"product-name\" as Product_Name, \"product-name\" as Variant_Name, TRY_CAST(\"shipping-tax\" AS FLOAT) AS SHIPPING_TAX, TRY_CAST(\"ship-promotion-discount\" AS FLOAT) AS SHIP_PROMOTION_DISCOUNT, TRY_CAST(\"gift-wrap-price\" AS FLOAT) AS GIFT_WRAP_PRICE, TRY_CAST(\"gift-wrap-tax\" AS FLOAT) AS GIFT_WRAP_TAX FROM (SELECT *, \"purchase-date\":: DATETIME as \"Purchase-datetime-JP\" FROM Vahdam_db.maplemonk.AA_JP_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL)X WHERE \"Purchase-datetime-JP\"::DATE >=\'2022-02-01\' AND \"sales-channel\" = \'Amazon.co.jp\' and \"order-status\" NOT IN (\'Cancelled\') AND \"item-price\" NOT IN(\'\',\'0.0\') UNION all SELECT \'Amazon_SGP\' AS SHOP_NAME, \"amazon-order-id\" AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, SKU, ASIN AS PRODUCT_ID, CURRENCY, 0 AS IS_REFUND, \"ship-city\" AS CITY, \"ship-state\" AS STATE, \"ship-country\" AS COUNTRY, NULL AS CATEGORY, \"order-status\" AS ORDER_STATUS, \"Purchase-datetime-UK\" AS ORDER_TIMESTAMP, TRY_CAST(\"item-price\" AS FLOAT) AS LINE_ITEM_SALES, TRY_CAST(\"shipping-price\" AS FLOAT) AS SHIPPING_PRICE, TRY_CAST(QUANTITY AS FLOAT) AS QUANTITY, TRY_CAST(\"item-tax\" AS FLOAT) AS TAX, null as TAX_RATE, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT_BEFORE_TAX, NULL AS GROSS_SALES_AFTER_TAX, NULL AS GROSS_SALES_BEFORE_TAX, NULL AS NET_SALES_BEFORE_TAX, ifnull(TRY_CAST(\"item-price\" AS FLOAT),0)-ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0)AS TOTAL_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, \"product-name\" as Product_Name, \"product-name\" as Variant_Name, TRY_CAST(\"shipping-tax\" AS FLOAT) AS SHIPPING_TAX, TRY_CAST(\"ship-promotion-discount\" AS FLOAT) AS SHIP_PROMOTION_DISCOUNT, TRY_CAST(\"gift-wrap-price\" AS FLOAT) AS GIFT_WRAP_PRICE, TRY_CAST(\"gift-wrap-tax\" AS FLOAT) AS GIFT_WRAP_TAX FROM (SELECT *, CONVERT_TIMEZONE(\'UTC\',\'Asia/Singapore\', \"purchase-date\":: DATETIME) as \"Purchase-datetime-UK\" FROM Vahdam_db.maplemonk.AA_SG_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL)X WHERE \"Purchase-datetime-UK\"::DATE >=\'2022-02-01\' AND \"sales-channel\" = \'Amazon.sg\' and \"order-status\" NOT IN (\'Cancelled\') AND \"item-price\" NOT IN(\'\',\'0.0\') UNION all SELECT \'Amazon_ESP\' AS SHOP_NAME, \"amazon-order-id\" AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, SKU, CASE WHEN ASIN = \'B01619H5AG\' THEN \'B0B5ZDMF53\' WHEN ASIN = \'B0161C3YFI\' THEN \'B0B5X4SM7K\' WHEN ASIN = \'B01BTYZ3AC\' THEN \'B01BTYZ3AW\' ELSE ASIN END AS PRODUCT_ID, CURRENCY, 0 AS IS_REFUND, \"ship-city\" AS CITY, \"ship-state\" AS STATE, \"ship-country\" AS COUNTRY, NULL AS CATEGORY, \"order-status\" AS ORDER_STATUS, \"Purchase-datetime-ESP\" AS ORDER_TIMESTAMP, TRY_CAST(\"item-price\" AS FLOAT) AS LINE_ITEM_SALES, TRY_CAST(\"shipping-price\" AS FLOAT) AS SHIPPING_PRICE, TRY_CAST(QUANTITY AS FLOAT) AS QUANTITY, TRY_CAST(\"item-tax\" AS FLOAT) AS TAX, null as TAX_RATE, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT_BEFORE_TAX, NULL AS GROSS_SALES_AFTER_TAX, NULL AS GROSS_SALES_BEFORE_TAX, NULL AS NET_SALES_BEFORE_TAX, ifnull(TRY_CAST(\"item-price\" AS FLOAT),0)-ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0)AS TOTAL_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, \"product-name\" as Product_Name, \"product-name\" as Variant_Name, TRY_CAST(\"shipping-tax\" AS FLOAT) AS SHIPPING_TAX, TRY_CAST(\"ship-promotion-discount\" AS FLOAT) AS SHIP_PROMOTION_DISCOUNT, TRY_CAST(\"gift-wrap-price\" AS FLOAT) AS GIFT_WRAP_PRICE, TRY_CAST(\"gift-wrap-tax\" AS FLOAT) AS GIFT_WRAP_TAX FROM (SELECT *, CONVERT_TIMEZONE(\'UTC\',\'Europe/Madrid\', \"purchase-date\":: DATETIME) as \"Purchase-datetime-ESP\" FROM Vahdam_db.maplemonk.ASP_UK_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL)X WHERE \"Purchase-datetime-ESP\"::DATE >=\'2022-02-01\' AND \"sales-channel\" = \'Amazon.es\' and \"order-status\" NOT IN (\'Cancelled\') AND \"item-price\" NOT IN(\'\',\'0.0\') UNION ALL SELECT \'Amazon_CA\' AS SHOP_NAME, \"amazon-order-id\" AS ORDER_ID, NULL AS ORDER_NAME, NULL AS CUSTOMER_ID, NULL AS LINE_ITEM_ID, SKU, CASE WHEN ASIN = \'B09ZLFM4DC\' THEN \'B07K1WBH4K\' WHEN ASIN = \'B00R4O1H3E\' THEN \'B07SVNLZ97\' WHEN ASIN = \'B09ZL4QGZC\' THEN \'B07SRFW87H\' WHEN ASIN = \'B01BVDV634\' THEN \'B00Q6PHTTI\' ELSE ASIN END AS PRODUCT_ID, CURRENCY, 0 AS IS_REFUND, \"ship-city\" AS CITY, \"ship-state\" AS STATE, \"ship-country\" AS COUNTRY, NULL AS CATEGORY, \"order-status\" AS ORDER_STATUS, \"Purchase-datetime-ESP\" AS ORDER_TIMESTAMP, TRY_CAST(\"item-price\" AS FLOAT) AS LINE_ITEM_SALES, TRY_CAST(\"shipping-price\" AS FLOAT) AS SHIPPING_PRICE, TRY_CAST(QUANTITY AS FLOAT) AS QUANTITY, TRY_CAST(\"item-tax\" AS FLOAT) AS TAX, null as TAX_RATE, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT, TRY_CAST(\"item-promotion-discount\" AS FLOAT) AS DISCOUNT_BEFORE_TAX, NULL AS GROSS_SALES_AFTER_TAX, NULL AS GROSS_SALES_BEFORE_TAX, NULL AS NET_SALES_BEFORE_TAX, ifnull(TRY_CAST(\"item-price\" AS FLOAT),0)-ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0)AS TOTAL_SALES, \'Amazon\' AS SOURCE, NULL AS LANDING_UTM_MEDIUM, NULL AS LANDING_UTM_SOURCE, NULL AS LANDING_UTM_CAMPAIGN, NULL AS REFERRING_UTM_MEDIUM, NULL AS REFERRING_UTM_SOURCE, NULL AS LANDING_UTM_CHANNEL, NULL AS REFERRING_UTM_CHANNEL, NULL AS FINAL_UTM_CHANNEL, NULL AS CUSTOMER_FLAG, NULL AS NEW_CUSTOMER_FLAG, NULL AS ACQUISITION_CHANNEL, NULL AS ACQUISITION_PRODUCT, \"product-name\" as Product_Name, \"product-name\" as Variant_Name, TRY_CAST(\"shipping-tax\" AS FLOAT) AS SHIPPING_TAX, TRY_CAST(\"ship-promotion-discount\" AS FLOAT) AS SHIP_PROMOTION_DISCOUNT, TRY_CAST(\"gift-wrap-price\" AS FLOAT) AS GIFT_WRAP_PRICE, TRY_CAST(\"gift-wrap-tax\" AS FLOAT) AS GIFT_WRAP_TAX FROM (SELECT *, CONVERT_TIMEZONE(\'UTC\',\'Canada/Atlantic\', \"purchase-date\":: DATETIME) as \"Purchase-datetime-ESP\" FROM Vahdam_db.maplemonk.ASP_CA_GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL)X WHERE \"Purchase-datetime-ESP\"::DATE >=\'2022-02-01\' AND \"sales-channel\" = \'Amazon.ca\' and \"order-status\" NOT IN (\'Cancelled\') AND \"item-price\" NOT IN(\'\',\'0.0\'); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN SHIPPING_TAX FLOAT; ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN SHIP_PROMOTION_DISCOUNT FLOAT; ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN GIFT_WRAP_PRICE FLOAT; ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN GIFT_WRAP_TAX FLOAT; INSERT INTO Vahdam_db.maplemonk.FACT_ITEMS SELECT * FROM Vahdam_db.maplemonk.AMAZON_All_COUNTRIES; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.FACT_ITEMS_TEMP_CONV AS ( SELECT FI.*, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.LINE_ITEM_SALES * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.LINE_ITEM_SALES WHEN FI.CURRENCY = \'USD\' THEN FI.LINE_ITEM_SALES * EX.USD_INR WHEN FI.CURRENCY = \'GBP\' THEN FI.LINE_ITEM_SALES * EX.GBP_INR WHEN FI.CURRENCY = \'AUD\' THEN FI.LINE_ITEM_SALES * EX.AUD_INR WHEN FI.CURRENCY = \'JPY\' THEN FI.LINE_ITEM_SALES * EX.JPY_INR WHEN FI.CURRENCY = \'SGD\' THEN FI.LINE_ITEM_SALES * EX.SGD_INR WHEN FI.CURRENCY = \'CAD\' THEN FI.LINE_ITEM_SALES * EX.CAD_INR END AS LINE_ITEM_SALES_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.TAX * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.TAX WHEN FI.CURRENCY = \'USD\' THEN FI.TAX * EX.USD_INR WHEN FI.CURRENCY = \'GBP\' THEN FI.TAX * EX.GBP_INR WHEN FI.CURRENCY = \'AUD\' THEN FI.TAX * EX.AUD_INR WHEN FI.CURRENCY = \'JPY\' THEN FI.TAX * EX.JPY_INR WHEN FI.CURRENCY = \'SGD\' THEN FI.TAX * EX.SGD_INR WHEN FI.CURRENCY = \'CAD\' THEN FI.TAX * EX.CAD_INR END AS TAX_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.DISCOUNT * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.DISCOUNT WHEN FI.CURRENCY = \'USD\' THEN FI.DISCOUNT * EX.USD_INR WHEN FI.CURRENCY = \'GBP\' THEN FI.DISCOUNT * EX.GBP_INR WHEN FI.CURRENCY = \'AUD\' THEN FI.DISCOUNT * EX.AUD_INR WHEN FI.CURRENCY = \'JPY\' THEN FI.DISCOUNT * EX.JPY_INR WHEN FI.CURRENCY = \'SGD\' THEN FI.DISCOUNT * EX.SGD_INR WHEN FI.CURRENCY = \'CAD\' THEN FI.DISCOUNT * EX.CAD_INR END AS DISCOUNT_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.TOTAL_SALES * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.TOTAL_SALES WHEN FI.CURRENCY = \'USD\' THEN FI.TOTAL_SALES * EX.USD_INR WHEN FI.CURRENCY = \'GBP\' THEN FI.TOTAL_SALES * EX.GBP_INR WHEN FI.CURRENCY = \'AUD\' THEN FI.TOTAL_SALES * EX.AUD_INR WHEN FI.CURRENCY = \'JPY\' THEN FI.TOTAL_SALES * EX.JPY_INR WHEN FI.CURRENCY = \'SGD\' THEN FI.TOTAL_SALES * EX.SGD_INR WHEN FI.CURRENCY = \'CAD\' THEN FI.TOTAL_SALES * EX.CAD_INR END AS NET_SALES_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.SHIPPING_PRICE * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.SHIPPING_PRICE WHEN FI.CURRENCY = \'USD\' THEN FI.SHIPPING_PRICE * EX.USD_INR WHEN FI.CURRENCY = \'GBP\' THEN FI.SHIPPING_PRICE * EX.GBP_INR WHEN FI.CURRENCY = \'AUS\' THEN FI.SHIPPING_PRICE * EX.AUD_INR WHEN FI.CURRENCY = \'JPY\' THEN FI.SHIPPING_PRICE * EX.JPY_INR WHEN FI.CURRENCY = \'SGD\' THEN FI.SHIPPING_PRICE * EX.SGD_INR WHEN FI.CURRENCY = \'CAD\' THEN FI.SHIPPING_PRICE * EX.CAD_INR END AS SHIPPING_PRICE_INR FROM Vahdam_db.maplemonk.FACT_ITEMS FI LEFT JOIN( SELECT date, RATES:INR AS EUR_INR, (RATES:EUR/RATES:USD)*RATES:INR AS USD_INR, (RATES:EUR/RATES:GBP)*RATES:INR AS GBP_INR, (RATES:EUR/RATES:AUD)*RATES:INR AS AUD_INR, (RATES:EUR/RATES:JPY)*RATES:INR AS JPY_INR, (RATES:EUR/RATES:SGD)*RATES:INR AS SGD_INR, (RATES:EUR/RATES:CAD)*RATES:INR AS CAD_INR FROM( SELECT *, ROW_NUMBER()OVER(PARTITION BY BASE, DATE ORDER BY _AIRBYTE_EMITTED_AT DESC) RW FROM VAHDAM_DB.MAPLEMONK.EXCHANGE_RATES ) A WHERE RW = 1 ) EX ON FI.ORDER_TIMESTAMP::DATE = EX.date WHERE FI.ORDER_TIMESTAMP::DATE >= \'2021-12-01\' UNION ALL SELECT FI.*, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.LINE_ITEM_SALES * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.LINE_ITEM_SALES WHEN FI.CURRENCY = \'USD\' THEN FI.LINE_ITEM_SALES * EX.USD_INR END AS LINE_ITEM_SALES_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.TAX * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.TAX WHEN FI.CURRENCY = \'USD\' THEN FI.TAX * EX.USD_INR END AS TAX_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.DISCOUNT * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.DISCOUNT WHEN FI.CURRENCY = \'USD\' THEN FI.DISCOUNT * EX.USD_INR END AS DISCOUNT_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.TOTAL_SALES * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.TOTAL_SALES WHEN FI.CURRENCY = \'USD\' THEN FI.TOTAL_SALES * EX.USD_INR END AS NET_SALES_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.SHIPPING_PRICE * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.SHIPPING_PRICE WHEN FI.CURRENCY = \'USD\' THEN FI.SHIPPING_PRICE * EX.USD_INR END AS SHIPPING_PRICE_INR FROM Vahdam_db.maplemonk.FACT_ITEMS FI LEFT JOIN( SELECT DATE, USD_INR, USD_INR/USD_EUR AS EUR_INR FROM (SELECT YEARMONTH , DATEFROMPARTS(LEFT(YEARMONTH,4),RIGHT(YEARMONTH,2),01) AS DATE, SUM(CASE WHEN LOCATION = \'IND\' THEN VALUE END) AS USD_INR, SUM(CASE WHEN LOCATION = \'EA19\' THEN VALUE END) AS USD_EUR FROM Vahdam_db.maplemonk.HISTORICAL_MONTHLY_EXCHANGE_RATES WHERE LOCATION IN (\'EA19\',\'IND\') AND DATEFROMPARTS(LEFT(YEARMONTH,4),RIGHT(YEARMONTH,2),01)<\'2021-12-01\' GROUP BY YEARMONTH, DATEFROMPARTS(LEFT(YEARMONTH,4),RIGHT(YEARMONTH,2),01))B ) EX ON date_trunc(\'MONTH\', FI.ORDER_TIMESTAMP::DATE) = date_trunc(\'MONTH\', EX.date::DATE) WHERE FI.ORDER_TIMESTAMP::DATE < \'2021-12-01\'); CREATE OR REPLACE TABLE Vahdam_db.maplemonk.FACT_ITEMS AS SELECT * FROM Vahdam_db.maplemonk.FACT_ITEMS_TEMP_CONV; CREATE OR REPLACE TABLE Vahdam_db.maplemonk.FACT_ITEMS_TEMP_Category AS ( select x.*, ssm.PRODUCT_NAME, ssm.\"CATEGORY_1\", ssm.\"Category_2-Type_of_Tea\", ssm.\"Category_3-Type_of_Product\", ssm.\"Category_4-Pack_type\", NULL as MOTHER_SKU, Null as weight, Null as MSRP, null as BRAND from ( select fi.*, spm.\"Common Sku Id\'s\" as Common_SKU from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select * from (select order_name, product_title, variant_title, \"Common Sku Id\'s\", row_number() over (partition by order_name, product_title, variant_title order by order_name) rw from (select distinct ORDER_NAME,product_title,variant_title,\"Common Sku Id\'s\" from Vahdam_db.maplemonk.shopifyindia_productmapping union select distinct ORDER_NAME,product_title,variant_title,\"Common sku Id\'s\" from Vahdam_db.maplemonk.shopifygermany_productmapping union select distinct ORDER_NAME,product_title,variant_title,\"Common Sku Id\'s\" from Vahdam_db.maplemonk.shopifyitaly_productmapping union select distinct ORDER_NAME,product_title,variant_title,\"Common Sku Id\'s\" from Vahdam_db.maplemonk.shopifyglobal_productmapping union select distinct ORDER_NAME,\"Product Title\" as product_title,variant_title, \"Common Sku ID\'s\" from Vahdam_db.maplemonk.shopifyusa_productmapping)) where rw=1) spm on fi.ORDER_NAME = spm.order_name and fi.product_title = spm.product_title and fi.variant_title=spm.variant_title where fi.ORDER_TIMESTAMP::date <= \'2022-03-22\' and fi.Source=\'Shopify\' Union all select fi.*, apm.\"Common SKU Id\'s\" as Common_SKU from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select * from (select \"(Child) ASIN\",\"Common SKU Id\'s\", row_number() over (partition by \"(Child) ASIN\" order by 1) rw from (select distinct \"(Child) ASIN\",\"Common SKU Id\'s\" from Vahdam_db.maplemonk.amazonusa_productmapping union select distinct \"(Child) ASIN\",\"Common Sku Id\'s\" from Vahdam_db.maplemonk.amazonindia_productmapping where (\"(Child) ASIN\") not in (select distinct (\"(Child) ASIN\") from Vahdam_db.maplemonk.amazonusa_productmapping))) where rw=1) apm on fi.product_id = apm.\"(Child) ASIN\" where fi.ORDER_TIMESTAMP::date <= \'2022-03-22\' and fi.SOURCE=\'Amazon\' )x left join vahdam_db.maplemonk.shopify_sku_mapping ssm on x.common_sku=ssm.common_sku); CREATE OR REPLACE TABLE Vahdam_db.maplemonk.FACT_ITEMS_TEMP_2_Category AS ( select fi.*, smg.\"COMMON SKU ID\" as Common_SKU, smg.\"Common SKU Description\" as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.\"SUB CATEGORY\" as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA BAG/ POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.\"Mother SKU\", smg.weight, smg.\"D2C US MSRP\", smg.BRAND from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select \"D2C US\" ,weight ,brand ,\"Mother SKU\" ,\"Common Name\" ,category ,\"SUB CATEGORY\" ,\"LOOSE/TEA BAG/ POWDER\" ,\"Common SKU Description\" ,\"COMMON SKU ID\" ,\"D2C US MSRP\" ,row_number() over (partition by \"D2C US\" order by \"D2C US\") as rw from vahdam_db.maplemonk.sku_mapping_raw_data) smg on fi.sku = smg.\"D2C US\" where (smg.rw = 1 or smg.rw is null) AND fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name=\'Shopify_USA\' Union all select fi.*, smg.\"COMMON SKU ID\" as Common_SKU, smg.\"Common SKU Description\" as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.\"SUB CATEGORY\" as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA BAG/ POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.\"Mother SKU\", smg.weight, smg.\"D2C Global MSRP\", smg.BRAND from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select \"D2C Global\" ,weight ,brand ,\"Mother SKU\" ,\"Common Name\" ,category ,\"SUB CATEGORY\" ,\"LOOSE/TEA BAG/ POWDER\" ,\"Common SKU Description\" ,\"COMMON SKU ID\" ,\"D2C Global MSRP\" ,row_number() over (partition by \"D2C Global\" order by \"D2C Global\") as rw from vahdam_db.maplemonk.sku_mapping_raw_data) smg on fi.sku = smg.\"D2C Global\" where (smg.rw = 1 or smg.rw is null) AND fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name = \'Shopify_Global\' union all select fi.*, smg.\"COMMON SKU ID\" as Common_SKU, smg.\"Common SKU Description\" as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.\"SUB CATEGORY\" as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA BAG/ POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.\"Mother SKU\", smg.weight, smg.\"D2C Global MSRP\", smg.BRAND from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select \"D2C Germany\" ,weight ,brand ,\"Mother SKU\" ,\"Common Name\" ,category ,\"SUB CATEGORY\" ,\"LOOSE/TEA BAG/ POWDER\" ,\"Common SKU Description\" ,\"COMMON SKU ID\" ,\"D2C Global MSRP\" ,row_number() over (partition by \"D2C Germany\" order by \"D2C Germany\") as rw from vahdam_db.maplemonk.sku_mapping_raw_data) smg on fi.sku = smg.\"D2C Germany\" where (smg.rw = 1 or smg.rw is null) AND fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name = \'Shopify_Germany\' union all select fi.*, smg.\"COMMON SKU ID\" as Common_SKU, smg.\"Common SKU Description\" as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.\"SUB CATEGORY\" as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA BAG/ POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.\"Mother SKU\", smg.weight, smg.\"D2C Global MSRP\", smg.BRAND from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select \"D2C Italy\" ,weight ,brand ,\"Mother SKU\" ,\"Common Name\" ,category ,\"SUB CATEGORY\" ,\"LOOSE/TEA BAG/ POWDER\" ,\"Common SKU Description\" ,\"COMMON SKU ID\" ,\"D2C Global MSRP\" ,row_number() over (partition by \"D2C Italy\" order by \"D2C Italy\") as rw from vahdam_db.maplemonk.sku_mapping_raw_data) smg on fi.sku = smg.\"D2C Italy\" where (smg.rw = 1 or smg.rw is null) AND fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name = \'Shopify_Italy\' Union all select fi.*, smg.\"COMMON SKU ID\" as Common_SKU, smg.\"Common SKU Description\" as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.\"SUB CATEGORY\" as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA BAG/ POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.\"Mother SKU\", smg.weight, smg.\"D2C India MSRP\", smg.BRAND from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select \"D2C India\" ,weight ,brand ,\"Mother SKU\" ,\"Common Name\" ,category ,\"SUB CATEGORY\" ,\"LOOSE/TEA BAG/ POWDER\" ,\"Common SKU Description\" ,\"COMMON SKU ID\" ,\"D2C India MSRP\" ,row_number() over (partition by \"D2C India\" order by \"D2C India\") as rw from vahdam_db.maplemonk.sku_mapping_raw_data) smg on fi.sku = smg.\"D2C India\" where (smg.rw = 1 or smg.rw is null) AND fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name = \'Shopify_India\' Union all select fi.*, smg.\"COMMON SKU ID\" as Common_SKU, smg.\"Common SKU Description\" as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.\"SUB CATEGORY\" as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA BAG/ POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.\"Mother SKU\", smg.weight, smg.\"Amazon USA MSRP\", smg.BRAND from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select \"Amazon USA\" ,weight ,brand ,\"Mother SKU\" ,\"Common Name\" ,category ,\"SUB CATEGORY\" ,\"LOOSE/TEA BAG/ POWDER\" ,\"Common SKU Description\" ,\"COMMON SKU ID\" ,\"Amazon USA MSRP\" ,row_number() over (partition by \"Amazon USA\" order by \"Amazon USA\") as rw from vahdam_db.maplemonk.sku_mapping_raw_data) smg on fi.product_id = smg.\"Amazon USA\" where (smg.rw = 1 or smg.rw is null) AND fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name = \'Amazon_USA\' union All select fi.*, smg.\"COMMON SKU ID\" as Common_SKU, smg.\"Common SKU Description\" as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.\"SUB CATEGORY\" as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA BAG/ POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.\"Mother SKU\", smg.weight, smg.\"Amazon USA MSRP\", smg.BRAND from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select \"Amazon US 1P\" ,weight ,brand ,\"Mother SKU\" ,\"Common Name\" ,category ,\"SUB CATEGORY\" ,\"LOOSE/TEA BAG/ POWDER\" ,\"Common SKU Description\" ,\"COMMON SKU ID\" ,\"Amazon USA MSRP\" ,row_number() over (partition by \"Amazon USA\" order by \"Amazon USA\") as rw from vahdam_db.maplemonk.sku_mapping_raw_data) smg on fi.product_id = smg.\"Amazon US 1P\" where (smg.rw = 1 or smg.rw is null) AND fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name = \'Amazon_US_1P\' union all select fi.*, smg.\"COMMON SKU ID\" as Common_SKU, smg.\"Common SKU Description\" as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.\"SUB CATEGORY\" as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA BAG/ POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.\"Mother SKU\", smg.weight, smg.\"Amazon USA MSRP\", smg.BRAND from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select \"Amazon EU 1P\" ,weight ,brand ,\"Mother SKU\" ,\"Common Name\" ,category ,\"SUB CATEGORY\" ,\"LOOSE/TEA BAG/ POWDER\" ,\"Common SKU Description\" ,\"COMMON SKU ID\" ,\"Amazon USA MSRP\" ,row_number() over (partition by \"Amazon EU 1P\" order by \"Amazon EU 1P\") as rw from vahdam_db.maplemonk.sku_mapping_raw_data) smg on fi.product_id = smg.\"Amazon EU 1P\" where (smg.rw = 1 or smg.rw is null) AND fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name in (\'Amazon_UK_1P\',\'Amazon_DE_1P\',\'Amazon_ES_1P\',\'Amazon_IT_1P\') union all select fi.*, smg.\"COMMON SKU ID\" as Common_SKU, smg.\"Common SKU Description\" as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.\"SUB CATEGORY\" as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA BAG/ POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.\"Mother SKU\", smg.weight, smg.\"Amazon USA MSRP\", smg.BRAND from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select \"Amazon AUS\" ,weight ,brand ,\"Mother SKU\" ,\"Common Name\" ,category ,\"SUB CATEGORY\" ,\"LOOSE/TEA BAG/ POWDER\" ,\"Common SKU Description\" ,\"COMMON SKU ID\" ,\"Amazon USA MSRP\" ,row_number() over (partition by \"Amazon AUS\" order by \"Amazon AUS\") as rw from vahdam_db.maplemonk.sku_mapping_raw_data) smg on fi.product_id = smg.\"Amazon AUS\" where (smg.rw = 1 or smg.rw is null) AND fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name = \'Amazon_AU\' UNION all select fi.*, smg.\"COMMON SKU ID\" as Common_SKU, smg.\"Common SKU Description\" as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.\"SUB CATEGORY\" as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA BAG/ POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.\"Mother SKU\", smg.weight, smg.\"Amazon USA MSRP\", smg.BRAND from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select \"Amazon USA\" ,weight ,brand ,\"Mother SKU\" ,\"Common Name\" ,category ,\"SUB CATEGORY\" ,\"LOOSE/TEA BAG/ POWDER\" ,\"Common SKU Description\" ,\"COMMON SKU ID\" ,\"Amazon USA MSRP\" ,row_number() over (partition by \"Amazon USA\" order by \"Amazon USA\") as rw from vahdam_db.maplemonk.sku_mapping_raw_data) smg on fi.product_id = smg.\"Amazon USA\" where (smg.rw = 1 or smg.rw is null) AND fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name = \'Amazon_JP\' UNION all select fi.*, smg.\"COMMON SKU ID\" as Common_SKU, smg.\"Common SKU Description\" as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.\"SUB CATEGORY\" as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA BAG/ POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.\"Mother SKU\", smg.weight, smg.\"Amazon USA MSRP\", smg.BRAND from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select \"Amazon USA\" ,weight ,brand ,\"Mother SKU\" ,\"Common Name\" ,category ,\"SUB CATEGORY\" ,\"LOOSE/TEA BAG/ POWDER\" ,\"Common SKU Description\" ,\"COMMON SKU ID\" ,\"Amazon USA MSRP\" ,row_number() over (partition by \"Amazon USA\" order by \"Amazon USA\") as rw from vahdam_db.maplemonk.sku_mapping_raw_data) smg on fi.product_id = smg.\"Amazon USA\" where (smg.rw = 1 or smg.rw is null) AND fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name = \'Amazon_SGP\' UNION all select fi.*, smg.\"COMMON SKU ID\" as Common_SKU, smg.\"Common SKU Description\" as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.\"SUB CATEGORY\" as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA BAG/ POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.\"Mother SKU\", smg.weight, smg.\"Amazon UK MSRP\", smg.BRAND from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select \"Amazon UK\" ,weight ,brand ,\"Mother SKU\" ,\"Common Name\" ,category ,\"SUB CATEGORY\" ,\"LOOSE/TEA BAG/ POWDER\" ,\"Common SKU Description\" ,\"COMMON SKU ID\" ,\"Amazon UK MSRP\" ,row_number() over (partition by \"Amazon UK\" order by \"Amazon UK\") as rw from vahdam_db.maplemonk.sku_mapping_raw_data) smg on fi.product_id = smg.\"Amazon UK\" where (smg.rw = 1 or smg.rw is null) AND fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name = \'Amazon_UK\' union all select fi.*, smg.\"COMMON SKU ID\" as Common_SKU, smg.\"Common SKU Description\" as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.\"SUB CATEGORY\" as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA BAG/ POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.\"Mother SKU\", smg.weight, smg.\"Amazon DE MSRP\", smg.BRAND from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select \"Amazon DE\" ,weight ,brand ,\"Mother SKU\" ,\"Common Name\" ,category ,\"SUB CATEGORY\" ,\"LOOSE/TEA BAG/ POWDER\" ,\"Common SKU Description\" ,\"COMMON SKU ID\" ,\"Amazon DE MSRP\" ,row_number() over (partition by \"Amazon DE\" order by \"Amazon DE\") as rw from vahdam_db.maplemonk.sku_mapping_raw_data) smg on fi.product_id = smg.\"Amazon DE\" where (smg.rw = 1 or smg.rw is null) AND fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name = \'Amazon_DE\' union all select fi.*, smg.\"COMMON SKU ID\" as Common_SKU, smg.\"Common SKU Description\" as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.\"SUB CATEGORY\" as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA BAG/ POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.\"Mother SKU\", smg.weight, smg.\"Amazon ES MSRP\", smg.BRAND from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select \"Amazon ES\" ,weight ,brand ,\"Mother SKU\" ,\"Common Name\" ,category ,\"SUB CATEGORY\" ,\"LOOSE/TEA BAG/ POWDER\" ,\"Common SKU Description\" ,\"COMMON SKU ID\" ,\"Amazon ES MSRP\" ,row_number() over (partition by \"Amazon ES\" order by \"Amazon ES\") as rw from vahdam_db.maplemonk.sku_mapping_raw_data) smg on fi.product_id = smg.\"Amazon ES\" where (smg.rw = 1 or smg.rw is null) AND fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name = \'Amazon_ESP\' union all select fi.*, smg.\"COMMON SKU ID\" as Common_SKU, smg.\"Common SKU Description\" as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.\"SUB CATEGORY\" as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA BAG/ POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.\"Mother SKU\", smg.weight, smg.\"Amazon IT MSRP\", smg.BRAND from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select \"Amazon IT\" ,weight ,brand ,\"Mother SKU\" ,\"Common Name\" ,category ,\"SUB CATEGORY\" ,\"LOOSE/TEA BAG/ POWDER\" ,\"Common SKU Description\" ,\"COMMON SKU ID\" ,\"Amazon IT MSRP\" ,row_number() over (partition by \"Amazon IT\" order by \"Amazon IT\") as rw from vahdam_db.maplemonk.sku_mapping_raw_data) smg on fi.product_id = smg.\"Amazon IT\" where (smg.rw = 1 or smg.rw is null) AND fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name = \'Amazon_IT\' union all select fi.*, smg.\"COMMON SKU ID\" as Common_SKU, smg.\"Common SKU Description\" as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.\"SUB CATEGORY\" as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA BAG/ POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.\"Mother SKU\", smg.weight, smg.\"Amazon FR MSRP\", smg.BRAND from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select \"Amazon FR\" ,weight ,brand ,\"Mother SKU\" ,\"Common Name\" ,category ,\"SUB CATEGORY\" ,\"LOOSE/TEA BAG/ POWDER\" ,\"Common SKU Description\" ,\"COMMON SKU ID\" ,\"Amazon FR MSRP\" ,row_number() over (partition by \"Amazon FR\" order by \"Amazon FR\") as rw from vahdam_db.maplemonk.sku_mapping_raw_data) smg on fi.product_id = smg.\"Amazon FR\" where (smg.rw = 1 or smg.rw is null) AND fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name = \'Amazon_FR\' union all select fi.*, smg.\"COMMON SKU ID\" as Common_SKU, smg.\"Common SKU Description\" as PRODUCT_NAME, smg.CATEGORY as \"CATEGORY_1\", smg.\"SUB CATEGORY\" as \"Category_2-Type_of_Tea\", smg.\"LOOSE/TEA BAG/ POWDER\" as \"Category_3-Type_of_Product\", null as \"Category_4-Pack_type\", smg.\"Mother SKU\", smg.weight, smg.\"Amazon CA MSRP\", smg.BRAND from Vahdam_db.maplemonk.FACT_ITEMS fi left join (select \"Amazon CA\" ,weight ,brand ,\"Mother SKU\" ,\"Common Name\" ,category ,\"SUB CATEGORY\" ,\"LOOSE/TEA BAG/ POWDER\" ,\"Common SKU Description\" ,\"COMMON SKU ID\" ,\"Amazon CA MSRP\" ,row_number() over (partition by \"Amazon CA\" order by \"Amazon CA\") as rw from vahdam_db.maplemonk.sku_mapping_raw_data) smg on fi.product_id = smg.\"Amazon CA\" where (smg.rw = 1 or smg.rw is null) AND fi.ORDER_TIMESTAMP::date > \'2022-03-22\' and fi.shop_name = \'Amazon_CA\'); CREATE OR REPLACE TABLE Vahdam_db.maplemonk.FACT_ITEMS AS (SELECT * FROM Vahdam_db.maplemonk.FACT_ITEMS_TEMP_Category Union all SELECT * FROM Vahdam_db.maplemonk.FACT_ITEMS_TEMP_2_Category); Update Vahdam_db.maplemonk.FACT_ITEMS set Common_SKU=sku where Common_SKU is null and source=\'Shopify\'; Update Vahdam_db.maplemonk.FACT_ITEMS set Common_SKU=product_id where Common_SKU is null and source=\'Amazon\'; CREATE OR replace temporary TABLE Vahdam_db.maplemonk.temp_product AS SELECT DISTINCT customer_id, product_name, Row_number() OVER (partition BY customer_id ORDER BY LINE_ITEM_SALES DESC) rowid FROM ( SELECT DISTINCT customer_id, order_timestamp, product_name, LINE_ITEM_SALES , Min(order_timestamp) OVER (partition BY customer_id) firstOrderdate FROM Vahdam_db.maplemonk.FACT_ITEMS )res WHERE order_timestamp=firstorderdate; UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS A SET A.acquisition_product=B.product_name FROM ( SELECT * FROM Vahdam_db.maplemonk.temp_product WHERE rowid=1)B WHERE A.customer_id = B.customer_id; CREATE OR REPLACE TABLE VAHDAM_DB.MAPLEMONK.FACT_ITEMS_GA_US_MAPPING as select fi.*, ga.MEDIUM_FINAL, ga.CHANNEL_FINAL from vahdam_db.maplemonk.fact_items fi left join (select *, b.MEDIUM AS MEDIUM_FINAL, b.CHANNEL AS CHANNEL_FINAL from \"VAHDAM_DB\".\"MAPLEMONK\".\"GA_USA_SOURCE__BY__ORDER\" a left join \"VAHDAM_DB\".\"MAPLEMONK\".\"GA_USA_GA_SOURCE_MEDIUM_MAPPING\" b on a.GA_SOURCE = b.GA_SOURCE AND a.GA_MEDIUM = b.GA_MEDIUM) ga on fi.order_name = ga.GA_TRANSACTIONID WHERE fi.shop_name = \'Shopify_USA\' union select fi.*, Null as MEDIUM_FINAL, Null as SOURCE_FINAL FROM vahdam_db.maplemonk.fact_items fi WHERE fi.shop_name <> \'Shopify_USA\'; CREATE OR REPLACE TABLE VAHDAM_DB.MAPLEMONK.FACT_ITEMS AS SELECT * FROM VAHDAM_DB.MAPLEMONK.FACT_ITEMS_GA_US_MAPPING;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from VAHDAM_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        