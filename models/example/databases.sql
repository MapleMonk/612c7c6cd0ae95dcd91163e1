{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "Create or replace table RPSG_DB.MAPLEMONK.Sales_Cost_Source_DRV_intermediate as with invoicedatemetrics as ( select try_to_date(FI.invoice_date) Invoice_Date ,upper(FI.pre_final_channel) Channel ,upper(FI.SHOP_NAME) SHOP_NAME ,sum(ifnull((case when lower(order_status) not in (\'cancelled\') then ifnull(FI.SELLING_PRICE,0)-ifnull(FI.TAX,0) end),0)) Realised_Revenue ,sum(ifnull((case when lower(order_status) not in (\'cancelled\') and lower(new_customer_flag) = \'repeat\' then ifnull(FI.SELLING_PRICE,0)-ifnull(FI.TAX,0) end),0)) repeat_Realised_Revenue ,sum(ifnull((case when lower(order_status) not in (\'cancelled\') and lower(booked_customer_flag) = \'repeat\' then ifnull(FI.SELLING_PRICE,0)-ifnull(FI.TAX,0) end),0)) booked_repeat_Realised_Revenue from RPSG_DB.MAPLEMONK.SALES_CONSOLIDATED_DRV FI where lower(marketplace) like any (\'%shopify%\', \'%woocommerce%\') and not(lower(order_status) in (\'cancelled\') ) and invoice_date != \'\' group by 1,2,3 ), returnsales as ( select return_date::date return_date ,upper(channel) AS channel ,upper(case when marketplace_id in (\'177\',\'180\') then \'Shopify_AyurvedicSource\' when marketplace_id in (\'26\') then \'Shopify_DRV\' when marketplace_id in (\'179\') then \'Shopify_Herbobuild\' else marketplace end) as shop_name ,sum(case when lower(new_customer_flag) = \'repeat\' then total_return_amount_excl_tax else 0 end) repeat_return_amount_excl_tax ,sum(case when lower(booked_customer_flag) = \'repeat\' then total_return_amount_excl_tax else 0 end) booked_repeat_return_amount_excl_tax ,sum(total_return_amount) TOTAL_RETURN_AMOUNT ,sum(total_return_amount_excl_tax) TOTAL_RETURN_AMOUNT_EXCL_TAX ,sum(total_returned_quantity) TOTAL_RETURNED_QUANTITY from RPSG_DB.MAPLEMONK.easyecom_returns_summary_drv where lower(company_name) like any (\'%herbolab%\',\'%dr vaidya%\') and lower(marketplace) like any (\'%shopify%\',\'%woocommerce%\') group by 1,2,3 order by 1 desc ) , orders as ( select FI.order_date::date Date ,upper(FI.pre_final_channel) Channel ,upper(FI.SHOP_NAME) SHOP_NAME ,count(distinct case when lower(payment_mode) = \'cod\' then order_id end) cod_Orders ,count(distinct case when lower(payment_mode) = \'prepaid\' then order_id end) prepaid_Orders ,ifnull(sum(ifnull(FI.SELLING_PRICE,0)),0) Total_Sales ,ifnull(sum(ifnull(FI.SELLING_PRICE,0)),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.SELLING_PRICE end),0) TOTAL_SALES_EXCL_CANCL ,count(distinct FI.order_id) Total_Orders ,count(distinct FI.order_id) - count(distinct case when lower(FI.order_status) in (\'cancelled\') then FI.order_id end) Orders_EXCL_CANCL ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' then FI.order_id end)) as New_Customer_Orders ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' then FI.order_id end)) - count(distinct(case when lower(FI.new_customer_flag) = \'new\' and lower(FI.order_status) in (\'cancelled\') then FI.order_id end)) as New_Customer_Orders_EXCL_CANCL ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' then FI.customer_id_final end)) as Total_New_Customers ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' then FI.customer_id_final end)) - count(distinct(case when lower(FI.new_customer_flag) = \'new\' and lower(FI.order_status) in (\'cancelled\') and FI.return_flag = 0 then FI.customer_id_final end)) New_Customers_EXCL_CANCL ,count(distinct FI.customer_id_final) as TOTAL_Unique_Customers ,(count(distinct FI.customer_id_final) - count(distinct case when lower(FI.order_status) in (\'cancelled\') then FI.customer_id_final end)) as Unique_Customers_EXCL_CANCL ,count(distinct(case when lower(FI.new_customer_flag) = \'repeat\' then FI.customer_id_final end)) as Repeat_Customers ,(count(distinct(case when lower(FI.new_customer_flag) = \'repeat\' then FI.customer_id_final end)) - count(distinct(case when lower(FI.new_customer_flag) = \'repeat\' and lower(FI.order_status) in (\'cancelled\') and FI.return_flag = 0 then FI.customer_id_final end))) Repeat_Customers_EXCL_CANCL ,count(distinct(case when lower(FI.new_customer_flag) = \'repeat\' then FI.order_id end)) as Repeat_Orders ,sum(case when lower(FI.new_customer_flag) = \'repeat\' then ifnull(FI.selling_price,0) end) as Repeat_Revenue ,(count(distinct(case when lower(FI.new_customer_flag) = \'repeat\' then Fi.order_id end)) - count(distinct(case when lower(FI.new_customer_flag) = \'repeat\' and lower(FI.order_status) in (\'cancelled\') and FI.return_flag = 0 then FI.order_id end))) Repeat_orders_EXCL_CANCL ,ifnull(sum(FI.discount_mrp),0) TOTAL_DISCOUNT ,(ifnull(sum(FI.discount_mrp),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.discount_mrp end),0)) TOTAL_DISCOUNT_EXCL_CANCL ,ifnull(sum(FI.tax),0) TOTAL_TAX ,(ifnull(sum(FI.tax),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.tax end),0)) TAX_EXCL_CANCL ,ifnull(sum(FI.shipping_price),0) TOTAL_SHIPPING_PRICE ,(ifnull(sum(FI.shipping_price),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.shipping_price end),0)) SHIPPING_PRICE_EXCL_CANCL ,ifnull(sum(case when lower(FI.new_customer_flag) = \'new\' then FI.discount_mrp end),0) as New_Customer_Discount ,(ifnull(sum(case when lower(FI.new_customer_flag) = \'new\' then FI.discount_mrp end),0) - ifnull(sum(case when lower(FI.new_customer_flag) = \'new\' and lower(order_status) in (\'cancelled\') then FI.discount_mrp end),0)) as New_Customer_Discount_EXCL_CANCL ,ifnull(sum(FI.suborder_quantity),0) TOTAL_QUANTITY ,(ifnull(sum(FI.suborder_quantity),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.suborder_quantity end),0)) QUANTITY_EXCL_CANCL ,ifnull(sum(case when FI.return_flag=1 then FI.suborder_quantity end),0) as Return_Quantity ,ifnull(sum(case when FI.return_flag=1 then ifnull(FI.SELLING_PRICE,0) end),0) as Return_Value ,count(distinct case when FI.return_flag=1 then order_id end )as Return_Orders ,count(distinct case when lower(order_status) in (\'cancelled\') then order_id end) Cancelled_Orders ,count(distinct case when lower(order_status) not in (\'cancelled\') and return_flag=0 then order_id end) Net_Orders ,count(distinct case when lower(final_status) in (\'delivered\') then order_id end) Delivered_Orders ,count(distinct case when lower(final_status) in (\'returned\',\'rto\') or lower(final_status) in (\'returned\',\'rto\') then order_id end) Returned_Orders ,count(distinct case when manifest_date is not null and lower(order_status) not in (\'cancelled\') then order_id end) Dispatched_Orders ,Orders_EXCL_CANCL - Returned_Orders as Realised_Orders ,ifnull(sum(case when lower(final_status) in (\'delivered\') then ifnull(FI.SELLING_PRICE,0)-ifnull(FI.TAX,0) end),0) Delivered_Revenue ,ifnull(sum(case when lower(final_status) in (\'returned\',\'rto\') or lower(final_status) in (\'returned\',\'rto\') then ifnull(FI.SELLING_PRICE,0)-ifnull(FI.TAX,0) end),0) Returned_Revenue ,ifnull(sum(case when manifest_date is not null and lower(order_status) not in (\'cancelled\') then ifnull(FI.SELLING_PRICE,0) end),0) Dispatched_Revenue ,count(case when date_trunc(\'month\',acquisition_date)>=dateadd(month,-3,date_trunc(\'month\',order_date)) and date_trunc(\'month\',acquisition_date)<date_trunc(\'month\',order_date) then customer_id_final end) L3M_Customers_Retained ,count(case when date_trunc(\'month\',acquisition_date)>=dateadd(month,-6,date_trunc(\'month\',order_date)) and date_trunc(\'month\',acquisition_date)<date_trunc(\'month\',order_date) then customer_id_final end) L6M_Customers_Retained ,count(case when date_trunc(\'month\',acquisition_date)>=dateadd(month,-3,date_trunc(\'month\',order_date)) and date_trunc(\'month\',acquisition_date)<date_trunc(\'month\',order_date) then customer_id_final end) L12M_Customers_Retained ,sum(case when lower(FI.new_customer_flag_month) = \'repeat\' then ifnull(FI.selling_price,0) end) Repeat_Customer_Revenue from RPSG_DB.MAPLEMONK.SALES_CONSOLIDATED_DRV FI where lower(marketplace) like any (\'%shopify%\',\'%woocommerce%\') group by 1,2,3 ) ,spend as (select date, case when channel = \'Facebook\' then \'FB\' else channel end channel ,upper(case when account=\'Facebook Dr.Vaidyas CL H2T\' then \'Shopify_AyurvedicSource\' when account=\'Facebook Dr.Vaidyas\' then \'Shopify_DRV\' when account = \'Google Dr.Vaidyas\' then \'Shopify_DRV\' when account = \'Google Dr.Vaidyas 2\' then \'Shopify_DRV\' when account = \'Facebook Herbobuild\' then \'Shopify_Herbobuild\' when account = \'Facebook Ayurvedic Source\' then \'Shopify_AyurvedicSource\' end) as Shop_Name ,sum(spend) as spend from RPSG_DB.MAPLEMONK.MARKETING_CONSOLIDATED_DRV where date < \'2023-12-01\' and not(lower(campaign_name) like any (\'%lead%\',\'%brand%\') and account_id = \'1294418320732793\') group by 1,2,3 union all select date,case when channel = \'Facebook\' then \'FB\' else channel end channel ,upper(case when account=\'Facebook Dr.Vaidyas CL H2T\' then \'Shopify_AyurvedicSource\' when account=\'Facebook Dr.Vaidyas\' then \'Shopify_DRV\' when account = \'Google Dr.Vaidyas\' then \'Shopify_DRV\' when account = \'Google Dr.Vaidyas 2\' then \'Shopify_DRV\' when account = \'Facebook Herbobuild\' then \'Shopify_Herbobuild\' when account = \'Facebook Ayurvedic Source\' then \'Shopify_AyurvedicSource\' when account = \'Facebook Three60you\' then \'Website_Three60You\' when account = \'Google Three60you\' then \'Website_Three60You\' end) as Shop_Name ,sum(spend) as spend from RPSG_DB.MAPLEMONK.MARKETING_CONSOLIDATED_DRV where date >= \'2023-12-01\' group by 1,2,3 union all select try_to_date(date, \'yyyy-mm-dd\') date ,upper(channel) CHANNEL ,\'Shopify_DRV\' as Shop_Name ,sum(try_cast(replace(spend,\',\',\'\') as float)) spend from rpsg_db.maplemonk.retention_spend group by 1,2,3 UNION ALL select day::date date ,\'CRITEO\' as channel ,\'Shopify_DRV\' as Shop_Name ,sum(advertisercost) as spend from rpsg_db.maplemonk.criteo_campaign_statistics group by 1,2,3 ) ,Users as ( select ga_date date, channel, upper(shop_name) SHOP_NAME, sum(ga_users) users, sum(ga_sessions) Sessions, sum(ga_engagedsessions) EngagedSessions from RPSG_DB.MAPLEMONK.ga_final_sessions_consolidated_drv where (not((lower(ga_campaign) like any (\'%branding%\') and (lower(ga_sourcemedium) like (\'%adyogi%\'))) or lower(ga_sourcemedium) like (\'%dv360%\') or lower(ga_sourcemedium) like (\'%taboola%\') or lower(ga_sourcemedium) like (\'%hotstar%\')) or not((lower(ga_campaign) like any (\'%traffic%\') and lower(ga_campaign) like \'%day%\' and (lower(ga_sourcemedium) like (\'%adyogi%\'))))) group by 1,2,3 order by 1 desc ) ,DailyNonBrandingUsers as ( select TU.ga_date date,final_channel as channel, upper(TU.shop_name) SHOP_NAME, sum(ifnull(TU.USERS_SOURCE,0)) Total_users, sum(ifnull(TU.new_USERS_SOURCE,0)) TOTAL_NEW_USERS, (sum(ifnull(TU.USERS_SOURCE,0)) - sum(ifnull(TU.new_USERS_SOURCE,0))) TOTAL_REPEAT_USERS, sum(ifnull(BUO.Organic_Users,0)) TOTAL_ORGANIC_USERS, sum(ifnull(TU.BOUNCES_SOURCE,0)) TOTAL_BOUNCES, sum(ifnull(TU.SESSIONS_SOURCE,0)) TOTAL_SESSIONS, div0(sum(ifnull(TU.BOUNCES_SOURCE,0)),sum(ifnull(TU.SESSIONS_SOURCE,0))) TOTAL_BOUNCE_RATE, 0 as TOTAL_UNIQUE_PAGEVIEW_PER_SESSION, avg(ifnull(TU.AVG_SESSION_DURATION_SOURCE,0)) AVERAGE_SESSION_DURATION, 0 as TOTAL_UNIQUE_PAGEVIEWS, avg(ifnull(TU.AVG_LOAD_TIME_SOURCE,0)) TOTAL_AVG_LOAD_TIME, sum(ifnull(BUAY.USERS,0)) BUADYOGI, sum(ifnull(BUDV.USERS,0)) BUDV360, sum(ifnull(BUT.USERS,0)) BUTABOOLA, sum(ifnull(BUB.USERS,0)) BUTRAFFICADYOGI, sum(ifnull(BUHS.USERS,0)) BUHOTSTAR, (sum(ifnull(TU.USERS_SOURCE,0)) - sum(ifnull(BUAY.USERS,0)) - sum(ifnull(BUB.USERS,0)) - sum(ifnull(BUHS.USERS,0)) - sum(ifnull(BUDV.USERS,0)) - sum(ifnull(BUT.USERS,0)) - sum(ifnull(BUBB.USERS,0))) NonBrandingUsers, (sum(ifnull(TU.SESSIONS_SOURCE,0)) - sum(ifnull(BUAY.Sessions,0)) - sum(ifnull(BUB.Sessions,0)) - sum(ifnull(BUHS.Sessions,0)) - sum(ifnull(BUDV.Sessions,0)) - sum(ifnull(BUT.Sessions,0)) - sum(ifnull(BUBB.Sessions,0))) NonBrandingSessions, (sum(ifnull(TU.ENGAGEDSESSIONS,0)) - sum(ifnull(BUAY.EngagedSessions,0)) - sum(ifnull(BUB.EngagedSessions,0)) - sum(ifnull(BUHS.EngagedSessions,0)) - sum(ifnull(BUDV.EngagedSessions,0)) - sum(ifnull(BUT.EngagedSessions,0)) - sum(ifnull(BUBB.EngagedSessions,0))) NonBrandingEngagedSessions from RPSG_DB.MAPLEMONK.GA_FINAL_USERS_SOURCE_CONSOLIDATED_DRV TU left join (select ga_date date, shop_name, GA_SOURCEMEDIUM, sum(GA_USERS) users, sum(GA_SESSIONS) Sessions, sum(GA_SESSIONS-GA_EXITS) EngagedSessions from RPSG_DB.MAPLEMONK.GA_Final_Sessions_Consolidated_DRV where (lower(ga_campaign) like any (\'%branding%\') and (lower(ga_sourcemedium) like (\'%adyogi%\'))) group by 1,2,3) BUAY on TU.ga_date=BUAY.date and lower(TU.SHOP_NAME)=lower(BUAY.SHOP_NAME) and lower(BUAY.GA_SOURCEMEDIUM)=lower(TU.GA_SOURCEMEDIUM) left join (select ga_date date, shop_name, GA_SOURCEMEDIUM, sum(GA_USERS) users, sum(GA_SESSIONS) Sessions, sum(GA_SESSIONS-GA_EXITS) EngagedSessions from RPSG_DB.MAPLEMONK.GA_Final_Sessions_Consolidated_DRV where (lower(ga_campaign) like (\'%traffic%\') and lower(ga_campaign) like (\'%day%\') and (lower(ga_sourcemedium) like (\'%adyogi%\'))) group by 1,2,3) BUB on TU.ga_date=BUB.date and lower(TU.SHOP_NAME)=lower(BUB.SHOP_NAME) and lower(BUB.GA_SOURCEMEDIUM)=lower(TU.GA_SOURCEMEDIUM) left join (select ga_date date, shop_name, GA_SOURCEMEDIUM, sum(GA_USERS) users, sum(GA_SESSIONS) Sessions, sum(GA_SESSIONS-GA_EXITS) EngagedSessions from RPSG_DB.MAPLEMONK.GA_Final_Sessions_Consolidated_DRV where (lower(ga_sourcemedium) like (\'%hotstar%\')) group by 1,2,3) BUHS on TU.ga_date=BUHS.date and lower(TU.SHOP_NAME)=lower(BUHS.SHOP_NAME) and lower(BUHS.GA_SOURCEMEDIUM)=lower(TU.GA_SOURCEMEDIUM) left join (select ga_date date, shop_name, GA_SOURCEMEDIUM, sum(GA_USERS) users, sum(GA_SESSIONS) Sessions, sum(GA_SESSIONS-GA_EXITS) EngagedSessions from RPSG_DB.MAPLEMONK.GA_Final_Sessions_Consolidated_DRV where lower(ga_sourcemedium) like (\'%dv360%\') group by 1,2,3) BUDV on TU.ga_date=BUDV.date and lower(TU.SHOP_NAME)=lower(BUDV.SHOP_NAME) and lower(BUDV.GA_SOURCEMEDIUM)=lower(TU.GA_SOURCEMEDIUM) left join (select ga_date date, shop_name, GA_SOURCEMEDIUM, sum(GA_USERS) users, sum(GA_SESSIONS) Sessions, sum(GA_SESSIONS-GA_EXITS) EngagedSessions from RPSG_DB.MAPLEMONK.GA_Final_Sessions_Consolidated_DRV where lower(ga_sourcemedium) like (\'%taboola%\') group by 1,2,3) BUT on TU.ga_date=BUT.date and lower(TU.SHOP_NAME)=lower(BUT.SHOP_NAME) and lower(BUT.GA_SOURCEMEDIUM)=lower(TU.GA_SOURCEMEDIUM) left join (select ga_date date, shop_name, GA_SOURCEMEDIUM, sum(GA_USERS) users, sum(GA_SESSIONS) Sessions, sum(GA_SESSIONS-GA_EXITS) EngagedSessions from RPSG_DB.MAPLEMONK.GA_Final_Sessions_Consolidated_DRV where lower(ga_sourcemedium) like (\'%branding%\') group by 1,2,3) BUBB on TU.ga_date=BUBB.date and lower(TU.SHOP_NAME)=lower(BUBB.SHOP_NAME) and lower(BUBB.GA_SOURCEMEDIUM)=lower(TU.GA_SOURCEMEDIUM) left join (select ga_date date, shop_name, GA_SOURCEMEDIUM, sum(GA_USERS) Organic_users, sum(GA_SESSIONS) Sessions, sum(GA_SESSIONS-GA_EXITS) EngagedSessions from RPSG_DB.MAPLEMONK.GA_Final_Sessions_Consolidated_DRV where lower(ga_sourcemedium) like any (\'%organic%\', \'%direct%\',\'%google / search%\',\'%search / google%\') group by 1,2,3) BUO on TU.ga_date=BUO.date and lower(TU.SHOP_NAME)=lower(BUO.SHOP_NAME) and lower(BUO.GA_SOURCEMEDIUM)=lower(TU.GA_SOURCEMEDIUM) left join (select * from (select *,\"New Channel\" as final_channel,row_number() over (partition by lower(ifnull(source,\'\')),lower(ifnull(medium,\'\')) order by 1) rw from RPSG_DB.MAPLEMONK.utm_ga_consolidated_channel_mapping) where rw=1 )map on lower(replace(SPLIT(TU.GA_SOURCEMEDIUM, \' / \')[0],\'\"\',\'\')) = lower(map.source) and lower(replace(SPLIT(TU.GA_SOURCEMEDIUM, \' / \')[1],\'\"\',\'\'))=lower(map.medium) group by 1,2,3 ) ,Allmetrics as ( select coalesce(fi.Date,MC.date,SC.date, RS.Return_Date, ID.invoice_date) as date, upper(coalesce(FI.Channel, MC.channel, SC.channel, RS.Channel, ID.Channel)) as channel, upper(coalesce(FI.Shop_Name, MC.Shop_Name, SC.Shop_name, RS.Shop_name, ID.Shop_name)) as Marketplace, cod_orders, prepaid_orders, Total_Sales, TOTAL_SALES_EXCL_CANCL, Total_Orders, Orders_EXCL_CANCL, New_Customer_Orders, New_Customer_Orders_EXCL_CANCL, Total_New_Customers, New_Customers_EXCL_CANCL, TOTAL_Unique_Customers, Unique_Customers_EXCL_CANCL, Repeat_Customers, Repeat_Customers_EXCL_CANCL, Repeat_orders, Repeat_Revenue, Repeat_orders_EXCL_CANCL, TOTAL_DISCOUNT, TOTAL_DISCOUNT_EXCL_CANCL, TOTAL_TAX, TAX_EXCL_CANCL, TOTAL_SHIPPING_PRICE, SHIPPING_PRICE_EXCL_CANCL, New_Customer_DISCOUNT, New_Customer_Discount_EXCL_CANCL, TOTAL_QUANTITY, QUANTITY_EXCL_CANCL, RS.TOTAL_RETURNED_QUANTITY as Return_Quantity, RS.TOTAL_RETURN_AMOUNT_EXCL_TAX as Return_Value, Cancelled_Orders, return_Orders, Net_Orders, Delivered_Orders, Delivered_Revenue, Dispatched_Orders, Dispatched_Revenue, Realised_Orders, ifnull(ID.Realised_Revenue,0)- ifnull(RS.TOTAL_RETURN_AMOUNT_EXCL_TAX,0) as Realised_Revenue, ifnull(ID.repeat_Realised_Revenue,0)- ifnull(RS.repeat_return_amount_excl_tax,0) as repeat_Realised_Revenue, ifnull(ID.booked_repeat_Realised_Revenue,0)- ifnull(RS.booked_repeat_return_amount_excl_tax,0) as booked_repeat_Realised_Revenue, ifnull(ID.Realised_Revenue,0) Invoice_Amount_Excl_Tax, spend as marketing_spend, SC.users as Users, SC.Sessions as Traffic, Repeat_Customer_Revenue from orders FI full outer join spend MC on FI.Date = MC.date and lower(FI.Channel) = lower(MC.channel) and lower(FI.Shop_name)=lower(MC.Shop_name) full outer join Users SC on coalesce(FI.Date,MC.Date)=SC.Date and lower(coalesce(FI.Channel,MC.Channel))=lower(SC.Channel) and lower(coalesce(FI.Shop_name, MC.Shop_name))=lower(SC.Shop_name) full outer join returnsales RS on RS.return_date = coalesce(FI.Date,MC.Date,SC.Date) and lower(RS.Channel) = lower(coalesce(FI.Channel,MC.Channel, SC.Channel)) and lower(RS.Shop_name)=lower(coalesce(FI.Shop_name, MC.Shop_name, SC.Shop_name)) full outer join invoicedatemetrics ID on ID.invoice_date = coalesce(FI.Date,MC.Date,SC.Date, RS.return_date) and lower(coalesce(FI.Channel,MC.Channel, SC.Channel,RS.Channel))=lower(ID.Channel) and lower(coalesce(FI.Shop_name, MC.Shop_name, SC.Shop_name, RS.Shop_name))=lower(ID.Shop_name) ) select * ,Total_NonBrandingUsers NonBrandingUsers ,Total_NonBrandingTraffic NonBrandingTraffic ,Total_NonBrandingEngagedSessions NonBrandingEngagedTraffic ,Total_Website_Users WebsiteUsers ,Total_Website_New_Users Website_New_Users ,TOTAL_Website_REPEAT_USERS Website_REPEAT_USERS ,TOTAL_Website_ORGANIC_USERS Website_ORGANIC_USERS ,total_bounces BOUNCES ,total_sessions SESSIONS ,TOTAL_AVERAGE_SESSION_DURATION AVERAGE_SESSION_DURATION ,TOTAL_UNIQUE_PAGEVIEWS UNIQUE_PAGEVIEWS ,TOTAL_AVG_LOAD_TIME AVG_LOAD_TIME from ( select coalesce(AM.Date,DNBU.date) as date, upper(coalesce(AM.channel,DNBU.channel)) channel, upper(coalesce(AM.Marketplace,DNBU.Shop_name)) as Marketplace, sum(Total_Sales) Total_Sales, sum(cod_Orders) as cod_Orders, sum(prepaid_Orders) as prepaid_Orders, sum(TOTAL_SALES_EXCL_CANCL) TOTAL_SALES_EXCL_CANCL, sum(Total_Orders) Total_Orders, sum(Orders_EXCL_CANCL) Orders_EXCL_CANCL, sum(New_Customer_Orders) New_Customer_Orders, sum(New_Customer_Orders_EXCL_CANCL) New_Customer_Orders_EXCL_CANCL, sum(Total_New_Customers) Total_New_Customers, sum(New_Customers_EXCL_CANCL) New_Customers_EXCL_CANCL, sum(TOTAL_Unique_Customers) TOTAL_Unique_Customers, sum(Unique_Customers_EXCL_CANCL) Unique_Customers_EXCL_CANCL, sum(Repeat_Customers) Repeat_Customers, sum(Repeat_Customers_EXCL_CANCL) Repeat_Customers_EXCL_CANCL, sum(Repeat_orders) Repeat_orders, sum(Repeat_Revenue)Repeat_Revenue, sum(Repeat_orders_EXCL_CANCL) Repeat_orders_EXCL_CANCL, sum(TOTAL_DISCOUNT) TOTAL_DISCOUNT, sum(TOTAL_DISCOUNT_EXCL_CANCL) TOTAL_DISCOUNT_EXCL_CANCL, sum(TOTAL_TAX) TOTAL_TAX, sum(TAX_EXCL_CANCL) TAX_EXCL_CANCL, sum(TOTAL_SHIPPING_PRICE) TOTAL_SHIPPING_PRICE, sum(SHIPPING_PRICE_EXCL_CANCL) SHIPPING_PRICE_EXCL_CANCL, sum(New_Customer_DISCOUNT) New_Customer_DISCOUNT, sum(New_Customer_Discount_EXCL_CANCL) New_Customer_Discount_EXCL_CANCL, sum(TOTAL_QUANTITY) TOTAL_QUANTITY, sum(QUANTITY_EXCL_CANCL) QUANTITY_EXCL_CANCL, sum(Return_Quantity) Return_Quantity, sum(Return_Value) Return_Value, sum(Cancelled_Orders) Cancelled_Orders, sum(return_orders) return_orders, sum(Net_Orders) Net_Orders, sum(Delivered_Orders) Delivered_Orders, sum(Delivered_Revenue) Delivered_Revenue, sum(Dispatched_Orders) Dispatched_Orders, sum(Dispatched_Revenue) Dispatched_Revenue, sum(Realised_Orders) Realised_Orders, sum(Realised_Revenue) Realised_Revenue, sum(Invoice_Amount_Excl_Tax) Invoice_Amount_Excl_Tax, sum(marketing_spend) marketing_spend, sum(ifnull(Traffic,0)) Traffic, sum(ifnull(users,0)) Users, sum(ifnull(DNBU.NonBrandingUsers,0)) as Total_NonBrandingUsers, sum(ifnull(DNBU.NonBrandingSessions,0)) as Total_NonBrandingTraffic, sum(ifnull(DNBU.NonBrandingEngagedSessions,0)) as Total_NonBrandingEngagedSessions, SUM(ifnull(DNBU.Total_users,0)) Total_Website_Users, sum(ifnull(DNBU.TOTAL_NEW_USERS,0)) Total_Website_New_Users, sum(ifnull(DNBU.TOTAL_REPEAT_USERS,0)) TOTAL_Website_REPEAT_USERS, sum(ifnull(DNBU.TOTAL_ORGANIC_USERS,0)) TOTAL_Website_ORGANIC_USERS, sum(ifnull(DNBU.total_bounces,0)) TOTAL_BOUNCES, sum(ifnull(DNBU.total_sessions,0)) TOTAL_SESSIONS, avg(ifnull(DNBU.AVERAGE_SESSION_DURATION,0)) TOTAL_AVERAGE_SESSION_DURATION, sum(ifnull(DNBU.total_unique_pageviews,0)) TOTAL_UNIQUE_PAGEVIEWS, avg(ifnull(DNBU.TOTAL_AVG_LOAD_TIME,0)) TOTAL_AVG_LOAD_TIME, sum(Repeat_Customer_Revenue) as Repeat_Customer_Revenue, sum(repeat_Realised_Revenue) as repeat_Realised_Revenue, sum(booked_repeat_Realised_Revenue) as booked_repeat_Realised_Revenue from allmetrics AM full outer join dailynonbrandingusers DNBU on AM.date = DNBU.date and lower(AM.Marketplace) = lower(DNBU.shop_name) and lower(AM.channel) = lower(DNBU.channel) group by 1,2,3 ) ; Create or replace table RPSG_DB.MAPLEMONK.SALES_COST_SOURCE_DRV as select coalesce(a.date, b.date) as date, upper(coalesce(b.channel, a.channel)) as channel, upper(coalesce(a.marketplace, b.shop_name)) as Marketplace, Total_Sales, cod_Orders, prepaid_Orders, Total_Sales/(1.13) Total_Sales_Ex_Tax, TOTAL_SALES_EXCL_CANCL, Total_Orders, Orders_EXCL_CANCL, New_Customer_Orders, New_Customer_Orders_EXCL_CANCL, Total_New_Customers, New_Customers_EXCL_CANCL, TOTAL_Unique_Customers, Unique_Customers_EXCL_CANCL, Repeat_Customers, Repeat_Customers_EXCL_CANCL, Repeat_orders, Repeat_Revenue, Repeat_orders_EXCL_CANCL, TOTAL_DISCOUNT, TOTAL_DISCOUNT_EXCL_CANCL, TOTAL_TAX, TAX_EXCL_CANCL, TOTAL_SHIPPING_PRICE, SHIPPING_PRICE_EXCL_CANCL, New_Customer_DISCOUNT, New_Customer_Discount_EXCL_CANCL, TOTAL_QUANTITY, QUANTITY_EXCL_CANCL, Return_Quantity, Return_Value, Cancelled_Orders, return_orders, Net_Orders, Delivered_Orders, Delivered_Revenue, Dispatched_Orders, Dispatched_Revenue, Realised_Orders, Invoice_Amount_Excl_Tax, Realised_Revenue, marketing_spend, Traffic, Users, NonBrandingTraffic, NonBrandingEngagedTraffic, NONBRANDINGUSERS, WebsiteUsers, Website_New_Users, Website_REPEAT_USERS, Website_ORGANIC_USERS, BOUNCES, SESSIONS, AVERAGE_SESSION_DURATION, UNIQUE_PAGEVIEWS, AVG_LOAD_TIME, TOTAL_AVERAGE_SESSION_DURATION Overall_AVERAGE_SESSION_DURATION, TOTAL_AVG_LOAD_TIME Overall_AVG_LOAD_TIME, Repeat_Customer_Revenue, repeat_Realised_Revenue, booked_repeat_Realised_Revenue, ifnull(b.customers,0) as MC_MP_Customer_Till_Date, ifnull(b.gross_sales,0) as MC_MP_Sales_Till_Date from RPSG_DB.MAPLEMONK.Sales_Cost_Source_DRV_intermediate a full outer join (select date ,upper(shop_name) shop_name ,upper(channel) channel ,sum(gross_sales) over (partition by shop_name, channel order by date asc rows between unbounded preceding and current row) gross_sales ,sum(customers) over (partition by shop_name, channel order by date asc rows between unbounded preceding and current row) customers from ( select B.date ,upper(B.shop_name) shop_name ,upper(B.pre_final_channel) as channel ,sum(ifnull(selling_price,0)) gross_sales ,count(distinct case when new_customer_flag = \'New\' then customer_id_final end) customers from rpsg_db.maplemonk.sales_consolidated_drv A full outer join (select * from (select distinct order_date::date date from rpsg_db.maplemonk.sales_consolidated_drv X) cross join (select distinct shop_name, pre_final_channel from rpsg_db.maplemonk.sales_consolidated_drv) Y) B on A.order_date::date=B.date AND lower(A.SHOP_NAME)=lower(B.SHOP_NAME) AND lower(A.pre_final_channel)=lower(B.pre_final_channel) where lower(A.marketplace) like any (\'%shopify%\',\'%woocommerce%\') group by B.date, upper(B.shop_name), upper(B.pre_final_channel) order by B.date desc ) order by date desc ) b on a.Date = b.date and lower(a.Channel) = lower(b.channel) and lower(a.marketplace)=lower(b.Shop_name) order by 1 desc ; create or replace table RPSG_DB.MAPLEMONK.Date_MP_MC_DIM AS select a.Acquisition_Month,upper(b.shop_name) shop_name,c.pre_final_channel from (select distinct date_trunc(\'month\', acquisition_date) Acquisition_Month from RPSG_DB.MAPLEMONK.sales_consolidated_drv where acquisition_date is not null) a cross join (select distinct shop_name from RPSG_DB.MAPLEMONK.sales_consolidated_drv) b cross join (select distinct pre_final_channel from RPSG_DB.MAPLEMONK.sales_consolidated_drv where ordeR_Date::date > \'2023-01-01\' and lower(shop_name) like any (\'%shopify%\', \'%woocommerce%\')) c where lower(b.shop_name) like any (\'%shopify%\', \'%woocommerce%\') and lower(shop_name) like any (\'%shopify%\', \'%woocommerce%\') order by 1 desc; Create or replace table RPSG_DB.MAPLEMONK.Sales_Cost_Source_DRV as with Preceding_New_Customers as ( select * ,sum(L3M_New_Customers) over (partition by acquisition_month) Overall_L3M_New_Customers ,sum(L6M_New_Customers) over (partition by acquisition_month) Overall_L6M_New_Customers ,sum(L12M_New_Customers) over (partition by acquisition_month) Overall_L12M_New_Customers ,sum(L3M_New_Customers) over (partition by acquisition_month,marketplace) MP_L3M_New_Customers ,sum(L6M_New_Customers) over (partition by acquisition_month,marketplace) MP_L6M_New_Customers ,sum(L12M_New_Customers) over (partition by acquisition_month,marketplace) MP_L12M_New_Customers ,sum(L3M_New_Customers) over (partition by acquisition_month,channel) MC_L3M_New_Customers ,sum(L6M_New_Customers) over (partition by acquisition_month,channel) MC_L6M_New_Customers ,sum(L12M_New_Customers) over (partition by acquisition_month,channel) MC_L12M_New_Customers from ( select Acquisition_Month ,upper(marketplace) marketplace ,upper(channel) channel ,ifnull(sum(New_Customers) over (partition by marketplace,channel order by acquisition_month rows between 3 preceding and 1 preceding),0) L3M_New_Customers ,ifnull(sum(New_Customers) over (partition by marketplace,channel order by acquisition_month rows between 6 preceding and 1 preceding),0) L6M_New_Customers ,ifnull(sum(New_Customers) over (partition by marketplace,channel order by acquisition_month rows between 12 preceding and 1 preceding),0) L12M_New_Customers from (Select distinct a.Acquisition_Month, upper(a.shop_name) marketplace, upper(a.pre_final_channel) channel, count(distinct case when lower(b.new_customer_flag) = \'new\' then b.customer_id_final end) New_Customers from RPSG_DB.MAPLEMONK.date_mp_mc_dim a left join RPSG_DB.MAPLEMONK.sales_consolidated_drv b on a.Acquisition_Month = date_trunc(\'month\', b.acquisition_date) and lower(a.shop_name)=lower(b.shop_name) and lower(a.pre_final_channel)=lower(b.pre_final_channel) where lower(b.marketplace) like any (\'%shopify%\',\'%woocommerce%\') group by 1,2,3 order by 1 desc ) order by 1 desc ) order by 1 desc ) select coalesce(a.date,b.Acquisition_Month::date ) as date, upper(coalesce(a.channel, b.channel)) as pre_final_channel, case when upper(coalesce(a.channel, b.channel)) in ( \'ORGANIC\', \'DIRECT\', \'REFERRAL\', \'BRANDING\', \'WOOCOMMERCE\', \'NOT MAPPED\', \'RETENTION\', \'CRITEO\', \'FB\', \'SOCIAL\', \'GOOGLE\', \'CRM\', \'SNAPCHAT\') then upper(coalesce(a.channel, b.channel)) else \'OTHERS\' end channel, upper(coalesce(a.marketplace, b.marketplace)) as Marketplace, Total_Sales, cod_Orders, prepaid_Orders, Total_Sales_Ex_Tax, TOTAL_SALES_EXCL_CANCL, Total_Orders, Orders_EXCL_CANCL, New_Customer_Orders, New_Customer_Orders_EXCL_CANCL, Total_New_Customers, New_Customers_EXCL_CANCL, TOTAL_Unique_Customers, Unique_Customers_EXCL_CANCL, Repeat_Customers, Repeat_Customers_EXCL_CANCL, Repeat_orders, Repeat_Revenue, Repeat_orders_EXCL_CANCL, TOTAL_DISCOUNT, TOTAL_DISCOUNT_EXCL_CANCL, TOTAL_TAX, TAX_EXCL_CANCL, TOTAL_SHIPPING_PRICE, SHIPPING_PRICE_EXCL_CANCL, New_Customer_DISCOUNT, New_Customer_Discount_EXCL_CANCL, TOTAL_QUANTITY, QUANTITY_EXCL_CANCL, Return_Quantity, Return_Value, Cancelled_Orders, return_orders, Net_Orders, Delivered_Orders, Delivered_Revenue, Dispatched_Orders, Dispatched_Revenue, Realised_Orders, Invoice_Amount_Excl_Tax, Realised_Revenue, marketing_spend, Traffic, Users, NonBrandingTraffic, NonBrandingEngagedTraffic, NonBrandingUSERS, WebsiteUsers, Website_New_Users, Website_ORGANIC_USERS, Website_REPEAT_USERS, BOUNCES, SESSIONS, AVERAGE_SESSION_DURATION, UNIQUE_PAGEVIEWS, AVG_LOAD_TIME, Overall_AVERAGE_SESSION_DURATION, Overall_AVG_LOAD_TIME, Repeat_Customer_Revenue, repeat_Realised_Revenue, booked_repeat_Realised_Revenue, MC_MP_Customer_Till_Date, MC_MP_Sales_Till_Date ,sum(MC_MP_Customer_Till_Date) over (partition by a.date) as Overall_Cust_Till_Date ,sum(MC_MP_Sales_Till_Date) over (partition by a.date) as Overall_Sales_Till_Date ,sum(MC_MP_Customer_Till_Date) over (partition by a.date, a.marketplace) as MP_Cust_Till_Date ,sum(MC_MP_Sales_Till_Date) over (partition by a.date, a.marketplace) as MP_Sales_Till_Date ,sum(MC_MP_Customer_Till_Date) over (partition by a.date, a.channel) as MC_Cust_Till_Date ,sum(MC_MP_Sales_Till_Date) over (partition by a.date, a.channel) as MC_Sales_Till_Date ,L3M_New_Customers as MC_MP_L3M_NEW_CUSTOMERS ,L6M_New_Customers as MC_MP_L6M_NEW_CUSTOMERS ,L12M_New_Customers as MC_MP_L12M_NEW_CUSTOMERS ,Overall_L3M_NEW_CUSTOMERS ,Overall_L6M_NEW_CUSTOMERS ,Overall_L12M_NEW_CUSTOMERS ,MP_L3M_NEW_CUSTOMERS ,MP_L6M_NEW_CUSTOMERS ,MP_L12M_NEW_CUSTOMERS ,MC_L3M_NEW_CUSTOMERS ,MC_L6M_NEW_CUSTOMERS ,MC_L12M_NEW_CUSTOMERS from RPSG_DB.MAPLEMONK.Sales_Cost_Source_DRV a full outer join Preceding_New_Customers b on date_trunc(\'month\',a.date)::date = b.Acquisition_Month::date and a.marketplace=b.marketplace and a.channel=b.channel order by 1 desc ; CREATE or REPLACE TABLE RPSG_DB.MAPLEMONK.TARGETS as with cte_targets as ( Select to_date(Month,\'mon/yyyy\') as MONTH_START_DATE ,metrics ,TRY_CAST(replace(TARGET,\',\',\'\') AS FLOAT) TARGET from RPSG_DB.MAPLEMONK.metrics_targets) select MONTH_START_DATE ,sum(ifnull(TARGET_BOOKED_REVENUE,0)) TARGET_BOOKED_REVENUE ,sum(ifnull(TARGET_BOOKED_REVENUE_EX_TAX,0)) TARGET_BOOKED_REVENUE_EX_TAX ,sum(ifnull(TARGET_TOTAL_ORDERS,0)) TARGET_TOTAL_ORDERS ,sum(ifnull(TARGET_SPEND,0)) TARGET_MARKETING_SPEND ,sum(ifnull(TARGET_DELIVERED_REVENUE,0)) TARGET_DELIVERED_REVENUE ,sum(ifnull(TARGET_RETENTION,0)) TARGET_RETENTION_REVENUE ,sum(ifnull(TARGET_USERS,0)) TARGET_USERS ,sum(ifnull(TARGET_TRAFFIC,0)) TARGET_TRAFFIC ,div0(sum(ifnull(TARGET_BOOKED_REVENUE,0)),sum(ifnull(TARGET_TOTAL_ORDERS,0))) TARGET_AOV ,div0(sum(ifnull(TARGET_DELIVERED_REVENUE,0)),sum(ifnull(TARGET_SPEND,0))) as TARGET_DELIVERED_ROAS ,div0(sum(ifnull(TARGET_BOOKED_REVENUE,0)),sum(ifnull(TARGET_SPEND,0))) as TARGET_BOOKED_ROAS ,div0(sum(ifnull(TARGET_TOTAL_ORDERS,0)),sum(ifnull(TARGET_TRAFFIC,0))) as TARGET_CONVERSION ,div0(sum(ifnull(TARGET_DELIVERED_REVENUE,0)),sum(ifnull(TARGET_BOOKED_REVENUE,0))) as TARGET_B2D ,div0(sum(ifnull(TARGET_DELIVERED_REVENUE,0)),sum(ifnull(TARGET_BOOKED_REVENUE_EX_TAX,0))) as TARGET_B2D_EX_Tax ,div0(sum(ifnull(TARGET_BOOKED_REVENUE_EX_TAX,0)),sum(ifnull(TARGET_SPEND,0))) as TARGET_BOOKED_ROAS_EX_TAX ,sum(ifnull(TARGET_INVOICE_AMOUNT_EX_TAX,0)) TARGET_INVOICE_AMOUNT_EX_TAX ,sum(ifnull(TARGET_RETURN_VALUE,0)) TARGET_RETURN_VALUE ,div0(sum(ifnull(TARGET_DELIVERED_REVENUE,0)),sum(ifnull(TARGET_INVOICE_AMOUNT_EX_TAX,0))) as TARGET_DISPATCH2DELIVER from ( SELECT MONTH_START_DATE , \"\'Booked Revenue\'\" TARGET_BOOKED_REVENUE , \"\'No of Orders\'\" TARGET_TOTAL_ORDERS , \"\'Spend\'\" TARGET_SPEND ,\"\'Delivered Revenue\'\" TARGET_DELIVERED_REVENUE ,\"\'Retention\'\" TARGET_RETENTION ,\"\'Users\'\" TARGET_USERS ,\"\'Traffic\'\" TARGET_TRAFFIC ,\"\'Booked Revenue Ex Tax\'\" TARGET_BOOKED_REVENUE_EX_TAX ,\"\'Dispatched Revenue\'\" TARGET_INVOICE_AMOUNT_EX_TAX ,\"\'Return amount\'\" TARGET_RETURN_VALUE FROM cte_targets PIVOT( SUM(TARGET) FOR METRICS IN (\'Booked Revenue\', \'No of Orders\', \'Spend\',\'Delivered Revenue\',\'Retention\',\'Users\',\'Traffic\', \'Booked Revenue Ex Tax\', \'Dispatched Revenue\', \'Return amount\') ) AS P ORDER BY MONTH_START_DATE) group by MONTH_START_DATE order by 1 desc; CREATE or REPLACE TABLE RPSG_DB.MAPLEMONK.EXEUCTIVE_SNAPSHOT_DRV as select * from ( select a.* ,sum(ifnull(a.traffic,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row)*(datediff(day,date_trunc(\'month\',a.date),last_day(a.date))+1)/day(a.date) as Traffic_Trend ,sum(ifnull(a.NONBRANDINGUSERS,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row)*(datediff(day,date_trunc(\'month\',a.date),last_day(a.date))+1)/day(a.date) as Non_Branding_Users_Trend ,sum(ifnull(a.NonBrandingTraffic,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row)*(datediff(day,date_trunc(\'month\',a.date),last_day(a.date))+1)/day(a.date) as Non_Branding_Traffic_Trend ,sum(ifnull(a.NonBrandingEngagedTraffic,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row)*(datediff(day,date_trunc(\'month\',a.date),last_day(a.date))+1)/day(a.date) as Non_Branding_Engaged_Traffic_Trend ,sum(ifnull(a.total_sales,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row)*(datediff(day,date_trunc(\'month\',a.date),last_day(a.date))+1)/day(a.date) as Total_Sales_Trend ,sum(ifnull(a.total_sales/(1+0.13),0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row)*(datediff(day,date_trunc(\'month\',a.date),last_day(a.date))+1)/day(a.date) as Total_Sales_Excl_Tax_Trend ,sum(ifnull(a.total_orders,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row)*(datediff(day,date_trunc(\'month\',a.date),last_day(a.date))+1)/day(a.date) as Total_Orders_Trend ,sum(ifnull(a.Realised_orders,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row)*(datediff(day,date_trunc(\'month\',a.date),last_day(a.date))+1)/day(a.date) as Realised_Orders_Trend ,C.TARGET_B2D*sum(ifnull(a.total_sales,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row)*(datediff(day,date_trunc(\'month\',a.date),last_day(a.date))+1)/day(a.date) as Delivered_Revenue_Trend ,sum(ifnull(a.realised_revenue,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row)*(datediff(day,date_trunc(\'month\',a.date),last_day(a.date))+1)/day(a.date) as Realised_Revenue_Trend ,sum(ifnull(a.Invoice_Amount_Excl_Tax,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row)*(datediff(day,date_trunc(\'month\',a.date),last_day(a.date))+1)/day(a.date) as Invoice_Revenue_Ex_Tax_Trend ,sum(ifnull(a.Return_Value,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row)*(datediff(day,date_trunc(\'month\',a.date),last_day(a.date))+1)/day(a.date) as Return_Value_Trend ,Total_Sales_Excl_Tax_Trend*0.92 - Return_Value_Trend as Delivered_Shopify_Revenue_Trend ,sum(ifnull(a.MARKETING_SPEND,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row)*(datediff(day,date_trunc(\'month\',a.date),last_day(a.date))+1)/day(a.date) as MARKETING_SPEND_Trend ,sum(ifnull(a.traffic,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row) Traffic_MTD ,sum(ifnull(a.NonBrandingUsers,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row) Non_Branding_USERS_MTD ,sum(ifnull(a.NonBrandingTraffic,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row) Non_Branding_Traffic_MTD ,sum(ifnull(a.NonBrandingEngagedTraffic,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row) Non_Branding_Engaged_Traffic_MTD ,sum(ifnull(a.repeat_customer_revenue,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row) Repeat_Customer_Revenue_MTD ,sum(ifnull(a.total_sales,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row) Total_Sales_MTD ,sum(ifnull(a.total_sales/(1+0.13),0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row) Total_Sales_Excl_Tax_MTD ,sum(ifnull(a.total_orders,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row) Total_Orders_MTD ,sum(ifnull(a.delivered_revenue,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row) Total_Delivered_Revenue_MTD ,sum(ifnull(a.realised_revenue,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row) Total_Realised_Revenue_MTD ,sum(ifnull(a.Invoice_Amount_Excl_Tax,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row) Total_Invoice_Revenue_Ex_Tax_MTD ,sum(ifnull(a.Return_Value,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row) Total_Return_Ex_Tax_MTD ,Total_Sales_Excl_Tax_MTD*0.92 - Total_Return_Ex_Tax_MTD as Delivered_Shopify_Revenue_MTD ,sum(ifnull(a.total_tax,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row) Tax_MTD ,sum(ifnull(a.MARKETING_SPEND,0)) over (partition by month(a.date),year(a.date) order by a.date asc rows between unbounded preceding and current row) Marketing_Spend_MTD ,b.Overall_L3M_Customers_Retained Overall_L3M_Customers_Retained ,b.Overall_L6M_Customers_Retained Overall_L6M_Customers_Retained ,b.Overall_L12M_Customers_Retained Overall_L12M_Customers_Retained ,C.TARGET_BOOKED_REVENUE ,C.TARGET_TOTAL_ORDERS ,C.TARGET_AOV ,C.TARGET_MARKETING_SPEND ,C.TARGET_DELIVERED_REVENUE ,C.TARGET_BOOKED_ROAS ,C.TARGET_DELIVERED_ROAS ,C.TARGET_B2D ,C.TARGET_RETENTION_REVENUE ,C.TARGET_TRAFFIC ,C.TARGET_USERS ,C.TARGET_CONVERSION ,C.TARGET_BOOKED_REVENUE_EX_TAX ,C.TARGET_B2D_EX_Tax ,C.TARGET_BOOKED_ROAS_EX_TAX ,C.TARGET_INVOICE_AMOUNT_EX_TAX ,C.TARGET_RETURN_VALUE ,C.TARGET_DISPATCH2DELIVER ,case when C.TARGET_TRAFFIC =0 then 0 else TRAFFIC_TREND/C.TARGET_TRAFFIC end as Traffic_Trend_VS_Target ,case when C.TARGET_USERS =0 then 0 else Non_Branding_USERS_Trend/C.TARGET_USERS end as Non_Branding_USERS_Trend_VS_Target ,case when C.TARGET_TRAFFIC =0 then 0 else Non_Branding_Traffic_Trend/C.TARGET_TRAFFIC end as Non_Branding_Traffic_Trend_VS_Target ,case when C.TARGET_TOTAL_ORDERS =0 then 0 else Total_Orders_Trend/C.TARGET_TOTAL_ORDERS end as ORDERS_TREND_VS_Target ,case when C.TARGET_BOOKED_REVENUE =0 then 0 else ifnull(Total_Sales_Trend,0)/C.TARGET_BOOKED_REVENUE end as BOOKED_REVENUE_TREND_VS_Target ,case when C.TARGET_BOOKED_REVENUE_EX_TAX =0 then 0 else ifnull(Total_Sales_Excl_Tax_Trend,0)/C.TARGET_BOOKED_REVENUE_EX_TAX end as BOOKED_REVENUE_EX_TAX_TREND_VS_Target ,case when C.TARGET_INVOICE_AMOUNT_EX_TAX =0 then 0 else ifnull(Total_Invoice_Revenue_Ex_Tax_MTD,0)/C.TARGET_INVOICE_AMOUNT_EX_TAX end as INVOICE_AMOUNT_EX_TAX_TREND_VS_Target ,case when C.TARGET_INVOICE_AMOUNT_EX_TAX =0 then 0 else ifnull(Total_Sales_Excl_Tax_Trend*0.92,0)/C.TARGET_INVOICE_AMOUNT_EX_TAX end as DISPATCHED_SHOPIFY_TREND_VS_Target ,case when C.TARGET_DELIVERED_REVENUE =0 then 0 else ifnull(Realised_Revenue_Trend,0)/C.TARGET_DELIVERED_REVENUE end as DELIVERED_SHOPIFY_TREND_VS_Target ,case when C.TARGET_RETURN_VALUE =0 then 0 else ifnull(Return_Value_Trend,0)/C.TARGET_RETURN_VALUE end as Total_Return_Ex_Tax_MTD_TREND_VS_Target ,case when C.TARGET_DELIVERED_REVENUE =0 then 0 else ifnull(Delivered_Revenue_Trend,0)/C.TARGET_DELIVERED_REVENUE end as DELIVERED_REVENUE_TREND_VS_Target ,case when C.TARGET_MARKETING_SPEND =0 then 0 else MARKETING_SPEND_Trend/C.TARGET_MARKETING_SPEND end as MARKETING_SPEND_TREND_VS_Target ,case when Total_Orders_Trend=0 then 0 else (ifnull(Total_Sales_Trend,0)/Total_Orders_Trend)/C.TARGET_AOV end as AOV_TREND_VS_TARGET ,case when Total_Orders_Trend=0 then 0 else (ifnull(Total_Sales_Excl_Tax_Trend,0)/Total_Orders_Trend)/C.TARGET_AOV end as AOV_Ex_Tax_TREND_VS_TARGET ,case when TRAFFIC_TREND=0 then 0 else (Total_Orders_Trend/TRAFFIC_TREND)/C.TARGET_CONVERSION end as CONVERSION_TREND_VS_TARGET ,case when Non_Branding_Traffic_Trend=0 then 0 else (Total_Orders_Trend/Non_Branding_Traffic_Trend)/C.TARGET_CONVERSION end as NBU_CONVERSION_TREND_VS_TARGET ,case when Total_Sales_Trend=0 then 0 else (Realised_Revenue_Trend/Total_Sales_Trend)/C.TARGET_B2D end as B2D_TREND_VS_TARGET ,case when Total_Sales_Trend=0 then 0 else (Realised_Revenue_Trend/Total_Sales_Trend)/C.TARGET_B2D end as B2Dispatch_TREND_VS_TARGET ,div0(div0(Realised_Revenue_Trend,Total_Sales_Excl_Tax_Trend),C.TARGET_B2D_EX_Tax) as B2Dispatch_Ex_Tax_TREND_VS_TARGET ,div0(div0(Realised_Revenue_Trend,(Total_Sales_Excl_Tax_Trend*0.92)),C.TARGET_DISPATCH2DELIVER) Dispatch2DELIVER_TREND_VS_TARGET ,div0(div0(Total_Sales_Trend,MARKETING_SPEND_Trend),C.TARGET_BOOKED_ROAS) BOOKED_ROAS_TREND_VS_TARGET ,div0(div0(Total_Sales_Excl_Tax_Trend,MARKETING_SPEND_Trend),C.TARGET_BOOKED_ROAS_EX_TAX) BOOKED_ROAS_EX_TAX_TREND_VS_TARGET ,div0(div0(Realised_Revenue_Trend,MARKETING_SPEND_Trend),C.TARGET_DELIVERED_ROAS) DELIVERED_ROAS_TREND_VS_TARGET ,div0(Realised_Revenue_Trend,C.TARGET_DELIVERED_REVENUE) Realised_Revenue_TREND_VS_TARGET from (select date, sum(Total_Sales) TOTAL_SALES, sum(repeat_Realised_Revenue) repeat_Realised_Revenue, sum(booked_repeat_Realised_Revenue) booked_repeat_Realised_Revenue, sum(Total_Sales/1.13) TOTAL_SALES_EX_TAX, sum(TOTAL_SALES_EXCL_CANCL) TOTAL_SALES_EXCL_CANCL, sum(Total_Orders) TOTAL_ORDERS, sum(Orders_EXCL_CANCL) ORDERS_EXCL_CANCL, sum(New_Customer_Orders) NEW_CUSTOMER_ORDERS, sum(New_Customer_Orders_EXCL_CANCL) NEW_CUSTOMER_ORDERS_EXCL_CANCL, sum(Total_New_Customers) TOTAL_NEW_CUSTOMERS, sum(New_Customers_EXCL_CANCL) NEW_CUSTOMERS_EXCL_CANCL, sum(TOTAL_Unique_Customers) TOTAL_UNIQUE_CUSTOMERS, sum(Unique_Customers_EXCL_CANCL) UNIQUE_CUSTOMERS_EXCL_CANCL, sum(Repeat_Customers) REPEAT_CUSTOMERS, sum(Repeat_Customers_EXCL_CANCL) REPEAT_CUSTOMERS_EXCL_CANCL, sum(TOTAL_DISCOUNT) TOTAL_DISCOUNT, sum(TOTAL_DISCOUNT_EXCL_CANCL) TOTAL_DISCOUNT_EXCL_CANCL, sum(TOTAL_TAX) TOTAL_TAX, sum(TAX_EXCL_CANCL) TAX_EXCL_CANCL, sum(TOTAL_SHIPPING_PRICE) TOTAL_SHIPPING_PRICE, sum(SHIPPING_PRICE_EXCL_CANCL) SHIPPING_PRICE_EXCL_CANCL, sum(New_Customer_DISCOUNT) NEW_CUSTOMER_DISCOUNT, sum(New_Customer_Discount_EXCL_CANCL) NEW_CUSTOMER_DISCOUNT_EXCL_CANCL, sum(TOTAL_QUANTITY) TOTAL_QUANTITY, sum(QUANTITY_EXCL_CANCL) QUANTITY_EXCL_CANCL, sum(Return_Quantity) RETURN_QUANTITY, sum(Return_Value) RETURN_VALUE, sum(Cancelled_Orders) CANCELLED_ORDERS, sum(return_orders) return_orders, sum(Net_Orders) NET_ORDERS, sum(Delivered_Orders) DELIVERED_ORDERS, sum(Delivered_Revenue) DELIVERED_REVENUE, sum(Dispatched_Orders) DISPATCHED_ORDERS, sum(Realised_Orders) Realised_Orders, sum(Dispatched_Revenue) DISPATCHED_REVENUE, sum(INVOICE_AMOUNT_EXCL_TAX) Invoice_Amount_Excl_Tax, sum(Realised_Revenue) REALISED_REVENUE, sum(marketing_spend) MARKETING_SPEND, sum(Traffic) TRAFFIC, sum(NonBrandingUsers) NonBrandingUsers, sum(NonBrandingTraffic) NonBrandingTraffic, sum(NonBrandingEngagedTraffic) NonBrandingEngagedTraffic, sum(Repeat_Customer_Revenue) REPEAT_CUSTOMER_REVENUE, sum(MC_MP_Customer_Till_Date) CUSTOMER_TILL_DATE, sum(MC_MP_Sales_Till_Date) SALES_TILL_DATE, sum(MC_MP_L3M_NEW_CUSTOMERS) L3M_NEW_CUSTOMERS, sum(MC_MP_L6M_NEW_CUSTOMERS) L6M_NEW_CUSTOMERS, sum(MC_MP_L12M_NEW_CUSTOMERS) L12M_NEW_CUSTOMERS from RPSG_DB.MAPLEMONK.Sales_Cost_Source_DRV group by 1 order by 1 desc) a left join (select order_date::date date ,count(case when date_trunc(\'month\',acquisition_date)>=dateadd(month,-3,date_trunc(\'month\',order_date)) and date_trunc(\'month\',acquisition_date)<date_trunc(\'month\',order_date) then customer_id_final end) Overall_L3M_Customers_Retained ,count(case when date_trunc(\'month\',acquisition_date)>=dateadd(month,-6,date_trunc(\'month\',order_date)) and date_trunc(\'month\',acquisition_date)<date_trunc(\'month\',order_date) then customer_id_final end) Overall_L6M_Customers_Retained ,count(case when date_trunc(\'month\',acquisition_date)>=dateadd(month,-12,date_trunc(\'month\',order_date)) and date_trunc(\'month\',acquisition_date)<date_trunc(\'month\',order_date) then customer_id_final end) Overall_L12M_Customers_Retained from RPSG_DB.MAPLEMONK.SALES_CONSOLIDATED_DRV where lower(shop_name) like any (\'%shopify%\', \'%woocommerce%\') group by 1 order by 1 desc) b on a.date=b.date left join RPSG_DB.MAPLEMONK.TARGETS c on date_trunc(\'month\',a.date)=c.MONTH_START_DATE ); Create or replace table RPSG_DB.MAPLEMONK.Product_SUMMARY_DRV as with invoicedatemetrics as ( select try_to_date(FI.invoice_date) Invoice_Date ,upper(PRODUCT_NAME_MAPPED) product_name_mapped ,upper(CATEGORY) category ,upper(FI.pre_final_channel) Channel ,upper(FI.SHOP_NAME) shop_name ,sum(ifnull((case when lower(order_status) not in (\'cancelled\') then ifnull(FI.SELLING_PRICE,0)-ifnull(FI.TAX,0) end),0)) Realised_Revenue from RPSG_DB.MAPLEMONK.SALES_CONSOLIDATED_DRV FI where lower(marketplace) like any (\'%shopify%\', \'%woocommerce%\') and invoice_date !=\'\' group by 1,2,3,4,5 order by 1 desc ), returnsales as ( select return_date::date return_date ,upper(channel) channel ,upper(case when marketplace_id in (\'177\',\'180\') then \'Shopify_AyurvedicSource\' when marketplace_id in (\'26\') then \'Shopify_DRV\' when marketplace_id in (\'179\') then \'Shopify_Herbobuild\' else marketplace end) as shop_name ,upper(product_name_mapped) PRODUCT_NAME_MAPPED ,upper(category) CATEGORY ,sum(ifnull(TOTAL_RETURN_AMOUNT,0)) TOTAL_RETURN_AMOUNT ,sum(ifnull(RETURN_AMOUNT_WITHOUT_TAX,0)) TOTAL_RETURN_AMOUNT_EXCL_TAX ,sum(ifnull(RETURNED_QUANTITY,0)) TOTAL_RETURNED_QUANTITY from RPSG_DB.MAPLEMONK.fact_items_easyecom_returns_detailed_drv where lower(company_name) like any (\'%herbolab%\',\'%dr vaidya%\') and lower(marketplace) like any (\'%shopify%\',\'%woocommerce%\') group by 1,2,3,4,5 order by 1 desc ), orders as ( select FI.order_date::date Date ,Upper(FI.pre_final_channel) Channel ,Upper(FI.SHOP_NAME) SHOP_NAME ,Upper(FI.PRODUCT_NAME_MAPPED) PRODUCT_NAME_MAPPED ,Upper(FI.CATEGORY) CATEGORY ,ifnull(sum(ifnull(FI.SELLING_PRICE,0)),0) Total_Sales ,ifnull(sum(ifnull(FI.SELLING_PRICE,0)),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.SELLING_PRICE end),0) TOTAL_SALES_EXCL_CANCL ,count(distinct FI.order_id) Total_Orders ,count(distinct FI.order_id) - count(distinct case when lower(FI.order_status) in (\'cancelled\') then FI.order_id end) Orders_EXCL_CANCL ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' then FI.order_id end)) as New_Customer_Orders ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' then FI.order_id end)) - count(distinct(case when lower(FI.new_customer_flag) = \'new\' and lower(FI.order_status) in (\'cancelled\') then FI.order_id end)) as New_Customer_Orders_EXCL_CANCL ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' then FI.customer_id_final end)) as Total_New_Customers ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' then FI.customer_id_final end)) - count(distinct(case when lower(FI.new_customer_flag) = \'new\' and lower(FI.order_status) in (\'cancelled\') and FI.return_flag = 0 then FI.customer_id_final end)) New_Customers_EXCL_CANCL ,count(distinct FI.customer_id_final) as TOTAL_Unique_Customers ,(count(distinct FI.customer_id_final) - count(distinct case when lower(FI.order_status) in (\'cancelled\') then FI.customer_id_final end)) as Unique_Customers_EXCL_CANCL ,count(distinct(case when lower(FI.new_customer_flag) = \'repeat\' then FI.customer_id_final end)) as Repeat_Customers ,(count(distinct(case when lower(FI.new_customer_flag) = \'repeat\' then FI.customer_id_final end)) - count(distinct(case when lower(FI.new_customer_flag) = \'repeat\' and lower(FI.order_status) in (\'cancelled\') and FI.return_flag = 0 then FI.customer_id_final end))) Repeat_Customers_EXCL_CANCL ,ifnull(sum(FI.discount),0) TOTAL_DISCOUNT ,(ifnull(sum(FI.discount),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.discount end),0)) TOTAL_DISCOUNT_EXCL_CANCL ,ifnull(sum(FI.tax),0) TOTAL_TAX ,(ifnull(sum(FI.tax),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.tax end),0)) TAX_EXCL_CANCL ,ifnull(sum(FI.shipping_price),0) TOTAL_SHIPPING_PRICE ,(ifnull(sum(FI.shipping_price),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.shipping_price end),0)) SHIPPING_PRICE_EXCL_CANCL ,ifnull(sum(case when lower(FI.new_customer_flag) = \'new\' then FI.discount end),0) as New_Customer_Discount ,(ifnull(sum(case when lower(FI.new_customer_flag) = \'new\' then FI.discount end),0) - ifnull(sum(case when lower(FI.new_customer_flag) = \'new\' and lower(order_status) in (\'cancelled\') then FI.discount end),0)) as New_Customer_Discount_EXCL_CANCL ,ifnull(sum(FI.suborder_quantity),0) TOTAL_QUANTITY ,(ifnull(sum(FI.suborder_quantity),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.suborder_quantity end),0)) QUANTITY_EXCL_CANCL ,ifnull(sum(case when FI.return_flag=1 then FI.suborder_quantity end),0) as Return_Quantity ,ifnull(sum(case when FI.return_flag=1 then ifnull(FI.SELLING_PRICE,0) end),0) as Return_Value ,count(distinct case when lower(order_status) in (\'cancelled\') then order_id end) Cancelled_Orders ,count(distinct case when lower(order_status) not in (\'cancelled\') and return_flag=0 then order_id end) Net_Orders ,count(distinct case when lower(final_status) in (\'delivered\') then order_id end) Delivered_Orders ,count(distinct case when lower(final_status) in (\'returned\',\'rto\') or lower(final_status) in (\'returned\',\'rto\') then order_id end) Returned_Orders ,count(distinct case when manifest_date is not null and lower(order_status) not in (\'cancelled\') then order_id end) Dispatched_Orders ,Orders_EXCL_CANCL - Returned_Orders as Realised_Orders ,ifnull(sum(case when lower(final_status) in (\'delivered\') then ifnull(FI.SELLING_PRICE,0)-ifnull(FI.TAX,0) end),0) Delivered_Revenue ,ifnull(sum(case when lower(final_status) in (\'returned\',\'rto\') or lower(final_status) in (\'returned\',\'rto\') then ifnull(FI.SELLING_PRICE,0)-ifnull(FI.TAX,0) end),0) Returned_Revenue ,ifnull(sum(case when manifest_date is not null and lower(order_status) not in (\'cancelled\') then ifnull(FI.SELLING_PRICE,0) end),0) Dispatched_Revenue ,count(case when date_trunc(\'month\',acquisition_date)>=dateadd(month,-3,date_trunc(\'month\',order_date)) and date_trunc(\'month\',acquisition_date)<date_trunc(\'month\',order_date) then customer_id_final end) L3M_Customers_Retained ,count(case when date_trunc(\'month\',acquisition_date)>=dateadd(month,-6,date_trunc(\'month\',order_date)) and date_trunc(\'month\',acquisition_date)<date_trunc(\'month\',order_date) then customer_id_final end) L6M_Customers_Retained ,count(case when date_trunc(\'month\',acquisition_date)>=dateadd(month,-3,date_trunc(\'month\',order_date)) and date_trunc(\'month\',acquisition_date)<date_trunc(\'month\',order_date) then customer_id_final end) L12M_Customers_Retained ,sum(case when lower(FI.new_customer_flag_month) = \'repeat\' then ifnull(FI.selling_price,0) end) Repeat_Customer_Revenue from RPSG_DB.MAPLEMONK.SALES_CONSOLIDATED_DRV FI where lower(marketplace) like any (\'%shopify%\',\'%woocommerce%\') group by 1,2,3,4,5 ) select coalesce(RO.Date, ID.invoice_date) Date, coalesce(RO.Channel, ID.Channel) as channel, coalesce(RO.Marketplace, ID.Shop_name) as Marketplace, coalesce(RO.PRODUCT_NAME_MAPPED, ID.PRODUCT_NAME_MAPPED) PRODUCT_NAME_MAPPED, coalesce(RO.CATEGORY, ID.CATEGORY) CATEGORY, Total_Sales, TOTAL_SALES/1.13 as TOTAL_SALES_EX_TAX, TOTAL_SALES_EXCL_CANCL, Total_Orders, Orders_EXCL_CANCL, New_Customer_Orders, New_Customer_Orders_EXCL_CANCL, Total_New_Customers, New_Customers_EXCL_CANCL, TOTAL_Unique_Customers, Unique_Customers_EXCL_CANCL, Repeat_Customers, Repeat_Customers_EXCL_CANCL, TOTAL_DISCOUNT, TOTAL_DISCOUNT_EXCL_CANCL, TOTAL_TAX, TAX_EXCL_CANCL, TOTAL_SHIPPING_PRICE, SHIPPING_PRICE_EXCL_CANCL, New_Customer_DISCOUNT, New_Customer_Discount_EXCL_CANCL, TOTAL_QUANTITY, QUANTITY_EXCL_CANCL, Return_Quantity, Return_Value, Cancelled_Orders, Net_Orders, Delivered_Orders, Delivered_Revenue, Dispatched_Orders, Dispatched_Revenue, Realised_Orders, ifnull(ID.Realised_Revenue,0)- ifnull(Return_Value,0) as Realised_Revenue, ifnull(ID.Realised_Revenue,0) Invoice_Amount_Excl_Tax, Repeat_Customer_Revenue from ( select coalesce(fi.Date, RS.Return_Date) as date, coalesce(FI.Channel, RS.Channel) as channel, coalesce(FI.Shop_Name, RS.Shop_name) as Marketplace, coalesce(FI.PRODUCT_NAME_MAPPED, RS.PRODUCT_NAME_MAPPED) PRODUCT_NAME_MAPPED, coalesce(FI.CATEGORY, RS.CATEGORY) CATEGORY, Total_Sales, TOTAL_SALES/1.13 as TOTAL_SALES_EX_TAX, TOTAL_SALES_EXCL_CANCL, Total_Orders, Orders_EXCL_CANCL, New_Customer_Orders, New_Customer_Orders_EXCL_CANCL, Total_New_Customers, New_Customers_EXCL_CANCL, TOTAL_Unique_Customers, Unique_Customers_EXCL_CANCL, Repeat_Customers, Repeat_Customers_EXCL_CANCL, TOTAL_DISCOUNT, TOTAL_DISCOUNT_EXCL_CANCL, TOTAL_TAX, TAX_EXCL_CANCL, TOTAL_SHIPPING_PRICE, SHIPPING_PRICE_EXCL_CANCL, New_Customer_DISCOUNT, New_Customer_Discount_EXCL_CANCL, TOTAL_QUANTITY, QUANTITY_EXCL_CANCL, RS.TOTAL_RETURNED_QUANTITY as Return_Quantity, RS.TOTAL_RETURN_AMOUNT_EXCL_TAX as Return_Value, Cancelled_Orders, Net_Orders, Delivered_Orders, Delivered_Revenue, Dispatched_Orders, Dispatched_Revenue, Realised_Orders, Repeat_Customer_Revenue from orders FI full outer join returnsales RS on RS.return_date = FI.date and lower(RS.Channel) = lower(FI.Channel) and lower(RS.Shop_name)=lower(FI.Shop_name) and lower(RS.CATEGORY) = lower(FI.CATEGORY) and lower(RS.PRODUCT_NAME_MAPPED) = lower(FI.PRODUCT_NAME_MAPPED) ) RO full outer join invoicedatemetrics ID on ID.invoice_date = RO.date and lower(ID.Channel)=lower(RO.Channel) and lower(ID.Shop_name)=lower(RO.Marketplace) and lower(ID.CATEGORY) = lower(RO.CATEGORY) and lower(ID.PRODUCT_NAME_MAPPED) = lower(RO.PRODUCT_NAME_MAPPED);",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from RPSG_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        