{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table snitch_db.maplemonk.pricing_recommendation as WITH ChannelPricing AS ( SELECT channel_wise_pricing.SKU_GROUP, product_name, SKU_CLASS, product_id, link, handle, SUM(ajio_sales) AS ajio_sales, SUM(ajio_units_sold) AS ajio_units_sold, COALESCE(SUM(ajio_sales) / NULLIF(SUM(ajio_units_sold), 0), 0) AS ajio_asp, SUM(fk_sales) AS fk_sales, SUM(fk_units_sold) AS fk_units_sold, COALESCE(SUM(fk_sales) / NULLIF(sum(fk_units_sold), 0), 0) AS fk_asp, SUM(shopify_sales) AS shopify_sales, SUM(shopify_units_sold) AS shopify_units_sold, COALESCE(sum(shopify_sales) / NULLIF(SUM(shopify_units_sold), 0), 0) AS shopify_asp, SUM(jayanagar_sales) AS jayanagar_sales, SUM(jayanagar_units_sold) AS jayanagar_units_sold, COALESCE(sum(jayanagar_sales) / NULLIF(SUM(jayanagar_units_sold), 0), 0) AS jayanagar_asp, SUM(myntra_sales) AS myntra_sales, SUM(myntra_units_sold) AS myntra_units_sold, COALESCE(SUM(myntra_sales) / NULLIF(SUM(myntra_units_sold), 0), 0) AS myntra_asp, available_units FROM snitch_db.maplemonk.channel_wise_pricing LEFT JOIN (SELECT product_id, sku_group, handle, concat(\'https://www.snitch.co.in/products/\',handle) as link, ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY product_id) AS row_num FROM snitch_db.snitch.product_dim GROUP BY product_id, sku_group, handle, link) product_dimension on channel_wise_pricing.sku_group=product_dimension.sku_group where order_date < current_date - interval \'45 days\' group by channel_wise_pricing.SKU_GROUP, SKU_CLASS, available_units, product_name, product_id, link, handle ) SELECT *, ( CASE WHEN SKU_CLASS = \'1-Head\' OR SKU_CLASS = \'4-New\' THEN CASE WHEN (AJIO_ASP = 0 OR SHOPIFY_ASP <= AJIO_ASP) AND (FK_ASP = 0 OR SHOPIFY_ASP <= FK_ASP) AND (MYNTRA_ASP = 0 OR SHOPIFY_ASP <= MYNTRA_ASP) THEN \'Do nothing\' ELSE \'Increase Marketplace Pricing\' END ELSE CASE WHEN SKU_CLASS IN (\'2-Belly\', \'3-Tail\') THEN CASE WHEN SHOPIFY_UNITS_SOLD + AJIO_UNITS_SOLD + FK_UNITS_SOLD + MYNTRA_UNITS_SOLD < 90 AND AVAILABLE_UNITS > 400 THEN \'Drop Overall Pricing\' WHEN ajio_sales = GREATEST(SHOPIFY_sales, AJIO_sales, FK_sales, MYNTRA_sales) THEN CASE WHEN AJIO_ASP <> LEAST(CASE WHEN SHOPIFY_ASP = 0 THEN 999999 ELSE SHOPIFY_ASP END, CASE WHEN AJIO_ASP = 0 THEN 999999 ELSE AJIO_ASP END, CASE WHEN FK_ASP = 0 THEN 999999 ELSE FK_ASP END, CASE WHEN MYNTRA_ASP = 0 THEN 999999 ELSE MYNTRA_ASP END) THEN \'Decrease Ajio Pricing\' ELSE \'Do nothing\' END WHEN SHOPIFY_sales = GREATEST(SHOPIFY_sales, AJIO_sales, FK_sales, MYNTRA_sales) THEN CASE WHEN SHOPIFY_ASP <> LEAST(CASE WHEN SHOPIFY_ASP = 0 THEN 999999 ELSE SHOPIFY_ASP END, CASE WHEN AJIO_ASP = 0 THEN 999999 ELSE AJIO_ASP END, CASE WHEN FK_ASP = 0 THEN 999999 ELSE FK_ASP END, CASE WHEN MYNTRA_ASP = 0 THEN 999999 ELSE MYNTRA_ASP END) THEN \'Decrease Shopify Pricing OR Increase marketplace pricing\' ELSE \'Do nothing\' END WHEN FK_sales = GREATEST(SHOPIFY_sales, AJIO_sales, FK_sales, MYNTRA_sales) THEN CASE WHEN FK_ASP <> LEAST(CASE WHEN SHOPIFY_ASP = 0 THEN 999999 ELSE SHOPIFY_ASP END, CASE WHEN AJIO_ASP = 0 THEN 999999 ELSE AJIO_ASP END, CASE WHEN FK_ASP = 0 THEN 999999 ELSE FK_ASP END, CASE WHEN MYNTRA_ASP = 0 THEN 999999 ELSE MYNTRA_ASP END) THEN \'Decrease Flipkart Pricing\' ELSE \'Do nothing\' END WHEN MYNTRA_sales = GREATEST(SHOPIFY_sales, AJIO_sales, FK_sales, MYNTRA_sales) THEN CASE WHEN MYNTRA_ASP <> LEAST(CASE WHEN SHOPIFY_ASP = 0 THEN 999999 ELSE SHOPIFY_ASP END, CASE WHEN AJIO_ASP = 0 THEN 999999 ELSE AJIO_ASP END, CASE WHEN FK_ASP = 0 THEN 999999 ELSE FK_ASP END, CASE WHEN MYNTRA_ASP = 0 THEN 999999 ELSE MYNTRA_ASP END) THEN \'Decrease Myntra Pricing\' ELSE \'Do nothing\' END ELSE \'Do nothing\' END ELSE \'Do nothing\' END END ) AS Recommendation, ( LEAST( CASE WHEN SHOPIFY_ASP = 0 THEN 999999 ELSE SHOPIFY_ASP END, CASE WHEN AJIO_ASP = 0 THEN 999999 ELSE AJIO_ASP END, CASE WHEN FK_ASP = 0 THEN 999999 ELSE FK_ASP END, CASE WHEN MYNTRA_ASP = 0 THEN 999999 ELSE MYNTRA_ASP END ) ) AS Min_ASP, ( GREATEST( SHOPIFY_ASP, AJIO_ASP, FK_ASP, MYNTRA_ASP ) ) AS Max_ASP, ( CASE WHEN SHOPIFY_ASP = Min_ASP THEN \'Shopify\' WHEN AJIO_ASP = Min_ASP THEN \'Ajio\' WHEN FK_ASP = Min_ASP THEN \'Flipkart\' WHEN MYNTRA_ASP = Min_ASP THEN \'Myntra\' ELSE \'None\' END ) AS ChannelWithMinASP, ( CASE WHEN SHOPIFY_ASP = Max_ASP THEN \'Shopify\' WHEN AJIO_ASP = Max_ASP THEN \'Ajio\' WHEN FK_ASP = Max_ASP THEN \'Flipkart\' WHEN MYNTRA_ASP = Max_ASP THEN \'Myntra\' ELSE \'None\' END ) AS ChannelWithMaxASP FROM ChannelPricing order by available_units desc",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from snitch_db.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        