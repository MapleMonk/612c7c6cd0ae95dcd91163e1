{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table rubans_db.maplemonk.rubans_db_product_catalogue_factitems as select rp2.*, cl.editor, cl.photographer, case when D_CODE = \'S111111\' then \'READY_TO_GO_LIVE\' when D_CODE = \'P111111\' then \'INVENTORY_YET_TO_RECIEVE\' when D_CODE = \'N111111\' then \'PO_PENDING\' when upper(photographer)!=\'NOTHING FOR PHOTOGRAPHER\' then \'PHOTOSHOOT_PENDING\' when upper(editor) != \'NOTHING FOR EDITOR\' then \'EDITING_PENDING\' else \'NULL\' end as WORK_STATUS from (select FIRSTCODE as Product_Code, CATEGORYCODE, PRODUCTCATEGORY, FIRSTCODESTATUS, Try_TO_TIMESTAMP(left(FIRSTCODECREATEDTIME,24),\'Dy Mon DD YYYY HH24:MI:SS\') as updatedfirstcodecreatedtime , COSTPRICE_AIBYTE_TRANSFORM as costprice, SAMPLEQUANTITY, stock, ifnull(try_cast(BUYERPOQUANTITY_AIBYTE_TRANSFORM as int),0) as BUYERPOQUANTITY, vendorname_aibyte_transform as vendorName, ifnull(try_cast(mrp_aibyte_transform as int),0) as mrp, ifnull(try_cast(sellingprice_aibyte_transform as int),0) as sellingprice, ifnull(try_cast(poqty_aibyte_transform as int),0) as poQuantity, PRICINGSTATUS, case when COALESCE(ponumber,\'0\')=\'\' then \'0\' else COALESCE(ponumber,\'0\') end as ponumber, case when lower(BUYERSTATUS)=\'completed\' or lower(BUYERSTATUS)=\'pending\' then BUYERSTATUS else null end as buyerstatus , BUYERREMARKS, PRODUCTSHOOTSTATUS , PRODUCTSHOOTPHOTO, Try_TO_TIMESTAMP(left(productshootstarttime,24),\'Dy Mon DD YYYY HH24:MI:SS\')as updatedproductshootstarttime, Try_TO_TIMESTAMP(left(productshootendtime,24),\'Dy Mon DD YYYY HH24:MI:SS\') as updatedproductshootendtime, MODELSHOOTSTATUS, MODELSHOOTPHOTO, Try_TO_TIMESTAMP(left(modelshootstarttime,24),\'Dy Mon DD YYYY HH24:MI:SS\') as updatedmodelshootstarttime, Try_TO_TIMESTAMP(left(modelshootendtime,24),\'Dy Mon DD YYYY HH24:MI:SS\')as updatedmodelshootendtime, MOODSHOOTSTATUS, MOODSHOOTPHOTO, Try_TO_TIMESTAMP(left(moodshootstarttime,24),\'Dy Mon DD YYYY HH24:MI:SS\') as updatedmoodshootstarttime, Try_TO_TIMESTAMP(left(moodshootendtime,24),\'Dy Mon DD YYYY HH24:MI:SS\') as updatedmoodshootendtime, case when lower(PRODUCTSHOOTTOEDITORSTATUS) = \'completed\' then \'COMPLETED\' else \'PENDING\' end as PRODUCTSHOOTTOEDITORSTATUS, Try_TO_TIMESTAMP(left(productshootedittoqcstarttime,24),\'Dy Mon DD YYYY HH24:MI:SS\')as updatedproductshootedittoqcstarttime, Try_TO_TIMESTAMP(left(productshootedittoqcendtime,24),\'Dy Mon DD YYYY HH24:MI:SS\') as updatedproductshootedittoqcendtime, case when lower(MODELSHOOTTOEDITORSTATUS) = \'completed\' then \'COMPLETED\' else \'PENDING\' end as MODELSHOOTTOEDITORSTATUS, Try_TO_TIMESTAMP(left(modelshootedittoqcstarttime,24),\'Dy Mon DD YYYY HH24:MI:SS\') as updatedmodelshootedittoqcstarttime, Try_TO_TIMESTAMP(left(modelshootedittoqcendtime,24),\'Dy Mon DD YYYY HH24:MI:SS\') as updatedmodelshootedittoqcendtime, case when lower(MOODSHOOTTOEDITORSTATUS) = \'completed\' then \'COMPLETED\' else \'PENDING\' end as MOODSHOOTTOEDITORSTATUS, Try_TO_TIMESTAMP(left(moodshootedittoqcstarttime,24),\'Dy Mon DD YYYY HH24:MI:SS\') as updatedmoodshootedittoqcstarttime, Try_TO_TIMESTAMP(left(moodshootedittoqcendtime,24),\'Dy Mon DD YYYY HH24:MI:SS\') as updatedmoodshootedittoqcendtime, case when stock>0 then \'S\' when BUYERPOQUANTITY>0 then \'P\' else \'N\' end as status, CONCAT(status, CASE WHEN lower(PRODUCTSHOOTSTATUS)=lower(\'completed\') THEN \'1\' ELSE \'0\' END, CASE WHEN LOWER(MODELSHOOTSTATUS)=lower(\'completed\') THEN \'1\' ELSE \'0\' END, CASE WHEN LOWER(MOODSHOOTSTATUS)=lower(\'completed\') THEN \'1\' ELSE \'0\' END, CASE WHEN LOWER(PRODUCTSHOOTTOEDITORSTATUS)=lower(\'completed\') THEN \'1\' ELSE \'0\' END, CASE WHEN LOWER(MODELSHOOTTOEDITORSTATUS)=lower(\'completed\') THEN \'1\' ELSE \'0\' END, CASE WHEN LOWER(MOODSHOOTTOEDITORSTATUS)=lower(\'completed\') THEN \'1\' ELSE \'0\' END ):: varchar AS D_CODE, case when status=\'S\' then \'OK\' when status = \'N\' and sellingprice > 0 then \'WHY THERE IS NO PO\' else \'AWAITING PRICE TO RAISE THE PO?\' end as PO_STATUS, case when D_CODE = \'S111111\' then \'WHY ITS NOT LIVE?\' else \'PENDING WORK\' end as GO_LIVE, datediff(\'hour\',updatedfirstcodecreatedtime , coalesce(updatedproductshootendtime,CONVERT_TIMEZONE(\'Asia/Kolkata\', CURRENT_TIMESTAMP()))) as timetoproductshoot, datediff(\'hour\',updatedfirstcodecreatedtime , coalesce(updatedmodelshootendtime,CONVERT_TIMEZONE(\'Asia/Kolkata\', CURRENT_TIMESTAMP()))) as timetomodelshoot, datediff(\'hour\',updatedfirstcodecreatedtime , coalesce(updatedmoodshootendtime,CONVERT_TIMEZONE(\'Asia/Kolkata\', CURRENT_TIMESTAMP()))) as timetomoodshoot, datediff(\'hour\',updatedfirstcodecreatedtime , coalesce(updatedproductshootedittoqcendtime,CONVERT_TIMEZONE(\'Asia/Kolkata\', CURRENT_TIMESTAMP()))) as timetoproductedit, datediff(\'hour\',updatedfirstcodecreatedtime , coalesce(updatedmodelshootedittoqcendtime,CONVERT_TIMEZONE(\'Asia/Kolkata\', CURRENT_TIMESTAMP()))) as timetomodeledit, datediff(\'hour\',updatedfirstcodecreatedtime , coalesce(updatedmoodshootedittoqcendtime,CONVERT_TIMEZONE(\'Asia/Kolkata\', CURRENT_TIMESTAMP()))) as timetomoodedit, case when D_CODE = \'S111111\' then datediff(\'hour\',updatedfirstcodecreatedtime , coalesce(Try_TO_TIMESTAMP(left(CATALOGENDTIME,24),\'Dy Mon DD YYYY HH24:MI:SS\'),CONVERT_TIMEZONE(\'Asia/Kolkata\', CURRENT_TIMESTAMP()))) end as timetocatalogue , datediff(\'hour\',updatedfirstcodecreatedtime , coalesce(Try_TO_TIMESTAMP(left(CATALOGENDTIME,24),\'Dy Mon DD YYYY HH24:MI:SS\'),CONVERT_TIMEZONE(\'Asia/Kolkata\', CURRENT_TIMESTAMP()))) as timetilldate , _AIRBYTE_EMITTED_AT as sync_date, CATALOGSTATUS from rubans_db.maplemonk.cloud_rubansproductschema2 ) rp2 left join ( select photographer, editor, dcode from rubans_db.maplemonk.catalog_mapping ) cl on cl.dcode = rp2.D_CODE;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from rubans_db.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        