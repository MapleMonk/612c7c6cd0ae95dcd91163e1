{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "Create or replace table Gynoveda_DB.MAPLEMONK.Sales_Cost_CustomerType as with cost as ( select date, sum(spend) as cost from Gynoveda_DB.MAPLEMONK.MARKETING_CONSOLIDATED group by 1 order by 1 desc ), month_level_sales as ( select date_trunc(\'month\',order_timestamp::date) as month ,count(distinct case when new_customer_flag = \'New\' then order_id end) as orders_all_new_prev_month ,count(distinct case when new_customer_flag = \'Repeated\' then order_id end) as orders_all_Repeated_prev_month ,count(distinct case when sku like \'%&%\' then order_id when right(sku,1) in (\'2\',\'3\',\'4\',\'5\',\'6\',\'7\',\'8\',\'9\') and new_customer_flag = \'New\' then order_id end ) as orders_combo_new_prev_month ,count(distinct case when sku like \'%&%\' then order_id when right(sku,1) in (\'2\',\'3\',\'4\',\'5\',\'6\',\'7\',\'8\',\'9\') and new_customer_flag = \'Repeated\' then order_id end ) as orders_combo_Repeated_prev_month ,sum(case when new_customer_flag = \'New\' then line_item_sales end) as gross_sales_new_prev_month ,sum(case when new_customer_flag = \'Repeated\' then line_item_sales end) as gross_sales_Repeated_prev_month ,sum(case when new_customer_flag = \'New\' then DISCOUNT end) as discount_new_prev_month ,sum(case when new_customer_flag = \'Repeated\' then DISCOUNT end) as discount_Repeated_prev_month ,sum(case when new_customer_flag = \'New\' then NET_SALES end) as net_sales_new_prev_month ,sum(case when new_customer_flag = \'Repeated\' then NET_SALES end) as net_sales_Repeated_prev_month from Gynoveda_db.maplemonk.FACT_ITEMS a group by 1 ) select *, sum(net_sales_new)over(partition by year(order_date),month(order_date) order by order_date asc) as mtd_net_sales_new , sum(net_sales_Repeated)over(partition by year(order_date),month(order_date) order by order_date asc) as mtd_net_sales_Repeated , sum(orders_all_new)over(partition by year(order_date),month(order_date) order by order_date asc) as mtd_orders_all_new , sum(orders_all_Repeated)over(partition by year(order_date),month(order_date) order by order_date asc) as mtd_orders_all_Repeated , sum(discount_new)over(partition by year(order_date),month(order_date) order by order_date asc) as mtd_discount_new , sum(discount_Repeated)over(partition by year(order_date),month(order_date) order by order_date asc) as mtd_discount_Repeated , sum(cost)over(partition by year(order_date),month(order_date) order by order_date asc) as mtd_cost from ( select order_timestamp::date as order_date ,b.cost ,net_sales_new_prev_month ,net_sales_Repeated_prev_month ,discount_new_prev_month ,discount_Repeated_prev_month ,orders_all_new_prev_month ,orders_all_Repeated_prev_month ,count(distinct case when new_customer_flag = \'New\' then order_id end) as orders_all_new ,count(distinct case when new_customer_flag = \'Repeated\' then order_id end) as orders_all_Repeated ,count(distinct case when sku like \'%&%\' then order_id when right(sku,1) in (\'2\',\'3\',\'4\',\'5\',\'6\',\'7\',\'8\',\'9\') and new_customer_flag = \'New\' then order_id end ) as orders_combo_new ,count(distinct case when sku like \'%&%\' then order_id when right(sku,1) in (\'2\',\'3\',\'4\',\'5\',\'6\',\'7\',\'8\',\'9\') and new_customer_flag = \'Repeated\' then order_id end ) as orders_combo_Repeated ,sum(case when new_customer_flag = \'New\' then line_item_sales end) as gross_sales_new ,sum(case when new_customer_flag = \'Repeated\' then line_item_sales end) as gross_sales_Repeated ,sum(case when new_customer_flag = \'New\' then DISCOUNT end) as discount_new ,sum(case when new_customer_flag = \'Repeated\' then DISCOUNT end) as discount_Repeated ,sum(case when new_customer_flag = \'New\' then NET_SALES end) as net_sales_new ,sum(case when new_customer_flag = \'Repeated\' then NET_SALES end) as net_sales_Repeated from Gynoveda_db.maplemonk.FACT_ITEMS a left join cost b on a.order_timestamp::date = b.date left join month_level_sales c on date_trunc(\'month\',add_months(a.order_timestamp::date, -1)) = month group by 1,2,3,4,5,6,7,8) order by 1 desc; Create or replace table Gynoveda_DB.MAPLEMONK.Sales_Cost_ProductType as with cost2 as ( select date ,mapped_product as product_flag ,sum(spend) as cost from Gynoveda_DB.MAPLEMONK.MARKETING_CONSOLIDATED left join Gynoveda_DB.MAPLEMONK.Product_Mapping_For_Marketing c on lower(campaign_name) like CONCAT(\'%\', lower(product_name) ,\'%\') group by 1,2 ) select coalesce(order_timestamp::date,date) as order_date ,coalesce(c.mapped_product,b.product_flag) as product_flag ,b.cost ,count(distinct case when new_customer_flag = \'New\' then order_id end) as orders_all_new ,count(distinct case when new_customer_flag = \'Repeated\' then order_id end) as orders_all_Repeated ,sum(case when new_customer_flag = \'New\' then line_item_sales end) as gross_sales_new ,sum(case when new_customer_flag = \'Repeated\' then line_item_sales end) as gross_sales_Repeated ,sum(case when new_customer_flag = \'New\' then DISCOUNT end) as discount_new ,sum(case when new_customer_flag = \'Repeated\' then DISCOUNT end) as discount_Repeated ,sum(case when new_customer_flag = \'New\' then NET_SALES end) as net_sales_new ,sum(case when new_customer_flag = \'Repeated\' then NET_SALES end) as net_sales_Repeated from Gynoveda_db.maplemonk.FACT_ITEMS a left join Gynoveda_DB.MAPLEMONK.Product_Mapping_For_Marketing c on lower(a.product_name) like CONCAT(\'%\', lower(c.product_name) ,\'%\') left join cost2 b on a.order_timestamp::date = b.date and c.mapped_product = b.product_flag group by 1,2,3 order by 1 desc ; Create or replace table Gynoveda_DB.MAPLEMONK.Sales_Cost_ReferringChannel as select order_timestamp::date as order_date ,a.final_utm_channel ,count(distinct order_id) as orders ,sum(line_item_sales) as gross_sales ,sum(DISCOUNT) as discount ,sum(NET_SALES) as net_sales ,avg(REPLACE( sessions , \',\' )) as sessions from Gynoveda_db.maplemonk.FACT_ITEMS a left join Gynoveda_db.maplemonk.shopify_sessions_data s on a.order_timestamp::date = to_date(s.date,\'DD-MM-YYYY\') and a.final_utm_channel = case when s.referring_channel = \'FB\' then \'Facebook\' when s.referring_channel = \'IG\' then \'Instagram\' when s.referring_channel = \'Search\' then \'Google\' else s.referring_channel end group by 1,2 having avg(REPLACE( sessions , \',\' )) is not NULL; Create or replace table Gynoveda_DB.MAPLEMONK.Cost_by_Channel as select date,channel, sum(spend) as cost from Gynoveda_DB.MAPLEMONK.MARKETING_CONSOLIDATED group by 1,2",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from GYNOVEDA_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        