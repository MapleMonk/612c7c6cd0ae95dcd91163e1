{{ config(
            materialized='table',
                post_hook={
                    "sql": "CREATE OR REPLACE TABLE SNITCH_DB.MAPLEMONK.SNITCH_DB_CLICKPOST_FACT_ITEMS_NEW_STREAM AS select awb as awb_number ,TRY_TO_TIMESTAMP(\"Created at\", \'YYYY-MM-DD HH24:MI:SS\') as assigned_date ,TRY_TO_TIMESTAMP(\"Order Date\", \'YYYY-MM-DD HH24:MI:SS\') as ORDER_DATE ,\"Pickup Date\" ,TRY_TO_TIMESTAMP(\"Pickup Date\", \'YYYY-MM-DD HH24:MI:SS\') as PICKUP_DATE ,TRY_TO_TIMESTAMP(\"Delivery Date\", \'YYYY-MM-DD HH24:MI:SS\') as DELIVERY_DATE ,\"Current Location\" as Current_Location ,TRY_TO_TIMESTAMP(\"Latest Timestamp\", \'YYYY-MM-DD HH24:MI:SS\') CURRENT_DATE ,\"Latest Remark\" Latest_Remark ,\"Clickpost Unified Status\" pre_current_status ,case when lower(pre_current_status) in (\'rto-shipmentdelay\',\'rto-delivered\',\'rto-intransit\',\'rto-requested\',\'rto-marked\',\'rto-contactcustomercare\',\'rto-outfordelivery\',\'rto-failed\') then \'RTO\' when lower(pre_current_status) in (\'pickedup\',\'destinationhubin\',\'contactcustomercare\',\'shipmentdelayed\',\'origincityin\',\'outfordelivery\',\'intransit\',\'origincityout\',\'shipmentheld\') then \'INTRANSIT\' when lower(pre_current_status) in (\'delivered\') then \'DELIVERED\' when lower(pre_current_status) in (\'cancelled\') then \'CANCELLED\' when lower(pre_current_status) in (\'orderplaced\',\'outforpickup\',\'awb registered\',\'pickuppending\',\'pickupfailed\') then \'ORDER_PLACED\' when lower(pre_current_status) in (\'faileddelivery\',\'notserviceable\') then \'UNDELIVERED\' when lower(pre_current_status) in (\'lost\',\'damaged\') then \'LOST\' END as status ,\"Order ID\" as ORDER_ID ,\"Product SKU Code\" SKU_LIST ,\"Items Quantity\" quantity_in_Box ,\"Out For Delivery Attempts\" as Out_For_Delivery_Attempts ,TRY_TO_TIMESTAMP(\"Out For Delivery 1st Attempt\", \'YYYY-MM-DD HH24:MI:SS\') outfordelivery_date ,\"Courier Partner\" as COURIER_PARTNER ,\"Shipment Weight\" ,try_cast(\"Expected Date of Delivery (Max)\" as date) as MAX_SLA ,try_cast(\"Expected Date of Delivery (Min)\" as Date) as MIN_SLA ,\"Expected delivery date by Courier Partner\" EDD_CP ,\"Payment Mode\" as PAYMENT_MODE ,\"Payment Mode\" as PAYMENT_METHOD ,\"Invoice Date\" as INVOICE_DATE ,\"Invoice Value\" as INVOICE_VALUE ,\"Invoice Number\" as INVOICE_NUMBER ,\"Drop Pincode\" as pincode ,\"Drop City\" CITY ,\"Drop State\" STATE ,\"Drop Name\" Customer_name ,\"Drop Phone\" PHONE ,\"Drop Email\" EMAIL ,DATEDIFF(\'hour\',pickup_date , outfordelivery_date) AS P2A ,DATEDIFF(\'hour\',pickup_date , delivery_date) AS P2D ,(DATEDIFF(\'hour\',order_date ,pickup_date)/24)::int AS O2P1 ,(DATEDIFF(\'hour\',order_date ,assigned_date)/24)::int AS O2A1 ,case when (delivery_date :: date) >= MIN_SLA and (delivery_date :: Date) <= MAX_SLA then 1 else 0 end as in_time ,case when o2p1=0 then \'D-0\' when o2p1=1 then \'D-1\' when o2p1=2 then \'D-2\' when o2p1=3 then \'D-3\' when o2p1>3 then \'3+\' end as O2P ,case when o2A1=0 then \'D-0\' when o2A1=1 then \'D-1\' when o2A1=2 then \'D-2\' when o2A1=3 then \'D-3\' when o2A1>3 then \'3+\' end as O2A ,case when outfordelivery_date::date = delivery_date::date then 1 when outfordelivery_date::date != delivery_date::date then 0 end as FASR ,case when \"Reference Number\" like \'%EMIZA%\' then \'EMIZA\' when \"Reference Number\" like \'%INV-SAPL%\' then \'YLK1\' when \"Reference Number\" like \'%SAPL%\' then \'YLK2\' when \"Reference Number\" like \'%INV-SR%\' then \'HSK\' end as warehouse ,mapped_zone as zone ,delivery_state as mapped_state ,delivery_city as mapped_city from ( select co.*,pz.zone as mapped_zone ,pz.delivery_state ,pz.delivery_city from snitch_db.maplemonk.snitch_clickpost_track_order_dashboard_report co left join ( select * from ( select *,row_number() over(partition by delivery_postcode order by 1)rw from snitch_db.maplemonk.pincodemappingzoneupdatedsnitch ) where rw = 1 )pz on co.\"Drop Pincode\" = pz.DELIVERY_POSTCODE )",
                    "transaction": true
                }
            ) }}
            with sample_data as (

                select * from snitch_db.information_schema.databases
            ),
            
            final as (
                select * from sample_data
            )
            select * from final
            