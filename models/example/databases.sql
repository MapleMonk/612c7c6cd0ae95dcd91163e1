{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "Create or REPLACE table snitch_db.maplemonk.offline_master as sELECT * FROM ( With OFFLINE AS ( Select * from ( WITH Master AS ( SELECT * FROM ( WITH sku_group_data AS ( SELECT sku_group, BRANCH, order_date, suborder_quantity, return_quantity FROM ( WITH ABS AS ( SELECT sku_group, CASE WHEN MARKETPLACE_MAPPED LIKE \'%JAYANAGAR%\' THEN \'SNITCH - COCO - JAYANAGAR\' WHEN MARKETPLACE_MAPPED LIKE \'%VR%\' THEN \'SNITCH - FOCO - VR MALL\' WHEN MARKETPLACE_MAPPED LIKE \'%BRIGADE%\' THEN \'SNITCH - COFO - BRIGADE ROAD\' WHEN MARKETPLACE_MAPPED LIKE \'%MBH%\' THEN \'SNITCH - FOCO - MBH\' WHEN MARKETPLACE_MAPPED LIKE \'%TRION%\' THEN \'SNITCH - FOCO - TRION\' ELSE MARKETPLACE_MAPPED END AS BRANCH, order_date, suborder_quantity FROM snitch_db.MAPLEMONK.STORE_fact_items_offline ), ACC AS ( SELECT sku_group, CASE WHEN MARKETPLACE_MAPPED LIKE \'%JAYANAGAR%\' THEN \'SNITCH - COCO - JAYANAGAR\' WHEN MARKETPLACE_MAPPED LIKE \'%VR%\' THEN \'SNITCH - FOCO - VR MALL\' WHEN MARKETPLACE_MAPPED LIKE \'%BRIGADE%\' THEN \'SNITCH - COFO - BRIGADE ROAD\' WHEN MARKETPLACE_MAPPED LIKE \'%MBH%\' THEN \'SNITCH - FOCO - MBH\' WHEN MARKETPLACE_MAPPED LIKE \'%TRION%\' THEN \'SNITCH - FOCO - TRION\' ELSE MARKETPLACE_MAPPED END AS BRANCH, order_date, suborder_quantity AS return_quantity FROM snitch_db.MAPLEMONK.store_returns_fact_items ) SELECT A.*, IFNULL(B.return_quantity, 0) AS return_quantity FROM ABS A FULL OUTER JOIN ACC B ON A.sku_group = B.sku_group AND A.order_date = B.order_date AND A.BRANCH = B.BRANCH ) WHERE SKU_GROUP NOT LIKE \'CB%\' ), first_order_dates AS ( SELECT sku_group, BRANCH, MIN(order_date) AS first_order_date, DATEDIFF(\'DAY\', MIN(order_date), CURRENT_DATE) AS days_since_first_order, DATEDIFF(\'DAY\', MIN(order_date), MAX(order_date)) AS total_days_sold FROM sku_group_data GROUP BY sku_group, BRANCH ), total_sales AS ( SELECT sku_group_data.sku_group, sku_group_data.BRANCH, first_order_dates.first_order_date, first_order_dates.days_since_first_order, first_order_dates.total_days_sold, SUM(return_quantity) AS total_returns, SUM(suborder_quantity) AS total_sales, SUM(CASE WHEN order_date <= DATEADD(\'DAY\', 30, first_order_date) THEN suborder_quantity ELSE 0 END) AS sales_first_30_days, SUM(CASE WHEN order_date <= DATEADD(\'DAY\', 15, first_order_date) THEN suborder_quantity ELSE 0 END) AS sales_first_15_days, SUM(CASE WHEN order_date <= DATEADD(\'DAY\', 7, first_order_date) THEN suborder_quantity ELSE 0 END) AS sales_first_7_days, SUM(CASE WHEN order_date <= DATEADD(\'DAY\', 90, first_order_date) THEN suborder_quantity ELSE 0 END) AS sales_first_90_days, SUM(CASE WHEN order_date <= DATEADD(\'DAY\', 60, first_order_date) THEN suborder_quantity ELSE 0 END) AS sales_first_60_days, SUM(CASE WHEN order_date <= DATEADD(\'DAY\', 180, first_order_date) THEN suborder_quantity ELSE 0 END) AS sales_first_180_days, SUM(CASE WHEN CURRENT_DATE - order_date <= 30 THEN suborder_quantity ELSE 0 END) AS sales_last_30_days, SUM(CASE WHEN CURRENT_DATE - order_date <= 15 THEN suborder_quantity ELSE 0 END) AS sales_last_15_days, SUM(CASE WHEN CURRENT_DATE - order_date <= 7 THEN suborder_quantity ELSE 0 END) AS sales_last_7_days, SUM(CASE WHEN CURRENT_DATE - order_date <= 60 THEN suborder_quantity ELSE 0 END) AS sales_last_60_days, SUM(CASE WHEN CURRENT_DATE - order_date <= 90 THEN suborder_quantity ELSE 0 END) AS sales_last_90_days, SUM(CASE WHEN CURRENT_DATE - order_date <= 180 THEN suborder_quantity ELSE 0 END) AS sales_last_180_days, CASE WHEN first_order_dates.total_days_sold = 0 THEN SUM(suborder_quantity) ELSE SUM(suborder_quantity) / first_order_dates.total_days_sold END AS natural_ros FROM sku_group_data INNER JOIN first_order_dates ON sku_group_data.sku_group = first_order_dates.sku_group AND sku_group_data.BRANCH = first_order_dates.BRANCH GROUP BY sku_group_data.sku_group, sku_group_data.BRANCH, first_order_dates.first_order_date, first_order_dates.days_since_first_order, first_order_dates.total_days_sold ), enhanced_total_sales AS ( SELECT total_sales.*, GREATEST( total_sales.sales_first_30_days / 30, total_sales.sales_last_30_days / 30, total_sales.natural_ros ) AS max_first_30_last_30_natural_ros, GREATEST( total_sales.sales_first_30_days / 30, total_sales.sales_last_30_days / 30, total_sales.natural_ros, total_sales.sales_first_7_days / 7 ) AS max_first_30_last_30_natural_ros_first_7_days, CASE WHEN total_sales.total_sales = 0 THEN 0 ELSE (total_sales.total_returns / total_sales.total_sales) * 100 END AS average_return_since_first_order, CASE WHEN max_first_30_last_30_natural_ros > 10 THEN max_first_30_last_30_natural_ros WHEN max_first_30_last_30_natural_ros < 10 AND max_first_30_last_30_natural_ros_first_7_days > 20 THEN max_first_30_last_30_natural_ros_first_7_days WHEN total_sales.total_sales > 800 THEN GREATEST(natural_ros, sales_last_7_days / 7) ELSE natural_ros END AS final_ros FROM total_sales ) SELECT * FROM enhanced_total_sales ORDER BY total_sales DESC ) ), inventory AS ( SELECT REVERSE(SUBSTRING(REVERSE(LOGICUSERCODE), CHARINDEX(\'-\', REVERSE(LOGICUSERCODE)) + 1)) AS sku_group, BRANCH_NAME, SUM(STOCK_QTY) AS inventory, DATE, COALESCE(SUM(CASE WHEN PACK_NAME = \'XS\' OR PACK_NAME = \'28\' THEN STOCK_QTY ELSE 0 END), 0) AS XS_units, COALESCE(SUM(CASE WHEN PACK_NAME = \'S\' OR PACK_NAME = \'30\' THEN STOCK_QTY ELSE 0 END), 0) AS S_units, COALESCE(SUM(CASE WHEN PACK_NAME = \'M\' OR PACK_NAME = \'32\' THEN STOCK_QTY ELSE 0 END), 0) AS M_units, COALESCE(SUM(CASE WHEN PACK_NAME = \'L\' OR PACK_NAME = \'34\' THEN STOCK_QTY ELSE 0 END), 0) AS L_units, COALESCE(SUM(CASE WHEN PACK_NAME = \'XL\' OR PACK_NAME = \'36\' THEN STOCK_QTY ELSE 0 END), 0) AS XL_units, COALESCE(SUM(CASE WHEN PACK_NAME IN (\'XXL\', \'XXl\', \'2XL\', \'38\') THEN STOCK_QTY ELSE 0 END), 0) AS XXL_units, COALESCE(SUM(CASE WHEN PACK_NAME = \'3XL\' THEN STOCK_QTY ELSE 0 END), 0) AS XL3_units, COALESCE(SUM(CASE WHEN PACK_NAME = \'4XL\' THEN STOCK_QTY ELSE 0 END), 0) AS XL4_units, COALESCE(SUM(CASE WHEN PACK_NAME = \'5XL\' THEN STOCK_QTY ELSE 0 END), 0) AS XL5_units, COALESCE(SUM(CASE WHEN PACK_NAME = \'6XL\' THEN STOCK_QTY ELSE 0 END), 0) AS XL6_units, (CASE WHEN XS_units > 0 THEN 1 ELSE 0 END) + (CASE WHEN S_units > 0 THEN 1 ELSE 0 END) + (CASE WHEN M_units > 0 THEN 1 ELSE 0 END) + (CASE WHEN L_units > 0 THEN 1 ELSE 0 END) + (CASE WHEN XL_units > 0 THEN 1 ELSE 0 END) + (CASE WHEN XXL_units > 0 THEN 1 ELSE 0 END) + (CASE WHEN XL3_units > 0 THEN 1 ELSE 0 END) + (CASE WHEN XL4_units > 0 THEN 1 ELSE 0 END) + (CASE WHEN XL5_units > 0 THEN 1 ELSE 0 END) + (CASE WHEN XL6_units > 0 THEN 1 ELSE 0 END) AS num_size_available FROM snitch_db.maplemonk.logicerp23_24_get_stock_in_hand WHERE sku_group NOT LIKE \'CB%\' AND DATE = CURRENT_DATE GROUP BY sku_group, BRANCH_NAME, DATE ) SELECT COALESCE(q.sku_group, b.sku_group) as SKU_GROUP_Final, COALESCE(q.branch, b.BRANCH_NAME) as Store, COALESCE(q.TOTAL_RETURNS, 0) AS TOTAL_RETURNS, COALESCE(q.FIRST_ORDER_DATE, null) AS FIRST_ORDER_DATE, COALESCE(q.DAYS_SINCE_FIRST_ORDER, 0) AS DAYS_SINCE_FIRST_ORDER, COALESCE(q.TOTAL_SALES, 0) AS TOTAL_SALES, COALESCE(q.NATURAL_ROS, 0) AS NATURAL_ROS, COALESCE(q.AVERAGE_RETURN_SINCE_FIRST_ORDER, 0) AS AVERAGE_RETURN_SINCE_FIRST_ORDER, COALESCE(q.FINAL_ROS, 0) AS FINAL_ROS, COALESCE(q.SALES_FIRST_7_DAYS, 0) AS SALES_FIRST_7_DAYS, COALESCE(q.SALES_FIRST_15_DAYS, 0) AS SALES_FIRST_15_DAYS, COALESCE(q.SALES_FIRST_30_DAYS, 0) AS SALES_FIRST_30_DAYS, COALESCE(q.SALES_LAST_7_DAYS, 0) AS SALES_LAST_7_DAYS, COALESCE(q.SALES_LAST_15_DAYS, 0) AS SALES_LAST_15_DAYS, COALESCE(q.SALES_LAST_30_DAYS, 0) AS SALES_LAST_30_DAYS, COALESCE(b.INVENTORY, 0) AS INVENTORY, COALESCE(b.XS_UNITS, 0) as XS_UNITS, COALESCE(b.S_UNITS, 0) as S_UNITS, COALESCE(b.M_UNITS, 0) as M_UNITS, COALESCE(b.L_UNITS, 0) as L_UNITS, COALESCE(b.XL_UNITS, 0) as XL_UNITS, COALESCE(b.XXL_UNITS, 0) as XXL_UNITS, COALESCE(b.XL3_UNITS, 0) as XL3_UNITS, COALESCE(b.XL4_UNITS, 0) as XL4_UNITS, COALESCE(b.XL5_UNITS, 0) as XL5_UNITS, COALESCE(b.XL6_UNITS, 0) as XL6_UNITS, COALESCE(b.NUM_SIZE_AVAILABLE, 0) as NUM_SIZE_AVAILABLE FROM Master q FULL OUTER JOIN Inventory b ON q.sku_group = b.sku_group AND q.BRANCH = b.BRANCH_NAME ) ), availability_master_v2 as ( Select * from ( Select sku_group, price, product_name, category, final_ros, natural_ros, sku_class, ROW_NUMBER() OVER (PARTITION BY sku_group ORDER BY 1) AS rn from snitch_db.maplemonk.availability_master_v2) where rn = 1 ) Select a.* , b.price, b.product_name, b.category, b.final_ros as online_final_ros, b.natural_ros as online_natural_ros, b.sku_class from OFFLINE a left join availability_master_v2 b on a. SKU_GROUP_Final = b.sku_group ) WHERE SKU_GROUP_Final NOT LIKE \'CB%\'",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from snitch_db.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        