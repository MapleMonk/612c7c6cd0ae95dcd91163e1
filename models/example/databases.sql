{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "CREATE TABLE IF NOT EXISTS opensecret_db.MAPLEMONK.UTM_MAPPING ( UTM_SOURCE VARCHAR(16777216), UTM_MEDIUM VARCHAR(16777216), SOURCE VARCHAR(16777216), CHANNEL VARCHAR(16777216)); CREATE TABLE IF NOT EXISTS opensecret_db.MAPLEMONK.opensecret_db_SKU_MASTER ( skucode VARCHAR(16777216), name VARCHAR(16777216), category VARCHAR(16777216), sub_category VARCHAR(16777216)); create table if not exists opensecret_db.MAPLEMONK.Shopify_open_secret_store_Shopify_UTM_Parameters (ID VARCHAR(16777216) ,NAME VARCHAR(16777216) ,CREATEDAT VARCHAR(16777216) ,CUSTOMERJOURNEY VARIANT ,CUSTOMERJOURNEYSUMMARY VARIANT ,REFERRERURL VARCHAR(16777216) ,REFERRALCODE VARCHAR(16777216) ,LANDINGPAGEURL VARCHAR(16777216) ,REFERRERDISPLAYTEXT VARCHAR(16777216) ,LANDINGPAGEDISPLAYTEXT VARCHAR(16777216) ); create or replace table opensecret_db.MAPLEMONK.opensecret_db_Shopify_UTM_Parameters as select ShopifyQL.* ,upper(coalesce(UTM_MAPPING.CHANNEL,UTM_MAPPING_REF.CHANNEL)) as ShopifyQL_MAPPED_CHANNEL ,upper(coalesce(UTM_MAPPING.SOURCE,UTM_MAPPING_REF.SOURCE)) as ShopifyQL_MAPPED_SOURCE from (select * from (select A.id ,A.name ,A.createdat ,replace(A.customerjourneysummary:\"momentsCount\",\'\"\',\'\') Moments_Count ,replace(A.customerjourneysummary:\"daysToConversion\",\'\"\',\'\') DaysToConvert ,replace(A.CUSTOMERJOURNEYSUMMARY:\"lastVisit\":\"utmParameters\":\"source\",\'\"\',\'\') LastVisit_UTM_Source ,replace(A.CUSTOMERJOURNEYSUMMARY:\"lastVisit\":\"source\",\'\"\',\'\') LastVisit_NON_UTM_Source ,replace(A.CUSTOMERJOURNEYSUMMARY:\"firstVisit\":\"utmParameters\":\"source\",\'\"\',\'\') FirstVisit_UTM_Source ,replace(A.CUSTOMERJOURNEYSUMMARY:\"firstVisit\":\"utmParameters\":\"medium\",\'\"\',\'\') FirstVisit_UTM_Medium ,replace(B.Value:\"id\",\'gid://shopify/CustomerVisit/\',\'\') Moment_ID ,replace(B.value:\"utmParameters\":\"source\",\'\"\',\'\') Last_Moment_UTM_Source ,replace(B.value:\"utmParameters\":\"medium\",\'\"\',\'\') Last_Moment_UTM_Medium ,case when Moments_Count >1 then LastVisit_UTM_Source else FirstVisit_UTM_Source end CJSummary_utm_source ,referrerdisplaytext Referrer_Name ,customerjourneysummary ,customerjourney ,coalesce(Last_Moment_UTM_Source,LastVisit_NON_UTM_Source) ShopifyQL_Unmapped_Last_Source ,rank() over (partition by name order by MOMENT_ID desc) rw from opensecret_db.MAPLEMONK.Shopify_open_secret_store_Shopify_UTM_Parameters A, lateral flatten (INPUT => customerjourney:\"moments\") B ) where rw=1 ) ShopifyQL left join (select * from (select * , row_number() over (partition by lower(utm_source) order by 1) rw from opensecret_db.MAPLEMONK.UTM_MAPPING) where rw=1 and utm_source is not null ) UTM_MAPPING on lower(ShopifyQL.ShopifyQL_Unmapped_Last_Source) = lower(UTM_MAPPING.utm_source) left join (select * from (select * , row_number() over (partition by lower(utm_source) order by 1) rw from opensecret_db.MAPLEMONK.utm_mapping) where rw=1 and UTM_Source is not null ) UTM_MAPPING_REF on lower(ShopifyQL.referrer_name) = lower(UTM_MAPPING_REF.utm_source) ; create or replace table opensecret_db.MAPLEMONK.opensecret_db_GOKWIK_SOURCE as With GO_KWIK as ( select id ,note_attributes ,A.value:\"name\" ,case when lower(note_attributes) like \'%gokwik%\' and lower(replace(A.value:\"name\",\'\"\',\'\')) like \'%utm_source%\' then UPPER(replace(A.value:\"value\",\'\"\',\'\')) end as GOKWIK_UTM_SOURCE from opensecret_db.MAPLEMONK.Shopify_open_secret_store_orders, LATERAL flatten (INPUT => note_attributes) A where lower(note_attributes) like \'%gokwik%\' and GOKWIK_UTM_SOURCE is not null ) Select GO_KWIK.* ,Upper(UTM_MAPPING.CHANNEL) as GOKWIK_MAPPED_CHANNEL ,Upper(UTM_MAPPING.SOURCE) as GOKWIK_MAPPED_SOURCE from GO_KWIK left join (select * from (select * , row_number() over (partition by lower(utm_source) order by 1) rw from opensecret_db.MAPLEMONK.UTM_MAPPING) where rw=1 and utm_source is not null ) UTM_MAPPING on lower(GO_KWIK.GOKWIK_UTM_SOURCE) = lower(UTM_MAPPING.utm_source) ; CREATE OR REPLACE TABLE opensecret_db.MAPLEMONK.Shopify_All_customers AS select *,\'Shopify_open_secret_store\' AS Shop_Name from opensecret_db.MAPLEMONK.Shopify_open_secret_store_CUSTOMERS ; create or replace table opensecret_db.MAPLEMONK.Shopify_All_orders as select AO.* ,UPPER(ShopifyQL.shopifyql_mapped_channel) shopifyql_mapped_channel ,UPPER(ShopifyQL.shopifyql_mapped_source) shopifyql_mapped_source ,UPPER(ShopifyQL.FIRSTVISIT_UTM_SOURCE) Shopifyql_FIRSTVISIT_UTM_SOURCE ,UPPER(ShopifyQL.LAST_MOMENT_UTM_SOURCE) Shopifyql_LAST_MOMENT_UTM_SOURCE ,UPPER(ShopifyQL.LastVisit_NON_UTM_Source) Shopifyql_LAST_VISIT_NON_UTM_SOURCE ,UPPER(ShopifyQL.LAST_MOMENT_UTM_MEDIUM) Shopifyql_LAST_MOMENT_UTM_MEDIUM ,UPPER(ShopifyQL.FIRSTVISIT_UTM_MEDIUM) Shopifyql_FIRSTVISIT_UTM_MEDIUM ,div0(ShopifyQL.MOMENTS_COUNT,count(1) over (partition by AO.name order by 1)) MOMENTS_COUNT ,div0(ShopifyQL.DAYSTOCONVERT,count(1) over (partition by AO.name order by 1)) DAYSTOCONVERT ,UPPER(GOKWIK.GOKWIK_UTM_SOURCE) GOKWIK_UTM_SOURCE ,UPPER(GOKWIK.GOKWIK_MAPPED_CHANNEL) GOKWIK_MAPPED_CHANNEL ,UPPER(GOKWIK.GOKWIK_MAPPED_SOURCE) GOKWIK_MAPPED_SOURCE ,UPPER(Referrer_Name) Referrer_Name ,Upper(coalesce(shopifyql_mapped_source,GOKWIK_MAPPED_SOURCE,ShopifyQL.ShopifyQL_Unmapped_Last_Source,\'Direct\')) FINAL_UTM_SOURCE ,Upper(coalesce(shopifyql_mapped_channel,GOKWIK_MAPPED_CHANNEL,ShopifyQL.ShopifyQL_Unmapped_Last_Source,\'Direct\')) FINAL_UTM_CHANNEL from (select * ,case when lower(tags) like \'%cred%\' then \'CRED_Shopify_open_secret_store\' else \'Shopify_Shopify_open_secret_store\' end AS Shop_Name from opensecret_db.MAPLEMONK.Shopify_open_secret_store_ORDERS) AO left join opensecret_db.MAPLEMONK.opensecret_db_Shopify_UTM_Parameters ShopifyQL on AO.name = ShopifyQL.name left join opensecret_db.MAPLEMONK.opensecret_db_GOKWIK_SOURCE GOKWIK on AO.ID = GOKWIK.ID ; ALTER TABLE opensecret_db.MAPLEMONK.Shopify_All_orders RENAME COLUMN _AIRBYTE_Shopify_open_secret_store_ORDERS_HASHID to _AIRBYTE_ORDERS_HASHID; CREATE OR REPLACE TABLE opensecret_db.MAPLEMONK.Shopify_All_products AS select *,\'Shopify_open_secret_store\' AS Shop_Name from opensecret_db.MAPLEMONK.Shopify_open_secret_store_PRODUCTS ; ALTER TABLE opensecret_db.MAPLEMONK.Shopify_All_products RENAME COLUMN _AIRBYTE_Shopify_open_secret_store_PRODUCTS_HASHID to _AIRBYTE_PRODUCTS_HASHID; CREATE OR REPLACE TABLE opensecret_db.MAPLEMONK.Shopify_All_products_variants AS select *,\'Shopify_open_secret_store\' AS Shop_Name from opensecret_db.MAPLEMONK.Shopify_open_secret_store_PRODUCTS_VARIANTS ; ALTER TABLE opensecret_db.MAPLEMONK.SHOPIFY_ALL_PRODUCTS_VARIANTS RENAME COLUMN _AIRBYTE_Shopify_open_secret_store_PRODUCTS_HASHID to _AIRBYTE_PRODUCTS_HASHID; CREATE OR REPLACE TABLE opensecret_db.MAPLEMONK.Shopify_All_customers_addresses AS select *,\'Shopify_open_secret_store\' AS Shop_Name from opensecret_db.MAPLEMONK.Shopify_open_secret_store_CUSTOMERS_ADDRESSES ; CREATE OR REPLACE TABLE opensecret_db.MAPLEMONK.Shopify_All_orders_items_discount AS SELECT order_id, LINE_ITEM_ID, SUM(B.VALUE:amount::FLOAT) AS DISCOUNT FROM( SELECT id AS order_id, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:discount_allocations AS discount_allocations FROM opensecret_db.MAPLEMONK.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A)x,LATERAL FLATTEN (INPUT => x.discount_allocations)B GROUP BY ORDER_ID, LINE_ITEM_ID; CREATE OR REPLACE TABLE opensecret_db.MAPLEMONK.Shopify_All_orders_items_tax AS SELECT order_id, LINE_ITEM_ID, SUM(B.VALUE:price::FLOAT) AS TAX, sum(B.VALUE:rate::float) as Tax_Rate FROM( SELECT id AS order_id, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:tax_lines AS tax_lines FROM opensecret_db.MAPLEMONK.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A)x,LATERAL FLATTEN (INPUT => x.tax_lines)B GROUP BY order_id, LINE_ITEM_ID; CREATE OR REPLACE TABLE opensecret_db.MAPLEMONK.Shopify_All_Refunds AS SELECT Name, ID AS Order_ID, Shop_name, C.value:line_item_id AS line_item_id, array_agg(Object_construct(\'Refund_Date\',try_to_timestamp(replace(A.value:\"created_at\",\'\"\',\'\')), \'Refund_Quantity\',replace(C.value:\"quantity\",\'\"\',\'\'), \'Refund_Amount\',replace(C.value:\"subtotal\",\'\"\',\'\') ) )Refund_Details, SUM(C.VALUE:quantity) AS quantity, SUM(C.VALUE:subtotal) AS subtotal FROM opensecret_db.MAPLEMONK.Shopify_All_orders, LATERAL FLATTEN(INPUT => refunds)A, LATERAL FLATTEN(INPUT=>A.value)B, LATERAL FLATTEN(INPUT => B.value) C WHERE C.value:line_item_id IS NOT null GROUP BY Name, ID, Shop_name, C.value:line_item_id; CREATE OR REPLACE TABLE opensecret_db.MAPLEMONK.Shopify_All_orders_items AS WITH CTE AS (SELECT SHOP_NAME, ID::VARCHAR(16777216) AS ORDER_ID, NAME AS ORDER_NAME, CUSTOMER, replace(customer:default_address:name,\'\"\',\'\') NAME, PHONE, EMAIL, tags, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:sku::STRING AS SKU, A.VALUE:product_id::STRING AS PRODUCT_ID, A.VALUE:title::STRING AS PRODUCT_NAME, CURRENCY, CASE WHEN cancelled_at IS NOT NULL THEN \'CANCELLED\' ELSE \'SHOPIFY_PROCESSED\' END AS order_status, CREATED_AT::DATETIME AS order_timestamp, A.VALUE:price::FLOAT * A.VALUE:quantity::FLOAT AS LINE_ITEM_SALES, (TOTAL_SHIPPING_PRICE_SET:presentment_money:amount::FLOAT/ COUNT(ORDER_ID) OVER(PARTITION BY ORDER_ID ORDER BY ORDER_ID)) AS SHIPPING_PRICE, A.value:price/(1+A.value:tax_lines:rate) PRICE_BEFORE_TAX, A.VALUE:quantity::FLOAT as QUANTITY, \'Shopify\' AS Source, MOMENTS_COUNT, DAYSTOCONVERT, SHOPIFYQL_FIRSTVISIT_UTM_SOURCE, SHOPIFYQL_MAPPED_SOURCE, SHOPIFYQL_MAPPED_CHANNEL, SHOPIFYQL_LAST_MOMENT_UTM_SOURCE, Shopifyql_LAST_VISIT_NON_UTM_SOURCE, Shopifyql_LAST_MOMENT_UTM_MEDIUM, Shopifyql_FIRSTVISIT_UTM_MEDIUM, FINAL_UTM_CHANNEL, FINAL_UTM_SOURCE, Referrer_Name, GOKWIK_MAPPED_SOURCE, GOKWIK_MAPPED_CHANNEL, NULL as product_sub_category FROM opensecret_db.MAPLEMONK.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A) SELECT CTE.*, IFNULL(T.TAX_RATE,0) AS TAX_RATE, IFNULL(D.DISCOUNT,0) AS DISCOUNT, CTE.LINE_ITEM_SALES AS GROSS_SALES_AFTER_TAX, CTE.LINE_ITEM_SALES/(1+IFNULL(T.TAX_RATE,0)) AS GROSS_SALES_BEFORE_TAX, IFNULL(D.DISCOUNT,0)/(1+IFNULL(T.TAX_RATE,0)) AS DISCOUNT_BEFORE_TAX, CTE.LINE_ITEM_SALES/(1+IFNULL(T.TAX_RATE,0)) - IFNULL(D.DISCOUNT,0)/(1+IFNULL(T.TAX_RATE,0)) AS NET_SALES_BEFORE_TAX, IFNULL(T.TAX,0) AS TAX, (CTE.LINE_ITEM_SALES/(1+IFNULL(T.TAX_RATE,0))) - (IFNULL(D.DISCOUNT,0)/(1+IFNULL(T.TAX_RATE,0))) + IFNULL(T.TAX,0) + CTE.SHIPPING_PRICE AS TOTAL_SALES, CASE WHEN R.QUANTITY IS NOT NULL THEN 1 ELSE 0 END AS IS_REFUND, R.REFUND_DETAILS FROM CTE LEFT JOIN opensecret_db.MAPLEMONK.Shopify_All_orders_items_tax T ON CTE.ORDER_ID = T.ORDER_ID AND CTE.LINE_ITEM_ID = T.LINE_ITEM_ID LEFT JOIN opensecret_db.MAPLEMONK.Shopify_All_orders_items_discount D ON CTE.ORDER_ID = D.ORDER_ID AND CTE.LINE_ITEM_ID = D.LINE_ITEM_ID LEFT JOIN opensecret_db.MAPLEMONK.Shopify_All_Refunds R ON CTE.ORDER_ID = R.ORDER_ID AND CTE.LINE_ITEM_ID = R.LINE_ITEM_ID ; CREATE OR REPLACE TABLE opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS AS SELECT O.SHOP_NAME, O.ORDER_ID, O.ORDER_NAME, O.CUSTOMER:id::int AS customer_id, O.Name, O.EMAIL, O.PHONE, O.Tags, O.LINE_ITEM_ID, O.SKU, O.PRODUCT_ID, O.CURRENCY, O.IS_REFUND, CASE WHEN CD.city IS NULL OR CD.city = \'\' THEN \'NA\' ELSE upper(CD.city) END AS city, CASE WHEN CD.province IS NULL OR CD.province = \'\' THEN \'NA\' ELSE upper(CD.province) END AS state, CASE WHEN P.title = \'\' THEN \'NA\' ELSE P.title END AS product_name, CASE WHEN P.product_type = \'\' THEN \'NA\' ELSE P.product_type END AS category, O.order_status, O.order_timestamp, O.LINE_ITEM_SALES, O.SHIPPING_PRICE, O.QUANTITY, O.TAX, O.TAX_RATE, O.DISCOUNT, O.DISCOUNT_BEFORE_TAX, O.GROSS_SALES_AFTER_TAX, O.GROSS_SALES_BEFORE_TAX, O.NET_SALES_BEFORE_TAX, O.TOTAL_SALES, O.Source, O.MOMENTS_COUNT, O.DAYSTOCONVERT, O.SHOPIFYQL_FIRSTVISIT_UTM_SOURCE, O.SHOPIFYQL_MAPPED_SOURCE, O.SHOPIFYQL_MAPPED_CHANNEL, O.SHOPIFYQL_LAST_MOMENT_UTM_SOURCE, O.Shopifyql_LAST_VISIT_NON_UTM_SOURCE, O.Shopifyql_FIRSTVISIT_UTM_MEDIUM, O.Shopifyql_LAST_MOMENT_UTM_MEDIUM, O.FINAL_UTM_CHANNEL, O.FINAL_UTM_SOURCE, O.Referrer_Name, O.GOKWIK_MAPPED_SOURCE, O.GOKWIK_MAPPED_CHANNEL, O.REFUND_DETAILS, O.product_sub_category FROM opensecret_db.MAPLEMONK.Shopify_All_orders_items O LEFT JOIN opensecret_db.MAPLEMONK.Shopify_All_products P ON O.PRODUCT_ID = P.id LEFT JOIN(SELECT customer_id, city, province, row_number() OVER ( partition BY customer_id ORDER BY id DESC) rowid FROM opensecret_db.MAPLEMONK.Shopify_All_customers_addresses) AS CD ON O.CUSTOMER:id::int = CD.customer_id AND CD.rowid = 1; ALTER TABLE opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS ADD COLUMN new_customer_flag varchar(50); ALTER TABLE opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS ADD COLUMN acquisition_channel varchar(16777216); ALTER TABLE opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS ADD COLUMN acquisition_product varchar(16777216); UPDATE opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS AS A SET A.new_customer_flag = B.flag FROM ( SELECT DISTINCT order_id, customer_id, order_timestamp, CASE WHEN order_timestamp <> Min(order_timestamp) OVER ( partition BY customer_id) THEN \'Repeat\' ELSE \'New\' END AS Flag FROM opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS)AS B WHERE A.order_id = B.order_id AND A.customer_id = B.customer_id; UPDATE opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS SET new_customer_flag = CASE WHEN new_customer_flag IS NULL THEN \'New\' ELSE new_customer_flag END; CREATE OR replace temporary TABLE opensecret_db.MAPLEMONK.temp_source AS SELECT DISTINCT customer_id, source FROM ( SELECT DISTINCT customer_id, order_timestamp, source, Min(order_timestamp) OVER ( partition BY customer_id) firstOrderdate FROM opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS)res WHERE order_timestamp=firstorderdate; UPDATE opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS AS a SET a.acquisition_channel=b.source FROM opensecret_db.MAPLEMONK.temp_source b WHERE a.customer_id = b.customer_id; ALTER TABLE opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS ADD COLUMN SHIPPING_TAX FLOAT; ALTER TABLE opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS ADD COLUMN SHIP_PROMOTION_DISCOUNT FLOAT; ALTER TABLE opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS ADD COLUMN GIFT_WRAP_PRICE FLOAT; ALTER TABLE opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS ADD COLUMN GIFT_WRAP_TAX FLOAT; ALTER TABLE opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS MODIFY COLUMN ORDER_STATUS VARCHAR(100); CREATE OR REPLACE TABLE opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS_TEMP_Category as select fi.* ,fi.SKU AS SKU_CODE ,coalesce(p.name,fi.product_name) as PRODUCT_NAME_Final ,coalesce(Upper(p.CATEGORY),upper(fi.category)) AS Product_Category ,Upper(p.sub_category) as Product_Super_Category from opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS fi left join (select distinct skucode, name, category, sub_category from opensecret_db.MAPLEMONK.opensecret_db_sku_master) p on fi.sku = p.skucode; CREATE OR REPLACE TABLE opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS AS SELECT * FROM opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS_TEMP_Category; CREATE OR replace temporary TABLE opensecret_db.MAPLEMONK.temp_product AS SELECT DISTINCT customer_id, product_name, Row_number() OVER (partition BY customer_id ORDER BY LINE_ITEM_SALES DESC) rowid FROM ( SELECT DISTINCT customer_id, order_timestamp, product_name, LINE_ITEM_SALES , Min(order_timestamp) OVER (partition BY customer_id) firstOrderdate FROM opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS )res WHERE order_timestamp=firstorderdate; UPDATE opensecret_db.MAPLEMONK.opensecret_db_SHOPIFY_FACT_ITEMS AS A SET A.acquisition_product=B.product_name FROM ( SELECT * FROM opensecret_db.MAPLEMONK.temp_product WHERE rowid=1)B WHERE A.customer_id = B.customer_id;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from opensecret_db.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        