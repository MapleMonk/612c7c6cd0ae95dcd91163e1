{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table rpsg_db.maplemonk.Product_Category_Frequency_Summary_DRV as with Customer_Category_CTE as ( select category ,customer_id_final ,count(distinct order_id) Total_Orders ,sum(selling_price) Booked_Revenue from rpsg_db.maplemonk.sales_consolidated_drv where lower(shop_name) like any (\'%shopify%\',\'%woocommerce%\') and phone not in (\'9999999999\') and lower(order_status) not in (\'cancelled\',\'returned\') and lower(shipping_status) not in (\'cancelled\',\'returned\') group by 1,2 order by 3 desc ) select category ,count(distinct customer_id_final) Total_Customers_with_Purchase ,count(distinct case when Total_orders=1 then customer_id_final end) Customers_with_One_Purchase ,count(distinct case when Total_orders=2 then customer_id_final end) Customers_with_Two_Purchases ,count(distinct case when Total_orders=3 then customer_id_final end) Customers_with_Three_Purchases ,count(distinct case when Total_orders=4 then customer_id_final end) Customers_with_Four_Purchases ,count(distinct case when Total_orders=5 then customer_id_final end) Customers_with_Five_Purchases ,count(distinct case when Total_orders>5 then customer_id_final end) Customers_with_more_than_Five_Purchases ,sum(Booked_Revenue) Total_Booked_Revenue ,sum(case when Total_orders=1 then Booked_Revenue end) Booked_Revenue_from_One_Purchase ,sum(case when Total_orders=2 then Booked_Revenue end) Booked_Revenue_from_Two_Purchases ,sum(case when Total_orders=3 then Booked_Revenue end) Booked_Revenue_from_Three_Purchases ,sum(case when Total_orders=4 then Booked_Revenue end) Booked_Revenue_from_Four_Purchases ,sum(case when Total_orders=5 then Booked_Revenue end) Booked_Revenue_from_Five_Purchases ,sum(case when Total_orders>5 then Booked_Revenue end) Booked_Revenue_from_more_than_Five_Purchases from customer_category_cte group by 1 order by 2 desc; create or replace table rpsg_db.maplemonk.Product_Frequency_Summary_DRV as with Customer_Product_CTE as ( select product_name_mapped ,category ,customer_id_final ,count(distinct order_id) Total_Orders ,sum(selling_price) Booked_Revenue from rpsg_db.maplemonk.sales_consolidated_drv where lower(shop_name) like any (\'%shopify%\',\'%woocommerce%\') and phone not in (\'9999999999\') and lower(order_status) not in (\'cancelled\',\'returned\') and lower(shipping_status) not in (\'cancelled\',\'returned\') group by 1,2,3 order by 4 desc ) select Product_Name_Mapped ,category ,count(distinct customer_id_final) Total_Customers_with_Purchase ,count(distinct case when Total_orders=1 then customer_id_final end) Customers_with_One_Purchase ,count(distinct case when Total_orders=2 then customer_id_final end) Customers_with_Two_Purchases ,count(distinct case when Total_orders=3 then customer_id_final end) Customers_with_Three_Purchases ,count(distinct case when Total_orders=4 then customer_id_final end) Customers_with_Four_Purchases ,count(distinct case when Total_orders=5 then customer_id_final end) Customers_with_Five_Purchases ,count(distinct case when Total_orders>5 then customer_id_final end) Customers_with_more_than_Five_Purchases ,sum(Booked_Revenue) Total_Booked_Revenue ,sum(case when Total_orders=1 then Booked_Revenue end) Booked_Revenue_from_One_Purchase ,sum(case when Total_orders=2 then Booked_Revenue end) Booked_Revenue_from_Two_Purchases ,sum(case when Total_orders=3 then Booked_Revenue end) Booked_Revenue_from_Three_Purchases ,sum(case when Total_orders=4 then Booked_Revenue end) Booked_Revenue_from_Four_Purchases ,sum(case when Total_orders=5 then Booked_Revenue end) Booked_Revenue_from_Five_Purchases ,sum(case when Total_orders>5 then Booked_Revenue end) Booked_Revenue_from_more_than_Five_Purchases from customer_product_cte group by 1,2 order by 3 desc;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from RPSG_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        