{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table eggozdb.maplemonk.darjan_sales as select oo.name as bill_name, rr.code as retailer_name, rr.area_classification, rr.beat_number, cast(timestampadd(minute, 660, oo.delivery_date) as date) as date, oo.order_price_amount, ol.quantity, case when lower(pp.slug) like \'%djn%\' then 30 else pp.SKU_Count end as SKU_Count, ol.single_sku_rate, ol.single_sku_mrp, ol.quantity * (case when lower(pp.slug) like \'%djn%\' then 30 else pp.SKU_Count end) eggs, ol.quantity * ol.single_sku_rate as sales, pp.slug, pp.brand_type from eggozdb.maplemonk.my_sql_order_order oo left join eggozdb.maplemonk.my_sql_order_orderline ol on ol.order_id = oo.id left join eggozdb.maplemonk.my_sql_product_product pp on pp.id = ol.product_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = oo.retailer_id where pp.slug in (\'NCR-WD-30\', \'UP-WD-30\', \'White-DJN\', \'Brown-DJN\') and lower(oo.status) in (\'completed\',\'delivered\') and ol.quantity > 0 group by oo.name, rr.code, cast(timestampadd(minute, 660, oo.delivery_date) as date), pp.slug, rr.area_classification, rr.beat_number, ol.quantity, pp.sku_count, ol.single_sku_rate, ol.single_sku_mrp, oo.order_price_amount, pp.brand_type ; Create or replace table eggozdb.maplemonk.Date_area_dim as select cast(Date as date) Date, area_classification from eggozdb.maplemonk.date_dim cross join (select distinct area_classification from eggozdb.maplemonk.my_sql_retailer_retailer); create or replace table eggozdb.maplemonk.secondary_sales_sku AS select rr2.code as distributor_name, tt.bill_name, tt.status, tt.delivery_date, sum(tt.gross_sale) sale, sum(tt.eggs_sold) eggs_sold, tt.sku, tt.retailer_id, tt.retailer_name, tt.area_classification, tt.beat_number_original, tt.cluster_name, tt.onboarding_status, tt.city_id, tt.distributor_id from ( select oo.name bill_name, oo.status, cast(timestampadd(minute, 330, oo.delivery_date) as date) delivery_date, sum(oo.order_price_amount) order_price_amount, ol.quantity * (ol.single_sku_rate + ol.single_sku_discount) gross_sale, CASE WHEN pp.name LIKE \'%liquid%\' THEN ol.quantity * 1000 / 35 ELSE ol.quantity * CASE WHEN pp.SKU_Count = 1 THEN CASE WHEN rr.area_classification = \'UP-UB\' THEN 1 ELSE 30 END ELSE pp.SKU_Count END END AS eggs_sold, concat(pp.sku_count,left(pp.name,1)) sku, pp.slug, ol.quantity, oo.retailer_id, rr.code as retailer_name, rr.area_classification, rr.beat_number beat_number_original, bc.cluster_name, rr.onboarding_status, rr.city_id, rr.distributor_id from eggozdb.maplemonk.my_sql_distributor_sales_secondaryorder oo left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = oo.retailer_id left join eggozdb.maplemonk.my_sql_distributor_sales_secondaryorderline ol on ol.order_id = oo.id left join eggozdb.maplemonk.my_sql_product_product pp on pp.id = ol.product_id left join eggozdb.maplemonk.my_sql_base_cluster bc on rr.cluster_id = bc.id group by cast(timestampadd(minute, 330, oo.delivery_date) as date), oo.retailer_id, oo.name, pp.name, pp.slug, oo.status, ol.quantity, pp.sku_count, rr.area_classification, pp.slug, rr.code, rr.beat_number, rr.onboarding_status, rr.city_id, rr.distributor_id, ol.single_sku_rate, ol.single_sku_discount, bc.cluster_name ) tt join eggozdb.maplemonk.my_sql_retailer_retailer rr2 on rr2.id = tt.distributor_id group by tt.bill_name, tt.status, tt.delivery_date, tt.retailer_id, tt.retailer_name, tt.area_classification, tt.beat_number_original, tt.onboarding_status, tt.city_id, tt.distributor_id, tt.sku, rr2.code, tt.cluster_name ; CREATE OR REPLACE TABLE eggozdb.maplemonk.secondary_return_replacement_promo AS select rr2.code as distributor, ret_rep.* from ( select orr.id as ret_rep_id, orr.type, orr.return_amount as total_ret_amount, cast(timestampadd(minute, 330, orr.return_date) as date) pickup_date, orr.retailer_id, orr.salesPerson_id, orr.status, rrl.quantity, rrl.single_sku_mrp, rrl.single_sku_discount, rrl.single_sku_rate, rrl.product_id, rr.code retailer_name, rr.area_classification, rr.beat_number, rr.city_id, rr.cluster_id, rr.distributor_id, pp.name, pp.slug, pp.SKU_Count, pp.brand_type from eggozdb.maplemonk.my_sql_distributor_sales_secondaryorderreturn orr left join eggozdb.maplemonk.my_sql_distributor_sales_secondaryorderreturnreplaceline rrl on rrl.return_order_id = orr.id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = orr.retailer_id left join eggozdb.maplemonk.my_sql_product_product pp on pp.id = rrl.product_id where distributor_id is not null ) ret_rep left join eggozdb.maplemonk.my_sql_retailer_retailer rr2 on rr2.id = ret_rep.distributor_id ; CREATE OR REPLACE TABLE eggozdb.maplemonk.SALES_SUMMARY AS select * ,sum(Net_Sales) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Net_Sales from (select a.date Date ,a.area_classification Area_classification ,ifnull(b.Net_sales,0) Net_Sales from eggozdb.maplemonk.Date_area_dim a left join ( select date ,area_classification ,sum(sales_per_item) Net_sales from ( select cast(timestampadd(minute,660,o.date) as date) Date ,o.id ,ol1.id ,rr.area_classification Area_Classification ,sum(single_sku_rate*quantity + single_sku_discount*quantity) Sales_per_item from eggozdb.Maplemonk.my_sql_order_order o left join eggozdb.Maplemonk.my_sql_order_orderline ol1 ON o.id=ol1.order_id left join eggozdb.Maplemonk.my_sql_product_product pp ON ol1.product_id =pp.id left join eggozdb.Maplemonk.my_sql_retailer_retailer rr ON o.retailer_id =rr.id left join (select order_id, COUNT(1) AS Items from eggozdb.Maplemonk.my_sql_order_orderline group by order_id) ol2 ON o.id=ol2.order_id WHERE o.status in (\'delivered\', \'completed\') and o.is_trial = \'FALSE\' and pp.slug not in ( \'NCR-WD-30\', \'UP-WD-30\', \'White-DJN\', \'Brown-DJN\') group by cast(timestampadd(minute,660,o.date) as date) , rr.area_classification, o.id, ol1.id ) group by date ,area_classification) b on a.area_classification = b.area_classification and a.date = b.date where year(a.date)>= 2020 and year(a.date) <= year(getdate()) ); CREATE OR REPLACE TABLE eggozdb.maplemonk.Eggs_Sold_SUMMARY AS select * ,sum(Eggs_sold) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_sold ,sum(Eggs_sold_white) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_sold_white ,sum(Eggs_sold_brown) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_sold_brown ,sum(Eggs_sold_nutra) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_sold_nutra ,sum(Eggs_sold_liquid) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_sold_liquid from ( select a.date Date ,a.area_classification Area_classification ,ifnull(b.Eggs_sold,0) Eggs_sold ,ifnull(b.eggs_sold_white,0) Eggs_sold_white ,ifnull(b.eggs_sold_brown,0) Eggs_sold_brown ,ifnull(b.eggs_sold_nutra,0) Eggs_sold_nutra ,ifnull(b.eggs_sold_liquid,0) Eggs_sold_liquid from eggozdb.maplemonk.Date_area_dim a left join ( select date ,area_classification ,(case when eggs_sold_white is null then 0 else eggs_sold_white end) Eggs_sold_White ,(case when eggs_sold_brown is null then 0 else eggs_sold_Brown end) Eggs_sold_Brown ,(case when eggs_sold_Nutra is null then 0 else eggs_sold_Nutra end) Eggs_sold_Nutra ,(case when eggs_sold_Liquid is null then 0 else eggs_sold_Liquid end) Eggs_sold_Liquid ,((case when eggs_sold_white is null then 0 else eggs_sold_white end) + (case when eggs_sold_brown is null then 0 else eggs_sold_Brown end) + (case when eggs_sold_Nutra is null then 0 else eggs_sold_Nutra end) + (case when eggs_sold_Liquid is null then 0 else eggs_sold_Liquid end)) as eggs_sold from ( select cast(timestampadd(minute,660,o.date) as date) Date ,rr.area_classification Area_Classification ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end) Egg_Name ,SUM(ol1.quantity*pp.SKU_Count) Eggs_Sold from eggozdb.Maplemonk.my_sql_order_order o left join eggozdb.Maplemonk.my_sql_order_orderline ol1 ON o.id=ol1.order_id left join eggozdb.Maplemonk.my_sql_product_product pp ON ol1.product_id =pp.id left join eggozdb.Maplemonk.my_sql_retailer_retailer rr ON o.retailer_id =rr.id left join (select order_id, COUNT(1) AS Items from eggozdb.Maplemonk.my_sql_order_orderline group by order_id) ol2 ON o.id=ol2.order_id WHERE o.status in (\'delivered\', \'completed\') and o.is_trial = \'FALSE\' and pp.slug not in ( \'NCR-WD-30\', \'White-DJN\', \'Brown-DJN\') group by cast(timestampadd(minute,660,o.date) as date) , rr.area_classification, ( case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end ) ) pivot( sum(eggs_sold) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Liquid\')) as p (Date, Area_Classification, Eggs_sold_White, Eggs_sold_Brown, Eggs_sold_Nutra, Eggs_sold_Liquid) ) b on a.area_classification = b.Area_Classification and a.date = b.date where year(a.date)>= 2020 and year(a.date) <= year(getdate()) ); CREATE OR REPLACE TABLE eggozdb.maplemonk.Collection_Summary as select * ,sum(Collections) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Collections from ( select a.date Date ,a.area_classification Area_classification ,ifnull(b.Collections,0) Collections from eggozdb.maplemonk.Date_area_dim a left join ( select date(timestampadd(minute,660,ps.transaction_date)) Collection_Date, area_classification, sum(pay_amount) Collections from eggozdb.maplemonk.my_sql_payment_payment pp left join eggozdb.maplemonk.my_sql_payment_invoice pi on pi.id = pp.invoice_id left join eggozdb.maplemonk.my_sql_payment_salestransaction ps on pp.salesTransaction_id = ps.id left join eggozdb.maplemonk.my_sql_order_order oo on oo.id = pi.order_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = ps.retailer_id where ps.transaction_type in (\'Credit\',\'Adjusted\') and ps.is_trial = \'FALSE\' group by area_classification, date(timestampadd(minute,660,ps.transaction_date)) ) b on a.area_classification = b.area_classification and a.date = b.collection_date where year(a.date)>= 2020 and year(a.date) <= year(getdate()) ); create or replace table eggozdb.maplemonk.Replacement_Summary as select * ,sum(Eggs_replaced) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_replaced ,sum(Eggs_replaced_white) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_replaced_white ,sum(Eggs_replaced_brown) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_replaced_brown ,sum(Eggs_replaced_nutra) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_replaced_nutra ,sum(Eggs_replaced_liquid) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_replaced_liquid from ( select a.date Date ,a.area_classification Area_classification ,ifnull(b.Eggs_replaced,0) Eggs_replaced ,ifnull(b.eggs_replaced_white,0) Eggs_replaced_white ,ifnull(b.eggs_replaced_brown,0) Eggs_replaced_brown ,ifnull(b.eggs_replaced_nutra,0) Eggs_replaced_nutra ,ifnull(b.eggs_replaced_liquid,0) Eggs_replaced_liquid from eggozdb.maplemonk.Date_area_dim a left join ( select replacement_date , area_classification ,(case when eggs_replaced_white is null then 0 else eggs_replaced_white end) Eggs_Replaced_White ,(case when eggs_replaced_brown is null then 0 else eggs_replaced_Brown end) Eggs_replaced_Brown ,(case when eggs_replaced_Nutra is null then 0 else eggs_replaced_Nutra end) Eggs_replaced_Nutra ,(case when eggs_replaced_Liquid is null then 0 else eggs_replaced_Liquid end) Eggs_replaced_Liquid ,((case when eggs_replaced_white is null then 0 else eggs_replaced_white end) + (case when eggs_replaced_brown is null then 0 else eggs_replaced_Brown end) + (case when eggs_replaced_Nutra is null then 0 else eggs_replaced_Nutra end) + (case when eggs_replaced_Liquid is null then 0 else eggs_replaced_Liquid end)) as eggs_replaced from ( select date(timestampadd(minute,660,or1.date)) as Replacement_Date ,rr.area_classification ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end) Egg_Name ,sum(or1.quantity* pp.sku_count) Eggs_replaced from eggozdb.maplemonk.my_sql_order_orderreturnline or1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr ON or1.retailer_id =rr.id left JOIN eggozdb.maplemonk.my_sql_product_product pp on pp.id = or1.product_id where line_type in (\'Replacement\') and pp.slug not in ( \'NCR-WD-30\', \'White-DJN\', \'Brown-DJN\') group by rr.area_classification, date(timestampadd(minute,660,or1.date)) ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end) ) pivot( sum(eggs_replaced) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Liquid\')) as p (Replacement_date, area_classification, Eggs_Replaced_White, Eggs_Replaced_Brown, Eggs_Replaced_Nutra, Eggs_Replaced_Liquid) ) b on a.area_classification = b.area_classification and a.date = b.replacement_date where year(a.date)>= 2020 and year(a.date) <= year(getdate()) ) ; create or replace table eggozdb.maplemonk.Return_Summary as select * ,sum(Eggs_returned) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_returned ,sum(Eggs_returned_white) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_returned_white ,sum(Eggs_returned_brown) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_returned_brown ,sum(Eggs_returned_nutra) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_returned_nutra ,sum(Eggs_returned_liquid) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_returned_liquid from ( select a.date Date ,a.area_classification Area_classification ,ifnull(b.Eggs_returned,0) Eggs_returned ,ifnull(b.eggs_returned_white,0) Eggs_returned_white ,ifnull(b.eggs_returned_brown,0) Eggs_returned_brown ,ifnull(b.eggs_returned_nutra,0) Eggs_returned_nutra ,ifnull(b.eggs_returned_liquid,0) Eggs_returned_liquid from eggozdb.maplemonk.Date_area_dim a left join ( select return_date , area_classification ,(case when eggs_returned_white is null then 0 else eggs_returned_white end) eggs_returned_white ,(case when eggs_returned_brown is null then 0 else eggs_returned_Brown end) Eggs_returned_Brown ,(case when eggs_returned_Nutra is null then 0 else eggs_returned_Nutra end) Eggs_returned_Nutra ,(case when eggs_returned_Liquid is null then 0 else eggs_returned_Liquid end) Eggs_returned_Liquid ,((case when eggs_returned_white is null then 0 else eggs_returned_white end) + (case when eggs_returned_brown is null then 0 else eggs_returned_Brown end) + (case when eggs_returned_Nutra is null then 0 else eggs_returned_Nutra end) + (case when eggs_returned_Liquid is null then 0 else eggs_returned_Liquid end)) as eggs_returned from ( select date(timestampadd(minute,660,or1.date)) as Return_Date ,rr.area_classification ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end) Egg_Name ,sum(or1.quantity* pp.sku_count) Eggs_returned from eggozdb.maplemonk.my_sql_order_orderreturnline or1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr ON or1.retailer_id =rr.id left JOIN eggozdb.maplemonk.my_sql_product_product pp on pp.id = or1.product_id where line_type in (\'Return\') and pp.slug not in ( \'NCR-WD-30\', \'White-DJN\', \'Brown-DJN\') group by rr.area_classification, date(timestampadd(minute,660,or1.date)) ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end) ) pivot( sum(eggs_returned) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Liquid\')) as p (Return_date, area_classification, Eggs_Returned_White, Eggs_Returned_Brown, Eggs_Returned_Nutra, Eggs_Returned_Liquid) ) b on a.area_classification = b.area_classification and a.date = b.return_date where year(a.date)>= 2020 and year(a.date) <= year(getdate()) ) ; create or replace table eggozdb.maplemonk.ReturnAmount_Summary as select * ,sum(Amount_Return) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Amount_Return ,sum(Amount_Return_white) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Amount_Return_white ,sum(Amount_Return_brown) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Amount_Return_brown ,sum(Amount_Return_nutra) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Amount_Return_nutra ,sum(Amount_Return_liquid) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Amount_Return_liquid from ( select a.date Date ,a.area_classification Area_classification ,ifnull(b.Amount_Return,0) Amount_Return ,ifnull(b.Amount_Return_white,0) Amount_Return_white ,ifnull(b.Amount_Return_brown,0) Amount_Return_brown ,ifnull(b.Amount_Return_nutra,0) Amount_Return_nutra ,ifnull(b.Amount_Return_liquid,0) Amount_Return_liquid from eggozdb.maplemonk.Date_area_dim a left join ( select return_date , area_classification ,(case when Amount_Return_white is null then 0 else Amount_Return_white end) Amount_Return_white ,(case when Amount_Return_brown is null then 0 else Amount_Return_Brown end) Amount_Return_Brown ,(case when Amount_Return_Nutra is null then 0 else Amount_Return_Nutra end) Amount_Return_Nutra ,(case when Amount_Return_Liquid is null then 0 else Amount_Return_Liquid end) Amount_Return_Liquid ,((case when Amount_Return_white is null then 0 else Amount_Return_white end) + (case when Amount_Return_brown is null then 0 else Amount_Return_Brown end) + (case when Amount_Return_Nutra is null then 0 else Amount_Return_Nutra end) + (case when Amount_Return_Liquid is null then 0 else Amount_Return_Liquid end)) as Amount_Return from ( select date(timestampadd(minute,660,or1.date)) as return_date ,rr.area_classification ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end) Egg_Name ,sum(or1.amount) Amount_Return from eggozdb.maplemonk.my_sql_order_orderreturnline or1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr ON or1.retailer_id =rr.id left JOIN eggozdb.maplemonk.my_sql_product_product pp on pp.id = or1.product_id where line_type in (\'Return\') and pp.slug not in ( \'NCR-WD-30\', \'White-DJN\', \'Brown-DJN\') group by rr.area_classification, date(timestampadd(minute,660,or1.date)) ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end) ) pivot( sum(Amount_Return) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Liquid\')) as p (return_date, area_classification, Amount_Return_White, Amount_Return_Brown, Amount_Return_Nutra, Amount_Return_Liquid) ) b on a.area_classification = b.area_classification and a.date = b.return_date where year(a.date)>= 2020 and year(a.date) <= year(getdate()) ) ; create or replace table eggozdb.maplemonk.Promo_Summary as select * ,sum(Eggs_promo) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_promo ,sum(Eggs_promo_white) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_promo_white ,sum(Eggs_promo_brown) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_promo_brown ,sum(Eggs_promo_nutra) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_promo_nutra ,sum(Eggs_promo_liquid) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_promo_liquid from ( select a.date Date ,a.area_classification Area_classification ,ifnull(b.Eggs_promo,0) Eggs_promo ,ifnull(b.eggs_promo_white,0) Eggs_promo_white ,ifnull(b.eggs_promo_brown,0) Eggs_promo_brown ,ifnull(b.eggs_promo_nutra,0) Eggs_promo_nutra ,ifnull(b.eggs_promo_liquid,0) Eggs_promo_liquid from eggozdb.maplemonk.Date_area_dim a left join ( select promo_date , area_classification ,(case when eggs_promo_white is null then 0 else eggs_promo_white end) eggs_promo_white ,(case when eggs_promo_brown is null then 0 else eggs_promo_Brown end) Eggs_promo_Brown ,(case when eggs_promo_Nutra is null then 0 else eggs_promo_Nutra end) Eggs_promo_Nutra ,(case when eggs_promo_Liquid is null then 0 else eggs_promo_Liquid end) Eggs_promo_Liquid ,((case when eggs_promo_white is null then 0 else eggs_promo_white end) + (case when eggs_promo_brown is null then 0 else eggs_promo_Brown end) + (case when eggs_promo_Nutra is null then 0 else eggs_promo_Nutra end) + (case when eggs_promo_Liquid is null then 0 else eggs_promo_Liquid end)) as eggs_promo from ( select date(timestampadd(minute,660,or1.date)) as Promo_Date ,rr.area_classification ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end) Egg_Name ,sum(or1.quantity* pp.sku_count) Eggs_promo from eggozdb.maplemonk.my_sql_order_orderreturnline or1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr ON or1.retailer_id =rr.id left JOIN eggozdb.maplemonk.my_sql_product_product pp on pp.id = or1.product_id where line_type in (\'Promo\') and pp.slug not in ( \'NCR-WD-30\', \'White-DJN\', \'Brown-DJN\') group by rr.area_classification, date(timestampadd(minute,660,or1.date)) ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end) ) pivot( sum(eggs_promo) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Liquid\')) as p (promo_date, area_classification, Eggs_promo_White, Eggs_promo_Brown, Eggs_promo_Nutra, Eggs_promo_Liquid) ) b on a.area_classification = b.area_classification and a.date = b.promo_date where year(a.date)>= 2020 and year(a.date) <= year(getdate()) ) ; create or replace table eggozdb.maplemonk.Retailers_onboarded_summary as select a.date date, a.area_classification Area_Classification ,sum(a.Daily_Retailers_Onboarded) over (partition by a.area_classification,year(a.date), month(a.date) order by year (a.date), month(a.date), a.Date) MTD_Retailers_Onboarded ,a.Daily_Retailers_Onboarded Daily_Retailers_Onboarded ,b.active_stores from ( select dad.date date, dad.area_classification area_classification, count(distinct rr.RETAILER_ID) Daily_Retailers_onboarded from eggozdb.maplemonk.Date_area_dim dad left join (select distinct RETAILER_ID ,ACQ_DATE,area_classification from (select o.*,MIN(date(timestampadd(minute,660,O.DATE))) OVER(PARTITION BY o.RETAILER_ID) AS ACQ_DATE,r.area_classification from eggozdb.maplemonk.my_sql_order_order o left join eggozdb.maplemonk.my_sql_retailer_retailer r on o.RETAILER_ID=r.id WHERE O.RETAILER_ID IS NOT NULL AND O.DATE::DATE>=\'2020-05-01\' AND O.STATUS IN (\'delivered\', \'completed\') AND O.IS_TRIAL = \'FALSE\' )x) rr on dad.date = date(timestampadd(minute,660,rr.ACQ_DATE)) and dad.area_classification = rr.area_classification where year(dad.date)>= 2020 and year(dad.date) <= year(getdate()) group by dad.date, dad.area_classification order by dad.date asc ) a left join ( select dad.date date, dad.area_classification area_classification, count(distinct owa.retailer_id) active_Stores from eggozdb.maplemonk.Date_area_dim dad left join (select oo.retailer_id, oo.date,oo.id, rr.area_classification ac from eggozdb.maplemonk.my_sql_order_order oo left join eggozdb.maplemonk.my_sql_retailer_retailer rr on oo.retailer_id = rr.id WHERE oo.RETAILER_ID IS NOT NULL AND oo.DATE::DATE>=\'2020-05-01\' AND oo.STATUS IN (\'delivered\', \'completed\') AND oo.IS_TRIAL = \'FALSE\' ) owa on dad.area_classification = owa.ac and date_from_parts(year(dad.date), month(dad.date), 1) <= date(timestampadd(minute,660,owa.date)) and dad.date >= date(timestampadd(minute,660,owa.date)) group by dad.date, dad.area_classification order by dad.date asc ) b on a.date=b.date and a.area_classification = b.area_classification; CREATE OR REPLACE TABLE eggozdb.maplemonk.Summary_reporting_table as select a.date ,a.area_classification as Area ,Net_Sales ,MTD_Net_Sales as MTD_Sales ,eggs_sold ,Eggs_sold_white ,Eggs_sold_brown ,Eggs_sold_nutra ,Eggs_sold_liquid ,mtd_eggs_sold ,MTD_Eggs_sold_white ,MTD_Eggs_sold_brown ,MTD_Eggs_sold_nutra ,MTD_Eggs_sold_liquid ,collections ,mtd_collections ,eggs_replaced ,eggs_replaced_white ,eggs_replaced_brown ,eggs_replaced_nutra ,eggs_replaced_liquid ,mtd_eggs_replaced ,mtd_eggs_replaced_white ,mtd_eggs_replaced_brown ,mtd_eggs_replaced_nutra ,mtd_eggs_replaced_liquid ,eggs_returned ,eggs_returned_white ,eggs_returned_brown ,eggs_returned_nutra ,eggs_returned_liquid ,mtd_eggs_returned ,mtd_eggs_returned_white ,mtd_eggs_returned_brown ,mtd_eggs_returned_nutra ,mtd_eggs_returned_liquid ,Amount_Return ,Amount_Return_white ,Amount_Return_brown ,Amount_Return_nutra ,Amount_Return_liquid ,mtd_Amount_Return ,mtd_Amount_Return_white ,mtd_Amount_Return_brown ,mtd_Amount_Return_nutra ,mtd_Amount_Return_liquid ,eggs_promo ,eggs_promo_white ,eggs_promo_brown ,eggs_promo_nutra ,eggs_promo_liquid ,mtd_eggs_promo ,mtd_eggs_promo_white ,mtd_eggs_promo_brown ,mtd_eggs_promo_nutra ,mtd_eggs_promo_liquid ,d.Daily_Retailers_Onboarded ,d.MTD_Retailers_Onboarded ,os.MTD_Retailers_Onboarded Previous_Month_MTD_Retailers_onboarded ,datediff(day, date(DATE_TRUNC(\'MONTH\',a.date)), a.date) + 1 as Days_in_month ,d.ACTIVE_STORES from eggozdb.maplemonk.SALES_SUMMARY a left join eggozdb.maplemonk.Collection_Summary b on a.area_classification = b.area_classification and a.date = b.date left join eggozdb.maplemonk.Replacement_Summary c on a.area_classification = c.area_classification and a.date = c.date left join eggozdb.maplemonk.Retailers_onboarded_summary d on d.area_Classification = a.area_classification and d.date = a.date left join eggozdb.maplemonk.Retailers_onboarded_summary os on os.area_Classification = d.area_classification and os.date = DATEADD(DAY,(-1), DATE_TRUNC(\'MONTH\',d.date)) left join eggozdb.maplemonk.Eggs_Sold_SUMMARY e on e.area_Classification = a.area_classification and e.date = a.date left join eggozdb.maplemonk.Return_Summary f on a.area_classification = f.area_classification and a.date = f.date left join eggozdb.maplemonk.Promo_Summary g on a.area_classification = g.area_classification and a.date = g.date left join eggozdb.maplemonk.ReturnAmount_Summary ra on a.area_classification = ra.area_classification and a.date = ra.date ; create or replace table eggozdb.Maplemonk.Sales_summary_beat_retailer as select date ,area_classification ,beat_name ,beat_number_operations ,beat_number_original ,code ,SKU ,name classification_name ,sum(sales_per_item) Net_sales from ( select cast(timestampadd(minute,660,o.date) as date) Date ,o.id ,ol1.id ,rr.area_classification Area_Classification ,rr.code ,ba.beat_name ,ba.beat_number beat_number_operations ,rr.beat_number beat_number_original ,rc.name ,rr.onboarding_status ,sum(single_sku_rate*quantity + single_sku_discount*quantity) Sales_per_item ,concat(pp.sku_count,left(pp.name,1)) SKU from eggozdb.Maplemonk.my_sql_order_order o left join eggozdb.Maplemonk.my_sql_order_orderline ol1 ON o.id=ol1.order_id left join eggozdb.Maplemonk.my_sql_product_product pp ON ol1.product_id =pp.id left join eggozdb.Maplemonk.my_sql_retailer_retailer rr ON o.retailer_id =rr.id left join eggozdb.Maplemonk.my_sql_retailer_classification rc ON rr.classification_id = rc.id left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment ba on ba.id = o.beat_assignment_id left join (select order_id, COUNT(1) AS Items from eggozdb.Maplemonk.my_sql_order_orderline group by order_id) ol2 ON o.id=ol2.order_id WHERE o.status in (\'delivered\', \'completed\') and o.is_trial = \'FALSE\' and pp.slug not in ( \'NCR-WD-30\', \'White-DJN\', \'Brown-DJN\') group by cast(timestampadd(minute,660,o.date) as date) , rr.area_classification, rr.code, ba.beat_name,ba.beat_number, o.id, ol1.id, concat(pp.sku_count,left(pp.name,1)),rc.name, rr.onboarding_status,rr.beat_number ) group by date ,area_classification, beat_name, code, SKU, name, onboarding_status,beat_number_operations, beat_number_original ; create or replace table eggozdb.Maplemonk.Eggs_Sold_SUMMARY_beat_retailer as select date ,area_classification ,beat_name ,beat_number_operations ,beat_number_original ,code ,name classification_name ,SKU ,(case when eggs_sold_white is null then 0 else eggs_sold_white end) Eggs_sold_White ,(case when eggs_sold_brown is null then 0 else eggs_sold_Brown end) Eggs_sold_Brown ,(case when eggs_sold_Nutra is null then 0 else eggs_sold_Nutra end) Eggs_sold_Nutra ,(case when eggs_sold_Liquid is null then 0 else eggs_sold_Liquid end) Eggs_sold_Liquid ,((case when eggs_sold_white is null then 0 else eggs_sold_white end) + (case when eggs_sold_brown is null then 0 else eggs_sold_Brown end) + (case when eggs_sold_Nutra is null then 0 else eggs_sold_Nutra end) + (case when eggs_sold_Liquid is null then 0 else eggs_sold_Liquid end)) as eggs_sold from ( select cast(timestampadd(minute,660,o.date) as date) Date ,rr.area_classification Area_Classification ,ba.beat_name ,ba.beat_number beat_number_operations ,rr.beat_number beat_number_original ,rr.code ,rc.name ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end) Egg_Name ,concat(pp.sku_count,left(pp.name,1)) SKU ,SUM(ol1.quantity*pp.SKU_Count) Eggs_Sold from eggozdb.Maplemonk.my_sql_order_order o left join eggozdb.Maplemonk.my_sql_order_orderline ol1 ON o.id=ol1.order_id left join eggozdb.Maplemonk.my_sql_product_product pp ON ol1.product_id =pp.id left join eggozdb.Maplemonk.my_sql_retailer_retailer rr ON o.retailer_id =rr.id left join eggozdb.Maplemonk.my_sql_retailer_classification rc ON rr.classification_id = rc.id left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment ba on ba.id = o.beat_assignment_id left join (select order_id, COUNT(1) AS Items from eggozdb.Maplemonk.my_sql_order_orderline group by order_id) ol2 ON o.id=ol2.order_id WHERE o.status in (\'delivered\', \'completed\') and o.is_trial = \'FALSE\' and pp.slug not in ( \'NCR-WD-30\', \'White-DJN\', \'Brown-DJN\') group by cast(timestampadd(minute,660,o.date) as date) , rr.area_classification, (case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end), ba.beat_name, ba.beat_number, rr.code, rc.name, concat(pp.sku_count,left(pp.name,1)), rr.beat_number ) pivot( sum(eggs_sold) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Liquid\')) as p (Date, Area_Classification, beat_name, beat_number_operations, beat_number_original, code, SKU, name, Eggs_sold_White, Eggs_sold_Brown, Eggs_sold_Nutra, Eggs_sold_Liquid) ; CREATE OR REPLACE TABLE eggozdb.maplemonk.Collection_Summary_beat_retailer as select date(timestampadd(minute,660,ps.transaction_date)) Date ,area_classification ,sum(pay_amount) Collections ,rr.code ,ba.beat_name ,ba.beat_number beat_number_operations ,rr.beat_number beat_number_original ,rc.name Classification_name ,pc.number payment_cycle from eggozdb.maplemonk.my_sql_payment_payment pp left join eggozdb.maplemonk.my_sql_payment_invoice pi on pi.id = pp.invoice_id left join eggozdb.maplemonk.my_sql_payment_salestransaction ps on pp.salesTransaction_id = ps.id left join eggozdb.maplemonk.my_sql_order_order oo on oo.id = pi.order_id left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment ba on ba.id = ps.beat_assignment_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = ps.retailer_id left join eggozdb.maplemonk.my_sql_retailer_retailerpaymentcycle pc on pc.id = rr.payment_cycle_id left join eggozdb.Maplemonk.my_sql_retailer_classification rc ON rr.classification_id = rc.id where ps.transaction_type in (\'Credit\',\'Adjusted\') and ps.is_trial = \'FALSE\' group by area_classification, date(timestampadd(minute,660,ps.transaction_date)), rr.code, ba.beat_name, rc.name, ba.beat_number, rr.beat_number, pc.number ; create or replace table eggozdb.maplemonk.Replacement_Summary_beat_retailer as select replacement_date date , area_classification ,beat_name ,beat_number_operations ,beat_number_original ,code ,name classification_name ,SKU ,(case when eggs_replaced_white is null then 0 else eggs_replaced_white end) Eggs_Replaced_White ,(case when eggs_replaced_brown is null then 0 else eggs_replaced_Brown end) Eggs_replaced_Brown ,(case when eggs_replaced_Nutra is null then 0 else eggs_replaced_Nutra end) Eggs_replaced_Nutra ,(case when eggs_replaced_Liquid is null then 0 else eggs_replaced_Liquid end) Eggs_replaced_Liquid ,((case when eggs_replaced_white is null then 0 else eggs_replaced_white end) + (case when eggs_replaced_brown is null then 0 else eggs_replaced_Brown end) + (case when eggs_replaced_Nutra is null then 0 else eggs_replaced_Nutra end) + (case when eggs_replaced_Liquid is null then 0 else eggs_replaced_Liquid end)) as eggs_replaced from ( select date(timestampadd(minute,660,or1.date)) as Replacement_Date ,rr.area_classification ,ba.beat_name ,ba.beat_number beat_number_operations ,rr.beat_number beat_number_original ,rr.code ,rc.name ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end) Egg_Name ,concat(pp.sku_count,left(pp.name,1)) SKU ,sum(or1.quantity* pp.sku_count) Eggs_replaced from eggozdb.maplemonk.my_sql_order_orderreturnline or1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr ON or1.retailer_id =rr.id left join eggozdb.Maplemonk.my_sql_retailer_classification rc ON rr.classification_id = rc.id left JOIN eggozdb.maplemonk.my_sql_product_product pp on pp.id = or1.product_id left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment ba on ba.id = or1.beat_assignment_id where line_type in (\'Replacement\') and pp.slug not in ( \'NCR-WD-30\', \'White-DJN\', \'Brown-DJN\') group by rr.area_classification, date(timestampadd(minute,660,or1.date)) ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end),ba.beat_name, ba.beat_number, rr.beat_number ,rr.code,rc.name, concat(pp.sku_count,left(pp.name,1)) ) pivot( sum(eggs_replaced) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Liquid\')) as p (Replacement_date, area_classification, beat_name, beat_number_operations, beat_number_original, SKU, code, name, Eggs_Replaced_White, Eggs_Replaced_Brown, Eggs_Replaced_Nutra, Eggs_Replaced_Liquid) ; create or replace table eggozdb.maplemonk.Promo_Summary_beat_retailer as select Promo_date date , area_classification ,beat_name ,beat_number_operations ,beat_number_original ,code ,name classification_name ,SKU ,(case when eggs_promo_white is null then 0 else eggs_promo_white end) Eggs_promo_White ,(case when eggs_promo_brown is null then 0 else eggs_promo_Brown end) Eggs_promo_Brown ,(case when eggs_promo_Nutra is null then 0 else eggs_promo_Nutra end) Eggs_promo_Nutra ,(case when eggs_promo_Liquid is null then 0 else eggs_promo_Liquid end) Eggs_promo_Liquid ,((case when eggs_promo_white is null then 0 else eggs_promo_white end) + (case when eggs_promo_brown is null then 0 else eggs_promo_Brown end) + (case when eggs_promo_Nutra is null then 0 else eggs_promo_Nutra end) + (case when eggs_promo_Liquid is null then 0 else eggs_promo_Liquid end)) as eggs_promo from ( select date(timestampadd(minute,660,or1.date)) as Promo_Date ,rr.area_classification ,ba.beat_name ,ba.beat_number beat_number_operations ,rr.beat_number beat_number_original ,rr.code ,rc.name ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end) Egg_Name ,concat(pp.sku_count,left(pp.name,1)) SKU ,sum(or1.quantity* pp.sku_count) Eggs_promo from eggozdb.maplemonk.my_sql_order_orderreturnline or1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr ON or1.retailer_id =rr.id left join eggozdb.Maplemonk.my_sql_retailer_classification rc ON rr.classification_id = rc.id left JOIN eggozdb.maplemonk.my_sql_product_product pp on pp.id = or1.product_id left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment ba on ba.id = or1.beat_assignment_id where line_type in (\'Promo\') and pp.slug not in ( \'NCR-WD-30\', \'White-DJN\', \'Brown-DJN\') group by rr.area_classification, date(timestampadd(minute,660,or1.date)) ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end),ba.beat_name,ba.beat_number, rr.beat_number ,rr.code, rc.name, concat(pp.sku_count,left(pp.name,1)) ) pivot( sum(eggs_promo) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Liquid\')) as p (promo_date, area_classification, beat_name,beat_number_operations,beat_number_original, SKU, code, name, Eggs_promo_White, Eggs_promo_Brown, Eggs_promo_Nutra, Eggs_promo_Liquid) ; create or replace table eggozdb.maplemonk.Return_Summary_beat_retailer as select return_date date , area_classification ,beat_name ,beat_number_operations ,beat_number_original ,code ,name classification_name ,SKU ,(case when eggs_return_white is null then 0 else eggs_return_white end) Eggs_return_White ,(case when eggs_return_brown is null then 0 else eggs_return_Brown end) Eggs_return_Brown ,(case when eggs_return_Nutra is null then 0 else eggs_return_Nutra end) Eggs_return_Nutra ,(case when eggs_return_Liquid is null then 0 else eggs_return_Liquid end) Eggs_return_Liquid ,((case when eggs_return_white is null then 0 else eggs_return_white end) + (case when eggs_return_brown is null then 0 else eggs_return_Brown end) + (case when eggs_return_Nutra is null then 0 else eggs_return_Nutra end) + (case when eggs_return_Liquid is null then 0 else eggs_return_Liquid end)) as eggs_return from ( select date(timestampadd(minute,660,or1.date)) as return_Date ,rr.area_classification ,ba.beat_name ,ba.beat_number beat_number_operations ,rr.beat_number beat_number_original ,rr.code ,rc.name ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end) Egg_Name ,concat(pp.sku_count,left(pp.name,1)) SKU ,sum(or1.quantity* pp.sku_count) Eggs_return from eggozdb.maplemonk.my_sql_order_orderreturnline or1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr ON or1.retailer_id =rr.id left join eggozdb.Maplemonk.my_sql_retailer_classification rc ON rr.classification_id = rc.id left JOIN eggozdb.maplemonk.my_sql_product_product pp on pp.id = or1.product_id left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment ba on ba.id = or1.beat_assignment_id where line_type in (\'Return\') and pp.slug not in ( \'NCR-WD-30\', \'White-DJN\', \'Brown-DJN\') group by rr.area_classification, date(timestampadd(minute,660,or1.date)) ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end),ba.beat_name,ba.beat_number, rr.beat_number ,rr.code, rc.name, concat(pp.sku_count,left(pp.name,1)) ) pivot( sum(eggs_return) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Liquid\')) as p (return_date, area_classification, beat_name,beat_number_operations,beat_number_original, SKU, code, name, Eggs_return_White, Eggs_return_Brown, Eggs_return_Nutra, Eggs_return_Liquid) ; create or replace table eggozdb.maplemonk.ReturnAmount_Summary_beat_retailer as select return_date date , area_classification ,beat_name ,beat_number_operations ,beat_number_original ,code ,name classification_name ,SKU ,(case when amount_return_white is null then 0 else amount_return_white end) amount_return_White ,(case when amount_return_brown is null then 0 else amount_return_Brown end) amount_return_Brown ,(case when amount_return_Nutra is null then 0 else amount_return_Nutra end) amount_return_Nutra ,(case when amount_return_Liquid is null then 0 else amount_return_Liquid end) amount_return_Liquid ,((case when amount_return_white is null then 0 else amount_return_white end) + (case when amount_return_brown is null then 0 else amount_return_Brown end) + (case when amount_return_Nutra is null then 0 else amount_return_Nutra end) + (case when amount_return_Liquid is null then 0 else amount_return_Liquid end)) as amount_return from ( select date(timestampadd(minute,660,or1.date)) as return_Date ,rr.area_classification ,ba.beat_name ,ba.beat_number beat_number_operations ,rr.beat_number beat_number_original ,rr.code ,rc.name ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end) Egg_Name ,concat(pp.sku_count,left(pp.name,1)) SKU ,sum(amount) amount_return from eggozdb.maplemonk.my_sql_order_orderreturnline or1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr ON or1.retailer_id =rr.id left join eggozdb.Maplemonk.my_sql_retailer_classification rc ON rr.classification_id = rc.id left JOIN eggozdb.maplemonk.my_sql_product_product pp on pp.id = or1.product_id left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment ba on ba.id = or1.beat_assignment_id where line_type in (\'Return\') and pp.slug not in ( \'NCR-WD-30\', \'White-DJN\', \'Brown-DJN\') group by rr.area_classification, date(timestampadd(minute,660,or1.date)) ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' else \'Liquid\' end),ba.beat_name,ba.beat_number, rr.beat_number ,rr.code, rc.name, concat(pp.sku_count,left(pp.name,1)) ) pivot( sum(amount_return) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Liquid\')) as p (return_date, area_classification, beat_name,beat_number_operations,beat_number_original, SKU, code, name, amount_return_White, amount_return_Brown, amount_return_Nutra, amount_return_Liquid); CREATE OR REPLACE TABLE eggozdb.maplemonk.Pendency_beat_retailer as select cast(timestampadd(minute,660,oo.date) as date) Date ,area_classification ,sum(pay_amount) Collections_as_of_today ,rr.code ,ba.beat_name ,ba.beat_number beat_number_operations ,rr.beat_number beat_number_original ,rc.name Classification_name from eggozdb.maplemonk.my_sql_payment_payment pp left join eggozdb.maplemonk.my_sql_payment_invoice pi on pi.id = pp.invoice_id left join eggozdb.maplemonk.my_sql_payment_salestransaction ps on pp.salesTransaction_id = ps.id left join eggozdb.maplemonk.my_sql_order_order oo on oo.id = pi.order_id left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment ba on ba.id = oo.beat_assignment_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = ps.retailer_id left join eggozdb.Maplemonk.my_sql_retailer_classification rc ON rr.classification_id = rc.id where ps.transaction_type in (\'Credit\',\'Adjusted\') and ps.is_trial = \'FALSE\' group by area_classification, cast(timestampadd(minute,660,oo.date) as date), rr.code, ba.beat_name, rc.name, ba.beat_number, rr.beat_number ; CREATE OR REPLACE TABLE eggozdb.maplemonk.Summary_reporting_table_beat_retailer as WITH SALES_SUMMARY_beat_retailer_CTE AS ( select DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name, SUM(NET_SALES)AS NET_SALES from eggozdb.maplemonk.SALES_SUMMARY_beat_retailer GROUP BY DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name), Replacement_Summary_beat_retailer_CTE AS ( SELECT DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name, sum(EGGS_REPLACED_WHITE)EGGS_REPLACED_WHITE, sum(EGGS_REPLACED_BROWN)EGGS_REPLACED_BROWN, sum(EGGS_REPLACED_NUTRA)EGGS_REPLACED_NUTRA, sum(EGGS_REPLACED_LIQUID)EGGS_REPLACED_LIQUID, sum(EGGS_REPLACED)EGGS_REPLACED FROM eggozdb.maplemonk.Replacement_Summary_beat_retailer GROUP BY DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name), EGGS_SOLD_SUMMARY_BEAT_RETAILER_CTE AS ( select DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name, sum(EGGS_SOLD_WHITE)EGGS_SOLD_WHITE, sum(EGGS_SOLD_BROWN)EGGS_SOLD_BROWN, sum(EGGS_SOLD_NUTRA)EGGS_SOLD_NUTRA, sum(EGGS_SOLD_LIQUID)EGGS_SOLD_LIQUID, sum(EGGS_SOLD)EGGS_SOLD FROM eggozdb.maplemonk.EGGS_SOLD_SUMMARY_BEAT_RETAILER GROUP BY DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name), Promo_Summary_beat_retailer_CTE AS ( SELECT DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name, sum(EGGS_PROMO_WHITE)EGGS_PROMO_WHITE, sum(EGGS_PROMO_BROWN)EGGS_PROMO_BROWN, sum(EGGS_PROMO_NUTRA)EGGS_PROMO_NUTRA, sum(EGGS_PROMO_LIQUID)EGGS_PROMO_LIQUID, sum(EGGS_PROMO)EGGS_PROMO FROM eggozdb.maplemonk.Promo_Summary_beat_retailer GROUP BY DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name), Return_Summary_beat_retailer_CTE AS ( SELECT DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name, sum(EGGS_Return_WHITE)EGGS_Return_WHITE, sum(EGGS_Return_BROWN)EGGS_Return_BROWN, sum(EGGS_Return_NUTRA)EGGS_Return_NUTRA, sum(EGGS_Return_LIQUID)EGGS_Return_LIQUID, sum(EGGS_Return)EGGS_Return FROM eggozdb.maplemonk.Return_Summary_beat_retailer GROUP BY DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name), ReturnAmount_Summary_beat_retailer_CTE AS ( SELECT DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name, sum(Amount_Return_WHITE)Amount_Return_WHITE, sum(Amount_Return_BROWN)Amount_Return_BROWN, sum(Amount_Return_NUTRA)Amount_Return_NUTRA, sum(Amount_Return_LIQUID)Amount_Return_LIQUID, sum(Amount_Return)Amount_Return FROM eggozdb.maplemonk.RETURNAMOUNT_SUMMARY_BEAT_RETAILER GROUP BY DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name) select table2.*, bc2.cluster_name from ( select v.*,rp.name Parent_retailer_name, cast(timestampadd(minute,660,mp.onboarding_date) as date) ONBOARDING_DATE, mp.onboarding_status ,case when v.beat_number_operations = 0 then v.beat_number_original else v.beat_number_operations end as beat_number_consolidated ,case when eggs_sold<>0 then 1 else 0 end as is_sales from ( select t.*,(case when k.collections_as_of_today is null then 0 else k.collections_as_of_today end) collections_as_of_today from( select (case when u.date is not null then u.date else ra.date end) date ,(case when u.area_classification is not null then u.area_classification else ra.area_classification end) Area ,(case when u.beat_name is not null then u.beat_name else ra.beat_name end) Beat_Name ,(case when u.beat_number_operations is not null then u.beat_number_operations else ra.beat_number_operations end) beat_number_operations ,(case when u.beat_number_original is not null then u.beat_number_original else ra.beat_number_original end) beat_number_original ,(case when u.code is not null then u.code else ra.code end) Retailer_Name ,(case when u.classification_name is not null then u.classification_name else ra.classification_name end) classification_name ,(case when NET_SALES is null then 0 else NET_SALES end) Net_Sales ,(case when eggs_sold is null then 0 else eggs_sold end) eggs_sold ,(case when eggs_sold_white is null then 0 else Eggs_sold_white end) Eggs_sold_white ,(case when Eggs_sold_brown is null then 0 else Eggs_sold_brown end) Eggs_sold_brown ,(case when Eggs_sold_nutra is null then 0 else Eggs_sold_nutra end) Eggs_sold_nutra ,(case when Eggs_sold_liquid is null then 0 else Eggs_sold_liquid end) Eggs_sold_liquid ,(case when collections is null then 0 else collections end) collections ,(case when eggs_replaced is null then 0 else eggs_replaced end) eggs_replaced ,(case when eggs_replaced_white is null then 0 else eggs_replaced_white end) eggs_replaced_white ,(case when eggs_replaced_brown is null then 0 else eggs_replaced_brown end) eggs_replaced_brown ,(case when eggs_replaced_nutra is null then 0 else eggs_replaced_nutra end) eggs_replaced_nutra ,(case when eggs_replaced_liquid is null then 0 else eggs_replaced_liquid end) eggs_replaced_liquid ,(case when eggs_promo is null then 0 else eggs_promo end) eggs_promo ,(case when eggs_promo_white is null then 0 else eggs_promo_white end) eggs_promo_white ,(case when eggs_promo_brown is null then 0 else eggs_promo_brown end) eggs_promo_brown ,(case when eggs_promo_nutra is null then 0 else eggs_promo_nutra end) eggs_promo_nutra ,(case when eggs_promo_liquid is null then 0 else eggs_promo_liquid end) eggs_promo_liquid ,(case when eggs_return is null then 0 else eggs_return end) eggs_return ,(case when eggs_return_white is null then 0 else eggs_return_white end) eggs_return_white ,(case when eggs_return_brown is null then 0 else eggs_return_brown end) eggs_return_brown ,(case when eggs_return_nutra is null then 0 else eggs_return_nutra end) eggs_return_nutra ,(case when eggs_return_liquid is null then 0 else eggs_return_liquid end) eggs_return_liquid ,(case when amount_return is null then 0 else amount_return end) amount_return ,(case when amount_return_white is null then 0 else amount_return_white end) amount_return_white ,(case when amount_return_brown is null then 0 else amount_return_brown end) amount_return_brown ,(case when amount_return_nutra is null then 0 else amount_return_nutra end) amount_return_nutra ,(case when amount_return_liquid is null then 0 else amount_return_liquid end) amount_return_liquid from( select (case when w.date is not null then w.date else r.date end) date ,(case when w.area_classification is not null then w.area_classification else r.area_classification end) Area_classification ,(case when w.beat_name is not null then w.beat_name else r.beat_name end) Beat_Name ,(case when w.beat_number_operations is not null then w.beat_number_operations else r.beat_number_operations end) beat_number_operations ,(case when w.beat_number_original is not null then w.beat_number_original else r.beat_number_original end) beat_number_original ,(case when w.code is not null then w.code else r.code end) code ,(case when w.classification_name is not null then w.classification_name else r.classification_name end) classification_name ,(case when NET_SALES is null then 0 else NET_SALES end) Net_Sales ,(case when eggs_sold is null then 0 else eggs_sold end) eggs_sold ,(case when eggs_sold_white is null then 0 else Eggs_sold_white end) Eggs_sold_white ,(case when Eggs_sold_brown is null then 0 else Eggs_sold_brown end) Eggs_sold_brown ,(case when Eggs_sold_nutra is null then 0 else Eggs_sold_nutra end) Eggs_sold_nutra ,(case when Eggs_sold_liquid is null then 0 else Eggs_sold_liquid end) Eggs_sold_liquid ,(case when collections is null then 0 else collections end) collections ,(case when eggs_replaced is null then 0 else eggs_replaced end) eggs_replaced ,(case when eggs_replaced_white is null then 0 else eggs_replaced_white end) eggs_replaced_white ,(case when eggs_replaced_brown is null then 0 else eggs_replaced_brown end) eggs_replaced_brown ,(case when eggs_replaced_nutra is null then 0 else eggs_replaced_nutra end) eggs_replaced_nutra ,(case when eggs_replaced_liquid is null then 0 else eggs_replaced_liquid end) eggs_replaced_liquid ,(case when eggs_promo is null then 0 else eggs_promo end) eggs_promo ,(case when eggs_promo_white is null then 0 else eggs_promo_white end) eggs_promo_white ,(case when eggs_promo_brown is null then 0 else eggs_promo_brown end) eggs_promo_brown ,(case when eggs_promo_nutra is null then 0 else eggs_promo_nutra end) eggs_promo_nutra ,(case when eggs_promo_liquid is null then 0 else eggs_promo_liquid end) eggs_promo_liquid ,(case when eggs_return is null then 0 else eggs_return end) eggs_return ,(case when eggs_return_white is null then 0 else eggs_return_white end) eggs_return_white ,(case when eggs_return_brown is null then 0 else eggs_return_brown end) eggs_return_brown ,(case when eggs_return_nutra is null then 0 else eggs_return_nutra end) eggs_return_nutra ,(case when eggs_return_liquid is null then 0 else eggs_return_liquid end) eggs_return_liquid from ( select (case when x.date is not null then x.date else p.date end) date ,(case when x.area_classification is not null then x.area_classification else p.area_classification end) Area_classification ,(case when x.beat_name is not null then x.beat_name else p.beat_name end) Beat_Name ,(case when x.beat_number_operations is not null then x.beat_number_operations else p.beat_number_operations end) beat_number_operations ,(case when x.beat_number_original is not null then x.beat_number_original else p.beat_number_original end) beat_number_original ,(case when x.code is not null then x.code else p.code end) code ,(case when x.classification_name is not null then x.classification_name else p.classification_name end) classification_name ,(case when NET_SALES is null then 0 else NET_SALES end) Net_Sales ,(case when eggs_sold is null then 0 else eggs_sold end) eggs_sold ,(case when eggs_sold_white is null then 0 else Eggs_sold_white end) Eggs_sold_white ,(case when Eggs_sold_brown is null then 0 else Eggs_sold_brown end) Eggs_sold_brown ,(case when Eggs_sold_nutra is null then 0 else Eggs_sold_nutra end) Eggs_sold_nutra ,(case when Eggs_sold_liquid is null then 0 else Eggs_sold_liquid end) Eggs_sold_liquid ,(case when collections is null then 0 else collections end) collections ,(case when eggs_replaced is null then 0 else eggs_replaced end) eggs_replaced ,(case when eggs_replaced_white is null then 0 else eggs_replaced_white end) eggs_replaced_white ,(case when eggs_replaced_brown is null then 0 else eggs_replaced_brown end) eggs_replaced_brown ,(case when eggs_replaced_nutra is null then 0 else eggs_replaced_nutra end) eggs_replaced_nutra ,(case when eggs_replaced_liquid is null then 0 else eggs_replaced_liquid end) eggs_replaced_liquid ,(case when eggs_promo is null then 0 else eggs_promo end) eggs_promo ,(case when eggs_promo_white is null then 0 else eggs_promo_white end) eggs_promo_white ,(case when eggs_promo_brown is null then 0 else eggs_promo_brown end) eggs_promo_brown ,(case when eggs_promo_nutra is null then 0 else eggs_promo_nutra end) eggs_promo_nutra ,(case when eggs_promo_liquid is null then 0 else eggs_promo_liquid end) eggs_promo_liquid from( select (case when y.date is not null then y.date else e.date end) date ,(case when y.area_classification is not null then y.area_classification else e.area_classification end) area_classification ,(case when y.beat_name is not null then y.beat_name else e.beat_name end) Beat_Name ,(case when y.beat_number_operations is not null then y.beat_number_operations else e.beat_number_operations end) beat_number_operations ,(case when y.beat_number_original is not null then y.beat_number_original else e.beat_number_original end) beat_number_original ,(case when y.code is not null then y.code else e.code end) code ,(case when y.classification_name is not null then y.classification_name else e.classification_name end) classification_name ,NET_SALES ,collections ,eggs_replaced ,eggs_replaced_white ,eggs_replaced_brown ,eggs_replaced_nutra ,eggs_replaced_liquid ,eggs_sold ,eggs_sold_white ,eggs_sold_brown ,eggs_sold_nutra ,eggs_sold_liquid from (select (case when z.date is not null then z.date else c.date end) date ,(case when z.area_classification is not null then z.area_classification else c.area_classification end) area_classification ,(case when z.beat_name is not null then z.beat_name else c.beat_name end) beat_name ,(case when z.beat_number_operations is not null then z.beat_number_operations else c.beat_number_operations end) beat_number_operations ,(case when z.beat_number_original is not null then z.beat_number_original else c.beat_number_original end) beat_number_original ,(case when z.code is not null then z.code else c.code end) code ,(case when z.classification_name is not null then z.classification_name else c.classification_name end) classification_name ,NET_SALES ,collections ,eggs_replaced ,eggs_replaced_white ,eggs_replaced_brown ,eggs_replaced_nutra ,eggs_replaced_liquid from (select (case when a.date is not null then a.date else b.date end) date ,(case when a.area_classification is not null then a.area_classification else b.area_classification end) area_classification ,(case when a.beat_name is not null then a.beat_name else b.beat_name end) beat_name ,(case when a.beat_number_operations is not null then a.beat_number_operations else b.beat_number_operations end) beat_number_operations ,(case when a.beat_number_original is not null then a.beat_number_original else b.beat_number_original end) beat_number_original ,(case when a.code is not null then a.code else b.code end) code ,(case when a.classification_name is not null then a.classification_name else b.classification_name end) classification_name ,NET_SALES ,collections from SALES_SUMMARY_beat_retailer_CTE a full outer join eggozdb.maplemonk.Collection_Summary_beat_retailer b on a.area_classification = b.area_classification and a.date = b.date and a.code = b.code and a.beat_name = b.beat_name and a.beat_number_operations = b.beat_number_operations and a.beat_number_original = b.beat_number_original and a.classification_name = b.classification_name ) z full outer join Replacement_Summary_beat_retailer_CTE c on z.area_classification = c.area_classification and z.date = c.date and z.code = c.code and z.beat_name = c.beat_name and z.beat_number_operations = c.beat_number_operations and z.beat_number_original = c.beat_number_original and z.classification_name = c.classification_name ) y full outer join EGGS_SOLD_SUMMARY_BEAT_RETAILER_CTE e on e.area_Classification = y.area_classification and e.date = y.date and e.code = y.code and e.beat_name = y.beat_name and e.beat_number_operations = y.beat_number_operations and e.beat_number_original = y.beat_number_original and e.classification_name = y.classification_name )x full outer join Promo_Summary_beat_retailer_CTE p on p.area_Classification = x.area_classification and p.date = x.date and p.code = x.code and p.beat_name = x.beat_name and p.beat_number_operations = x.beat_number_operations and p.beat_number_original = x.beat_number_original and p.classification_name = x.classification_name )w full outer join return_Summary_beat_retailer_CTE r on r.area_Classification = w.area_classification and r.date = w.date and r.code = w.code and r.beat_name = w.beat_name and r.beat_number_operations = w.beat_number_operations and r.beat_number_original = w.beat_number_original and r.classification_name = w.classification_name )u full outer join returnamount_Summary_beat_retailer_CTE ra on ra.area_Classification = u.area_classification and ra.date = u.date and ra.code = u.code and ra.beat_name = u.beat_name and ra.beat_number_operations = u.beat_number_operations and ra.beat_number_original = u.beat_number_original and ra.classification_name = u.classification_name )t left join eggozdb.maplemonk.Pendency_beat_retailer k on t.area = k.area_classification and t.date = k.date and t.Retailer_Name = k.code and t.beat_name = k.beat_name and t.beat_number_operations = k.beat_number_operations and t.beat_number_original = k.beat_number_original and t.classification_name = k.classification_name )v left join eggozdb.maplemonk.my_sql_retailer_retailer mp on mp.code = v.retailer_name left join eggozdb.maplemonk.my_sql_retailer_retailerparent rp on rp.id = mp.parent_id ) table2 left join eggozdb.maplemonk.my_sql_retailer_retailer rr2 on table2.area = rr2.area_classification and table2.beat_number_original = rr2.beat_number and table2.retailer_name = rr2.code left join eggozdb.maplemonk.my_sql_base_cluster bc2 on bc2.id = rr2.cluster_id ; CREATE OR REPLACE TABLE eggozdb.maplemonk.Summary_reporting_table_beat_retailer_SKU as select table2.*, bc2.cluster_name from ( select x.*,rp.name Parent_retailer_name, mp.onboarding_Date::date ONBOARDING_DATE, mp.onboarding_status, DATEDIFF(day, mp.onboarding_Date::date, getdate()) Days_since_onboard, cs.number retailer_commission ,case when x.beat_number_operations = 0 then x.beat_number_original else x.beat_number_operations end as beat_number_consolidated from (select (case when v.date is not null then v.date else e.date end) date ,(case when v.area_classification is not null then v.area_classification else e.area_classification end) Area ,(case when v.beat_name is not null then v.beat_name else e.beat_name end) Beat_Name ,(case when v.beat_number_operations is not null then v.beat_number_operations else e.beat_number_operations end) beat_number_operations ,(case when v.beat_number_original is not null then v.beat_number_original else e.beat_number_original end) beat_number_original ,(case when v.code is not null then v.code else e.code end) Retailer_Name ,(case when v.classification_name is not null then v.classification_name else e.classification_name end) classification_name ,(case when v.SKU is not null then v.SKU else e.SKU end) SKU ,(case when NET_SALES is null then 0 else NET_SALES end) Net_Sales ,(case when eggs_sold is null then 0 else eggs_sold end) eggs_sold ,(case when eggs_sold_white is null then 0 else Eggs_sold_white end) Eggs_sold_white ,(case when Eggs_sold_brown is null then 0 else Eggs_sold_brown end) Eggs_sold_brown ,(case when Eggs_sold_nutra is null then 0 else Eggs_sold_nutra end) Eggs_sold_nutra ,(case when Eggs_sold_liquid is null then 0 else Eggs_sold_liquid end) Eggs_sold_liquid ,(case when eggs_replaced is null then 0 else eggs_replaced end) eggs_replaced ,(case when eggs_replaced_white is null then 0 else eggs_replaced_white end) eggs_replaced_white ,(case when eggs_replaced_brown is null then 0 else eggs_replaced_brown end) eggs_replaced_brown ,(case when eggs_replaced_nutra is null then 0 else eggs_replaced_nutra end) eggs_replaced_nutra ,(case when eggs_replaced_liquid is null then 0 else eggs_replaced_liquid end) eggs_replaced_liquid ,(case when eggs_promo is null then 0 else eggs_promo end) eggs_promo ,(case when eggs_promo_white is null then 0 else eggs_promo_white end) eggs_promo_white ,(case when eggs_promo_brown is null then 0 else eggs_promo_brown end) eggs_promo_brown ,(case when eggs_promo_nutra is null then 0 else eggs_promo_nutra end) eggs_promo_nutra ,(case when eggs_promo_liquid is null then 0 else eggs_promo_liquid end) eggs_promo_liquid ,(case when eggs_return is null then 0 else eggs_return end) eggs_return ,(case when eggs_return_white is null then 0 else eggs_return_white end) eggs_return_white ,(case when eggs_return_brown is null then 0 else eggs_return_brown end) eggs_return_brown ,(case when eggs_return_nutra is null then 0 else eggs_return_nutra end) eggs_return_nutra ,(case when eggs_return_liquid is null then 0 else eggs_return_liquid end) eggs_return_liquid ,(case when amount_return is null then 0 else amount_return end) amount_return ,(case when amount_return_white is null then 0 else amount_return_white end) amount_return_white ,(case when amount_return_brown is null then 0 else amount_return_brown end) amount_return_brown ,(case when amount_return_nutra is null then 0 else amount_return_nutra end) amount_return_nutra ,(case when amount_return_liquid is null then 0 else amount_return_liquid end) amount_return_liquid from (select (case when u.date is not null then u.date else ra.date end) date ,(case when u.area_classification is not null then u.area_classification else ra.area_classification end) Area_classification ,(case when u.beat_name is not null then u.beat_name else ra.beat_name end) Beat_Name ,(case when u.beat_number_operations is not null then u.beat_number_operations else ra.beat_number_operations end) beat_number_operations ,(case when u.beat_number_original is not null then u.beat_number_original else ra.beat_number_original end) beat_number_original ,(case when u.code is not null then u.code else ra.code end) code ,(case when u.classification_name is not null then u.classification_name else ra.classification_name end) classification_name ,(case when u.SKU is not null then u.SKU else ra.SKU end) SKU ,(case when NET_SALES is null then 0 else NET_SALES end) Net_Sales ,(case when eggs_replaced is null then 0 else eggs_replaced end) eggs_replaced ,(case when eggs_replaced_white is null then 0 else eggs_replaced_white end) eggs_replaced_white ,(case when eggs_replaced_brown is null then 0 else eggs_replaced_brown end) eggs_replaced_brown ,(case when eggs_replaced_nutra is null then 0 else eggs_replaced_nutra end) eggs_replaced_nutra ,(case when eggs_replaced_liquid is null then 0 else eggs_replaced_liquid end) eggs_replaced_liquid ,(case when eggs_promo is null then 0 else eggs_promo end) eggs_promo ,(case when eggs_promo_white is null then 0 else eggs_promo_white end) eggs_promo_white ,(case when eggs_promo_brown is null then 0 else eggs_promo_brown end) eggs_promo_brown ,(case when eggs_promo_nutra is null then 0 else eggs_promo_nutra end) eggs_promo_nutra ,(case when eggs_promo_liquid is null then 0 else eggs_promo_liquid end) eggs_promo_liquid ,(case when eggs_return is null then 0 else eggs_return end) eggs_return ,(case when eggs_return_white is null then 0 else eggs_return_white end) eggs_return_white ,(case when eggs_return_brown is null then 0 else eggs_return_brown end) eggs_return_brown ,(case when eggs_return_nutra is null then 0 else eggs_return_nutra end) eggs_return_nutra ,(case when eggs_return_liquid is null then 0 else eggs_return_liquid end) eggs_return_liquid ,(case when amount_return is null then 0 else amount_return end) amount_return ,(case when amount_return_white is null then 0 else amount_return_white end) amount_return_white ,(case when amount_return_brown is null then 0 else amount_return_brown end) amount_return_brown ,(case when amount_return_nutra is null then 0 else amount_return_nutra end) amount_return_nutra ,(case when amount_return_liquid is null then 0 else amount_return_liquid end) amount_return_liquid from (select (case when y.date is not null then y.date else r.date end) date ,(case when y.area_classification is not null then y.area_classification else r.area_classification end) Area_classification ,(case when y.beat_name is not null then y.beat_name else r.beat_name end) Beat_Name ,(case when y.beat_number_operations is not null then y.beat_number_operations else r.beat_number_operations end) beat_number_operations ,(case when y.beat_number_original is not null then y.beat_number_original else r.beat_number_original end) beat_number_original ,(case when y.code is not null then y.code else r.code end) Code ,(case when y.classification_name is not null then y.classification_name else r.classification_name end) classification_name ,(case when y.SKU is not null then y.SKU else r.SKU end) SKU ,(case when NET_SALES is null then 0 else NET_SALES end) Net_Sales ,(case when eggs_replaced is null then 0 else eggs_replaced end) eggs_replaced ,(case when eggs_replaced_white is null then 0 else eggs_replaced_white end) eggs_replaced_white ,(case when eggs_replaced_brown is null then 0 else eggs_replaced_brown end) eggs_replaced_brown ,(case when eggs_replaced_nutra is null then 0 else eggs_replaced_nutra end) eggs_replaced_nutra ,(case when eggs_replaced_liquid is null then 0 else eggs_replaced_liquid end) eggs_replaced_liquid ,(case when eggs_promo is null then 0 else eggs_promo end) eggs_promo ,(case when eggs_promo_white is null then 0 else eggs_promo_white end) eggs_promo_white ,(case when eggs_promo_brown is null then 0 else eggs_promo_brown end) eggs_promo_brown ,(case when eggs_promo_nutra is null then 0 else eggs_promo_nutra end) eggs_promo_nutra ,(case when eggs_promo_liquid is null then 0 else eggs_promo_liquid end) eggs_promo_liquid ,(case when eggs_return is null then 0 else eggs_return end) eggs_return ,(case when eggs_return_white is null then 0 else eggs_return_white end) eggs_return_white ,(case when eggs_return_brown is null then 0 else eggs_return_brown end) eggs_return_brown ,(case when eggs_return_nutra is null then 0 else eggs_return_nutra end) eggs_return_nutra ,(case when eggs_return_liquid is null then 0 else eggs_return_liquid end) eggs_return_liquid from (select (case when z.date is not null then z.date else p.date end) date ,(case when z.area_classification is not null then z.area_classification else p.area_classification end) area_classification ,(case when z.beat_name is not null then z.beat_name else p.beat_name end) beat_name ,(case when z.beat_number_operations is not null then z.beat_number_operations else p.beat_number_operations end) beat_number_operations ,(case when z.beat_number_original is not null then z.beat_number_original else p.beat_number_original end) beat_number_original ,(case when z.code is not null then z.code else p.code end) code ,(case when z.classification_name is not null then z.classification_name else p.classification_name end) classification_name ,(case when z.SKU is not null then z.SKU else p.SKU end) SKU ,NET_SALES ,eggs_replaced ,eggs_replaced_white ,eggs_replaced_brown ,eggs_replaced_nutra ,eggs_replaced_liquid ,eggs_promo ,eggs_promo_white ,eggs_promo_brown ,eggs_promo_nutra ,eggs_promo_liquid from (select (case when a.date is not null then a.date else c.date end) date ,(case when a.area_classification is not null then a.area_classification else c.area_classification end) area_classification ,(case when a.beat_name is not null then a.beat_name else c.beat_name end) beat_name ,(case when a.beat_number_operations is not null then a.beat_number_operations else c.beat_number_operations end) beat_number_operations ,(case when a.beat_number_original is not null then a.beat_number_original else c.beat_number_original end) beat_number_original ,(case when a.code is not null then a.code else c.code end) code ,(case when a.classification_name is not null then a.classification_name else c.classification_name end) classification_name ,(case when a.SKU is not null then a.SKU else c.SKU end) SKU ,NET_SALES ,eggs_replaced ,eggs_replaced_white ,eggs_replaced_brown ,eggs_replaced_nutra ,eggs_replaced_liquid from eggozdb.maplemonk.SALES_SUMMARY_beat_retailer a full outer join eggozdb.maplemonk.Replacement_Summary_beat_retailer c on a.area_classification = c.area_classification and a.date = c.date and a.code = c.code and a.beat_name = c.beat_name and a.beat_number_operations = c.beat_number_operations and a.beat_number_original = c.beat_number_original and a.SKU=c.SKU and a.classification_name=c.classification_name ) z full outer join eggozdb.maplemonk.Promo_Summary_beat_retailer p on p.area_Classification = z.area_classification and p.date = z.date and p.code = z.code and p.beat_name = z.beat_name and p.beat_number_operations = z.beat_number_operations and p.beat_number_original = z.beat_number_original and p.SKU=z.SKU and p.classification_name=z.classification_name )y full outer join eggozdb.maplemonk.Return_Summary_beat_retailer r on r.area_Classification = y.area_classification and r.date = y.date and r.code = y.code and r.beat_name = y.beat_name and r.beat_number_operations = y.beat_number_operations and r.beat_number_original = y.beat_number_original and r.SKU=y.SKU and r.classification_name=y.classification_name )u full outer join eggozdb.maplemonk.ReturnAmount_Summary_beat_retailer ra on ra.area_Classification = u.area_classification and ra.date = u.date and ra.code = u.code and ra.beat_name = u.beat_name and ra.beat_number_operations = u.beat_number_operations and ra.beat_number_original = u.beat_number_original and ra.SKU=u.SKU and ra.classification_name=u.classification_name )v full outer join eggozdb.maplemonk.EGGS_SOLD_SUMMARY_BEAT_RETAILER e on e.area_Classification = v.area_classification and e.date = v.date and e.code = v.code and e.beat_name = v.beat_name and e.beat_number_operations = v.beat_number_operations and e.beat_number_original = v.beat_number_original and e.SKU=v.SKU and e.classification_name=v.classification_name )x left join eggozdb.maplemonk.my_sql_retailer_retailer mp on mp.code = x.retailer_name left join eggozdb.maplemonk.my_sql_retailer_retailerparent rp on rp.id = mp.parent_id left join eggozdb.maplemonk.my_sql_retailer_commissionslab cs on mp.commission_slab_id=cs.id ) table2 left join eggozdb.maplemonk.my_sql_retailer_retailer rr2 on table2.area = rr2.area_classification and table2.beat_number_original = rr2.beat_number and table2.retailer_name = rr2.code left join eggozdb.maplemonk.my_sql_base_cluster bc2 on bc2.id = rr2.cluster_id ; CREATE OR REPLACE TABLE eggozdb.maplemonk.Secondary_Sales_test as select rr2.code as distributor_name, tt.bill_name, tt.status, tt.delivery_date, sum(tt.gross_sale) sale, sum(tt.eggs_sold) eggs_sold, tt.retailer_id, tt.retailer_name, tt.area_classification, tt.beat_number_original, tt.onboarding_status, tt.city_id, tt.distributor_id from ( select oo.name bill_name, oo.status, cast(timestampadd(minute, 330, oo.delivery_date) as date) delivery_date, sum(oo.order_price_amount) order_price_amount, sum(ol.quantity) * (ol.single_sku_rate + sum(ol.single_sku_discount)) gross_sale, CASE WHEN pp.name LIKE \'%liquid%\' THEN sum(ol.quantity) * 1000 / 35 ELSE sum(ol.quantity) * CASE WHEN pp.SKU_Count = 1 THEN CASE WHEN rr.area_classification = \'UP-UB\' THEN 1 ELSE 30 END ELSE pp.SKU_Count END END AS eggs_sold, concat(pp.sku_count,left(pp.name,1)) sku, pp.slug, sum(ol.quantity) quantity, oo.retailer_id, rr.code as retailer_name, rr.area_classification, rr.beat_number beat_number_original, rr.onboarding_status, rr.city_id, rr.distributor_id from eggozdb.maplemonk.my_sql_distributor_sales_secondaryorder oo join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = oo.retailer_id join eggozdb.maplemonk.my_sql_distributor_sales_secondaryorderline ol on ol.order_id = oo.id join eggozdb.maplemonk.my_sql_product_product pp on pp.id = ol.product_id group by cast(timestampadd(minute, 330, oo.delivery_date) as date), oo.retailer_id, oo.name, pp.name, pp.slug, oo.status, ol.single_sku_rate, rr.code, rr.area_classification, rr.beat_number, rr.onboarding_status, rr.city_id, rr.distributor_id, pp.sku_count ) tt join eggozdb.maplemonk.my_sql_retailer_retailer rr2 on rr2.id = tt.distributor_id group by tt.bill_name, tt.status, tt.delivery_date, tt.retailer_id, tt.retailer_name, tt.area_classification, tt.beat_number_original, tt.onboarding_status, tt.city_id, tt.distributor_id, rr2.code ; create or replace table eggozdb.maplemonk.secondary_sales AS SELECT CAST(TIMESTAMPADD(MINUTE, 330, o.delivery_date) AS DATE) AS date, r.beat_number as Beat_number, concat(p.sku_count, left(p.name,1)) as SKU, p.name as Type, ol.single_sku_rate as Single_sku_rate, ol.single_sku_mrp as Single_sku_mrp, ol.single_sku_discount as Single_sku_discount, ol.quantity as Quantity, o.name as Bill_name, o.order_price_amount as Order_price_amount, r.code as Retailer_name, p.slug as Slug, ol.quantity * (ol.single_sku_rate + ol.single_sku_discount ) AS Order_gross_sales_amount, r.area_classification as Area_classification, CASE WHEN p.name LIKE \'%liquid%\' THEN ol.quantity * 1000 / 35 ELSE ol.quantity * CASE WHEN p.SKU_Count = 1 THEN CASE WHEN r.area_classification = \'UP-UB\' THEN 1 ELSE 30 END ELSE p.SKU_Count END END AS \"Eggs_Sold\" FROM eggozdb.maplemonk.my_sql_distributor_sales_secondaryorder o LEFT JOIN eggozdb.maplemonk.my_sql_distributor_sales_secondaryorderline ol ON ol.order_id = o.id LEFT JOIN eggozdb.maplemonk.my_sql_product_product p ON ol.product_id = p.id LEFT JOIN eggozdb.maplemonk.my_sql_retailer_retailer r ON o.retailer_id = r.id group BY date, Area_classification, Beat_number, Single_sku_rate, Single_sku_mrp, Quantity, Bill_name , Order_price_amount, Retailer_name, Slug , p.name, p.sku_count, ol.single_sku_discount ;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from EGGOZDB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        