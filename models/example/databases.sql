{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table hox_db.maplemonk.hox_db_blanko_summary_inventory_sku_sales as with Inventory_Data_Base as ( select * from (select location, \"Company Token\", \"Report Generated Date\":: timestamp as DATA_FETCH_DATE, replace(replace(SKU,\'\\'\',\'\'),\'`\',\'\') SKU, \"Product Name\" as PRODUCTNAME, repair, damaged, received, reserved, \"QC Failed\", \"QC Passed\", \"QC Pending\", \"Total Lost\", \"Discard/Fraud\", \"Available Quantity\", \"Undispatched Unassigned Quantity\" ,row_number() over (partition by location, \"Company Token\", replace(replace(SKU,\'\\'\',\'\'),\'`\',\'\'), date(\"Report Generated Date\") order by \"Report Generated Date\":: timestamp desc) rw from hox_db.maplemonk.easyecom_easyecom_blanko_hox_stock_reports ) where rw = 1 union all select * from (select location, \"Company Token\", \"Report Generated Date\":: timestamp as DATA_FETCH_DATE, replace(replace(SKU,\'\\'\',\'\'),\'`\',\'\') SKU, \"Product Name\" as PRODUCTNAME, try_cast(repair as float) repair, try_cast(damaged as float) damaged, try_cast(received as float) received, try_cast(reserved as float) reserved, try_cast(\"QC Failed\" as float) \"QC Failed\", try_cast(\"QC Passed\" as float) \"QC Passed\", try_cast(\"QC Pending\" as float) \"QC Pending\", try_cast(\"Total Lost\" as float) \"Total Lost\", try_cast(\"Discard/Fraud\" as float) \"Discard/Fraud\", try_cast(\"Available Quantity\" as float) \"Available Quantity\", try_cast(\"Undispatched Unassigned Quantity\" as float) \"Undispatched Unassigned Quantity\" ,row_number() over (partition by location, \"Company Token\", replace(replace(SKU,\'\\'\',\'\'),\'`\',\'\'), date(\"Report Generated Date\") order by \"Report Generated Date\":: timestamp desc) rw from hox_db.maplemonk.easyecom_easyecom_blanko_hox_new_stock_reports ) where rw = 1 ), Inventory_Data as ( select DATA_FETCH_DATE, REPLACE(SKU, \'\`\', \'\') AS SKU, PRODUCTNAME, location, sum(ifnull(repair,0)):: int as repair, sum(ifnull(damaged,0)):: int as damaged, sum(ifnull(received,0)):: int as received, sum(ifnull(reserved,0)):: int as reserved, sum(ifnull(\"QC Failed\",0)):: int as \"QC Failed\", sum(ifnull(\"QC Passed\",0)):: int as \"QC Passed\", sum(ifnull(\"QC Pending\",0)):: int as \"QC Pending\", sum(ifnull(\"Total Lost\",0)):: int as \"Total Lost\", sum(ifnull(\"Discard/Fraud\",0)):: int as \"Discard/Fraud\", sum(ifnull(\"Available Quantity\",0)):: int as \"Available Quantity\", sum(ifnull(\"Undispatched Unassigned Quantity\",0)):: int as \"Undispatched Unassigned Quantity\", (sum(ifnull(reserved,0)):: int + sum(ifnull(\"QC Passed\",0)):: int + sum(ifnull(\"Available Quantity\",0)):: int) as Final_AVAILABLEINVENTORY from Inventory_Data_Base group by 1,2,3,4 ), base as ( select o.*, concat(\"Component 1 - SKU\", \' @ \', \"Component 2 - SKU\", \' @ \', \"Component 3 - SKU\",\' @ \', \"Component 4 - SKU\", \' @ \', \"Component 5 - SKU\", \' @ \', \"Component 6 - SKU\",\' @ \', \"Component 7 - SKU\", \' @ \', \"Component 8 - SKU\", \' @ \', \"Component 9 - SKU\",\' @ \', \"Component 10 - SKU\", \' @ \', \"Component 11 - SKU\", \' @ \', \"Component 12 - SKU\",\' @ \', \"Component 13 - SKU\", \' @ \', \"Component 14 - SKU\", \' @ \', \"Component 15 - SKU\",\' @ \', \"Component 16 - SKU\", \' @ \', \"Component 17 - SKU\", \' @ \', \"Component 18 - SKU\",\' @ \', \"Component 19 - SKU\", \' @ \', \"Component 20 - SKU\" )as new_sku from ( select distinct \"PARENT SKU\", ifnull(\"Component 1 - SKU\", \'\') as \"Component 1 - SKU\", ifnull(\"Component 2 - SKU\", \'\') as \"Component 2 - SKU\", ifnull(\"Component 3 - SKU\", \'\') as \"Component 3 - SKU\", ifnull(\"Component 4 - SKU\", \'\') as \"Component 4 - SKU\", ifnull(\"Component 5 - SKU\", \'\') as \"Component 5 - SKU\", ifnull(\"Component 6 - SKU\", \'\') as \"Component 6 - SKU\", ifnull(\"Component 7 - SKU\", \'\') as \"Component 7 - SKU\", ifnull(\"Component 8 - SKU\", \'\') as \"Component 8 - SKU\", ifnull(\"Component 9 - SKU\", \'\') as \"Component 9 - SKU\", ifnull(\"Component 10 - SKU\", \'\') as \"Component 10 - SKU\", ifnull(\"Component 11 - SKU\", \'\') as \"Component 11 - SKU\", ifnull(\"Component 12 - SKU\", \'\') as \"Component 12 - SKU\", ifnull(\"Component 13 - SKU\", \'\') as \"Component 13 - SKU\", ifnull(\"Component 14 - SKU\", \'\') as \"Component 14 - SKU\", ifnull(\"Component 15 - SKU\", \'\') as \"Component 15 - SKU\", ifnull(\"Component 16 - SKU\", \'\') as \"Component 16 - SKU\", ifnull(\"Component 17 - SKU\", \'\') as \"Component 17 - SKU\", ifnull(\"Component 18 - SKU\", \'\') as \"Component 18 - SKU\", ifnull(\"Component 19 - SKU\", \'\') as \"Component 19 - SKU\", ifnull(\"Component 20 - SKU\", \'\') as \"Component 20 - SKU\" from hox_db.maplemonk.sku_map_parent_child_easyecom )as o ), base_sample as ( select base.\"PARENT SKU\", replace(replace(trim(split_part(trim(replace(Y.VALUE,\'\"\',\'\')), \'&\' , 1)),\'\\'\',\'\'),\'`\',\'\') as new_sku, trim(split_part(trim(replace(Y.VALUE,\'\"\',\'\')), \'&\' , 2)) as item_count from base , LATERAL FLATTEN(INPUT => SPLIT(new_sku, \'@\'))Y where trim(split_part(trim(replace(Y.VALUE,\'\"\',\'\')), \'&\' , 1)) <> \'\' ), Sales_Data_Daily as ( select order_date :: timestamp as order_date, SKU, warehouse, SUM(IFNULL((quantity * item_count), 0)) AS QUANTITY, SUM(IFNULL((returned_quantity * item_count), 0)) AS RETURNED_QUANTITY, SUM(IFNULL((cancelled_quantity * item_count), 0)) AS cancelled_quantity from ( SELECT distinct MARKETPLACE, REFERENCE_CODE, ORDER_STATUS, ORDER_DATE, FINAL_SHIPPING_STATUS, WAREHOUSE, QUANTITY, RETURNED_QUANTITY, CANCELLED_QUANTITY, REPLACE(a.SKU_CODE, \'\\'\', \'\') as SKU_CODE, case when (b.ITEM_COUNT is null or b.ITEM_COUNT = \'\') then 1 else ITEM_COUNT end as ITEM_COUNT, case when (b.new_sku is null or b.new_sku = \'\') then REPLACE(a.SKU_CODE, \'\\'\', \'\') else b.new_sku end as SKU FROM hox_db.maplemonk.hox_db_sales_consolidated a left join base_sample b on REPLACE(a.SKU_CODE, \'\\'\', \'\') = b.\"PARENT SKU\" where FINAL_SHIPPING_STATUS <> \'CANCELLED\' and warehouse <> \'\' and not(marketplace in (\'AMAZON_BLANKO\', \'B2B\') and source IN (\'B2B\', \'AMAZON\')) )as o group by 1,2,3 ), Sales_Data_Max_Weekly as ( WITH WeeklySales AS ( SELECT date_trunc(\'week\', order_date) AS week_Start, SKU, warehouse, SUM(IFNULL(quantity, 0)) AS QUANTITY, SUM(IFNULL(returned_quantity, 0)) AS RETURNED_QUANTITY FROM Sales_Data_Daily where datediff(day,order_date,current_date()) <=56 GROUP BY 1, 2, 3 ) SELECT week_Start, SKU, warehouse, QUANTITY, RETURNED_QUANTITY FROM ( SELECT week_Start, SKU, warehouse, QUANTITY, RETURNED_QUANTITY, row_number() OVER (PARTITION BY SKU, warehouse ORDER BY QUANTITY DESC) AS ranking FROM WeeklySales ) ranked_weekly_sales WHERE ranking = 1 ), Sales_Data_Min_Weekly as ( WITH WeeklySales AS ( SELECT date_trunc(\'week\', order_date) AS week_Start, SKU, warehouse, SUM(IFNULL(quantity, 0)) AS QUANTITY, SUM(IFNULL(returned_quantity, 0)) AS RETURNED_QUANTITY FROM Sales_Data_Daily where datediff(day,order_date,current_date()) <=56 GROUP BY 1, 2, 3 ) SELECT week_Start, SKU, warehouse, QUANTITY, RETURNED_QUANTITY FROM ( SELECT week_Start, SKU, warehouse, QUANTITY, RETURNED_QUANTITY, row_number() OVER (PARTITION BY SKU, warehouse ORDER BY QUANTITY) AS ranking FROM WeeklySales ) ranked_weekly_sales WHERE ranking = 1 ), Sales_56avg_w_Inv as ( select ID.DATA_FETCH_DATE , ID.SKU SKU , ID.PRODUCTNAME , ID.LOCATION ,max(ifnull(ID.Final_AVAILABLEINVENTORY,0)) Available_Inventory ,max(ifnull(ID.repair,0)) repair ,max(ifnull(ID.damaged,0)) damaged ,max(ifnull(ID.\"QC Failed\",0)) \"QC Failed\" ,max(ifnull(ID.\"QC Passed\",0)) \"QC Passed\" ,max(ifnull(ID.\"QC Pending\",0)) \"QC Pending\" ,max(ifnull(ID.\"Total Lost\",0)) \"Total Lost\" ,max(ifnull(ID.\"Discard/Fraud\",0)) \"Discard/Fraud\" ,max(ifnull(ID.\"Undispatched Unassigned Quantity\",0)) \"Undispatched Unassigned Quantity\" ,sum(ifnull(SD56.Quantity,0)) Sold_Quantity_56_Days ,max(ifnull(SWMax.Quantity,0)) Max_Weekly_Sales ,max(ifnull(SWMin.Quantity,0)) Min_Weekly_Sales from Inventory_Data ID left join Sales_Data_Daily SD56 on lower(ID.SKU) = lower(SD56.SKU) and (datediff(day,to_date(SD56.ORDER_DATE),ifnull(ID.DATA_FETCH_DATE,current_date())) BETWEEN 1 AND 56) AND lower(ID.LOCATION) = lower(SD56.WAREHOUSE) left join Sales_Data_Max_Weekly SWMax on lower(ID.SKU) = lower(SWMax.SKU) AND lower(ID.LOCATION) = lower(SWMax.WAREHOUSE) left join SALES_DATA_MIN_WEEKLY SWMin on lower(ID.SKU) = lower(SWMin.SKU) AND lower(ID.LOCATION) = lower(SWMin.WAREHOUSE) group by 1,2,3,4 ), Sales_56_14_Avg_w_Inv as ( select SD56.* ,sum(ifnull(SD14.Quantity,0)) Sold_Quantity_14_Days from Sales_56avg_w_Inv SD56 left join Sales_Data_Daily SD14 on lower(SD56.SKU) = lower(SD14.SKU) and (datediff(day,to_date(SD14.ORDER_DATE),ifnull(SD56.DATA_FETCH_DATE,current_date())) BETWEEN 1 AND 14) AND lower(SD56.LOCATION) = lower(SD14.WAREHOUSE) group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15, 16 ) select SD56_14.* ,sum(ifnull(SD7.Quantity,0)) Sold_Quantity_7_Days from Sales_56_14_Avg_w_Inv SD56_14 left join Sales_Data_Daily SD7 on lower(SD56_14.SKU) = lower(SD7.SKU) and (datediff(day,to_date(SD7.ORDER_DATE),ifnull(SD56_14.DATA_FETCH_DATE,current_date())) BETWEEN 1 AND 7) AND lower(SD56_14.LOCATION) = lower(SD7.WAREHOUSE) group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 order by 1 desc, 2;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from HOX_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        