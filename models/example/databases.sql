{{ config(
            materialized='table',
                post_hook={
                    "sql": "Create or REPLACE table snitch_db.maplemonk.offline_master as With master_final as ( Select * From ( With complete as ( Select * from ( With overall_jit as ( WITH Overall_fresh as ( SELECT * FROM ( wITH OVERALL AS ( Select * FROM ( sELECT * FROM ( With OFFLINE AS ( Select * from ( WITH Master AS ( SELECT * FROM ( WITH sku_group_data AS ( SELECT sku_group, branch_code, order_date, suborder_quantity, return_quantity FROM ( WITH ABS AS ( SELECT sku_group, branch_code, order_date, suborder_quantity FROM snitch_db.MAPLEMONK.STORE_fact_items_offline ), ACC AS ( SELECT sku_group, branch_code, order_date, suborder_quantity AS return_quantity FROM snitch_db.MAPLEMONK.store_returns_fact_items ) SELECT A.*, IFNULL(B.return_quantity, 0) AS return_quantity FROM ABS A FULL OUTER JOIN ACC B ON A.sku_group = B.sku_group AND A.order_date = B.order_date AND A.branch_code = B.branch_code ) WHERE SKU_GROUP NOT LIKE \'CB%\' ), first_order_dates AS ( SELECT sku_group, branch_code, MIN(order_date) AS first_order_date, DATEDIFF( \'DAY\', MIN(order_date), CURRENT_DATE ) AS days_since_first_order, DATEDIFF( \'DAY\', MIN(order_date), MAX(order_date) ) AS total_days_sold FROM sku_group_data GROUP BY sku_group, branch_code ), total_sales AS ( SELECT sku_group_data.sku_group, sku_group_data.branch_code, first_order_dates.first_order_date, first_order_dates.days_since_first_order, first_order_dates.total_days_sold, SUM(return_quantity) AS total_returns, SUM(suborder_quantity) AS total_sales, SUM( CASE WHEN order_date <= DATEADD(\'DAY\', 30, first_order_date) THEN suborder_quantity ELSE 0 END ) AS sales_first_30_days, SUM( CASE WHEN order_date <= DATEADD(\'DAY\', 15, first_order_date) THEN suborder_quantity ELSE 0 END ) AS sales_first_15_days, SUM( CASE WHEN order_date <= DATEADD(\'DAY\', 7, first_order_date) THEN suborder_quantity ELSE 0 END ) AS sales_first_7_days, SUM( CASE WHEN order_date <= DATEADD(\'DAY\', 90, first_order_date) THEN suborder_quantity ELSE 0 END ) AS sales_first_90_days, SUM( CASE WHEN order_date <= DATEADD(\'DAY\', 60, first_order_date) THEN suborder_quantity ELSE 0 END ) AS sales_first_60_days, SUM( CASE WHEN order_date <= DATEADD(\'DAY\', 180, first_order_date) THEN suborder_quantity ELSE 0 END ) AS sales_first_180_days, SUM( CASE WHEN CURRENT_DATE - order_date <= 30 THEN suborder_quantity ELSE 0 END ) AS sales_last_30_days, SUM( CASE WHEN CURRENT_DATE - order_date <= 15 THEN suborder_quantity ELSE 0 END ) AS sales_last_15_days, SUM( CASE WHEN CURRENT_DATE - order_date <= 7 THEN suborder_quantity ELSE 0 END ) AS sales_last_7_days, SUM( CASE WHEN CURRENT_DATE - order_date <= 60 THEN suborder_quantity ELSE 0 END ) AS sales_last_60_days, SUM( CASE WHEN CURRENT_DATE - order_date <= 90 THEN suborder_quantity ELSE 0 END ) AS sales_last_90_days, SUM( CASE WHEN CURRENT_DATE - order_date <= 180 THEN suborder_quantity ELSE 0 END ) AS sales_last_180_days, CASE WHEN first_order_dates.total_days_sold = 0 THEN SUM(suborder_quantity) ELSE SUM(suborder_quantity) / first_order_dates.total_days_sold END AS natural_ros FROM sku_group_data INNER JOIN first_order_dates ON sku_group_data.sku_group = first_order_dates.sku_group AND sku_group_data.branch_code = first_order_dates.branch_code GROUP BY sku_group_data.sku_group, sku_group_data.branch_code, first_order_dates.first_order_date, first_order_dates.days_since_first_order, first_order_dates.total_days_sold ), enhanced_total_sales AS ( SELECT total_sales.*, GREATEST( total_sales.sales_first_30_days / 30, total_sales.sales_last_30_days / 30, total_sales.natural_ros ) AS max_first_30_last_30_natural_ros, GREATEST( total_sales.sales_first_30_days / 30, total_sales.sales_last_30_days / 30, total_sales.natural_ros, total_sales.sales_first_7_days / 7 ) AS max_first_30_last_30_natural_ros_first_7_days, CASE WHEN total_sales.total_sales = 0 THEN 0 ELSE ( total_sales.total_returns / total_sales.total_sales ) * 100 END AS average_return_since_first_order, CASE WHEN max_first_30_last_30_natural_ros > 10 THEN max_first_30_last_30_natural_ros WHEN max_first_30_last_30_natural_ros < 10 AND max_first_30_last_30_natural_ros_first_7_days > 20 THEN max_first_30_last_30_natural_ros_first_7_days WHEN total_sales.total_sales > 800 THEN GREATEST( natural_ros, sales_last_7_days / 7 ) ELSE natural_ros END AS final_ros FROM total_sales ) SELECT * FROM enhanced_total_sales ORDER BY total_sales DESC ) ), inventory AS ( SELECT REVERSE( SUBSTRING( REVERSE(LOGICUSERCODE), CHARINDEX( \'-\', REVERSE(LOGICUSERCODE) ) + 1 ) ) AS sku_group, BRANCH_CODE, SUM(STOCK_QTY) AS inventory, DATE, COALESCE( SUM( CASE WHEN PACK_NAME = \'XS\' OR PACK_NAME = \'28\' THEN STOCK_QTY ELSE 0 END ), 0 ) AS XS_units, COALESCE( SUM( CASE WHEN PACK_NAME = \'S\' OR PACK_NAME = \'30\' THEN STOCK_QTY ELSE 0 END ), 0 ) AS S_units, COALESCE( SUM( CASE WHEN PACK_NAME = \'M\' OR PACK_NAME = \'32\' THEN STOCK_QTY ELSE 0 END ), 0 ) AS M_units, COALESCE( SUM( CASE WHEN PACK_NAME = \'L\' OR PACK_NAME = \'34\' THEN STOCK_QTY ELSE 0 END ), 0 ) AS L_units, COALESCE( SUM( CASE WHEN PACK_NAME = \'XL\' OR PACK_NAME = \'36\' THEN STOCK_QTY ELSE 0 END ), 0 ) AS XL_units, COALESCE( SUM( CASE WHEN PACK_NAME IN (\'XXL\', \'XXl\', \'2XL\', \'38\') THEN STOCK_QTY ELSE 0 END ), 0 ) AS XXL_units, COALESCE( SUM( CASE WHEN PACK_NAME = \'3XL\' THEN STOCK_QTY ELSE 0 END ), 0 ) AS XL3_units, COALESCE( SUM( CASE WHEN PACK_NAME = \'4XL\' THEN STOCK_QTY ELSE 0 END ), 0 ) AS XL4_units, COALESCE( SUM( CASE WHEN PACK_NAME = \'5XL\' THEN STOCK_QTY ELSE 0 END ), 0 ) AS XL5_units, COALESCE( SUM( CASE WHEN PACK_NAME = \'6XL\' THEN STOCK_QTY ELSE 0 END ), 0 ) AS XL6_units, ( CASE WHEN XS_units > 0 THEN 1 ELSE 0 END ) + (CASE WHEN S_units > 0 THEN 1 ELSE 0 END) + (CASE WHEN M_units > 0 THEN 1 ELSE 0 END) + (CASE WHEN L_units > 0 THEN 1 ELSE 0 END) + ( CASE WHEN XL_units > 0 THEN 1 ELSE 0 END ) + ( CASE WHEN XXL_units > 0 THEN 1 ELSE 0 END ) + ( CASE WHEN XL3_units > 0 THEN 1 ELSE 0 END ) + ( CASE WHEN XL4_units > 0 THEN 1 ELSE 0 END ) + ( CASE WHEN XL5_units > 0 THEN 1 ELSE 0 END ) + ( CASE WHEN XL6_units > 0 THEN 1 ELSE 0 END ) AS num_size_available FROM snitch_db.maplemonk.logicerp23_24_get_stock_in_hand WHERE sku_group NOT LIKE \'CB%\' AND DATE = CURRENT_DATE GROUP BY sku_group, branch_code, DATE ) SELECT COALESCE(q.sku_group, b.sku_group) as SKU_GROUP_Final, COALESCE(q.branch_code, b.branch_code) as Store, COALESCE(q.TOTAL_RETURNS, 0) AS TOTAL_RETURNS, COALESCE(q.FIRST_ORDER_DATE, null) AS FIRST_ORDER_DATE, COALESCE(q.DAYS_SINCE_FIRST_ORDER, 0) AS DAYS_SINCE_FIRST_ORDER, COALESCE(q.TOTAL_SALES, 0) AS TOTAL_SALES, COALESCE(q.NATURAL_ROS, 0) AS NATURAL_ROS, COALESCE( q.AVERAGE_RETURN_SINCE_FIRST_ORDER, 0 ) AS AVERAGE_RETURN_SINCE_FIRST_ORDER, COALESCE(q.FINAL_ROS, 0) AS FINAL_ROS, COALESCE(q.SALES_FIRST_7_DAYS, 0) AS SALES_FIRST_7_DAYS, COALESCE(q.SALES_FIRST_15_DAYS, 0) AS SALES_FIRST_15_DAYS, COALESCE(q.SALES_FIRST_30_DAYS, 0) AS SALES_FIRST_30_DAYS, COALESCE(q.SALES_LAST_7_DAYS, 0) AS SALES_LAST_7_DAYS, COALESCE(q.SALES_LAST_15_DAYS, 0) AS SALES_LAST_15_DAYS, COALESCE(q.SALES_LAST_30_DAYS, 0) AS SALES_LAST_30_DAYS, COALESCE(b.INVENTORY, 0) AS INVENTORY, COALESCE(b.XS_UNITS, 0) as XS_UNITS, COALESCE(b.S_UNITS, 0) as S_UNITS, COALESCE(b.M_UNITS, 0) as M_UNITS, COALESCE(b.L_UNITS, 0) as L_UNITS, COALESCE(b.XL_UNITS, 0) as XL_UNITS, COALESCE(b.XXL_UNITS, 0) as XXL_UNITS, COALESCE(b.XL3_UNITS, 0) as XL3_UNITS, COALESCE(b.XL4_UNITS, 0) as XL4_UNITS, COALESCE(b.XL5_UNITS, 0) as XL5_UNITS, COALESCE(b.XL6_UNITS, 0) as XL6_UNITS, COALESCE(b.NUM_SIZE_AVAILABLE, 0) as NUM_SIZE_AVAILABLE FROM Master q FULL OUTER JOIN Inventory b ON q.sku_group = b.sku_group AND q.branch_code = b.branch_code ) ), availability_master_v2 as ( Select * from ( Select sku_group, price, product_name, category, final_ros, natural_ros, sku_class, ROW_NUMBER() OVER ( PARTITION BY sku_group ORDER BY 1 ) AS rn from snitch_db.maplemonk.availability_master_v2 ) where rn = 1 ) Select a.*, b.price, b.product_name, b.category, b.final_ros as online_final_ros, b.natural_ros as online_natural_ros, b.sku_class from OFFLINE a left join availability_master_v2 b on a.SKU_GROUP_Final = b.sku_group ) WHERE SKU_GROUP_Final NOT LIKE \'CB%\' ) ), details as ( Select * from ( SELECT branch_code, marketplace_mapped, ROW_NUMBER() OVER ( PARTITION BY branch_code ORDER BY order_date DESC ) AS row_number FROM snitch_db.maplemonk.STORE_fact_items_offline ) where row_number = 1 ) Select a.*, b.marketplace_mapped, from overall a left join details b on a.Store = b.branch_code ) ), Fresh as ( Select sku_group, branch_code, sum(Fresh) as Fresh from ( SELECT date, REVERSE( SUBSTRING( REVERSE(LOGICUSERCODE), CHARINDEX( \'-\', REVERSE(LOGICUSERCODE) ) + 1 ) ) AS sku_group, branch_code, branch_name, TO_DATE(lot_pur_date, \'DD/MM/YYYY\') AS lot_pur_date_formatted, SUM(stock_qty) AS Fresh FROM snitch_db.maplemonk.logicerp23_24_get_stock_in_hand WHERE DATE = CURRENT_DATE AND LOGICUSERCODE NOT LIKE (\'CB%\') and lot_pur_date_formatted >= current_date - 30 AND LOGICUSERCODE not IN ( SELECT DISTINCT sku FROM snitch_db.maplemonk.store_fact_items_offline GROUP BY sku HAVING MIN(order_date) <= CURRENT_DATE - 30 -- Negating the original condition ) GROUP BY date, sku_group, branch_code, branch_name, lot_pur_date_formatted ) group by 1, 2 ) Select a.*, coalesce(b.Fresh, 0) as fresh_inventory from overall_fresh a left join fresh b on a.store = b.branch_code and a.sku_group_final = b.sku_group ), jit as ( SELECT BRANCH_CODE, STORE, SKU_GROUP, COALESCE( SUM( CASE WHEN extracted_value = \'XS\' OR extracted_value = \'28\' THEN Qty ELSE 0 END ), 0 ) AS XS_units, COALESCE( SUM( CASE WHEN extracted_value = \'S\' OR extracted_value = \'30\' THEN Qty ELSE 0 END ), 0 ) AS S_units, COALESCE( SUM( CASE WHEN extracted_value = \'M\' OR extracted_value = \'32\' THEN Qty ELSE 0 END ), 0 ) AS M_units, COALESCE( SUM( CASE WHEN extracted_value = \'L\' OR extracted_value = \'34\' THEN Qty ELSE 0 END ), 0 ) AS L_units, COALESCE( SUM( CASE WHEN extracted_value = \'XL\' OR extracted_value = \'36\' THEN Qty ELSE 0 END ), 0 ) AS XL_units, COALESCE( SUM( CASE WHEN extracted_value IN (\'XXL\', \'XXl\', \'2XL\', \'38\') THEN Qty ELSE 0 END ), 0 ) AS XXL_units, COALESCE( SUM( CASE WHEN extracted_value IN(\'3XL\', \'XXXL\') THEN Qty ELSE 0 END ), 0 ) AS XL3_units, COALESCE( SUM( CASE WHEN extracted_value = \'4XL\' THEN Qty ELSE 0 END ), 0 ) AS XL4_units, COALESCE( SUM( CASE WHEN extracted_value = \'5XL\' THEN Qty ELSE 0 END ), 0 ) AS XL5_units, COALESCE( SUM( CASE WHEN extracted_value = \'6XL\' THEN Qty ELSE 0 END ), 0 ) AS XL6_units, COALESCE( SUM(QTY), 0 ) AS JIT_QTY FROM ( SELECT *, REVERSE( SUBSTRING( REVERSE(\"ITEM CODE\"), 1, CHARINDEX( \'-\', REVERSE(\"ITEM CODE\") ) -1 ) ) AS extracted_value FROM snitch_db.maplemonk.JIT_OFFLINE_GOODS ) GROUP BY BRANCH_CODE, SKU_GROUP, STORE ) SELECT COALESCE(a.SKU_GROUP_FINAL, B.SKU_GROUP) AS SKU_GROUP, COALESCE(A.STORE, B.BRANCH_CODE) AS BRANCH_CODE, COALESCE(A.MARKETPLACE_MAPPED, B.STORE) AS MARKETPLACE_MAPPED, A.FIRST_ORDER_DATE, COALESCE(A.TOTAL_SALES, 0) AS TOTAL_SALES, COALESCE(A.TOTAL_RETURNS, 0) AS TOTAL_RETURNS, COALESCE(A.DAYS_SINCE_FIRST_ORDER, 0) AS DAYS_SINCE_FIRST_ORDER, COALESCE( A.AVERAGE_RETURN_SINCE_FIRST_ORDER, 0 ) AS AVERAGE_RETURN_SINCE_FIRST_ORDER, COALESCE(A.NATURAL_ROS, 0) AS NATURAL_ROS, COALESCE(A.FINAL_ROS, 0) AS FINAL_ROS, COALESCE(A.SALES_FIRST_7_DAYS, 0) AS SALES_FIRST_7_DAYS, COALESCE(A.SALES_FIRST_15_DAYS, 0) AS SALES_FIRST_15_DAYS, COALESCE(A.SALES_FIRST_30_DAYS, 0) AS SALES_FIRST_30_DAYS, COALESCE(A.SALES_LAST_7_DAYS, 0) AS SALES_LAST_7_DAYS, COALESCE(A.SALES_LAST_15_DAYS, 0) AS SALES_LAST_15_DAYS, COALESCE(A.SALES_LAST_30_DAYS, 0) AS SALES_LAST_30_DAYS, COALESCE(A.INVENTORY, 0) AS INVENTORY, COALESCE(A.XS_UNITS, 0) AS XS_UNITS, COALESCE(A.S_UNITS, 0) AS S_UNITS, COALESCE(A.M_UNITS, 0) AS M_UNITS, COALESCE(A.L_UNITS, 0) AS L_UNITS, COALESCE(A.XL_UNITS, 0) AS XL_UNITS, COALESCE(A.XXL_UNITS, 0) AS XXL_UNITS, COALESCE(A.XL3_UNITS, 0) AS XL3_UNITS, COALESCE(A.XL4_UNITS, 0) AS XL4_UNITS, COALESCE(A.XL5_UNITS, 0) AS XL5_UNITS, COALESCE(A.XL6_UNITS, 0) AS XL6_UNITS, COALESCE(A.NUM_SIZE_AVAILABLE, 0) AS NUM_SIZE_AVAILABLE, COALESCE(A.FRESH_INVENTORY, 0) AS FRESH_INVENTORY, COALESCE(b.XS_UNITS, 0) AS jit_XS_units, COALESCE(b.S_UNITS, 0) AS jit_S_units, COALESCE(b.M_UNITS, 0) AS jit_M_units, COALESCE(b.L_UNITS, 0) AS jit_L_units, COALESCE(b.XL_UNITS, 0) AS jit_XL_units, COALESCE(b.XXL_UNITS, 0) AS jit_2XL_units, COALESCE(b.XL3_UNITS, 0) AS jit_3XL_units, COALESCE(b.XL4_UNITS, 0) AS jit_4XL_units, COALESCE(b.XL5_UNITS, 0) AS jit_5XL_units, COALESCE(b.XL6_UNITS, 0) AS jit_6XL_units, COALESCE(B.JIT_QTY, 0) AS JIT_QTY, CASE WHEN ( COALESCE(A.S_UNITS, 0) + COALESCE(b.S_UNITS, 0) = 0 AND COALESCE(A.M_UNITS, 0) + COALESCE(b.M_UNITS, 0) = 0 ) OR ( COALESCE(A.S_UNITS, 0) + COALESCE(b.S_UNITS, 0) = 0 AND COALESCE(A.L_UNITS, 0) + COALESCE(b.L_UNITS, 0) = 0 ) OR ( COALESCE(A.S_UNITS, 0) + COALESCE(b.S_UNITS, 0) = 0 AND COALESCE(A.XL_UNITS, 0) + COALESCE(b.XL_UNITS, 0) = 0 ) OR ( COALESCE(A.M_UNITS, 0) + COALESCE(b.M_UNITS, 0) = 0 AND COALESCE(A.L_UNITS, 0) + COALESCE(b.L_UNITS, 0) = 0 ) OR ( COALESCE(A.M_UNITS, 0) + COALESCE(b.M_UNITS, 0) = 0 AND COALESCE(A.XL_UNITS, 0) + COALESCE(b.XL_UNITS, 0) = 0 ) OR ( COALESCE(A.L_UNITS, 0) + COALESCE(b.L_UNITS, 0) = 0 AND COALESCE(A.XL_UNITS, 0) + COALESCE(b.XL_UNITS, 0) = 0 ) THEN \'Yes\' ELSE \'No\' END AS CUT_size_with_JIT_flag, CASE WHEN ( A.S_UNITS = 0 AND A.M_UNITS = 0 ) OR ( A.S_UNITS = 0 AND A.L_UNITS = 0 ) OR ( A.S_UNITS = 0 AND A.XL_UNITS = 0 ) OR ( A.M_UNITS = 0 AND A.L_UNITS = 0 ) OR ( A.M_UNITS = 0 AND A.XL_UNITS = 0 ) OR ( A.L_UNITS = 0 AND A.XL_UNITS = 0 ) THEN \'Yes\' ELSE \'No\' END AS CUT_size_flag FROM overall_jit A FULL OUTER JOIN jit B ON A.store = B.BRANCH_CODE AND A.sku_group_final = B.SKU_GROUP ) where SKU_GROUP not like \'CB%\' AND MARKETPLACE_MAPPED not like \'%WH%\' ), DETAILS AS ( select designs, collar_new, material_new, occassion_new, print_design, sleeve_type, fit, style, color, new_category, sku_group, from snitch_db.maplemonk.product_info where date_wise = \'2024-09-09\' order by sku_group ) Select a.*, b.designs, b.new_category, b.collar_new, b.material_new, b.occassion_new, b.print_design, b.sleeve_type, b.fit, b.style, b.color from complete a left join DETAILS b on a.SKU_GROUP = b.SKU_GROUP ) ), pareto_final as ( With over as ( With overall as ( WITH sku_group_data AS ( SELECT BRANCH_CODE, sku_group as sku_group_final, order_date, suborder_quantity - return_quantity as QTY, SELLING_PRICE - return_sales as Total_sales, FROM ( WITH ABS AS ( SELECT sku_group, BRANCH_CODE, order_date, suborder_quantity, SELLING_PRICE, FROM snitch_db.MAPLEMONK.STORE_fact_items_offline ), ACC AS ( SELECT sku_group, BRANCH_CODE, order_date, suborder_quantity AS return_quantity, SELLING_PRICE AS Return_sales FROM snitch_db.MAPLEMONK.store_returns_fact_items ) SELECT A.*, coalesce(B.return_quantity, 0) AS return_quantity, coalesce(B.Return_sales, 0) as return_sales FROM ABS A FULL OUTER JOIN ACC B ON A.sku_group = B.sku_group AND A.order_date = B.order_date AND A.BRANCH_CODE = B.BRANCH_CODE ) WHERE SKU_GROUP NOT LIKE \'CB%\' ), StoreSales AS ( SELECT BRANCH_CODE, sku_group_final, SUM(TOTAL_SALES) AS TOTAL_SALES FROM sku_group_data where CURRENT_DATE - order_date <= 30 GROUP BY sku_group_final, BRANCH_CODE ), RankedSales AS ( SELECT *, 100 * DIV0( TOTAL_SALES, SUM(TOTAL_SALES) OVER (PARTITION BY BRANCH_CODE) ) AS share FROM StoreSales order by share desc ), Pareot as ( Select *, SUM(share) OVER ( PARTITION BY BRANCH_CODE ORDER BY share DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS cumulative_share from RankedSales order by share desc ), Ratio as ( Select *, CASE WHEN cumulative_share <= 10 THEN \'10%\' WHEN cumulative_share <= 20 and cumulative_share >= 10 THEN \'20%\' WHEN cumulative_share <= 30 and cumulative_share >= 20 THEN \'30%\' WHEN cumulative_share <= 40 and cumulative_share >= 30 THEN \'40%\' WHEN cumulative_share <= 50 and cumulative_share >= 40 THEN \'50%\' WHEN cumulative_share <= 60 and cumulative_share >= 50 THEN \'60%\' WHEN cumulative_share <= 70 and cumulative_share >= 60 THEN \'70%\' WHEN cumulative_share <= 80 and cumulative_share >= 70 THEN \'80%\' WHEN cumulative_share <= 90 and cumulative_share >= 80 THEN \'90%\' ELSE \'100%\' END AS percentage_category from Pareot ) Select * from Ratio ), details as ( Select * from ( SELECT branch_code, marketplace_mapped, ROW_NUMBER() OVER ( PARTITION BY branch_code ORDER BY order_date DESC ) AS row_number FROM snitch_db.maplemonk.STORE_fact_items_offline ) where row_number = 1 ) Select a.*, b.marketplace_mapped, from overall a left join details b on a.branch_code = b.branch_code ), class as ( Select sku_group, category, sku_class, product_name from snitch_db.maplemonk.availability_master_v2 ) Select a.*, b.category, b.sku_class, b.product_name from over a left join class b on a.SKU_GROUP_FINAL = b.sku_group ) Select a.*, b.CUMULATIVE_SHARE, b.PERCENTAGE_CATEGORY from master_final a left join pareto_final b on a.BRANCH_CODE = b.BRANCH_CODE and a.SKU_GROUP = b.SKU_GROUP_FINAL;",
                    "transaction": true
                }
            ) }}
            with sample_data as (

                select * from snitch_db.information_schema.databases
            ),
            
            final as (
                select * from sample_data
            )
            select * from final
            