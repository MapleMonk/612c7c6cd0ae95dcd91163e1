{{ config(
            materialized='table',
                post_hook={
                    "sql": "create or replace table snitch_db.snitch.product_dim as with shopify_product as (select in1.*, \'SHOPIFY\' as source from (select CAST(sn.ID AS VARCHAR) AS PRODUCT_ID, CAST (sn.HANDLE AS VARCHAR) AS HANDLE, CAST(sn.product_type AS TEXT) AS PRODUCT_CATEGORY, sn.VENDOR, CAST(sn.title as VARCHAR) AS PRODUCT_TITLE, CAST(var.value:sku AS VARCHAR) AS SKU, REVERSE(SUBSTRING(REVERSE(sku), CHARINDEX(\'-\', REVERSE(SKU)) + 1)) AS sku_group, CAST(var.value:price AS FLOAT) AS PRICE, CAST(var.value:taxable AS VARCHAR) AS TAXABLE, CASE WHEN c_color = \'option1\' THEN CAST(var.value:option1 AS varchar) WHEN c_color = \'option2\' THEN CAST(var.value:option2 AS varchar) ELSE \'\' END AS color, CASE WHEN s_size = \'option1\' THEN CAST(var.value:option1 AS varchar) WHEN s_size = \'option2\' THEN CAST(var.value:option2 AS varchar) ELSE \'\' END AS size, CAST(var.value:weight AS float) AS \"WEIGHT(KG)\", CAST (sn.created_at AS VARCHAR) AS product_created, CAST (sn.updated_at AS VARCHAR) AS product_updated, CAST (sn.status AS VARCHAR) AS product_status, CAST (sn.published_scope AS VARCHAR) AS publish_scope, CAST (sn.published_at AS VARCHAR) AS publish_date, CAST(var.value:inventory_item_id AS varchar) AS inventory_item_id, CAST(var.value:id AS int) AS variant_id, CAST(var.value:created_at AS varchar) AS variant_created_date, CAST(var.value:updated_at AS varchar) AS variant_updated_date from (select * from Snitch_db.maplemonk.shopifyindia_NEW_products sn LEFT JOIN (select t1.c_color,t2.s_size, case when t1.c_id is null then t2.s_id when t2.s_id is null then t1.c_id else t1.c_id end as \"C_ID\" from (select id as c_id , \"option\" as c_color from (select id, CAST(var.value:name AS varchar) AS \"COLOR\", CAST(var.value:position AS varchar) AS \"position\", concat(\'option\',\"position\") as \"option\" from Snitch_db.maplemonk.shopifyindia_NEW_products sn ,lateral flatten(input => sn.options) var) where color like \'Color%\' ) t1 full outer join (select id as s_id,\"option\" as s_size from (select id, CAST(var.value:name AS varchar) AS \"COLOR\", CAST(var.value:position AS varchar) AS \"position\", concat(\'option\',\"position\") as \"option\" from Snitch_db.maplemonk.shopifyindia_NEW_products sn ,lateral flatten(input => sn.options) var) where color like \'Size%\') t2 on t1.c_id = t2.s_id) c on sn.id= c.c_id) sn, lateral flatten(input => sn.variants) var ) in1 inner join (select sku,max(\"product_updated\") as product_updated from (select CAST(sn.ID AS VARCHAR) AS \"PRODUCT_ID\", CAST (sn.HANDLE AS VARCHAR) AS \"HANDLE\", CAST(sn.product_type AS TEXT) AS \"PRODUCT_CATEGORY\", sn.VENDOR, CAST(sn.title as VARCHAR) AS \"PRODUCT_TITLE\", CAST(var.value:sku AS VARCHAR) AS \"SKU\", REVERSE(SUBSTRING(REVERSE(sku), CHARINDEX(\'-\', REVERSE(SKU)) + 1)) AS sku_group, CAST(var.value:price AS FLOAT) AS \"PRICE\", CAST(var.value:taxable AS VARCHAR) AS \"TAXABLE\", CASE WHEN c_color = \'option1\' THEN CAST(var.value:option1 AS varchar) WHEN c_color = \'option2\' THEN CAST(var.value:option2 AS varchar) ELSE \'\' END AS color, CASE WHEN s_size = \'option1\' THEN CAST(var.value:option1 AS varchar) WHEN s_size = \'option2\' THEN CAST(var.value:option2 AS varchar) ELSE \'\' END AS size, CAST(var.value:weight AS float) AS \"WEIGHT(KG)\", CAST (sn.created_at AS VARCHAR) AS \"product_CREATED\", CAST (sn.updated_at AS VARCHAR) AS \"product_updated\", CAST (sn.status AS VARCHAR) AS \"product_status\", CAST (sn.published_scope AS VARCHAR) AS \"publish_scope\", CAST (sn.published_at AS VARCHAR) AS \"publish_date\", CAST(var.value:inventory_item_id AS varchar) AS \"inventory_item_id\", CAST(var.value:id AS int) AS \"variant_id\", CAST(var.value:created_at AS varchar) AS \"variant_created_date\", CAST(var.value:updated_at AS varchar) AS \"variant_updated_date\" from (select * from Snitch_db.maplemonk.shopifyindia_NEW_products sn LEFT JOIN (select t1.c_color,t2.s_size, case when t1.c_id is null then t2.s_id when t2.s_id is null then t1.c_id else t1.c_id end as \"C_ID\" from (select id as c_id , \"option\" as c_color from (select id, CAST(var.value:name AS varchar) AS \"COLOR\", CAST(var.value:position AS varchar) AS \"position\", concat(\'option\',\"position\") as \"option\" from Snitch_db.maplemonk.shopifyindia_NEW_products sn ,lateral flatten(input => sn.options) var) where color like \'Color%\' ) t1 full outer join (select id as s_id,\"option\" as s_size from (select id, CAST(var.value:name AS varchar) AS \"COLOR\", CAST(var.value:position AS varchar) AS \"position\", concat(\'option\',\"position\") as \"option\" from Snitch_db.maplemonk.shopifyindia_NEW_products sn ,lateral flatten(input => sn.options) var) where color like \'Size%\') t2 on t1.c_id = t2.s_id) c on sn.id= c.c_id) sn, lateral flatten(input => sn.variants) var ) group by SKU order by 2 desc) in2 ON in1.sku = in2.sku and in1.product_updated = in2.product_updated ) select * from shopify_product union all select distinct null as \"PRODUCT_ID\", null AS \"HANDLE\", null AS \"PRODUCT_CATEGORY\", null VENDOR, null AS \"PRODUCT_TITLE\", replace(A.Value:itemSku,\'\"\',\'\') AS \"SKU\", REVERSE(SUBSTRING(REVERSE(replace(A.Value:itemSku,\'\"\',\'\') ), CHARINDEX(\'-\', REVERSE(replace(A.Value:itemSku,\'\"\',\'\') )) + 1)) AS sku_group, null AS \"PRICE\", null AS \"TAXABLE\", null AS color, null as size, null AS \"WEIGHT(KG)\", null AS \"product_CREATED\", null AS product_updated, null AS \"product_status\", null AS \"publish_scope\", null AS \"publish_date\", null AS \"inventory_item_id\", null as \"variant_id\", null as \"variant_created_date\", null as \"variant_updated_date\", \'UNICOMMERCE\' as source from snitch_db.maplemonk.SNITCH_UNICOMMERCE_GET_ORDERS_BY_IDS_TEST, LATERAL FLATTEN (INPUT => saleorderdto:saleOrderItems)A where lower(replace(A.Value:itemSku,\'\"\',\'\')) not in (select distinct loweR(sku) from shopify_product); ALTER SESSION SET TIMEZONE = \'Asia/Kolkata\'; CREATE OR REPLACE TABLE SNITCH_DB.MAPLEMONK.HSR_STORE_RESTOCK AS WITH stock AS ( SELECT date, LOGICUSERCODE, SUM(stock_qty) AS OPENING_INVENTORY FROM snitch_db.maplemonk.logicerp23_24_get_stock_in_hand WHERE DATE = CURRENT_DATE AND branch_code = 13 and LOGICUSERCODE not like (\'CB%\') GROUP BY date, LOGICUSERCODE ), sales AS ( SELECT SKU, SUM(SHIPPING_QUANTITY) AS QTY FROM SNITCH_DB.MAPLEMONK.STORE_fact_items_offline WHERE order_date = current_date AND ORDER_TIMESTAMP >= CURRENT_TIMESTAMP - INTERVAL \'1.5 HOUR\' AND branch_code = 13 GROUP BY SKU ), today_sales AS ( SELECT SKU, SUM(SHIPPING_QUANTITY) AS TODAY_SALES FROM SNITCH_DB.MAPLEMONK.STORE_fact_items_offline WHERE order_date = current_date AND branch_code = 13 GROUP BY SKU ), ranked_products AS ( SELECT Distinct sku, Category, HANDLE, sku_url from ( SELECT product_dim.sku as sku, product_category as Category, HANDLE, concat(\'https://www.snitch.co.in/products/\', product_dim.handle) as sku_url, ROW_NUMBER() OVER (PARTITION BY product_dim.sku_group ORDER BY product_updated desc) as rn FROM snitch_db.snitch.product_dim ) WHERE sku_url is not null ) SELECT a.*, K.sku_url, K.Category, K.HANDLE, COALESCE(c.TODAY_SALES, 0) AS TODAY_SALES, COALESCE(b.QTY, 0) AS SALES_IN_LAST_90_MINUTES, Case when COALESCE(b.QTY, 0) > 0 then b.QTY else 0 end restock, CASE WHEN A.OPENING_INVENTORY - COALESCE(c.TODAY_SALES, 0) > 0 THEN \'Available\' else \'No Stock\' End as Status FROM stock a LEFT JOIN sales b ON a.LOGICUSERCODE = b.SKU LEFT JOIN today_sales c ON a.LOGICUSERCODE = c.SKU LEFT JOIN ranked_products K ON a.LOGICUSERCODE = K.SKU ; CREATE OR REPLACE TABLE SNITCH_DB.MAPLEMONK.sarath_STORE_RESTOCK AS WITH stock AS ( SELECT date, LOGICUSERCODE, branch_code, branch_name, SUM(stock_qty) AS OPENING_INVENTORY FROM snitch_db.maplemonk.logicerp23_24_get_stock_in_hand WHERE DATE = CURRENT_DATE AND branch_code = 16 and LOGICUSERCODE not like (\'CB%\') GROUP BY date, LOGICUSERCODE,3,4 ), sales AS ( SELECT SKU, SUM(SHIPPING_QUANTITY) AS QTY FROM SNITCH_DB.MAPLEMONK.STORE_fact_items_offline WHERE order_date = current_date AND ORDER_TIMESTAMP >= CURRENT_TIMESTAMP - INTERVAL \'1.5 HOUR\' AND branch_code = 16 GROUP BY SKU ), today_sales AS ( SELECT SKU, SUM(SHIPPING_QUANTITY) AS TODAY_SALES FROM SNITCH_DB.MAPLEMONK.STORE_fact_items_offline WHERE order_date = current_date AND branch_code = 16 GROUP BY SKU ), ranked_products AS ( SELECT Distinct sku, Category, HANDLE, sku_url from ( SELECT product_dim.sku as sku, product_category as Category, HANDLE, concat(\'https://www.snitch.co.in/products/\', product_dim.handle) as sku_url, ROW_NUMBER() OVER (PARTITION BY product_dim.sku_group ORDER BY product_updated desc) as rn FROM snitch_db.snitch.product_dim ) WHERE sku_url is not null ) SELECT a.*, K.sku_url, K.Category, K.HANDLE, COALESCE(c.TODAY_SALES, 0) AS TODAY_SALES, COALESCE(b.QTY, 0) AS SALES_IN_LAST_90_MINUTES, Case when COALESCE(b.QTY, 0) > 0 then b.QTY else 0 end restock, CASE WHEN A.OPENING_INVENTORY - COALESCE(c.TODAY_SALES, 0) > 0 THEN \'Available\' else \'No Stock\' End as Status FROM stock a LEFT JOIN sales b ON a.LOGICUSERCODE = b.SKU LEFT JOIN today_sales c ON a.LOGICUSERCODE = c.SKU LEFT JOIN ranked_products K ON a.LOGICUSERCODE = K.SKU ; CREATE OR REPLACE TABLE SNITCH_DB.MAPLEMONK.BEL_STORE_RESTOCK AS WITH stock AS ( SELECT date, LOGICUSERCODE, branch_code, branch_name, SUM(stock_qty) AS OPENING_INVENTORY FROM snitch_db.maplemonk.logicerp23_24_get_stock_in_hand WHERE DATE = CURRENT_DATE AND branch_code = 14 and LOGICUSERCODE not like (\'CB%\') GROUP BY date, LOGICUSERCODE,3,4 ), sales AS ( SELECT SKU, SUM(SHIPPING_QUANTITY) AS QTY FROM SNITCH_DB.MAPLEMONK.STORE_fact_items_offline WHERE order_date = current_date AND ORDER_TIMESTAMP >= CURRENT_TIMESTAMP - INTERVAL \'1.5 HOUR\' AND branch_code = 14 GROUP BY SKU ), today_sales AS ( SELECT SKU, SUM(SHIPPING_QUANTITY) AS TODAY_SALES FROM SNITCH_DB.MAPLEMONK.STORE_fact_items_offline WHERE order_date = current_date AND branch_code = 14 GROUP BY SKU ), ranked_products AS ( SELECT Distinct sku, Category, HANDLE, sku_url from ( SELECT product_dim.sku as sku, product_category as Category, HANDLE, concat(\'https://www.snitch.co.in/products/\', product_dim.handle) as sku_url, ROW_NUMBER() OVER (PARTITION BY product_dim.sku_group ORDER BY product_updated desc) as rn FROM snitch_db.snitch.product_dim ) WHERE sku_url is not null ) SELECT a.*, K.sku_url, K.Category, K.HANDLE, COALESCE(c.TODAY_SALES, 0) AS TODAY_SALES, COALESCE(b.QTY, 0) AS SALES_IN_LAST_90_MINUTES, Case when COALESCE(b.QTY, 0) > 0 then b.QTY else 0 end restock, CASE WHEN A.OPENING_INVENTORY - COALESCE(c.TODAY_SALES, 0) > 0 THEN \'Available\' else \'No Stock\' End as Status FROM stock a LEFT JOIN sales b ON a.LOGICUSERCODE = b.SKU LEFT JOIN today_sales c ON a.LOGICUSERCODE = c.SKU LEFT JOIN ranked_products K ON a.LOGICUSERCODE = K.SKU ; CREATE OR REPLACE TABLE SNITCH_DB.MAPLEMONK.Jayanagar_STORE_RESTOCK AS WITH stock AS ( SELECT date, LOGICUSERCODE, branch_code, branch_name, SUM(stock_qty) AS OPENING_INVENTORY FROM snitch_db.maplemonk.logicerp23_24_get_stock_in_hand WHERE DATE = CURRENT_DATE -1 AND branch_code = 3 and LOGICUSERCODE not like (\'CB%\') GROUP BY date, LOGICUSERCODE,3,4 ), sales AS ( SELECT SKU, SUM(SHIPPING_QUANTITY) AS QTY FROM SNITCH_DB.MAPLEMONK.STORE_fact_items_offline WHERE order_date = current_date AND ORDER_TIMESTAMP >= CURRENT_TIMESTAMP - INTERVAL \'1.5 HOUR\' AND branch_code = 3 GROUP BY SKU ), today_sales AS ( SELECT SKU, SUM(SHIPPING_QUANTITY) AS TODAY_SALES FROM SNITCH_DB.MAPLEMONK.STORE_fact_items_offline WHERE order_date = current_date AND branch_code = 3 GROUP BY SKU ), ranked_products AS ( SELECT Distinct sku, Category, HANDLE, sku_url from ( SELECT product_dim.sku as sku, product_category as Category, HANDLE, concat(\'https://www.snitch.co.in/products/\', product_dim.handle) as sku_url, ROW_NUMBER() OVER (PARTITION BY product_dim.sku_group ORDER BY product_updated desc) as rn FROM snitch_db.snitch.product_dim ) WHERE sku_url is not null ) SELECT a.*, K.sku_url, K.Category, K.HANDLE, COALESCE(c.TODAY_SALES, 0) AS TODAY_SALES, COALESCE(b.QTY, 0) AS SALES_IN_LAST_90_MINUTES, Case when COALESCE(b.QTY, 0) > 0 then b.QTY else 0 end restock, CASE WHEN A.OPENING_INVENTORY - COALESCE(c.TODAY_SALES, 0) > 0 THEN \'Available\' else \'No Stock\' End as Status FROM stock a LEFT JOIN sales b ON a.LOGICUSERCODE = b.SKU LEFT JOIN today_sales c ON a.LOGICUSERCODE = c.SKU LEFT JOIN ranked_products K ON a.LOGICUSERCODE = K.SKU ; CREATE OR REPLACE TABLE SNITCH_DB.MAPLEMONK.SOH_TO_FLOOR AS WITH stock AS ( SELECT date, branch_code, branch_name, LOGICUSERCODE, SUM(stock_qty) AS OPENING_INVENTORY FROM snitch_db.maplemonk.logicerp23_24_get_stock_in_hand WHERE DATE = CURRENT_DATE and LOGICUSERCODE not like (\'CB%\') GROUP BY date, branch_code,branch_name, LOGICUSERCODE ), sales AS ( SELECT branch_code, SKU, SUM(SHIPPING_QUANTITY) AS QTY FROM SNITCH_DB.MAPLEMONK.STORE_fact_items_offline WHERE order_date = current_date AND ORDER_TIMESTAMP >= CURRENT_TIMESTAMP - INTERVAL \'1 HOUR\' GROUP BY branch_code,SKU ), today_sales AS ( SELECT branch_code, SKU, SUM(SHIPPING_QUANTITY) AS TODAY_SALES FROM SNITCH_DB.MAPLEMONK.STORE_fact_items_offline WHERE order_date = current_date GROUP BY branch_code, SKU ), ranked_products AS ( SELECT Distinct sku, Category, HANDLE, sku_url from ( SELECT product_dim.sku as sku, product_category as Category, HANDLE, concat(\'https://www.snitch.co.in/products/\', product_dim.handle) as sku_url, ROW_NUMBER() OVER (PARTITION BY product_dim.sku_group ORDER BY product_updated desc) as rn FROM snitch_db.snitch.product_dim ) WHERE sku_url is not null ) SELECT a.*, K.sku_url, K.Category, K.HANDLE, COALESCE(c.TODAY_SALES, 0) AS TODAY_SALES, COALESCE(b.QTY, 0) AS SALES_IN_LAST_90_MINUTES, Case when COALESCE(b.QTY, 0) > 0 then b.QTY else 0 end restock, CASE WHEN A.OPENING_INVENTORY - COALESCE(c.TODAY_SALES, 0) > 0 THEN \'Available\' else \'No Stock\' End as Status FROM stock a LEFT JOIN sales b ON a.branch_code =b.branch_code and a.LOGICUSERCODE = b.SKU LEFT JOIN today_sales c ON a.branch_code =c.branch_code and a.LOGICUSERCODE = c.SKU LEFT JOIN ranked_products K ON a.LOGICUSERCODE = K.SKU ;",
                    "transaction": true
                }
            ) }}
            with sample_data as (

                select * from snitch_db.information_schema.databases
            ),
            
            final as (
                select * from sample_data
            )
            select * from final
            