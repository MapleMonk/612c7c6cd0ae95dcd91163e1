{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "CREATE OR REPLACE TABLE SELECT_DB.MAPLEMONK.MISSING_SKUS AS with MRP_COGS as ( select * from (select skucode_child, ifnull(try_cast(product_cost as float),0) as product_cost, to_date(start_date , \'dd-mon-yy\')::date as start_date, to_date(end_date ,\'dd-mon-yy\')::date as end_date, warehouse, channel as mrp_channel, ifnull(try_cast(tax as float),0) as cogs_tax, row_number() over(partition by lower(warehouse),lower(channel),lower(skucode_child),lower(start_date),lower(end_date) order by 1 )rw from select_db.maplemonk.sku_mrp_cogs ) where rw=1 ), Mile_Costs as ( select * from( select channel as mile_channel, skucode, warehouse, ifnull(try_cast(FIRST_MILE_COST as float),0)+ifnull(try_cast(PROCESSING_COST as float),0)+ ifnull(try_cast(THIRD_MILE_COST as float),0)+ ifnull(try_cast(SECOND_MILE_COST as float),0)+ifnull(try_cast(INNER_PACKAGING_COST as float),0)+ ifnull(try_cast(OUTER_PACKAGING_COST as float),0)+ifnull(try_cast(tax as float),0) as mile_cost, row_number() over(partition by lower(channel),lower(skucode),lower(warehouse) order by 1)rw from SELECT_DB.MAPLEMONK.parent_sku_packing_mile_cost ) where rw=1 ) select SC.*, pcm.commonskuid_child ,SM.aop_category ,sm.WEIGHT_ATS_SHIPMENT_IN_KG ,sm.WEIGHT_DTDC_SHIPMENT_IN_KG ,product_cost ,mile_cost from select_db.maplemonk.select_db_sales_consolidated sc left join (select * from (select replace(commonskuid,\'`\',\'\') commonskuid , replace(skucode_child,\'`\',\'\') commonskuid_child , qty::float qty , row_number() over (partition by lower(commonskuid), lower(skucode_child) order by 1) rw from SELECT_DB.MAPLEMONK.mapping_sku_mapping_parent_child ) where rw=1) PCM on lower(PCM.commonskuid) = lower(SC.commonskuid) left join (select * from (select marketplace_sku skucode ,brand , commonskuid , name productname , category , sub_category ,AOP_CATEGORY ,WEIGHT_ATS_SHIPMENT_IN_KG ,WEIGHT_DTDC_SHIPMENT_IN_KG , row_number() over (partition by lower(marketplace_sku) order by 1) rw from SELECT_DB.maplemonk.select_db_sku_master ) where rw = 1 ) SM on lower(sc.sku_code) = lower(SM.skucode) left join mrp_cogs smc on sc.order_date::date >= smc.start_date::date and sc.order_date::date <= smc.end_date::date and lower(smc.skucode_child) = lower(pcm.commonskuid_child) left join mile_costs mc on lower(mc.skucode) = lower(sc.sku_code) ; create or replace table select_db.maplemonk.select_db_pandl as With sales_data_Filter_Amazon_po_Marketplace as ( select sc.*,case when PO_Orders.reference_code is not null then \'AMAZON_VENDOR_CENTRAL_PO\' else MARKETPLACE end MARKETPLACE2 from SELECT_DB.MAPLEMONK.SELECT_db_sales_consolidated SC left join (Select * from (select \"Order/PO Number\" REFERENCE_CODE, row_number() over (partition by lower(\"Order/PO Number\") order by 1) rw from select_db.maplemonk.avp_kyari_all_amz_b2b_po) where rw=1 ) PO_ORDERS on lower(SC.reference_code) like \'%\' || lower(PO_ORDERS.REFERENCE_CODE) || \'%\' ), sales_data as ( select ORDER_ID ,REFERENCE_CODE ,SALEORDERITEMCODE ,SALES_ORDER_ITEM_ID ,PHONE ,NAME ,EMAIL ,MAPLE_MONK_ID_PHONE ,CUSTOMER_ID ,CUSTOMER_ID_FINAL ,ACQUSITION_DATE ,FIRST_COMPLETE_ORDER_DATE ,NEW_CUSTOMER_FLAG ,NEW_CUSTOMER_FLAG_MONTH ,ACQUISITION_PRODUCT ,ACQUISITION_CHANNEL ,ACQUISITION_MARKETPLACE ,SHOP_NAME ,case when upper(sc.marketplace2) like \'VENDOR CENTRAL DROPSHIP%\' then \'VENDOR CENTRAL DROPSHIP\' else sc.marketplace2 end as marketplace1 ,case when upper(CHANNEL) like \'VENDOR CENTRAL DROPSHIP%\' then \'VENDOR CENTRAL DROPSHIP\' else channel end as channel1 ,SOURCE ,EASY_ECOM_SKU as SKU ,PRODUCT_ID ,PRODUCT_NAME ,SKU_CODE ,coalesce(SM.productname,SC.PRODUCT_NAME_FINAL) PRODUCT_NAME_FINAL ,coalesce(SM.category,SC.PRODUCT_CATEGORY) PRODUCT_CATEGORY ,coalesce(SM.sub_category,SC.PRODUCT_SUB_CATEGORY) PRODUCT_SUB_CATEGORY ,CURRENCY ,CITY ,STATE ,ORDER_DATE as order_date1 ,SHIPPING_LAST_UPDATE_DATE ,ORDER_STATUS ,OMS_ORDER_STATUS ,SHIPPING_STATUS ,FINAL_SHIPPING_STATUS ,AWB ,COURIER ,DISPATCH_DATE ,DELIVERED_DATE ,DELIVERED_STATUS ,DAYS_IN_SHIPMENT ,WAREHOUSE ,brand ,PAYMENT_GATEWAY ,PAYMENT_MODE ,last_update_date ,case when upper(shipping_status) in (\'RTO INITIATED\',\'RTO IN-TRANSIT\',\'SHIPPED - RETURNED TO SELLER\',\'RTO UNDELIVERED\',\'SHIPPED - RETURNING TO SELLER\',\'DELIVERED TO ORIGIN\') then 1 else 0 end as final_return_flag ,coalesce(SM.commonskuid, sc.sku_code) commonskuid ,AOP_CATEGORY AS AOP_CATEGORY1 ,WEIGHT_ATS_SHIPMENT_IN_KG ,WEIGHT_DTDC_SHIPMENT_IN_KG ,Quantity ,GROSS_SALES_BEFORE_TAX ,DISCOUNT ,discount_codes ,case when rc.retention is null then \'\' else retention end as retention ,coalesce(SC.QUANTITY*coalesce(PO_RATE.RATE_EXCL_GST,DF_RATE.RATE_EXCL_GST),SC.selling_price) SELLING_PRICE ,coalesce(SC.QUANTITY*coalesce(PO_RATE.GST,DF_RATE.GST), SC.TAX) TAX ,SHIPPING_PRICE ,RETURNED_QUANTITY ,RETURNED_SALES ,CANCELLED_QUANTITY ,pincode ,PAYMENT_GATEWAY_TRANSACTION_NUMBER ,case when lower(pickup_city) in (\'pune\',\'talegaon\') then \'PUNE\' else pickup_city end as pickup_city ,case when lower(sh_ps.commission_type) like \'%percent%\' then div0(ifnull(sh_ps.commission_value/100,0) *sc.selling_price, count(1) over (partition by sc.order_id,SALEORDERITEMCODE))end as shopify_PLATFORM_FEE1 ,case when lower(scm.commission_type) like \'%flat fee for month%\' then div0(ifnull(scm.commission_value,0), count(1) over (partition by lower(sc.marketplace) , month(sc.order_Date::date), year(sc.order_Date::date))) end as shopify_PLATFORM_FEE2 ,case when lower(shco.commission_type) like \'%flat fee for each order%\' then div0(ifnull(shco.commission_value,0) ,count(1) over (partition by sc.order_id,SALEORDERITEMCODE)) end as shopify_PLATFORM_FEE3 ,ifnull(shopify_PLATFORM_FEE1,0)+ifnull(shopify_PLATFORM_FEE2,0)+ifnull(shopify_PLATFORM_FEE3,0) as shopify_PLATFORM_FEE ,case when lower(amc.commission_type) like \'%flat fee for month%\' then div0(ifnull(amc.commission_value , 0) ,count(1) over (partition by lower(sc.marketplace) , month(sc.order_Date::date), year(sc.order_Date::date))) when lower(amc.commission_type) like \'%flat fee for each order%\' then div0(ifnull(amc.commission_value,0), count(1) over (partition by sc.order_id,SALEORDERITEMCODE)) when lower(amc.commission_type) like \'%percent%\' then div0(ifnull(amc.commission_value/100,0)*(sc.selling_price), count(1) over (partition by sc.order_id,SALEORDERITEMCODE) )end as amazon_PLATFORM_FEE from (select * from sales_data_Filter_Amazon_po_Marketplace where not(lower(marketplace) like \'%offline%\' and lower(REFERENCE_CODE) like any (\'%rs\',\'%rs_\',\'%rs__\'))) sc left join (select * from (select marketplace_sku skucode ,brand , commonskuid , name productname , category , sub_category ,AOP_CATEGORY ,WEIGHT_ATS_SHIPMENT_IN_KG ,WEIGHT_DTDC_SHIPMENT_IN_KG , row_number() over (partition by lower(marketplace_sku) order by 1) rw from SELECT_DB.maplemonk.select_db_sku_master ) where rw = 1 ) SM on lower(sc.sku_code) = lower(SM.skucode) left join (select try_to_date(from_date,\'DD-MON-YY\') start_date , try_to_date(to_date,\'DD-MON-YY\') end_date ,upper(partner) Partner , \'SHOPIFY_KYARI_CO\' as marketplace , upper(detail) COMMISSION_TYPE , try_to_double(replace(replace(charges,\'%\',\'\'),\',\',\'\')) commission_value from select_db.maplemonk.shopify_and_tool_costs where upper(commission_type) = \'PERCENT OF SALE\' ) sh_ps on sh_ps.start_date::date <= sc.order_date::date and sh_ps.end_date::date >=sc.order_date::date and lower(sh_ps.marketplace) = lower(sc.marketplace) left join (select try_to_date(from_date,\'DD-MON-YY\') start_date , try_to_date(to_date,\'DD-MON-YY\') end_date ,upper(partner) Partner , \'SHOPIFY_KYARI_CO\' as marketplace , upper(detail) COMMISSION_TYPE , try_to_double(replace(replace(charges,\'%\',\'\'),\',\',\'\')) commission_value from select_db.maplemonk.shopify_and_tool_costs where upper(commission_type) = \'FLAT FEE FOR MONTH\' ) scm on scm.start_date::date <= sc.order_date::date and scm.end_date::date >=sc.order_date::date and lower(scm.marketplace) = lower(sc.marketplace) left join (select try_to_date(from_date,\'DD-MON-YY\') start_date , try_to_date(to_date,\'DD-MON-YY\') end_date ,upper(partner) Partner , \'SHOPIFY_KYARI_CO\' as marketplace , upper(detail) COMMISSION_TYPE , try_to_double(replace(replace(charges,\'%\',\'\'),\',\',\'\')) commission_value from select_db.maplemonk.shopify_and_tool_costs where lower(commission_type) like \'%flat fee for each order%\' ) shco on shco.start_date::date <= sc.order_date::date and shco.end_date::date >=sc.order_date::date and lower(shco.marketplace) = lower(sc.marketplace) left join (select try_to_date(start_date,\'DD-MON-YY\') start_date , try_to_date(end_date,\'DD-MON-YY\') end_date ,marketplace ,COMMISSION_TYPE , try_to_double(replace(replace(COMMISSION_VALUE,\'%\',\'\'),\',\',\'\')) commission_value from select_db.maplemonk.amazon_marketplace_commissions )amc on amc.start_date::date <= sc.order_date::date and amc.end_date::date >=sc.order_date::date and lower(amc.marketplace) = lower(sc.marketplace) left join ( select distinct upper(retention_disc_codes) as retention_disc_codes, \'retention\' as retention from select_db.maplemonk.retention_disc_codes )rc on sc.discount_codes like \'%\'|| rc.retention_disc_codes || \'%\' left join (SELECT * from (select ASIN , try_to_date(\"END DATE\", \'DD-MON-YY\') END_DATE , try_to_date(\"START DATE\", \'DD-MON-YY\') START_DATE , try_cast(RATE_EXCL_GST as float) RATE_EXCL_GST , try_cast(replace(GST_RATE,\'%\',\'\') as float)/100 GST from SELECT_DB.MAPLEMONK.AVP_KYARI_AMZ_B2B_RATE_PO ) ) PO_RATE on SC.PRODUCT_ID = PO_RATE.ASIN and SC.ORDER_DATE::date >= PO_RATE.START_DATE and SC.ORDER_DATE <= PO_RATE.END_DATE and UPPER(SC.marketplace) = \'AMAZON_VENDOR_CENTRAL_PO\' left join (SELECT * from (select ASIN , try_to_date(\"END DATE\", \'DD-MON-YY\') END_DATE , try_to_date(\"START DATE\", \'DD-MON-YY\') START_DATE , try_cast(RATE_EXCL_GST as float) RATE_EXCL_GST , try_cast(replace(GST_RATE,\'%\',\'\') as float)/100 GST from SELECT_DB.MAPLEMONK.AVP_KYARI_AMZ_B2C_DF_RATE ) ) DF_RATE on SC.PRODUCT_ID = DF_RATE.ASIN and SC.ORDER_DATE::date >= DF_RATE.START_DATE and SC.ORDER_DATE <= DF_RATE.END_DATE and UPPER(SC.marketplace) like \'%DROPSHIP%\' ), Shipping_Costs as ( select ab.awb as awb_number, sdc.cost as DTDC_cost, sdc.\"Shipping Type\" as DTDC_type, ATS_mapping.cost as ats_cost, ATS_mapping.type as ats_type from ( select sd.awb, dtdc_prm.\"DESTINATION CATEGORY\" as destination_dtdc_category, ats.\"DESTINATION CATEGORY\" as destination_ats_category, sd.ATS_weight, sd.DTDC_weight from (select awb, pincode, pickup_city, courier, sum(ifnull(WEIGHT_DTDC_SHIPMENT_IN_KG,0) * quantity) as DTDC_weight, sum(ifnull(WEIGHT_ATS_SHIPMENT_IN_KG,0) * quantity ) as ATS_weight from sales_data group by 1,2,3,4 ) sd left join( select * from ( select * ,row_number() over(partition by \"DESTINATION PINCODE\", lower(\"SOURCE CITY\") order by 1)rw from select_db.maplemonk.pincode_region_mapping where lower(\"COURIER Partner\") like \'%dtdc%\' ) where rw=1 )dtdc_prm on dtdc_prm.\"DESTINATION PINCODE\" = sd.pincode and lower(dtdc_prm.\"SOURCE CITY\") = lower(sd.pickup_city) and lower(sd.courier) like \'%dtdc%\' left join( select * from ( select * ,row_number() over(partition by \"DESTINATION PINCODE\", lower(\"SOURCE CITY\") order by 1)rw from select_db.maplemonk.pincode_region_mapping where lower(\"COURIER Partner\") like \'%ats%\' ) where rw=1 )ats on ats.\"DESTINATION PINCODE\" = sd.pincode and lower(ats.\"SOURCE CITY\") = lower(sd.pickup_city) and lower(sd.courier) like \'%ats%\' )ab left join ( select * from select_db.maplemonk.dtdc_shipping_costs where lower(\"Shipping Type\") in (\'reverse\',\'forward\') ) sdc on ab.DTDC_weight::float = sdc.weight::float and lower(sdc.region) = lower(ab.destination_dtdc_category) left join ( select * from select_db.maplemonk.ATS_SHIPPING_COSTS where lower(Type) in (\'reverse\',\'forward\') ) ATS_mapping on ab.ATS_weight::float = ATS_mapping.weight::float and lower(ATS_mapping.region) = lower(ab.destination_ats_category) where awb is not null ), MRP_COGS as ( select * from (select skucode_child, ifnull(try_cast(product_cost as float),0) as product_cost, to_date(start_date , \'dd-mon-yy\')::date as start_date, to_date(end_date ,\'dd-mon-yy\')::date as end_date, warehouse, channel as mrp_channel, ifnull(try_cast(tax as float),0) as cogs_tax, row_number() over(partition by lower(warehouse),lower(channel),lower(skucode_child),lower(start_date),lower(end_date) order by 1 )rw from select_db.maplemonk.sku_mrp_cogs ) where rw=1 ), Mile_Costs as ( select * from( select channel as mile_channel, skucode, warehouse, ifnull(try_cast(FIRST_MILE_COST as float),0)+ifnull(try_cast(PROCESSING_COST as float),0)+ ifnull(try_cast(THIRD_MILE_COST as float),0)+ ifnull(try_cast(SECOND_MILE_COST as float),0)+ifnull(try_cast(INNER_PACKAGING_COST as float),0)+ ifnull(try_cast(OUTER_PACKAGING_COST as float),0)+ifnull(try_cast(tax as float),0) as mile_cost, row_number() over(partition by lower(channel),lower(skucode),lower(warehouse) order by 1)rw from SELECT_DB.MAPLEMONK.parent_sku_packing_mile_cost ) where rw=1 ), Spends as ( select spend.date, \'SHOPIFY_KYARI_CO\' as marketplace1, channel as channel1, aop.AOP_category as AOP_category1, sum(case when aop.spend_share is not null then div0(spend.marketing_spend*aop.spend_share,100) else spend.marketing_spend end) as marketing_spend, sum(clicks) as clicks from (select date, replace(AD_URL,\'\"\',\'\') ad_url, channel, sum(spend)*1.18 marketing_spend, sum(clicks) as clicks from SELECT_DB.MAPLEMONK.select_db_marketing_consolidated where lower(channel) like any (\'%google%\',\'%facebook%\') group by 1,2,3 )spend left join ( select \"Landing Page URL\" as landing_page, AOP_category, spend_share FROM select_db.maplemonk.landing_page_category_mapping UNPIVOT ( spend_share FOR AOP_category IN (\"PLNTXL\",\"PLNTSNGL\",\"PLNTRPLST\", \"PLNTRMTL\",\"PLNTRCRMC\", \"PLNTMS\",\"PLNTCRMC\",\"PLNTCOMB\", \"ADONACC\") ) AS unpivoted_data )aop on lower(aop.landing_page) = lower(spend.ad_url) group by 1,2,3,4 ), Amazon_spends as ( select date, \'VENDOR CENTRAL DROPSHIP\' as channel1, \'VENDOR CENTRAL DROPSHIP\' as marketplace1, parent_sku, child_sku, sm.AOP_CATEGORY as AOP_CATEGORY1, sum(TOTAL_IMPRESSIONS_SESSION_SHARE) impressions, sum(TOTAL_CLICKS_SESSION_SHARE) clicks, sum(TOTAL_AD_CONVERSIONS_SESSION_SHARE) ad_conversions, sum(TOTAL_AD_SPEND_SESSION_SHARE)*1.18 spend from SELECT_DB.MAPLEMONK.SELECT_DB_amazonads_consolidated ac left join (select * from (select marketplace_sku skucode ,brand , commonskuid , name productname , category , sub_category ,AOP_CATEGORY ,WEIGHT_ATS_SHIPMENT_IN_KG ,WEIGHT_DTDC_SHIPMENT_IN_KG , row_number() over (partition by lower(marketplace_sku) order by 1) rw from SELECT_DB.maplemonk.select_db_sku_master ) where rw = 1 ) SM on lower(ac.child_sku) = lower(SM.skucode) group by 1,2,3,4,5,6 ), Razorpay_gateway_costs as ( select replace(NOTES:shopify_order_id,\'\"\',\'\') id, \'SHOPIFY_KYARI_CO\' as gateway_marketplace, sum(div0(ifnull(fee,0),100)+div0(ifnull(tax,0),100)) as gateway_fee from select_db.maplemonk.razorpay_payments where lower(status) in (\'refunded\',\'captured\') group by 1,2 ), Returns as ( with return_data as ( select order_date1 as return_date, order_date1 as order_date, reference_code, null as invoice_date, null as invoice_id, SALEORDERITEMCODE, brand, sku, marketplace1 as marketplace, channel1 as marketing_channel, selling_price as total_return_amount, quantity as returned_quantity, tax as return_tax, commonskuid, product_category, product_sub_category from (select * from sales_data where final_return_flag = 1) ) select rd.*, coalesce(pcm.commonskuid_child,rd.commonskuid) as child_sku, case when pcm.commonskuid_child is null then rd.returned_quantity else ifnull(pcm.qty,0)*rd.returned_quantity end as returned_child_QUANTITY ,div0(rd.RETURNED_QUANTITY,count(1) over (partition by reference_code ,SKU)) RETURN_QUANTITY ,div0(rd.total_return_amount,count(1) over (partition by reference_code ,SKU)) return_amount from return_data rd left join (select * from (select replace(commonskuid,\'`\',\'\') commonskuid , replace(skucode_child,\'`\',\'\') commonskuid_child , qty::float qty , row_number() over (partition by lower(commonskuid), lower(skucode_child) order by 1) rw from SELECT_DB.MAPLEMONK.mapping_sku_mapping_parent_child ) where rw=1) PCM on lower(PCM.commonskuid) = lower(rd.commonskuid) ), sESSIONS_DATA AS ( select try_cast(DATAENDTIME as date) Date ,\'AMAZON\' as session_channel ,\'AMAZON_SELLER_CENTRAL_KYARI\' session_Marketplace ,sum(ifnull(trafficbyasin:\"sessions\",0)) Sessions from SELECT_DB.maplemonk.asp_kyari_get_sales_and_traffic_report_asin group by 1,2 ,3 union select date date, channel session_channel, shop_name session_marketplace, sum(sessions) Sessions from SELECT_DB.MAPLEMONK.SELECT_DB_ga_sessions_consolidated group by 1,2,3 ), sales_calculation as ( select coalesce(sc.order_date1::Date,gs.date,gst.date, amazon_spends.date,amazon_spends_aop.date,SD.date)::date as Order_Date ,coalesce(SC.MARKETPLACE1,gs.MARKETPLACE1,gst.MARKETPLACE1,amazon_spends.MARKETPLACE1,amazon_spends_aop.MARKETPLACE1) as MARKETPLACE ,coalesce(sc.CHANNEL1, gs.channel1, gst.channel1,amazon_spends.channel1,amazon_spends_aop.channel1, sd.session_channel)channel ,CASE WHEN LOWER(MARKETPLACE) LIKE ANY (\'%shopify%\') AND retention = \'retention\' and LOWER(discount_codes) LIKE \'%amz%\' AND LOWER(channel) LIKE ANY (\'%contlo%\', \'%whatsapp%\', \'bob\') THEN \'KY_AMZ_B2B_RTNCHT\' WHEN LOWER(MARKETPLACE) LIKE ANY (\'%shopify%\') AND retention = \'retention\' and LOWER(discount_codes) LIKE \'%amz%\' AND NOT(LOWER(channel) LIKE ANY (\'%contlo%\', \'%whatsapp%\', \'bob\')) THEN \'KY_AMZ_B2B_RTNCAL\' WHEN LOWER(MARKETPLACE) LIKE ANY (\'%shopify%\') AND retention = \'retention\' and LOWER(discount_codes) NOT LIKE \'%amz%\' AND LOWER(channel) LIKE ANY (\'%contlo%\',\'%whatsapp%\', \'bob\') THEN \'KY_WEBSTORES_B2C_RTNCHT\' WHEN LOWER(MARKETPLACE) LIKE ANY (\'%shopify%\') AND retention = \'retention\' and LOWER(discount_codes) NOT LIKE \'%amz%\' AND NOT(LOWER(channel) LIKE ANY (\'%contlo%\', \'%whatsapp%\', \'bob\')) THEN \'KY_WEBSTORES_B2C_RTNCAL\' WHEN LOWER(MARKETPLACE) LIKE ANY (\'%shopify%\') AND retention != \'retention\' AND LOWER(channel) LIKE ANY (\'%google%\', \'%facebook%\', \'%direct%\') THEN \'KY_WEBSTORES_B2C_ACQ\' WHEN (LOWER(MARKETPLACE) LIKE ANY (\'%shopify%\') AND retention != \'retention\' AND NOT(LOWER(channel) LIKE ANY (\'%google%\', \'%facebook%\', \'%direct%\')) AND LOWER(NEW_CUSTOMER_FLAG) = \'new\') or (lower(marketplace) like \'offline\' and lower(reference_code) like \'k%\') THEN \'KY_WEBSTORES_B2C_ACQOTHER\' WHEN LOWER(MARKETPLACE) LIKE ANY (\'%shopify%\') AND retention != \'retention\' and NOT(LOWER(channel) LIKE ANY (\'%google%\', \'%facebook%\', \'%direct%\')) AND LOWER(NEW_CUSTOMER_FLAG) != \'new\' THEN \'KY_WEBSTORES_B2C_RTNOTHER\' WHEN LOWER(MARKETPLACE) LIKE ANY (\'%amazon_merchant%\',\'%amazon_fba%\') THEN \'KY_AMZ_B2C_ACQ\' WHEN LOWER(MARKETPLACE) LIKE ANY (\'%vendor central%\',\'%vendor_central%\') THEN \'KY_AMZ_B2B_ACQ\' WHEN LOWER(SC.reference_code) LIKE \'corp%\' THEN \'KY_CORPGIFTOTH_B2B_ACQ\' WHEN LOWER(MARKETPLACE) LIKE ANY (\'%offline%\') and lower(SC.reference_code) LIKE \'hypd%\' THEN \'KY_OTHMP_B2C_ACQ\' WHEN UPPER(brand) = \'ROBOTBANAO\' THEN \'RB_AMZ_B2B_ACQ\' WHEN UPPER(MARKETPLACE) like \'%FLIPKART%\' then \'KY_OTHMP_B2C_ACQ\' ELSE \'Others\' END AS Revenue_Stream ,SC.PRODUCT_CATEGORY ,SC.PRODUCT_SUB_CATEGORY ,coalesce(sc.AOP_CATEGORY1,gs.AOP_CATEGORY1,gst.aop_category1) as AOP_CATEGORY2 ,SC.REFERENCE_CODE ,SC.SOURCE ,SC.ORDER_ID ,SC.SALEORDERITEMCODE ,SC.SALES_ORDER_ITEM_ID ,SC.PHONE ,SC.NAME ,SC.EMAIL ,SC.MAPLE_MONK_ID_PHONE ,SC.CUSTOMER_ID ,SC.CUSTOMER_ID_FINAL ,SC.ACQUSITION_DATE ,SC.FIRST_COMPLETE_ORDER_DATE ,SC.NEW_CUSTOMER_FLAG ,SC.NEW_CUSTOMER_FLAG_MONTH ,SC.ACQUISITION_PRODUCT ,SC.ACQUISITION_CHANNEL ,SC.ACQUISITION_MARKETPLACE ,SC.SHOP_NAME ,coalesce(sc.SKU,amazon_spends_aop.child_sku) sku ,SC.PRODUCT_ID ,SC.PRODUCT_NAME ,SC.SKU_CODE ,SC.PRODUCT_NAME_FINAL ,SC.CURRENCY ,SC.CITY ,SC.STATE ,SC.SHIPPING_LAST_UPDATE_DATE ,SC.ORDER_STATUS ,SC.OMS_ORDER_STATUS ,SC.SHIPPING_STATUS ,SC.FINAL_SHIPPING_STATUS ,SC.AWB ,SC.pickup_city ,SC.COURIER ,SC.DISPATCH_DATE ,SC.DELIVERED_DATE ,SC.DELIVERED_STATUS ,SC.DAYS_IN_SHIPMENT ,SC.WAREHOUSE ,SC.PAYMENT_GATEWAY ,SC.PAYMENT_MODE ,SC.final_return_flag as return_flag ,sc.commonskuid ,SC.WEIGHT_ATS_SHIPMENT_IN_KG ,SC.WEIGHT_DTDC_SHIPMENT_IN_KG ,coalesce(pcm.commonskuid_child, SC.sku_code) SKU_CODE_CHILD ,case when pcm.commonskuid_child is null then sc.quantity else ifnull(pcm.qty,0)*sc.quantity end as QUANTITY_CHILD ,case when pcm.commonskuid_child is null then sc.RETURNED_QUANTITY else ifnull(pcm.qty,0)*sc.RETURNED_QUANTITY end as RETURNED_QUANTITY_CHILD ,case when pcm.commonskuid_child is null then sc.CANCELLED_QUANTITY else ifnull(pcm.qty,0)*sc.CANCELLED_QUANTITY end as CANCELLED_QUANTITY_CHILD ,case when lower(payment_mode) = \'cod\' and (lower(order_status) not like \'%cancel%\' and lower(FINAL_SHIPPING_STATUS) not like \'%cancel%\') and lower(courier) = \'dtdc\' then div0(21,count(1) over (partition by reference_code)) end as dtdc_cod_cost ,case when lower(payment_mode) = \'cod\' and (lower(order_status) not like \'%cancel%\' and lower(FINAL_SHIPPING_STATUS) not like \'%cancel%\') and lower(courier) = \'ats\' then div0(25,count(1) over (partition by reference_code)) end as ats_cod_cost ,div0(QUANTITY,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) Quantity ,div0(GROSS_SALES_BEFORE_TAX,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) GROSS_SALES_BEFORE_TAX ,div0(TAX,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) TAX ,div0(SHIPPING_PRICE,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) SHIPPING_PRICE ,div0(discount,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) discount ,div0(SELLING_PRICE,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) SELLING_PRICE ,div0(sc.RETURNED_QUANTITY,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) RETURNED_QUANTITY ,div0(shopify_PLATFORM_FEE,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) shopify_PLATFORM_FEE ,div0(amazon_PLATFORM_FEE,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) amazon_PLATFORM_FEE ,div0(sc.RETURNED_SALES,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) RETURNED_SALES ,div0(CANCELLED_QUANTITY,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID)) CANCELLED_QUANTITY ,div0(ifnull(gs.marketing_spend,0),count(1) over (partition by order_date,lower(channel),lower(aop_category2) ,lower(MARKETPLACE))) aop_marketing_spend ,div0(ifnull(gst.marketing_spend,0),count(1) over (partition by order_date,lower(channel),lower(marketplace) ))total_marketing_spend ,div0(ifnull(gs.clicks,0),count(1) over (partition by order_date,lower(channel),lower(aop_category2), lower(marketplace))) aop_clicks ,div0(ifnull(gst.clicks,0),count(1) over (partition by order_date,lower(channel),lower(marketplace))) total_clicks ,div0(ifnull(amazon_spends.spend,0),count(1) over (partition by order_date,lower(channel))) Amazon_Marketing_Spend1 ,div0(ifnull(amazon_spends_aop.spend,0),count(1) over (partition by order_date,lower(channel),lower(coalesce(SC.SKU,amazon_spends_aop.child_sku)) )) Amazon_Marketing_Spend_sku ,div0(ifnull(amazon_spends.clicks,0),count(1) over (partition by order_date,lower(channel))) Amazon_Marketing_clicks ,div0(ifnull(amazon_spends_aop.clicks,0),count(1) over (partition by order_date,lower(channel),lower(coalesce(SC.SKU,amazon_spends_aop.child_sku)) )) Amazon_Marketing_clicks_sku ,ifnull(Amazon_Marketing_Spend1,0)+(ifnull(Amazon_Marketing_Spend_sku,0)) as Amazon_Marketing_Spend ,ifnull(Amazon_Marketing_clicks,0) + ifnull(Amazon_Marketing_clicks_sku,0) as amazon_clicks ,div0(ifnull(RGC.gateway_fee,0),count(1) over (partition by RGC.gateway_marketplace,RGC.id)) as gateway_tax ,smc.product_cost*QUANTITY_CHILD as product_cost1 , smc.cogs_tax*QUANTITY_CHILD as product_cost_tax1, div0(mc.mile_cost,count(1) over (partition by reference_code,sku_code order by 1 )) as mile_cost1, pincode, div0(dcr.dtdc_cost,count(1) over (partition by dcr.awb_number order by 1 )) as dtdc_reverse_cost, div0(dcf.dtdc_cost,count(1) over (partition by dcf.awb_number order by 1 )) as dtdc_forward_cost, div0(acr.ats_cost,count(1) over (partition by acr.awb_number order by 1 )) as ats_reverse_cost, div0(acf.ats_cost,count(1) over (partition by acf.awb_number order by 1 )) as ats_forward_cost, PAYMENT_GATEWAY_TRANSACTION_NUMBER, discount_codes, div0(ifnull(sd.sessions,0), count(1) over(partition by order_date,channel)) as sessions from sales_data sc left join (select * from (select replace(commonskuid,\'`\',\'\') commonskuid , replace(skucode_child,\'`\',\'\') commonskuid_child , qty::float qty , row_number() over (partition by lower(commonskuid), lower(skucode_child) order by 1) rw from SELECT_DB.MAPLEMONK.mapping_sku_mapping_parent_child ) where rw=1) PCM on lower(PCM.commonskuid) = lower(SC.commonskuid) FULL OUTER JOIN ( select date, channel1, marketplace1, sum(spend)as spend, sum(clicks)clicks from amazon_spends where child_sku is null group by 1,2,3 )amazon_spends on sc.order_date1::date = amazon_spends.Date and lower(sc.channel1) = lower(amazon_spends.channel1) and lower(sc.marketplace1) = lower(amazon_spends.marketplace1) FULL OUTER JOIN ( select date, channel1, marketplace1, child_sku, sum(spend)as spend, sum(clicks)clicks from amazon_spends where child_sku is not null group by 1,2,3,4 )amazon_spends_aop on sc.order_date1::date = amazon_spends_aop.Date and lower(sc.channel1) = lower(amazon_spends_aop.channel1) and lower(sc.sku) = lower(amazon_spends_aop.child_sku) and lower(sc.marketplace1) = lower(amazon_spends_aop.marketplace1) full outer join ( select * from Spends where aop_category1 is not null )gs on gs.date::date = sc.order_date1::date and lower(gs.channel1) = lower(sc.channel1) and lower(gs.aop_category1) = lower(sc.AOP_CATEGORY1) and lower(sc.marketplace1) = lower(gs.marketplace1) full outer join ( select * from Spends where aop_category1 is null )gst on gst.date::date = sc.order_date1::date and lower(gst.channel1) = lower(sc.channel1) and lower(sc.marketplace1) = lower(gst.marketplace1) FULL OUTER JOIN ( SELECT * from SESSIONS_DATA )SD ON SD.DATE = SC.ORDER_DATE1 AND LOWER(SD.SESSION_CHANNEL) = LOWER(SC.CHANNEL1) left join mrp_cogs smc on sc.order_date1::date >= smc.start_date::date and sc.order_date1::date <= smc.end_date::date and lower(smc.skucode_child) = lower(coalesce(pcm.commonskuid_child, SC.sku_code)) left join mile_costs mc on lower(mc.skucode) = lower(sc.sku_code) left join (select * from Shipping_Costs where lower(DTDC_type) = \'reverse\' ) dcr on sc.awb = dcr.awb_number and lower(sc.courier) like \'%dtdc%\' and sc.final_return_flag=1 left join (select * from Shipping_Costs where lower(DTDC_type) = \'forward\') dcf on sc.awb = dcf.awb_number and lower(sc.courier) like \'%dtdc%\' left join (select * from Shipping_Costs where lower(ATS_type) = \'reverse\') acr on sc.awb = acr.awb_number and lower(sc.courier) like \'%ats%\' and sc.final_return_flag=1 left join (select * from Shipping_Costs where lower(ATS_type) = \'forward\') acf on sc.awb = acf.awb_number and lower(sc.courier) like \'%ats%\' left join ( select * from Razorpay_gateway_costs where id is not null )RGC on sc.PAYMENT_GATEWAY_TRANSACTION_NUMBER = RGC.id and lower(RGC.gateway_marketplace) = lower(sc.marketplace1) ), PLANTCOMBO_MAPPING AS ( select sc.reference_code as reference_code1, LISTAGG(concate_string,\',\') all_sku from ( select reference_code,ARRAY_TO_STRING(ARRAY_SORT(ARRAY_AGG(lower(sku))),\'\')concate_sku from sales_calculation where lower(marketplace) like \'%shopify%\' group by 1 )sc left join ( SELECT ARRAY_TO_STRING(ARRAY_SORT(ARRAY_CONSTRUCT(lower(IFNULL(\"Child SKU 1\", \'\')),lower(IFNULL(\"Child SKU 2\", \'\')),lower(IFNULL(\"Child SKU 3\", \'\')), lower(IFNULL(\"Child SKU 4\", \'\')),lower(IFNULL(\"Child SKU 5\", \'\')))),\'@#\') as concate_string ,replace(split(concate_string,\'@#\')[0],\'\"\') as sku1 ,replace(split(concate_string,\'@#\')[1],\'\"\') as sku2 ,replace(split(concate_string,\'@#\')[2],\'\"\') as sku3 ,replace(split(concate_string,\'@#\')[3],\'\"\') as sku4 ,replace(split(concate_string,\'@#\')[4],\'\"\') as sku5 from select_db.maplemonk.plantcombo_sku_set )pl on lower(concate_sku) LIKE \'%%\' || lower(sku1) || \'%\' || lower(sku2) || \'%\' || \'%\' || lower(sku3) || \'%\' || \'%\' || lower(sku4) || \'%\' || \'%\' || lower(sku5) || \'%\' group by 1 ), adjust_table as ( select sales1.* ,div0(sales2.rp_product_cost,count(1) over (partition by sales2.rf))rp_product_cost1 ,div0(sales2.rp_product_cost_tax,count(1) over (partition by sales2.rf))rp_product_cost_tax1 ,div0(sales2.rp_mile_cost,count(1) over (partition by sales2.rf))rp_mile_cost1 ,ifnull(product_cost1,0) + ifnull(rp_product_cost1,0) as product_cost ,ifnull(product_cost_tax1,0) + ifnull(rp_product_cost_tax1,0) as product_cost_tax ,ifnull(mile_cost1,0) + ifnull(rp_mile_cost1,0) as mile_cost from (select * from sales_calculation where not(lower(marketplace) like \'%offline%\' and lower(reference_code) like any (\'%rp_\',\'%rp\',\'%rp__\')) )sales1 left join (select replace(split(reference_code,\'_\')[0],\'\"\',\'\')rf, sum(ifnull(product_cost1,0))rp_product_cost, sum(ifnull(product_cost_tax1,0))rp_product_cost_tax, sum(ifnull(mile_cost1,0)) rp_mile_cost from sales_calculation where (lower(marketplace) like \'%offline%\' and lower(reference_code) like any (\'%rp_\',\'%rp\',\'%rp__\')) group by 1 )sales2 on replace(sales1.reference_code,\'#\',\'\') = sales2.rf ) ( SELECT sc.*,case when all_sku like \'%\'|| lower(sku) ||\'%\' then \'PLANTCOMBO\'else AOP_CATEGORY2 end AS AOP_CATEGORY ,NULL AS return_reference_code, NULL AS return_sku, NULL AS return_child_sku, NULL AS return_quantity, NULL AS returned_child_quantity, NULL AS return_amount FROM adjust_table sc left join PLANTCOMBO_MAPPING plm on plm.reference_code1 = sc.reference_code ) UNION ALL ( SELECT return_date::date AS order_date, case when lower(marketplace) like \'%shopify%\' then \'SHOPIFY_KYARI_CO\' when lower(marketplace) like \'%amazon%\' then \'AMAZON_MERCHANT\' else upper(marketplace) end as marketplace , marketing_channel as channel ,CASE WHEN LOWER(MARKETPLACE) LIKE ANY (\'%shopify%\') AND retention = \'retention\' and LOWER(discount_codes) LIKE \'%amz%\' AND LOWER(channel) LIKE ANY (\'%contlo%\', \'%whatsapp%\', \'bob\') THEN \'KY_AMZ_B2B_RTNCHT\' WHEN LOWER(MARKETPLACE) LIKE ANY (\'%shopify%\') AND retention = \'retention\' and LOWER(discount_codes) LIKE \'%amz%\' AND NOT(LOWER(channel) LIKE ANY (\'%contlo%\', \'%whatsapp%\', \'bob\')) THEN \'KY_AMZ_B2B_RTNCAL\' WHEN LOWER(MARKETPLACE) LIKE ANY (\'%shopify%\') AND retention = \'retention\' and LOWER(discount_codes) NOT LIKE \'%amz%\' AND LOWER(channel) LIKE ANY (\'%contlo%\',\'%whatsapp%\', \'bob\') THEN \'KY_WEBSTORES_B2C_RTNCHT\' WHEN LOWER(MARKETPLACE) LIKE ANY (\'%shopify%\') AND retention = \'retention\' and LOWER(discount_codes) NOT LIKE \'%amz%\' AND NOT(LOWER(channel) LIKE ANY (\'%contlo%\', \'%whatsapp%\', \'bob\')) THEN \'KY_WEBSTORES_B2C_RTNCAL\' WHEN LOWER(MARKETPLACE) LIKE ANY (\'%shopify%\') AND retention != \'retention\' AND LOWER(channel) LIKE ANY (\'%google%\', \'%facebook%\', \'%direct%\') THEN \'KY_WEBSTORES_B2C_ACQ\' WHEN (LOWER(MARKETPLACE) LIKE ANY (\'%shopify%\') AND retention != \'retention\' AND NOT(LOWER(channel) LIKE ANY (\'%google%\', \'%facebook%\', \'%direct%\')) AND LOWER(NEW_CUSTOMER_FLAG) = \'new\') or (lower(marketplace) like \'offline\' and lower(reference_code) like \'k%\') THEN \'KY_WEBSTORES_B2C_ACQOTHER\' WHEN LOWER(MARKETPLACE) LIKE ANY (\'%shopify%\') AND retention != \'retention\' and NOT(LOWER(channel) LIKE ANY (\'%google%\', \'%facebook%\', \'%direct%\')) AND LOWER(NEW_CUSTOMER_FLAG) != \'new\' THEN \'KY_WEBSTORES_B2C_RTNOTHER\' WHEN LOWER(MARKETPLACE) LIKE ANY (\'%amazon_merchant%\',\'%amazon_fba%\') THEN \'KY_AMZ_B2C_ACQ\' WHEN LOWER(MARKETPLACE) LIKE ANY (\'%vendor central%\') THEN \'KY_AMZ_B2B_ACQ\' WHEN LOWER(reference_code) LIKE \'corp%\' THEN \'KY_CORPGIFTOTH_B2B_ACQ\' WHEN LOWER(MARKETPLACE) LIKE ANY (\'%offline%\') and lower(reference_code) LIKE \'hypd%\' THEN \'KY_OTHMP_B2C_ACQ\' WHEN UPPER(brand) = \'ROBOTBANAO\' THEN \'RB_AMZ_B2B_ACQ\' WHEN UPPER(MARKETPLACE) like \'%FLIPKART%\' then \'KY_OTHMP_B2C_ACQ\' ELSE \'Others\' END AS Revenue_Stream ,PRODUCT_CATEGORY,product_sub_categorynull,null, NULL,NULL,NULL,NULL,NULL,NULL, reference_code AS return_reference_code, sku AS return_sku, child_sku AS return_child_sku, return_quantity, returned_child_quantity, return_amount FROM returns rt left join (select distinct reference_code as rf, discount_codes, new_customer_flag ,case when rc.retention is null then \'\' else retention end as retention from select_db.maplemonk.select_db_sales_consolidated sc left join ( select distinct upper(retention_disc_codes) as retention_disc_codes, \'retention\' as retention from select_db.maplemonk.retention_disc_codes )rc on sc.discount_codes like \'%\'|| rc.retention_disc_codes || \'%\' )sc on lower(sc.rf) = lower(rt.reference_code) )",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from SELECT_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        