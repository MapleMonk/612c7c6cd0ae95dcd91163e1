{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "Create or replace table eggozdb.maplemonk.Date_area_dim as select cast(Date as date) Date, area_classification from eggozdb.maplemonk.date_dim cross join (select distinct area_classification from eggozdb.maplemonk.my_sql_retailer_retailer); CREATE OR REPLACE TABLE eggozdb.maplemonk.SALES_SUMMARY AS select * ,sum(Net_Sales) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Net_Sales ,sum(Eggs_sold) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_Sold from (select a.date Date ,a.area_classification Area_classification ,ifnull(b.Net_sales,0) Net_Sales ,ifnull(b.eggs_sold,0) Eggs_Sold from eggozdb.maplemonk.Date_area_dim a left join ( select date ,area_classification ,sum(sales - discount) Net_sales ,sum(eggs_sold) eggs_sold from ( select cast(timestampadd(minute,330,o.date) as date) Date ,o.id ,ol1.id ,rr.area_classification Area_Classification ,SUM(ol1.single_sku_rate *ol1.quantity) Sales , SUM(o.discount_amount)/SUM(ol2.Items) Discount ,SUM(ol1.quantity*pp.SKU_Count) Eggs_Sold from eggozdb.Maplemonk.my_sql_order_order o left join eggozdb.Maplemonk.my_sql_order_orderline ol1 ON o.id=ol1.order_id left join eggozdb.Maplemonk.my_sql_product_product pp ON ol1.product_id =pp.id left join eggozdb.Maplemonk.my_sql_retailer_retailer rr ON o.retailer_id =rr.id left join (select order_id, COUNT(1) AS Items from eggozdb.Maplemonk.my_sql_order_orderline group by order_id) ol2 ON o.id=ol2.order_id WHERE o.status in ('delivered', 'completed') group by cast(timestampadd(minute,330,o.date) as date) , rr.area_classification, o.id, ol1.id ) group by date ,area_classification) b on a.area_classification = b.area_classification and a.date = b.date where year(a.date)>= 2020 and year(a.date) <= year(getdate()) ); CREATE OR REPLACE TABLE eggozdb.maplemonk.Collection_Summary as select * ,sum(Collections) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Collections from ( select a.date Date ,a.area_classification Area_classification ,ifnull(b.Collections,0) Collections from eggozdb.maplemonk.Date_area_dim a left join ( select date(timestampadd(minute,330,transaction_DATE)) Collection_Date, area_classification, sum(pay_amount) Collections from eggozdb.maplemonk.my_sql_payment_payment pp left join eggozdb.maplemonk.my_sql_payment_invoice pi on pi.id = pp.invoice_id left join eggozdb.maplemonk.my_sql_payment_salestransaction ps on pp.salesTransaction_id = ps.id left join eggozdb.maplemonk.my_sql_order_order oo on oo.id = pi.order_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = ps.retailer_id where ps.transaction_type = 'Credit' and ps.is_trial = 'FALSE' group by area_classification, date(timestampadd(minute,330,transaction_DATE)) ) b on a.area_classification = b.area_classification and a.date = b.collection_date where year(a.date)>= 2020 and year(a.date) <= year(getdate()) ); create or replace table eggozdb.maplemonk.Replacement_Summary as select * ,sum(Eggs_replaced) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_replaced ,sum(Eggs_replaced_white) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_replaced_white ,sum(Eggs_replaced_brown) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_replaced_brown from ( select a.date Date ,a.area_classification Area_classification ,ifnull(b.Eggs_replaced,0) Eggs_replaced ,ifnull(b.eggs_replaced_white,0) Eggs_replaced_white ,ifnull(b.eggs_replaced_brown,0) Eggs_replaced_brown from eggozdb.maplemonk.Date_area_dim a left join ( select replacement_date , area_classification ,(case when eggs_replaced_white is null then 0 else eggs_replaced_white end) Eggs_Replaced_White ,(case when eggs_replaced_brown is null then 0 else eggs_replaced_Brown end) Eggs_replaced_Brown ,((case when eggs_replaced_white is null then 0 else eggs_replaced_white end) + (case when eggs_replaced_brown is null then 0 else eggs_replaced_Brown end)) as eggs_replaced from ( select date(timestampadd(minute,330,or1.date)) as Replacement_Date ,rr.area_classification ,(case when pp.name like '%White%' then 'White' when pp.name like '%Brown%' then 'Brown' end) Egg_Name ,sum(or1.quantity* pp.sku_count) Eggs_replaced from eggozdb.maplemonk.my_sql_order_orderreturnline or1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr ON or1.retailer_id =rr.id left JOIN eggozdb.maplemonk.my_sql_product_product pp on pp.id = or1.product_id where line_type in ('Replacement') group by rr.area_classification, date(timestampadd(minute,330,or1.date)) ,(case when pp.name like '%White%' then 'White' when pp.name like '%Brown%' then 'Brown' end) ) pivot( sum(eggs_replaced) for egg_name in ('White', 'Brown')) as p (Replacement_date, area_classification, Eggs_Replaced_White, Eggs_Replaced_Brown) ) b on a.area_classification = b.area_classification and a.date = b.replacement_date where year(a.date)>= 2020 and year(a.date) <= year(getdate()) ); CREATE OR REPLACE TABLE eggozdb.maplemonk.Summary_reporting_table as select a.date ,a.area_classification as Area ,Net_Sales ,MTD_Net_Sales as MTD_Sales ,eggs_sold ,mtd_eggs_sold ,collections ,mtd_collections ,eggs_replaced ,eggs_replaced_white ,eggs_replaced_brown ,mtd_eggs_replaced ,mtd_eggs_replaced_white ,mtd_eggs_replaced_brown from eggozdb.maplemonk.SALES_SUMMARY a left join eggozdb.maplemonk.Collection_Summary b on a.area_classification = b.area_classification and a.date = b.date left join eggozdb.maplemonk.Replacement_Summary c on a.area_classification = c.area_classification and a.date = c.date;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from EGGOZDB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        