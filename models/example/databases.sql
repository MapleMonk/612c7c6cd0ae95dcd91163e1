{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "CREATE OR REPLACE TABLE SELECT_DB.maplemonk.select_db_checkout_fact_items as With CheckOut_Order_level as ( SELECT distinct c.id AS checkout_id, c.created_at::date AS created_at, c.created_at as created_timestamp, c.customer:\"id\" AS checkout_customer_id ,replace(coalesce(customer:\"first_name\",(billing_address : \"first_name\"),(shipping_address : \"first_name\")),\'\"\',\'\') as first_name ,replace(coalesce(customer:\"last_name\",(billing_address : \"last_name\"),(shipping_address : \"last_name\") ),\'\"\',\'\') as last_name ,COALESCE(email, (billing_address : \"email\"),(shipping_address : \"email\"),(customer : \"email\")) AS email ,COALESCE(phone, (billing_address : \"phone\"),(shipping_address : \"phone\"),(customer : \"phone\")) AS phone_number ,case when customer:\"orders_count\" = 0 then \'New\' else \'Repeat\' end as New_Customer_Flag FROM select_db.maplemonk.shopify_abandoned_checkouts c where ifnull(datediff(\'hour\',created_at,completed_at),0) >= 6 or ifnull(datediff(\'hour\',created_at,completed_at),0) = 0 ), Sales_Order_Level as ( SELECT distinct s.created_at::date AS sales_order_date, s.created_at::timestamp AS sales_order_timestamp, s.customer:\"id\" AS sales_customer_id, s.name AS reference_code from select_db.maplemonk.shopify_kyari_co_orders s ), order_level_checkout_Sales_Data_duplicates_reference_Code as ( SELECT COL.*, SOl.sales_order_date, SOL.reference_code, SOL.sales_order_timestamp FROM CheckOut_Order_level COL left join Sales_Order_Level SOL ON col.checkout_customer_id = sol.sales_customer_id AND sol.sales_order_date BETWEEN col.created_at AND DATEADD(\'day\', 10, col.created_at) where reference_code is not null ) ,order_level_checkout_Sales_Data as ( select * from ( select row_number() over(partition by checkout_id order by sales_order_timestamp::timestamp asc) c_rw ,case when c_rw = 1 then checkout_id else null end as checkout_id_flag ,case when c_rw = 1 then checkout_id else null end as checkout_id ,case when c_rw = 1 then created_at else null end as created_at ,case when c_rw = 1 then created_timestamp else null end as created_timestamp ,case when c_rw = 1 then checkout_customer_id else null end as checkout_customer_id ,case when c_rw = 1 then first_name else null end as first_name ,case when c_rw = 1 then last_name else null end as last_name ,case when c_rw = 1 then email else null end as email ,case when c_rw = 1 then phone_number else null end as phone_number ,case when c_rw = 1 then New_Customer_Flag else null end as New_Customer_Flag ,row_number() over(partition by reference_code order by created_timestamp::timestamp desc) rw ,case when rw = 1 then sales_order_date else null end as sales_order_date ,case when rw = 1 then reference_code else null end as reference_code ,case when rw = 1 then sales_order_timestamp else null end as sales_order_timestamp from order_level_checkout_Sales_Data_duplicates_reference_Code )where checkout_id is not null and reference_code is not null ) ,checkout_data AS ( SELECT distinct c.id AS checkout_id, c.created_at::date AS created_at, c.created_at as created_timestamp, REPLACE((A.value:\"sku\"), \'\"\', \'\') AS checkout_sku, REPLACE((A.value:\"price\"), \'\"\', \'\')::float AS checkout_price, c.customer:\"id\" AS checkout_customer_id ,replace(coalesce(customer:\"first_name\",(billing_address : \"first_name\"),(shipping_address : \"first_name\")),\'\"\',\'\') as first_name ,replace(coalesce(customer:\"last_name\",(billing_address : \"last_name\"),(shipping_address : \"last_name\") ),\'\"\',\'\') as last_name ,buyer_accepts_marketing ,COALESCE(email, (billing_address : \"email\"),(shipping_address : \"email\"),(customer : \"email\")) AS email ,COALESCE(phone, (billing_address : \"phone\"),(shipping_address : \"phone\"),(customer : \"phone\")) AS phone_number ,case when customer:\"orders_count\" = 0 then \'New\' else \'Repeat\' end as New_Customer_Flag FROM select_db.maplemonk.shopify_abandoned_checkouts AS c, LATERAL FLATTEN(INPUT => c.line_items, outer => true) A where ifnull(datediff(\'hour\',created_at,completed_at),0) >= 6 or ifnull(datediff(\'hour\',created_at,completed_at),0) = 0 ), shopify_data AS ( SELECT s.created_at::date AS sales_order_date, s.created_at as sales_Order_timestamp, s.customer:\"id\" AS sales_customer_id, s.name AS reference_code, REPLACE((B.value:\"sku\"), \'\"\', \'\') AS sales_sku, sum(REPLACE((B.value:\"price\"), \'\"\', \'\')::float) AS order_price, row_number() over(partition by reference_code,sales_sku order by order_price desc) rw FROM select_db.maplemonk.shopify_kyari_co_orders AS s, LATERAL FLATTEN(INPUT => s.line_items, outer => true) B group by 1,2,3,4,5 ), checkout_fact_items AS ( select c.*,s.reference_code, s.sales_order_date, s.sales_Order_timestamp, s.sales_sku, s.order_price from checkout_data c full outer join shopify_data s ON c.checkout_customer_id = s.sales_customer_id and c.checkout_sku = s.sales_sku AND s.sales_order_date BETWEEN c.created_at AND DATEADD(\'day\', 10, c.created_at) ) ,final_checkout_fact_items as ( select coalesce(c.created_at,ocd.created_at) as date, coalesce(c.checkout_customer_id,ocd.checkout_customer_id) as customer_id, coalesce(c.checkout_id,ocd.checkout_id) as checkout_id, coalesce(c.New_Customer_Flag,ocd.New_Customer_Flag) as New_Customer_Flag, coalesce(c.last_name,ocd.last_name) as last_name, coalesce(c.first_name,ocd.first_name) as first_name, coalesce(c.phone_number,ocd.phone_number) as phone_number, coalesce(c.email,ocd.email) as email, coalesce(c.sales_Order_timestamp,ocd.sales_Order_timestamp) sales_Order_timestamp, DATEDIFF(hour,coalesce(c.created_timestamp,ocd.created_timestamp) ,coalesce(c.sales_Order_timestamp,ocd.sales_Order_timestamp)) AS conversion_time, c.checkout_sku, c.checkout_price, c.reference_code, c.sales_sku, c.order_price from checkout_fact_items c left join order_level_checkout_Sales_Data ocd on c.reference_code = ocd.reference_code ) ,Percentile as ( SELECT date,MAX(percentile_90) AS percentile_90,MAX(percentile_50) AS percentile_50 FROM ( select date ,PERCENTILE_DISC(0.9) WITHIN GROUP (ORDER BY conversion_time asc ) OVER (PARTITION BY date ) AS percentile_90 ,PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY conversion_time asc ) OVER (PARTITION BY date ) AS percentile_50 from (select distinct date,reference_code,conversion_time from final_checkout_fact_items where checkout_id is not null and reference_code is not null) ) group by 1 ),Average as ( select date ,avg(ifnull(conversion_time,0)) as AVG_conversion_time from (select distinct date,reference_code,conversion_time from final_checkout_fact_items where checkout_id is not null and reference_code is not null) group by 1 ) ,Conversion_type as ( SELECT reference_code, case when count(*) = sum(sku_present_flag) then \'Good Convert\' when sum(sku_present_flag) = 0 then \'Different Convert\' else \'Partial Convert\' end as order_conversion_type FROM ( SELECT DISTINCT c.checkout_id AS checkout_id, r.reference_code, r.sales_sku, case when lower(total_skus) like \'%\' || lower(r.sales_sku) || \'%\' then 1 else 0 end as sku_present_flag FROM ( select checkout_id ,LISTAGG(checkout_sku, \', \') WITHIN GROUP (ORDER BY checkout_sku) AS total_skus from checkout_data where checkout_id is not null group by 1 )c LEFT JOIN ( select distinct checkout_id ,reference_code, ifnull(sales_sku,\'no_sku\') as sales_sku from final_checkout_fact_items where reference_code is not null and checkout_id is not null )r ON c.checkout_id = r.checkout_id ) GROUP BY reference_code ) select cfi.*,ct.order_conversion_type ,p.percentile_50 ,p.percentile_90 ,a.AVG_conversion_time ,case when checkout_id is not null and cfi.reference_code is not null then \'Converted\' else \'Not Converted\' end as Checkout_Status ,DATEDIFF(day,cfi.date,current_date()) as days_since_checkout_created from final_checkout_fact_items cfi left join Conversion_type ct on ct.reference_code = cfi.reference_code left join percentile p on cfi.date = p.date left join average a on a.date = cfi.date where checkout_id is not null",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from SELECT_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        