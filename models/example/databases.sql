{{ config(
            materialized='table',
                post_hook={
                    "sql": "create or replace table snitch_db.maplemonk.store_replen_4 as Select * from ( With exclude as ( Select * from ( WITH warehouse_rank AS ( SELECT SKU, facility, units_on_hand, ROW_NUMBER() OVER (PARTITION BY SKU ORDER BY units_on_hand DESC) AS warehouse_rank FROM SNITCH_DB.MAPLEMONK.LIVE_INV_WAREHOUSE_offline_replen where units_on_hand > 1 ), replen_requirements AS ( SELECT SKU_CODE, branch_code, branch_name, final_action, pareto, priority, REPLEN_UNITS, ROW_NUMBER() OVER (PARTITION BY SKU_CODE ORDER BY priority ASC) AS replen_order FROM snitch_db.maplemonk.store_replen_3 ), warehouse_1 AS ( SELECT r.SKU_CODE, r.branch_code, r.branch_name, r.final_action, r.pareto, r.priority, r.REPLEN_UNITS, w.facility, w.units_on_hand, r.replen_order, CASE WHEN r.REPLEN_UNITS <= w.units_on_hand THEN r.REPLEN_UNITS ELSE w.units_on_hand END AS allocated_units, CASE WHEN r.REPLEN_UNITS <= w.units_on_hand THEN 0 ELSE r.REPLEN_UNITS - w.units_on_hand END AS remaining_units FROM replen_requirements r JOIN warehouse_rank w ON r.SKU_CODE = w.SKU AND w.warehouse_rank = 1 ), warehouse_2 AS ( SELECT r.SKU_CODE, r.branch_code, r.branch_name, r.final_action, r.pareto, r.priority, w.facility, w.units_on_hand, r.replen_order, CASE WHEN r.REPLEN_UNITS <= w.units_on_hand THEN r.REPLEN_UNITS ELSE w.units_on_hand END AS allocated_units, CASE WHEN r.REPLEN_UNITS <= w.units_on_hand THEN 0 ELSE r.REPLEN_UNITS - w.units_on_hand END AS remaining_units FROM (SELECT SKU_CODE, branch_code, branch_name, final_action, pareto, priority, remaining_units AS REPLEN_UNITS, replen_order FROM warehouse_1 WHERE remaining_units > 0) r JOIN warehouse_rank w ON r.SKU_CODE = w.SKU AND w.warehouse_rank = 2 ), warehouse_3 AS ( SELECT r.SKU_CODE, r.branch_code, r.branch_name, r.final_action, r.pareto, r.priority, w.facility, w.units_on_hand, r.replen_order, CASE WHEN r.REPLEN_UNITS <= w.units_on_hand THEN r.REPLEN_UNITS ELSE w.units_on_hand END AS allocated_units, CASE WHEN r.REPLEN_UNITS <= w.units_on_hand THEN 0 ELSE r.REPLEN_UNITS - w.units_on_hand END AS remaining_units FROM (SELECT SKU_CODE, branch_code, branch_name, final_action, pareto, priority, remaining_units AS REPLEN_UNITS, replen_order FROM warehouse_2 WHERE remaining_units > 0) r JOIN warehouse_rank w ON r.SKU_CODE = w.SKU AND w.warehouse_rank = 3 ), warehouse_4 AS ( SELECT r.SKU_CODE, r.branch_code, r.branch_name, r.final_action, r.pareto, r.priority, w.facility, w.units_on_hand, r.replen_order, CASE WHEN r.REPLEN_UNITS <= w.units_on_hand THEN r.REPLEN_UNITS ELSE w.units_on_hand END AS allocated_units, CASE WHEN r.REPLEN_UNITS <= w.units_on_hand THEN 0 ELSE r.REPLEN_UNITS - w.units_on_hand END AS remaining_units FROM (SELECT SKU_CODE, branch_code, branch_name, final_action, pareto, priority, remaining_units AS REPLEN_UNITS, replen_order FROM warehouse_3 WHERE remaining_units > 0) r JOIN warehouse_rank w ON r.SKU_CODE = w.SKU AND w.warehouse_rank = 4 ), all_allocations AS ( SELECT SKU_CODE, branch_code, branch_name, final_action, pareto, priority, facility, allocated_units, units_on_hand, replen_order FROM warehouse_1 UNION ALL SELECT SKU_CODE, branch_code, branch_name, final_action, pareto, priority, facility, allocated_units, units_on_hand, replen_order FROM warehouse_2 UNION ALL SELECT SKU_CODE, branch_code, branch_name, final_action, pareto, priority, facility, allocated_units, units_on_hand, replen_order FROM warehouse_3 UNION ALL SELECT SKU_CODE, branch_code, branch_name, final_action, pareto, priority, facility, allocated_units, units_on_hand, replen_order FROM warehouse_4 ), final_check AS ( SELECT SKU_CODE, branch_code, branch_name, final_action, pareto, priority, facility, allocated_units, SUM(allocated_units) OVER (PARTITION BY SKU_CODE, facility ORDER BY priority, replen_order) AS cumulative_allocated_units, units_on_hand FROM all_allocations ) SELECT SKU_CODE, branch_code, branch_name, final_action, pareto, priority, facility, CASE WHEN cumulative_allocated_units <= units_on_hand THEN allocated_units ELSE 0 END AS allocated_units FROM final_check WHERE allocated_units > 0 ORDER BY SKU_CODE, branch_code, facility) ), List_1 as ( Select * from ( SELECT *, ROW_NUMBER() OVER (PARTITION BY \"Branch code\", \"SKU GROUP\" ORDER BY \"Branch code\") AS row_num FROM snitch_db.maplemonk.exclude_list ) where row_num = 1) Select a.*, b.\"SKU GROUP\" from exclude a left join List_1 b on REVERSE(SUBSTRING(REVERSE(REPLACE(a.SKU_CODE, \'\"\', \'\')), POSITION(\'-\' IN REVERSE(REPLACE(a.SKU_CODE, \'\"\', \'\'))) + 1)) = TRIM(b.\"SKU GROUP\") and a.branch_code =b.\"Branch code\" ) where \"SKU GROUP\" is null ;",
                    "transaction": true
                }
            ) }}
            with sample_data as (

                select * from snitch_db.information_schema.databases
            ),
            
            final as (
                select * from sample_data
            )
            select * from final
            