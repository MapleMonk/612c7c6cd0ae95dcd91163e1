{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table eggozdb.maplemonk.beat_material_KPI as select b.beat_number beat_number ,b.beat_name beat_name ,cast(timestampadd(minute,330,dateadd(hour, 5.5, b.beat_date)) as date) AS date ,b.demand_classification area ,CASE WHEN b.demand_classification IN (\'Gurgaon-GT\',\'Delhi-GT\',\'NCR-OF-MT\',\'Noida-GT\',\'NCR-MT\',\'NCR-ON-MT\',\'NCR-HORECA\') THEN \'NCR\' WHEN b.demand_classification IN(\'Allahabad-GT\',\'Lucknow-GT\',\'UP-MT\',\'UP-ON-MT\',\'UP-OF-MT\') THEN \'U.P\' WHEN b.demand_classification IN(\'Indore-GT\',\'Bhopal-GT\',\'MP-ON-MT\',\'MP-OF-MT\') THEN \'M.P\' WHEN b.demand_classification IN(\'Bangalore-Horeca\',\'Bangalore-MT\',\'Bangalore-GT\',\'Bangalore-ON-MT\',\'Bangalore-OF-MT\') THEN \'Banglore\' WHEN b.demand_classification IN(\'East-MT\',\'East-ON-MT\',\'East-Kol-MT\', \'East-OF-MT\') THEN \'Bihar\' ELSE \'Others\' END AS \"Procurement_Region\" ,cau.name FSE ,ww.name as loading_point ,pp.sku_count ,concat(pp.sku_count,pp.name) sku ,sum(product_quantity) demand ,sum(product_out_quantity) out ,sum(product_sold_quantity) sold ,sum(product_promo_quantity) promo ,sum(product_damage_quantity) damage ,sum(product_return_quantity) return ,sum(product_supply_quantity) supply ,sum(product_fresh_in_quantity) fresh_in ,sum(product_transfer_quantity) transfer ,sum(product_replacement_quantity) replacement ,sum(product_return_replace_in_quantity) old_in ,sum(product_quantity)*pp.sku_count demand_eggs ,sum(product_out_quantity)*pp.sku_count out_eggs ,sum(product_sold_quantity)*pp.sku_count sold_eggs ,sum(product_replacement_quantity)*pp.sku_count replacement_eggs ,sum(product_return_quantity)*pp.sku_count return_eggs ,sum(product_fresh_in_quantity)*pp.sku_count fresh_in_eggs ,sum(product_damage_quantity)*pp.sku_count damage_eggs ,sum(product_promo_quantity)*pp.sku_count promo_eggs ,sum(product_supply_quantity)*pp.sku_count supply_eggs ,sum(product_transfer_quantity)*pp.sku_count transfer_eggs ,sum(product_return_replace_in_quantity)*pp.sku_count old_in_eggs from eggozdb.maplemonk.my_sql_saleschain_salesdemandsku s left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment b on s.beatassignment_id = b.id left join eggozdb.maplemonk.my_sql_warehouse_warehouse ww on ww.id = b.warehouse_id left join eggozdb.maplemonk.my_sql_product_product pp on pp.id = s.product_id left join eggozdb.maplemonk.my_sql_distributionchain_distributionpersonprofile d on d.id = b.distributor_id LEFT JOIN eggozdb.Maplemonk.my_sql_custom_auth_user cau ON cau.id = d.user_id where lower(b.supply_approval_status)<>\'cancelled\' group by b.beat_number ,b.beat_name ,date ,b.demand_classification ,cau.name ,pp.sku_count ,concat(pp.sku_count,pp.name) ,ww.name ; create or replace table eggozdb.maplemonk.demand_supply_sold_procure as select a.*, ifnull(b.procured, 0) as procured, ifnull(b.region, a.\"Procurement_Region\") as region, case when b.procured is null or b.procured=0 then 0 else a.sold/b.procured end as soldvsproc, case when b.procured is null or b.procured=0 then 0 else (a.sold-a.return)/b.procured end as netsoldvsproc from (select date,\"Procurement_Region\", sum(demand_eggs) as demanded, sum(out_eggs) as supplied, sum(sold_eggs) as sold, sum(return_eggs) as return, sum(fresh_in_eggs) as fresh_in, sum(replacement_eggs) as replaced from maplemonk.beat_material_kpi group by date, \"Procurement_Region\") a left join (select Region, GRN_DATE, sum(\"EGGS\") as procured from maplemonk.region_wise_procurement_masterdata rmpd group by Region, GRN_DATE) b on a.date = b.GRN_DATE and a.\"Procurement_Region\" = b.Region ; create or replace table eggozdb.maplemonk.moving_average_sold_rep_procure as select a.*, ifnull(b.procured, 0) as procured, ifnull(b.region, a.\"Procurement_Region\") as region, case when b.procured is null or b.procured=0 then 0 else a.sold/b.procured end as soldvsproc, case when b.procured is null or b.procured=0 then 0 else (a.sold-a.return)/b.procured end as netsoldvsproc from (select date,\"Procurement_Region\", sum(sold_eggs) as sold, sum(return_eggs) as return, sum(replacement_eggs) as replaced from maplemonk.beat_material_kpi group by date, \"Procurement_Region\") a join (select Region, GRN_DATE, sum(\"EGGS\") as procured from maplemonk.region_wise_procurement_masterdata rmpd group by Region, GRN_DATE) b on a.date = b.GRN_DATE and a.\"Procurement_Region\" = b.Region ; create or replace table eggozdb.maplemonk.cumulative_demand_supply as select tt.date, tt.area, tt.demand, tt.supply, avg(tt.demand) over (partition by tt.area order by tt.date asc rows between unbounded preceding and current row) cumulative_avg_demand, avg(tt.supply) over (partition by tt.area order by tt.date asc rows between unbounded preceding and current row) cumulative_avg_supply from ( select date, area, sum(demand_eggs) as demand, sum(out_eggs) as supply from eggozdb.maplemonk.beat_material_kpi group by date, area ) tt where tt.date >= date_trunc(\'month\', cast(timestampadd(minute, 660, getdate()) as date)) and tt.date <= cast(timestampadd(minute, 660, getdate()) as date) ; create or replace table eggozdb.maplemonk.cumulative_sold_vs_procure as select tt.date, tt.region, case when sum(tt.procured) over (partition by tt.region order by tt.date asc rows between unbounded preceding and current row) = 0 then 0 else (sum(tt.netsold) over (partition by tt.region order by tt.date asc rows between unbounded preceding and current row))/(sum(tt.procured) over (partition by tt.region order by tt.date asc rows between unbounded preceding and current row)) end as cumulative_netsoldvsproc from (select date, region, sum(sold)-sum(return) as netsold, sum(procured) as procured from eggozdb.maplemonk.demand_supply_sold_procure group by region, date ) tt where date >= date_trunc(\'month\', cast(timestampadd(minute, 660, getdate()) as date)) and date <= cast(timestampadd(minute, 660, getdate()) as date)",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from EGGOZDB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        