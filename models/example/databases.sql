{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table slurp_db.maplemonk.sales_consolidated_intermediate_slurp as select NULL as customer_id ,SHOP_NAME ,CARRIER_ID ,COURIER ,EMAIL ,CONTACT_NUM as phone ,MARKETPLACE ,MARKETPLACE_ID ,ORDER_ID ,INVOICE_ID ,REFERENCE_CODE ,to_timestamp(MANIFEST_DATE) as MANIFEST_DATE ,to_timestamp(SHIPPING_LAST_UPDATE_DATE) as shipping_last_update_date ,SHIPPING_STATUS ,SKU ,SKU_TYPE ,PRODUCT_ID ,PRODUCTNAME ,CURRENCY ,IS_REFUND ,CITY ,STATE ,PIN_CODE ,ORDER_STATUS ,to_timestamp(ORDER_DATE) as order_date ,SHIPPING_PRICE ,NUMBER_OF_PRODUCTS_IN_COMBO ,SUBORDER_QUANTITY ,SHIPPED_QUANTITY ,RETURNED_QUANTITY ,CANCELLED_QUANTITY ,case when lower(order_status) = \'returned\' then 1 else 0 end as return_flag ,RETURN_SALES ,CANCEL_SALES ,TAX ,SUBORDER_MRP ,MRP_SALES as MRP ,CATEGORY ,DISCOUNT ,SELLING_PRICE ,NEW_CUSTOMER_FLAG ,WAREHOUSE_NAME ,DAYS_IN_SHIPMENT ,PAYMENT_MODE ,to_timestamp(IMPORT_DATE) as IMPORT_DATE ,to_timestamp(LAST_UPDATE_DATE) as last_update_date ,AWB_NUMBER , MARKETPLACE as SOURCE, \'Synced\' as Easy_Ecom_Sync_Flag from slurp_db.maplemonk.easy_ecom_consolidated_slurp; create or replace table slurp_db.maplemonk.Final_customerID as with new_phone_numbers as ( select phone, contact_num ,19700000000 + row_number() over( order by contact_num asc ) as maple_monk_id from ( select distinct right(regexp_replace(phone, \'[^a-zA-Z0-9]+\'),10) as contact_num, phone from slurp_db.maplemonk.SALES_CONSOLIDATED_intermediate_slurp ) a ), int as ( select contact_num,email,coalesce(maple_monk_id,id2) as maple_monk_id from ( select contact_num, email,maple_monk_id,19800000000+row_number() over(partition by maple_monk_id is NULL order by email asc ) as id2 from ( select distinct coalesce(p.contact_num,right(regexp_replace(e.contact_num, \'[^a-zA-Z0-9]+\'),10)) as contact_num, e.email,maple_monk_id from ( select phone as contact_num,email from slurp_db.maplemonk.SALES_CONSOLIDATED_INTERMEDIATE_slurp ) e left join new_phone_numbers p on p.contact_num = right(regexp_replace(e.contact_num, \'[^a-zA-Z0-9]+\'),10) ) a ) b ) select contact_num, email, maple_monk_id from int where coalesce(contact_num,email) is not NULL; create or replace table slurp_db.maplemonk.SALES_CONSOLIDATED_slurp as select coalesce(m.maple_monk_id_phone, d.maple_monk_id) as customer_id_final, min(order_date) over(partition by customer_id_final) as acquisition_date, m.* from (select c.maple_monk_id as maple_monk_id_phone, o.* from slurp_db.maplemonk.SALES_CONSOLIDATED_INTERMEDIATE_slurp o left join (select * from (select contact_num phone,maple_monk_id, row_number() over (partition by contact_num order by maple_monk_id asc) magic from slurp_db.maplemonk.Final_customerID) where magic =1 )c on c.phone = right(regexp_replace(o.phone, \'[^a-zA-Z0-9]+\'),10))m left join (select distinct maple_monk_id, email from slurp_db.maplemonk.Final_customerID where contact_num is null )d on d.email = m.email ; ALTER TABLE slurp_db.maplemonk.sales_consolidated_slurp drop COLUMN new_customer_flag ; ALTER TABLE slurp_db.maplemonk.sales_consolidated_slurp ADD COLUMN new_customer_flag varchar(50); ALTER TABLE slurp_db.maplemonk.sales_consolidated_slurp ADD COLUMN acquisition_product varchar(16777216); ALTER TABLE slurp_db.maplemonk.sales_consolidated_slurp ADD COLUMN acquisition_channel varchar(16777216); ALTER TABLE slurp_db.maplemonk.sales_consolidated_slurp ADD COLUMN acquisition_marketplace varchar(16777216); UPDATE slurp_db.maplemonk.sales_consolidated_slurp AS A SET A.new_customer_flag = B.flag FROM ( SELECT DISTINCT order_id, customer_id_final, Order_Date, CASE WHEN Order_Date <> Min(Order_Date) OVER ( partition BY customer_id_final) THEN \'Repeat\' ELSE \'New\' END AS Flag FROM slurp_db.maplemonk.sales_consolidated_slurp)AS B WHERE A.order_id = B.order_id AND A.customer_id_final = B.customer_id_final; UPDATE slurp_db.maplemonk.SALES_CONSOLIDATED_SLURP SET new_customer_flag = CASE WHEN new_customer_flag IS NULL THEN \'New\' ELSE new_customer_flag END; CREATE OR replace temporary TABLE slurp_db.maplemonk.temp_source_1 AS SELECT DISTINCT customer_id_final, --channel marketplace FROM ( SELECT DISTINCT customer_id_final, order_date, marketplace, Min(order_date) OVER ( partition BY customer_id_final) firstOrderdate FROM slurp_db.maplemonk.SALES_CONSOLIDATED_SLURP ) res WHERE order_date=firstorderdate; UPDATE slurp_db.maplemonk.SALES_CONSOLIDATED_SLURP AS a SET a.acquisition_marketplace=b.marketplace FROM slurp_db.maplemonk.temp_source_1 b WHERE a.customer_id_final = b.customer_id_final; CREATE OR replace temporary TABLE slurp_db.maplemonk.temp_product_1 AS SELECT DISTINCT customer_id_final, productname, Row_number() OVER (partition BY customer_id_final ORDER BY SELLING_PRICE DESC) rowid FROM ( SELECT DISTINCT customer_id_final, order_date, productname, SELLING_PRICE , Min(order_date) OVER (partition BY customer_id_final) firstOrderdate FROM slurp_db.maplemonk.SALES_CONSOLIDATED_SLURP )res WHERE order_date=firstorderdate; UPDATE slurp_db.maplemonk.SALES_CONSOLIDATED_slurp AS A SET A.acquisition_product=B.productname FROM ( SELECT * FROM slurp_db.maplemonk.temp_product_1 WHERE rowid=1)B WHERE A.customer_id_final = B.customer_id_final;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from SLURP_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        