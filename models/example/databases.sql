{{ config(
            materialized='table',
                post_hook={
                    "sql": "CREATE TABLE IF NOT EXISTS BSC_DB.MAPLEMONK.BSC_DB_ga_sessions_consolidated ( date date, channel VARCHAR(16777216), shop_name VARCHAR(16777216), sessions int); Create or replace table BSC_DB.MAPLEMONK.BSC_DB_Sales_Cost_Source_intermediate as with Sessions as (select date date, upper(channel_type) channel_type, channel marketing_channel, UPPER(final_source) source, shop_name marketplace, sum(case when lower(SESSIONSOURCEMEDIUM) not like \'%awareness%\' then sessions end) Sessions, sum(case when lower(SESSIONSOURCEMEDIUM) like \'%awareness%\' then sessions end) branding_Sessions from BSC_DB.MAPLEMONK.BSC_DB_ga_sessions_consolidated group by 1,2,3,4,5 ), returnsales as ( select return_date::date return_date ,null as Channel_type ,marketing_channel ,case when lower(marketplace) like any (\'%amazon%\') then \'AMAZON\' when lower(marketplace) like any (\'%shopify%\') then \'SHOPIFY\' else upper(marketplace) end as marketplace ,upper(source) source ,sum(total_return_amount) TOTAL_RETURN_AMOUNT ,sum(total_return_amount_excl_tax) TOTAL_RETURN_AMOUNT_EXCL_TAX ,sum(total_returned_quantity) TOTAL_RETURNED_QUANTITY from BSC_DB.MAPLEMONK.BSC_DB_RETURNS_CONSOLIDATED group by 1,2,3,4,5 order by 1 desc ), orders as ( select FI.order_date::date Date ,upper(FINAL_UTM_CHANNEL_TYPE) Channel_type ,upper(marketplace) Marketplace ,upper(FI.CHANNEL) marketing_CHANNEL ,upper(source) source ,ifnull(sum(ifnull(FI.SELLING_PRICE,0)),0) Total_Sales ,ifnull(sum(ifnull(mrp_sales,0)),0) mrp_sales ,ifnull(sum(ifnull(cogs,0)),0) cogs ,ifnull(sum(ifnull(FI.SELLING_PRICE,0)),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.SELLING_PRICE end),0) TOTAL_SALES_EXCL_CANCL ,ifnull(sum(ifnull(FI.affiliate_commission,0)),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.affiliate_commission end),0) affiliate_commission_EXCL_CANCL ,count(distinct FI.order_id) Total_Orders ,count(distinct FI.order_id) - count(distinct case when lower(FI.order_status) in (\'cancelled\') then FI.order_id end) Orders_EXCL_CANCL ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' then FI.order_id end)) as New_Customer_Orders ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' then FI.order_id end)) - count(distinct(case when lower(FI.new_customer_flag) = \'new\' and lower(FI.order_status) in (\'cancelled\') then FI.order_id end)) as New_Customer_Orders_EXCL_CANCL ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' then FI.customer_id_final end)) as Total_New_Customers ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' then FI.customer_id_final end)) - count(distinct(case when lower(FI.new_customer_flag) = \'new\' and lower(FI.order_status) in (\'cancelled\') and FI.return_flag = 0 then FI.customer_id_final end)) New_Customers_EXCL_CANCL ,count(distinct FI.customer_id_final) as TOTAL_Unique_Customers ,(count(distinct FI.customer_id_final) - count(distinct case when lower(FI.order_status) in (\'cancelled\') then FI.customer_id_final end)) as Unique_Customers_EXCL_CANCL ,count(distinct(case when lower(FI.new_customer_flag) = \'repeat\' then FI.customer_id_final end)) as Repeat_Customers ,(count(distinct(case when lower(FI.new_customer_flag) = \'repeat\' then FI.customer_id_final end)) - count(distinct(case when lower(FI.new_customer_flag) = \'repeat\' and lower(FI.order_status) in (\'cancelled\') and FI.return_flag = 0 then FI.customer_id_final end))) Repeat_Customers_EXCL_CANCL ,ifnull(sum(FI.mrp_discount),0) TOTAL_DISCOUNT ,(ifnull(sum(FI.mrp_discount),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.mrp_discount end),0)) TOTAL_DISCOUNT_EXCL_CANCL ,ifnull(sum(FI.tax),0) TOTAL_TAX ,(ifnull(sum(FI.tax),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.tax end),0)) TAX_EXCL_CANCL ,ifnull(sum(FI.shipping_price),0) TOTAL_SHIPPING_PRICE ,(ifnull(sum(FI.shipping_price),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.shipping_price end),0)) SHIPPING_PRICE_EXCL_CANCL ,ifnull(sum(case when lower(FI.new_customer_flag) = \'new\' then FI.mrp_discount end),0) as New_Customer_Discount ,(ifnull(sum(case when lower(FI.new_customer_flag) = \'new\' then FI.mrp_discount end),0) - ifnull(sum(case when lower(FI.new_customer_flag) = \'new\' and lower(order_status) in (\'cancelled\') then FI.mrp_discount end),0)) as New_Customer_Discount_EXCL_CANCL ,ifnull(sum(FI.quantity),0) TOTAL_QUANTITY ,(ifnull(sum(FI.quantity),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.quantity end),0)) QUANTITY_EXCL_CANCL ,ifnull(sum(case when FI.return_flag=1 then FI.quantity end),0) as Return_Quantity ,ifnull(sum(case when FI.return_flag=1 then ifnull(FI.SELLING_PRICE,0) end),0) as Return_Value ,count(distinct case when lower(order_status) in (\'cancelled\') then order_id end) Cancelled_Orders ,count(distinct case when lower(order_status) not in (\'cancelled\') and return_flag=0 then order_id end) Net_Orders ,count(distinct case when lower(order_status) in (\'delivered\') then order_id end) Delivered_Orders ,count(distinct case when lower(order_status) in (\'returned\',\'rto\') then order_id end) Returned_Orders ,count(distinct case when dispatch_date is not null and lower(order_status) not in (\'cancelled\') then order_id end) Dispatched_Orders ,count(distinct case when lower(order_status) in (\'shipped\',\'printed\',\'confirmed\',\'returned\',\'ready to dispatch\') then order_id end) Realised_Orders ,ifnull(sum(case when lower(order_status) in (\'delivered\') then ifnull(FI.SELLING_PRICE,0)-ifnull(FI.TAX,0) end),0) Delivered_Revenue ,ifnull(sum(case when lower(order_status) in (\'returned\',\'rto\') then ifnull(FI.SELLING_PRICE,0)-ifnull(FI.TAX,0) end),0) Returned_Revenue ,ifnull(sum(case when dispatch_date is not null and lower(order_status) not in (\'cancelled\') then ifnull(FI.SELLING_PRICE,0) end),0) Dispatched_Revenue ,ifnull(sum(case when lower(order_status) in (\'shipped\',\'printed\',\'confirmed\',\'returned\',\'ready to dispatch\') then ifnull(FI.SELLING_PRICE,0) end),0) Realised_Revenue ,count(case when date_trunc(\'month\',acquisition_date)>=dateadd(month,-3,date_trunc(\'month\',order_date)) and date_trunc(\'month\',acquisition_date)<date_trunc(\'month\',order_date) then customer_id_final end) L3M_Customers_Retained ,count(case when date_trunc(\'month\',acquisition_date)>=dateadd(month,-6,date_trunc(\'month\',order_date)) and date_trunc(\'month\',acquisition_date)<date_trunc(\'month\',order_date) then customer_id_final end) L6M_Customers_Retained ,count(case when date_trunc(\'month\',acquisition_date)>=dateadd(month,-3,date_trunc(\'month\',order_date)) and date_trunc(\'month\',acquisition_date)<date_trunc(\'month\',order_date) then customer_id_final end) L12M_Customers_Retained ,sum(case when lower(FI.new_customer_flag) = \'repeat\' then ifnull(FI.selling_price,0) end) Repeat_Customer_Revenue ,count(distinct case when lower(FI.payment_mode) in (\'cod\') then FI.order_id end) as COD_Orders from BSC_DB.MAPLEMONK.BSC_DB_SALES_CONSOLIDATED_PRE FI group by 1,2,3,4,5 ), spendd2c as (select date ,\'CORE\' as Channel_type ,case when lower(channel) like any (\'%facebook%\', \'%google%\') then \'SHOPIFY\' when lower(channel) like any (\'%amazon%\') then \'AMAZON\' else \'Others\' end as Marketplace ,upper(channel) marketing_Channel ,upper(source) source ,sum(case when campaign_type = \'PERFORMANCE\' then spend end) spend_performance ,sum(spend) as spend from BSC_DB.MAPLEMONK.BSC_DB_MARKETING_CONSOLIDATED group by 1,2,3,4,5 ) select coalesce(fi.Date,MC.date, RS.return_date, SC.date) as date, case when upper(coalesce(fi.marketplace,MC.marketplace,RS.marketplace, SC.marketplace)) = \'CRED\' then \'CRED\' else upper(coalesce(fi.channel_type, MC.channel_type, RS.channel_type, SC.channel_type)) end as channel_type, upper(coalesce(fi.marketplace,MC.marketplace,RS.marketplace, SC.marketplace)) as Marketplace, upper(coalesce(fi.marketing_channel,MC.marketing_Channel,RS.marketing_channel, SC.marketing_channel)) as Marketing_Channel, upper(coalesce(fi.source,MC.source,RS.source, SC.source)) as source, Total_Sales, mrp_sales, cogs, TOTAL_SALES_EXCL_CANCL, SC.sessions, SC.branding_Sessions, Total_Orders, Orders_EXCL_CANCL, New_Customer_Orders, New_Customer_Orders_EXCL_CANCL, Total_New_Customers, New_Customers_EXCL_CANCL, TOTAL_Unique_Customers, Unique_Customers_EXCL_CANCL, Repeat_Customers, Repeat_Customers_EXCL_CANCL, TOTAL_DISCOUNT, TOTAL_DISCOUNT_EXCL_CANCL, TOTAL_TAX, TAX_EXCL_CANCL, TOTAL_SHIPPING_PRICE, SHIPPING_PRICE_EXCL_CANCL, New_Customer_DISCOUNT, New_Customer_Discount_EXCL_CANCL, TOTAL_QUANTITY, QUANTITY_EXCL_CANCL, RS.TOTAL_RETURNED_QUANTITY as Return_Quantity, RS.TOTAL_RETURN_AMOUNT as Return_Value, Cancelled_Orders, Net_Orders, Delivered_Orders, Delivered_Revenue, Dispatched_Orders, Dispatched_Revenue, Realised_Orders, Realised_Revenue, spend as marketing_spend, spend_performance as marketing_spend_performance, COD_Orders, Repeat_Customer_Revenue, affiliate_commission_excl_cancl from orders FI full outer join spendd2c MC on FI.Date = MC.date and lower(FI.marketing_channel)=lower(MC.marketing_channel) and lower(FI.Marketplace)=lower(MC.Marketplace) and lower(FI.source)=lower(MC.source) full outer join returnsales RS on RS.return_date = FI.date and lower(RS.marketing_Channel) = lower(coalesce(FI.marketing_Channel,MC.marketing_channel)) and lower(RS.marketplace)=lower(coalesce(FI.marketplace,MC.marketplace)) and lower(RS.source)=lower(coalesce(FI.source,MC.source)) full outer join SESSIONS SC on FI.Date=SC.Date and lower(coalesce(FI.Marketing_Channel,MC.marketing_channel,RS.marketing_Channel))=lower(SC.Marketing_Channel) and lower(coalesce(FI.marketplace,MC.marketplace,RS.marketplace))=lower(SC.Marketplace) and lower(coalesce(FI.source,MC.source,RS.source))=lower(SC.source) ; Create or replace table BSC_DB.MAPLEMONK.BSC_DB_SALES_COST_SOURCE as select c.* , (case when d.channel = \'Core\' then d.target end) core_target , (case when d.channel = \'Non-Core\' then d.target end) noncore_target ,d.target ,div0(div0(e.target,case when date_trunc(\'month\',c.date) = date_trunc(\'month\',getdate()::Date) then right(getdate()::date,2)-1 else right(last_day(c.date),2) end),count(1) over (partition by c.marketing_channel, c.date)) marketing_target from (select \'Bombay Shaving Company\' as Brand, CEIL(DAYOFMONTH(coalesce(a.date, b.date)) / 7) week_of_month, dayname(coalesce(a.date, b.date)) day_name, dayofweek(coalesce(a.date, b.date))+1 day_of_week, coalesce(a.date, b.date) as date, a.channel_type, upper(coalesce(a.marketplace, b.marketplace)) Marketplace, upper(coalesce(a.marketing_channel,b.marketing_channel)) as marketing_Channel, upper(coalesce(a.source,b.source)) as source, Total_Sales, mrp_sales, cogs, TOTAL_SALES_EXCL_CANCL, Sessions, branding_Sessions, Total_Orders, Orders_EXCL_CANCL, New_Customer_Orders, New_Customer_Orders_EXCL_CANCL, Total_New_Customers, New_Customers_EXCL_CANCL, TOTAL_Unique_Customers, Unique_Customers_EXCL_CANCL, Repeat_Customers, Repeat_Customers_EXCL_CANCL, TOTAL_DISCOUNT, TOTAL_DISCOUNT_EXCL_CANCL, TOTAL_TAX, TAX_EXCL_CANCL, TOTAL_SHIPPING_PRICE, SHIPPING_PRICE_EXCL_CANCL, New_Customer_DISCOUNT, New_Customer_Discount_EXCL_CANCL, TOTAL_QUANTITY, QUANTITY_EXCL_CANCL, Return_Quantity, Return_Value, Cancelled_Orders, Net_Orders, Delivered_Orders, Delivered_Revenue, Dispatched_Orders, Dispatched_Revenue, Realised_Orders, Realised_Revenue, marketing_spend, marketing_spend_performance, COD_Orders, Repeat_Customer_Revenue, ifnull(b.customers,0) as MC_MP_Customer_Till_Date, ifnull(b.gross_sales,0) as MC_MP_Sales_Till_Date, affiliate_commission_excl_cancl from BSC_DB.MAPLEMONK.BSC_DB_Sales_Cost_Source_intermediate a full outer join (select date ,marketplace ,marketing_channel ,source ,sum(gross_sales) over (partition by date order by date asc rows between unbounded preceding and current row) gross_sales ,sum(customers) over (partition by date order by date asc rows between unbounded preceding and current row) customers from ( select B.date, B.marketplace Marketplace, B.Channel marketing_channel, A.source, sum(ifnull(selling_price,0)) gross_sales, count(distinct case when new_customer_flag = \'New\' then customer_id_final end) customers from BSC_DB.MAPLEMONK.BSC_DB_SALES_CONSOLIDATED A full outer join ( select * from (select distinct order_date::date date from BSC_DB.MAPLEMONK.BSC_DB_SALES_CONSOLIDATED X) cross join (select distinct marketplace, channel, source from BSC_DB.MAPLEMONK.BSC_DB_SALES_CONSOLIDATED) Y) B on A.order_date::date=B.date group by B.date, B.marketplace,B.channel,A.source order by B.date desc ) order by date desc ) b on a.Date = b.date and lower(a.marketing_channel) = lower(b.marketing_channel) and lower(a.marketplace) = lower(b.marketplace) and lower(a.source) = lower(b.source) ) c left join (select * from bsc_db.maplemonk.monthly_targets) d on date_trunc(\'month\',c.date) = d.date::date and (case when upper(d.channel) = \'NON-CORE\' then \'NON CORE\' else upper(d.channel) end) = upper(c.channel_type) left join (select date::Date date, brand, replace(target,\',\',\'\') target, marketing_channel from bsc_db.maplemonk.marketingtargets) e on lower(c.marketing_channel) = lower(e.marketing_channel) and date_trunc(\'month\',c.date) = e.date and (lower(c.marketplace) like \'%shopify%\' OR lower(c.marketplace) like \'%cred%\') union all select \'Bombae\' as Brand, CEIL(DAYOFMONTH(date) / 7) week_of_month, dayname(date) day_name, dayofweek(date) day_of_week, *, null as core_target, null as noncore_target, null as target, null as marketing_target from BSC_DB.MAPLEMONK.Bombae_SALES_COST_SOURCE ;",
                    "transaction": true
                }
            ) }}
            with sample_data as (

                select * from BSC_DB.information_schema.databases
            ),
            
            final as (
                select * from sample_data
            )
            select * from final
            