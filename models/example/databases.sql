{{ config(
            materialized='table',
                post_hook={
                    "sql": "CREATE OR REPLACE TABLE bummer_db.maplemonk.z_score_lookup as SELECT 50 AS service_level, 0.00 AS z_score UNION ALL SELECT 55, 0.13 UNION ALL SELECT 60, 0.25 UNION ALL SELECT 65, 0.39 UNION ALL SELECT 70, 0.52 UNION ALL SELECT 75, 0.67 UNION ALL SELECT 80, 0.84 UNION ALL SELECT 85, 1.04 UNION ALL SELECT 90, 1.28 UNION ALL SELECT 91, 1.34 UNION ALL SELECT 92, 1.41 UNION ALL SELECT 93, 1.48 UNION ALL SELECT 94, 1.55 UNION ALL SELECT 95, 1.65 UNION ALL SELECT 96, 1.75 UNION ALL SELECT 97, 1.88 UNION ALL SELECT 98, 2.05 UNION ALL SELECT 99, 2.33 UNION ALL SELECT 99.5, 2.58 UNION ALL SELECT 99.9, 3.09; create or replace table bummer_db.maplemonk.INVENTORY_PLANNING as WITH Inventory_Data_Base AS ( SELECT * FROM ( SELECT NULL COMPANYID, NULL COMPANYNAME, try_to_timestamp(timestamp) CREATIONDATE, try_to_timestamp(timestamp) LASTUPDATEDATE, CONVERT_TIMEZONE(\'UTC\', \'Asia/Kolkata\',try_to_timestamp(timestamp)::timestamp) DATA_FETCH_DATE, REPLACE(SKUCODE, \'\\'\', \'\') SKU, REPLACE(SKUCODE, \'\\'\', \'\') ACCOUNTINGSKU, REPLACE(SKUCODE, \'\\'\', \'\') PRODUCTID, REPLACE(SKUCODE, \'\\'\', \'\') COMPANYPRODUCTID, NULL AS MODELNO, NULL AS PRODUCTUNIQUECODE, UPPER(NAME) PRODUCTNAME, NULL AS DESCRIPTION, NULL IS_COMBO, NULL IMAGEURL, NULL SIZE, UPPER(BRAND) BRAND, CATEGORYCODE CATEGORY, NULL COLOR, NULL WIDTH, NULL HEIGHT, NULL LENGTH, NULL WEIGHT, NULL MRP, NULL COST, FACILITY LOCATION_KEY, NULL AS ACCOUNTINGUNIT, PUTAWAYPENDING AS RESERVEDINVENTORY, INVENTORY AVAILABLEINVENTORY, NULL AS INVENTORYTHRESHOLD, NULL AS SELLINGPRICETHRESHOLD, ROW_NUMBER() OVER (PARTITION BY facility,REPLACE(SKUCODE, \'\\'\', \'\'),DATA_FETCH_DATE::date ORDER BY DATA_FETCH_DATE ASC) rw FROM BUMMER_DB.MAPLEMONK.UNICOMMERCE_UNICOMMERCE_BUMMER_GET_INVENTORY_SNAPSHOT where not(lower(facility) like \'bummer_offline\') and not(upper(REPLACE(SKUCODE, \'\\'\', \'\')) like any (\'BUM%\',\'OPM%\',\'MPM%\')) ) WHERE rw = 1 ), Inventory_Data AS ( SELECT DATA_FETCH_DATE ::DATE AS inventory_date, SKU, sm.category, sm.sub_category, sm.size, SUM(IFNULL(AVAILABLEINVENTORY, 0)) AVAILABLEINVENTORY FROM Inventory_Data_Base id left join( select *,100 as mrp from (select *,row_number() over(partition by commonsku order by 1)rw from BUMMER_DB.MAPLEMONK.FINAL_SKU_MASTER ) where rw = 1 )sm on lower(sm.commonsku) = lower(id.sku) GROUP BY 1,2,3,4,5 ) , Sales_Data_Daily AS ( SELECT order_date::DATE AS order_date, REPLACE(SKU_CODE, \'\\'\', \'\') AS SKU, sm.category, sm.sub_category, sm.size, SUM(IFNULL(quantity, 0)) AS QUANTITY, SUM(IFNULL(returned_quantity, 0)) AS RETURNED_QUANTITY FROM BUMMER_DB.MAPLEMONK.BUMMER_DB_sales_consolidated sc left join( select *,100 as mrp from (select *,row_number() over(partition by commonsku order by 1)rw from BUMMER_DB.MAPLEMONK.FINAL_SKU_MASTER ) where rw = 1 )sm on lower(sm.commonsku) = lower(REPLACE(sc.SKU_CODE, \'\\'\', \'\') ) GROUP BY 1,2,3,4,5 ), Daily_Data AS ( SELECT COALESCE(order_date, inventory_date) AS date, COALESCE(id.sku, sd.sku) AS sku, COALESCE(id.sub_category,sd.sub_category) as sub_category, COALESCE(id.category,sd.category) as category, COALESCE(id.size,sd.size) as size, IFNULL(quantity, 0) AS quantity, IFNULL(availableinventory, 0) AS availableinventory, DAY(LAST_DAY(COALESCE(order_date, inventory_date))) AS days_in_month ,case when IFNULL(availableinventory, 0) > IFNULL(quantity, 0) and IFNULL(quantity, 0) != 0 then 1 else 0 end as inventory_grt_sold FROM Inventory_Data id full outer JOIN Sales_Data_Daily sd ON id.sku = sd.sku AND id.inventory_date = sd.order_date ), Monthly_data as ( select last_day(date) month ,sku ,sub_category ,category ,size ,sum(quantity) as Actual_Sales ,sum(case when TO_CHAR(date, \'DD\') = \'01\' then availableinventory else 0 end) opening_inventory ,sum(case when date = current_date then availableinventory else 0 end) current_Inventory ,DAY(last_day(date)) day_in_month ,sum(case when inventory_grt_sold = 1 then quantity else 0 end) UNITS_SOLD_W_INVENTORY ,sum(inventory_grt_sold) DAYS_W_INVENTORY from Daily_Data group by 1,2,3,4,5 ), Structured_data as ( select md.month ,md.sku ,md.sub_category ,md.category ,md.size ,md.Actual_Sales ,md.opening_inventory ,md.current_Inventory ,md.day_in_month ,md.UNITS_SOLD_W_INVENTORY ,md.DAYS_W_INVENTORY ,sum(ifnull(md_roas.UNITS_SOLD_W_INVENTORY,0)) ROS_Quantity ,sum(ifnull(md_roas.DAYS_W_INVENTORY,0)) ROS_Days ,CASE WHEN COALESCE(ROS_Days, 0) = 0 THEN NULL ELSE ROS_Quantity / ROS_Days END AS ROS ,ROS * md.day_in_month as Expected_Sales ,Expected_Sales *(select value::int from bummer_db.maplemonk.inventory_metrics where variable = \'Months_to_forecast\' limit 1) as Future_Expected_Sales ,case when (Expected_Sales - md.Actual_Sales) < 0 then 0 else (Expected_Sales - md.Actual_Sales) end as Opportunity_Loss ,sum(ifnull(md_sd.std_deviation,0)) as st_dev ,sqrt(select value::int from bummer_db.maplemonk.inventory_metrics where variable = \'Lead_Time\' limit 1) as Lead_Time ,(select z_score from bummer_db.maplemonk.z_score_lookup where service_level = 95 limit 1 ) as Z_score ,ifnull(st_dev,0) * ifnull(Lead_Time,0) * ifnull(Z_score,0) as Safety_Stock from monthly_data md left join monthly_data md_roas on datediff(month,md_roas.month,md.month) <= (select value::int from bummer_db.maplemonk.inventory_metrics where variable = \'ROS_Months\' limit 1) and datediff(month,md_roas.month,md.month) > 0 and md.sku = md_roas.sku left join (select sku,STDDEV_SAMP(ifnull(UNITS_SOLD_W_INVENTORY,0)) std_deviation from monthly_data where datediff(month,month,current_date) <= (select value::int from bummer_db.maplemonk.inventory_metrics where variable = \'Months_to_forecast\' limit 1) and datediff(month,month,current_date) > 0 group by 1 ) md_sd on md.sku = md_sd.sku group by 1,2,3,4,5,6,7,8,9,10,11 ), subcategory_rank as ( SELECT sf.month, sf.sub_category, SUM(sf.Actual_Sales) AS Total_Actual_Sales, ROW_NUMBER() OVER (PARTITION BY sf.month ORDER BY SUM(sf.Actual_Sales) DESC) AS SubCategory_rank FROM Structured_data sf GROUP BY sf.month, sf.sub_category ), category_rank as ( SELECT sf.month, sf.category, SUM(sf.Actual_Sales) AS Total_Actual_Sales, ROW_NUMBER() OVER (PARTITION BY sf.month ORDER BY SUM(sf.Actual_Sales) DESC) AS Category_rank FROM Structured_data sf GROUP BY sf.month, sf.category ) select sf.* ,sd1.Actual_Sales as L1_MONTH ,sd2.Actual_Sales as L2_MONTH ,sd3.Actual_Sales as L3_MONTH ,sd4.Actual_Sales as L4_MONTH ,sd5.Actual_Sales as L5_MONTH ,sd6.Actual_Sales as L6_MONTH ,po.PO_Quantity ,sf.Future_Expected_Sales + ifnull(sf.Safety_Stock,0) - ifnull(PO_Quantity,0) - ifnull(sf.current_inventory,0) as pre_Required_For_PO ,case when pre_Required_For_PO < sf.opening_inventory then 0 else pre_Required_For_PO end as Required_For_PO ,sr.SubCategory_rank ,cr.Category_rank ,DENSE_RANK() over(partition by sf.month,sf.sku order by sf.Actual_Sales desc) SKU_rank from Structured_data sf left join ( select \"Item SkuCode\" as sku,SUM(ifnull(\"Pending Quantity\",0)) as PO_Quantity from bummer_db.maplemonk.bummer_db_get_purchase_orders where lower(\"Purchase Order Status\") = \'approved\' group by 1 )po on po.sku = sf.sku left join Structured_data sd1 ON sf.month = TRUNC(DATEADD(month, 2, sd1.month), \'MONTH\') - 1 AND sf.sku = sd1.sku left join Structured_data sd2 ON sf.month = TRUNC(DATEADD(month, 3, sd2.month), \'MONTH\') - 1 AND sf.sku = sd2.sku left join Structured_data sd3 ON sf.month = TRUNC(DATEADD(month, 4, sd3.month), \'MONTH\') - 1 AND sf.sku = sd3.sku left join Structured_data sd4 ON sf.month = TRUNC(DATEADD(month, 5, sd4.month), \'MONTH\') - 1 AND sf.sku = sd4.sku left join Structured_data sd5 ON sf.month = TRUNC(DATEADD(month, 6, sd5.month), \'MONTH\') - 1 AND sf.sku = sd5.sku left join Structured_data sd6 ON sf.month = TRUNC(DATEADD(month, 7, sd6.month), \'MONTH\') - 1 AND sf.sku = sd6.sku left join subcategory_rank sr on sf.month = sr.month and sf.sub_Category = sr.sub_category left join category_rank cr on sf.month = cr.month and sf.Category = cr.category ;",
                    "transaction": true
                }
            ) }}
            with sample_data as (

                select * from BUMMER_DB.information_schema.databases
            ),
            
            final as (
                select * from sample_data
            )
            select * from final
            