{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table LILGOODNESS_DB.maplemonk.sales_consolidated_intermediate_LG as select b.SHOP_NAME AS SHOP_NAME, coalesce(c.carrier_id ,NULL) as carrier_id, coalesce(c.courier ,NULL) as courier, coalesce(b.name ,c.Customer_Name) as Customer_Name, coalesce(b.email ,c.email) as email, coalesce(b.phone ,c.contact_num) as phone, SHOP_NAME as MARKETPLACE, coalesce(MARKETPLACE_ID ,NULL) as MARKETPLACE_ID, b.ORDER_ID, line_item_id::varchar as Line_Item_ID, line_item_id::varchar as Invoice_ID, order_name as Reference_Code, coalesce(c.manifest_date::datetime,NULL) as manifest_date, coalesce(c.shipping_last_update_date::datetime ,NULL) as shipping_last_update_date, coalesce(shipping_status ,NULL) as shipping_status, coalesce(b.sku ,c.sku) as sku, coalesce(c.sku_type ,NULL) as sku_type, b.PRODUCT_ID, b.PRODUCT_NAME as PRODUCTNAME, b.CURRENCY, b.IS_REFUND as RETURN_FLAG, upper(b.CITY::varchar) City, upper(b.STATE:: varchar) State, coalesce(c.order_status,b.order_status) as Order_Status, b.ORDER_TIMESTAMP::datetime as ORDER_Date, b.shipping_price::float as SHIPPING_PRICE, coalesce(c.number_of_products_in_combo ,NULL) as number_of_products_in_combo, b.quantity::int suborder_quantity, b.quantity::int shipped_quantity, case when b.is_refund = 1 then b.quantity::int end returned_quantity, case when b.is_refund = 0 and lower(b.order_status) in (\'cancelled\') then quantity::int end cancelled_quantity, case when b.is_refund = 1 then line_item_sales end as return_sales, case when b.is_refund = 0 and lower(b.order_status) in (\'cancelled\') then line_item_sales end as cancel_sales, b.TAX::float Tax, max(c.suborder_mrp) over (partition by b.ORDER_TIMESTAMP::date, b.sku) as suborder_mrp, b.category, b.discount::float as discount, case when b.line_item_sales::float is null then 0 else b.line_item_sales::float - ifnull(b.discount::float,0) end selling_price, coalesce(c.suborder_mrp,0)*suborder_quantity as mrp_sales, case when (mrp_sales is null or mrp_sales<selling_price) then b.discount else mrp_sales-selling_price end Discount_MRP, case when b.new_customer_flag = \'New\' then 1 else 0 end as new_customer_flag, coalesce(c.warehouse_name,\'NA\') as Warehouse_Name, case when shipping_STATUS in (\'In Transit\', \'Shipment Created\') then datediff(day,date(b.ORDER_TIMESTAMP), getdate()) when shipping_STATUS in (\'Delivered\',\'Delivered To Origin\') then datediff(day,date(b.ORDER_TIMESTAMP),date(shipping_Last_update_date)) end::int as Days_in_Shipment, FINAL_UTM_CHANNEL as Channel, c.payment_mode, c.import_date::datetime as import_date, c.last_update_date from lilgoodness_db.maplemonk.FACT_ITEMS_LG b left join (select * from ( select *,row_number()over(partition by reference_code,sku order by last_update_date desc) rw from lilgoodness_db.maplemonk.fact_items_easy_ecom_lg where marketplace = \'Shopify\' ) z where rw = 1 ) c on replace(b.order_name,\'#\',\'\') = c.reference_code and b.sku = c.sku union all SELECT \'Amazon\' AS SHOP_NAME, coalesce(c.carrier_id ,NULL) as carrier_id, coalesce(c.courier ,NULL) as courier, coalesce(c.Customer_Name,NULL) as Customer_Name, coalesce(c.email, NULL) as email, coalesce(c.contact_num,NULL) as phone, \'Amazon.in\' as Marketplace, coalesce(c.MARKETPLACE_ID ,NULL) as MARKETPLACE_ID, b.\"amazon-order-id\" AS ORDER_ID, CONCAT(b.\"amazon-order-id\",\'-\',b.ASIN) AS LINE_ITEM_ID, b.\"amazon-order-id\" AS Invoice_ID, b.\"amazon-order-id\" AS Reference_Code, coalesce(c.manifest_date::datetime,NULL) as manifest_date, coalesce(c.shipping_last_update_date::datetime ,NULL) as shipping_last_update_date, coalesce(c.shipping_status ,NULL) as shipping_status, coalesce(b.sku ,c.sku) as sku, coalesce(c.sku_type ,NULL) as sku_type, b.ASIN AS PRODUCT_ID, b.\"product-name\" AS Product_Name, b.CURRENCY, case when b.\"order-status\" in (\'Shipped - Returned to Seller\', \'Shipped - Returning to Seller\',\'Shipped - Rejected by Buyer\',\'Shipped - Damaged\') then 1 else 0 end AS RETURN_FLAG, upper(b.\"ship-city\") AS CITY, upper(b.\"ship-state\") AS STATE, coalesce(c.order_status,b.\"order-status\") as Order_Status, \"Purchase-datetime-IST\" AS ORDER_Date, ifnull(TRY_CAST(\"shipping-price\" AS FLOAT),0) AS SHIPPING_PRICE, NULL as Number_of_Products_in_Combo, ifnull(TRY_CAST(QUANTITY AS FLOAT),0) AS QUANTITY, case when lower(\"item-status\") in (\'shipped\') then QUANTITY end AS Shipped_Quantity, case when is_refund = 1 then QUANTITY::int end returned_quantity, case when is_refund = 0 and lower(\"order-status\") in (\'cancelled\') then quantity::int end cancelled_quantity, case when is_refund = 1 then Selling_Price end as return_sales, case when is_refund = 0 and lower(\"order-status\") in (\'cancelled\') then Selling_Price end as cancel_sales, ifnull(TRY_CAST(\"item-tax\" AS FLOAT),0) AS TAX, max(c.suborder_mrp) over (partition by b.\"Purchase-datetime-IST\"::date, b.sku) as suborder_mrp, coalesce(c.category,null) as Category, ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0) AS DISCOUNT, ifnull(TRY_CAST(\"item-price\" AS FLOAT),0) - ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0) AS Selling_Price, coalesce(suborder_mrp,0)*suborder_quantity as mrp_sales, case when (mrp_sales is null or mrp_sales<selling_price) then ifnull(TRY_CAST(\"item-promotion-discount\" AS FLOAT),0) else mrp_sales-selling_price end Discount_MRP, Null as new_customer_flag, coalesce(c.warehouse_name,\'NA\') as Warehouse_Name, case when shipping_status in (\'In Transit\', \'Shipment Created\') then datediff(day,date(\"Purchase-datetime-IST\"), getdate()) when shipping_status in (\'Delivered\',\'Delivered To Origin\') then datediff(day,date(\"Purchase-datetime-IST\"),date(shipping_Last_update_date)) end::int as Days_in_Shipment, b.\"sales-channel\" as Channel, c.payment_mode, c.import_date::datetime as import_date, c.last_update_date FROM Lilgoodness_db.maplemonk.Fact_Items_AmazonSellerPartner_LG b left join (select * from ( select *,row_number()over(partition by reference_code,sku order by last_update_date desc) rw from lilgoodness_db.maplemonk.fact_items_easy_ecom_lg ) z where rw = 1 ) c on b.\"amazon-order-id\" = c.reference_code and b.sku = c.sku union all select * from Lilgoodness_DB.maplemonk.fact_items_easy_ecom_lg where lower(marketplace) not in (\'shopify\',\'amazon.in\'); create or replace table lilgoodness_db.maplemonk.Final_customerID as with new_phone_numbers as ( select phone, contact_num ,19700000000 + row_number() over( order by contact_num asc ) as maple_monk_id from ( select distinct right(regexp_replace(phone, \'[^a-zA-Z0-9]+\'),10) as contact_num, phone from lilgoodness_db.maplemonk.SALES_CONSOLIDATED_INTERMEDIATE_LG ) a ), int as ( select contact_num,email,coalesce(maple_monk_id,id2) as maple_monk_id from ( select contact_num, email,maple_monk_id,19800000000+row_number() over(partition by maple_monk_id is NULL order by email asc ) as id2 from ( select distinct coalesce(p.contact_num,right(regexp_replace(e.contact_num, \'[^a-zA-Z0-9]+\'),10)) as contact_num, e.email,maple_monk_id from ( select phone as contact_num,email from lilgoodness_db.maplemonk.SALES_CONSOLIDATED_INTERMEDIATE_LG ) e left join new_phone_numbers p on p.contact_num = right(regexp_replace(e.contact_num, \'[^a-zA-Z0-9]+\'),10) ) a ) b ) select contact_num, email, maple_monk_id from int where coalesce(contact_num,email) is not NULL; create or replace table lilgoodness_db.maplemonk.SALES_CONSOLIDATED_LG as select coalesce(m.maple_monk_id_phone, d.maple_monk_id) as customer_id_final, min(order_date) over(partition by customer_id_final) as acquisition_date, m.* from (select c.maple_monk_id as maple_monk_id_phone, o.* from lilgoodness_db.maplemonk.SALES_CONSOLIDATED_INTERMEDIATE_LG o left join (select * from (select contact_num phone,maple_monk_id, row_number() over (partition by contact_num order by maple_monk_id asc) magic from lilgoodness_db.maplemonk.Final_customerID) where magic =1 )c on c.phone = right(regexp_replace(o.phone, \'[^a-zA-Z0-9]+\'),10))m left join (select distinct maple_monk_id, email from lilgoodness_db.maplemonk.Final_customerID where contact_num is null )d on d.email = m.email ; ALTER TABLE lilgoodness_db.maplemonk.SALES_CONSOLIDATED_LG drop COLUMN new_customer_flag ; ALTER TABLE lilgoodness_db.maplemonk.SALES_CONSOLIDATED_LG ADD COLUMN new_customer_flag varchar(50); ALTER TABLE lilgoodness_db.maplemonk.SALES_CONSOLIDATED_LG ADD COLUMN acquisition_product varchar(16777216); ALTER TABLE lilgoodness_db.maplemonk.SALES_CONSOLIDATED_LG ADD COLUMN acquisition_channel varchar(16777216); UPDATE lilgoodness_db.maplemonk.SALES_CONSOLIDATED_LG AS A SET A.new_customer_flag = B.flag FROM ( SELECT DISTINCT order_id, customer_id_final, Order_Date, CASE WHEN Order_Date <> Min(Order_Date) OVER ( partition BY customer_id_final) THEN \'Repeat\' ELSE \'New\' END AS Flag FROM lilgoodness_db.maplemonk.SALES_CONSOLIDATED_LG)AS B WHERE A.order_id = B.order_id AND A.customer_id_final = B.customer_id_final; UPDATE lilgoodness_db.maplemonk.SALES_CONSOLIDATED_LG SET new_customer_flag = CASE WHEN new_customer_flag IS NULL THEN \'New\' ELSE new_customer_flag END; CREATE OR replace temporary TABLE lilgoodness_db.maplemonk.temp_source_1 AS SELECT DISTINCT customer_id_final, channel FROM ( SELECT DISTINCT customer_id_final, order_date, channel, Min(order_date) OVER ( partition BY customer_id_final) firstOrderdate FROM lilgoodness_db.maplemonk.SALES_CONSOLIDATED_LG ) res WHERE order_date=firstorderdate; UPDATE lilgoodness_db.maplemonk.SALES_CONSOLIDATED_LG AS a SET a.acquisition_channel=b.channel FROM lilgoodness_db.maplemonk.temp_source_1 b WHERE a.customer_id_final = b.customer_id_final; CREATE OR replace temporary TABLE lilgoodness_db.maplemonk.temp_product_1 AS SELECT DISTINCT customer_id_final, productname, Row_number() OVER (partition BY customer_id_final ORDER BY SELLING_PRICE DESC) rowid FROM ( SELECT DISTINCT customer_id_final, order_date, productname, SELLING_PRICE , Min(order_date) OVER (partition BY customer_id_final) firstOrderdate FROM lilgoodness_db.maplemonk.SALES_CONSOLIDATED_LG )res WHERE order_date=firstorderdate; UPDATE lilgoodness_db.maplemonk.SALES_CONSOLIDATED_LG AS A SET A.acquisition_product=B.productname FROM ( SELECT * FROM lilgoodness_db.maplemonk.temp_product_1 WHERE rowid=1)B WHERE A.customer_id_final = B.customer_id_final;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from LILGOODNESS_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        