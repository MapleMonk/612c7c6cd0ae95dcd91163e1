{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table eggozdb.maplemonk.darjan_sales as select oo.name as bill_name, rr.code as retailer_name, rr.area_classification, rr.beat_number, cast(timestampadd(minute, 660, oo.delivery_date) as date) as date, oo.order_price_amount, ol.quantity, case when lower(pp.slug) like \'%djn%\' then 30 else pp.SKU_Count end as SKU_Count, ol.single_sku_rate, ol.single_sku_mrp, ol.quantity * (case when lower(pp.slug) like \'%djn%\' then 30 else pp.SKU_Count end) eggs, ol.quantity * ol.single_sku_rate as sales, pp.slug, pp.brand_type from eggozdb.maplemonk.my_sql_order_order oo left join eggozdb.maplemonk.my_sql_order_orderline ol on ol.order_id = oo.id left join eggozdb.maplemonk.my_sql_product_product pp on pp.id = ol.product_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = oo.retailer_id where (lower(pp.slug) like \'%wd%\' or lower(pp.slug) like \'%djn%\') and lower(oo.status) in (\'completed\',\'delivered\') and ol.quantity > 0 group by oo.name, rr.code, cast(timestampadd(minute, 660, oo.delivery_date) as date), pp.slug, rr.area_classification, rr.beat_number, ol.quantity, pp.sku_count, ol.single_sku_rate, ol.single_sku_mrp, oo.order_price_amount, pp.brand_type ; create or replace table eggozdb.maplemonk.darjan_vs_smallunprocessed as select ifnull(ds.date,epm.pdate) date, ifnull(ds.darjan_eggs,0) darjan_eggs, epm.* from (select date, sum(eggs) as darjan_eggs from eggozdb.maplemonk.darjan_sales where brand_type = \'branded\' group by date ) ds full outer join (select pdate, sum(\"UB\") as ub_eggs, sum(\"LOSS\") as loss_eggs, sum(\"DIRTY\") as dirty_eggs, sum(chatki) chatki_eggs, sum(hairline) hairline_eggs, sum(\"Small size\") small_size_eggs, sum(\"Total eggs\") procured_eggs, sum(\"Unprocesed Eggs\") unprocessed_eggs, sum(\"Total Clean Eggs\") total_clean_eggs from eggozdb.maplemonk.epm_sheet1 group by pdate ) epm on ds.date = epm.pdate ; create or replace table eggozdb.maplemonk.free_range_sales as select oo.name as bill_name, rr.code as retailer_name, rr.area_classification, rr.beat_number, cast(timestampadd(minute, 660, oo.delivery_date) as date) as date, oo.order_price_amount, ol.quantity, pp.SKU_Count, ol.single_sku_rate, ol.single_sku_mrp, ol.quantity * pp.SKU_Count eggs, ol.quantity * ol.single_sku_rate as sales, pp.slug, pp.brand_type from eggozdb.maplemonk.my_sql_order_order oo left join eggozdb.maplemonk.my_sql_order_orderline ol on ol.order_id = oo.id left join eggozdb.maplemonk.my_sql_product_product pp on pp.id = ol.product_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = oo.retailer_id where lower(pp.slug) like \'%fr%\' and lower(oo.status) in (\'completed\',\'delivered\') and ol.quantity > 0 group by oo.name, rr.code, cast(timestampadd(minute, 660, oo.delivery_date) as date), pp.slug, rr.area_classification, rr.beat_number, ol.quantity, pp.sku_count, ol.single_sku_rate, ol.single_sku_mrp, oo.order_price_amount, pp.brand_type ; Create or replace table eggozdb.maplemonk.Date_area_dim as select cast(Date as date) Date, area_classification from eggozdb.maplemonk.date_dim cross join (select distinct area_classification from eggozdb.maplemonk.my_sql_retailer_retailer); create or replace table eggozdb.maplemonk.secondary_sales AS select rr2.code as distributor_name, tt.* from ( select oo.name bill_name, oo.status, cast(timestampadd(minute, 330, oo.delivery_date) as date) delivery_date, sum(oo.order_price_amount) order_price_amount, ol.quantity * (ol.single_sku_rate + ol.single_sku_discount) sale, ol.single_sku_rate, ol.single_sku_discount, CASE WHEN pp.name LIKE \'%liquid%\' THEN ol.quantity * 1000 / 35 ELSE ol.quantity * CASE WHEN pp.SKU_Count = 1 THEN CASE WHEN rr.area_classification = \'UP-UB\' THEN 1 ELSE 30 END ELSE pp.SKU_Count END END AS eggs_sold, concat(pp.sku_count,left(pp.name,1)) sku, pp.slug, ol.quantity, oo.retailer_id, rr.code as retailer_name, rr.area_classification, rr.beat_number beat_number_original, bc.cluster_name, rr.onboarding_status, rr.city_id, rr.distributor_id from eggozdb.maplemonk.my_sql_distributor_sales_secondaryorder oo left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = oo.retailer_id left join eggozdb.maplemonk.my_sql_distributor_sales_secondaryorderline ol on ol.order_id = oo.id left join eggozdb.maplemonk.my_sql_product_product pp on pp.id = ol.product_id left join eggozdb.maplemonk.my_sql_base_cluster bc on rr.cluster_id = bc.id where lower(oo.status) = \'created\' group by cast(timestampadd(minute, 330, oo.delivery_date) as date), oo.retailer_id, oo.name, pp.name, pp.slug, oo.status, ol.quantity, pp.sku_count, rr.area_classification, pp.slug, rr.code, rr.beat_number, rr.onboarding_status, rr.city_id, rr.distributor_id, ol.single_sku_rate, ol.single_sku_discount, bc.cluster_name ) tt join eggozdb.maplemonk.my_sql_retailer_retailer rr2 on rr2.id = tt.distributor_id ; CREATE OR REPLACE TABLE eggozdb.maplemonk.secondary_return_replacement_promo AS select rr2.code as distributor, ret_rep.* from ( select orr.id as ret_rep_id, orr.type, orr.return_amount as total_ret_amount, cast(timestampadd(minute, 330, orr.return_date) as date) pickup_date, orr.retailer_id, orr.salesPerson_id, orr.status, rrl.quantity, rrl.single_sku_mrp, rrl.single_sku_discount, rrl.single_sku_rate, rrl.product_id, rr.code retailer_name, rr.area_classification, rr.beat_number, rr.city_id, rr.cluster_id, rr.distributor_id, pp.name, pp.slug, pp.SKU_Count, pp.brand_type, concat(pp.sku_count,left(pp.name,1)) sku from eggozdb.maplemonk.my_sql_distributor_sales_secondaryorderreturn orr left join eggozdb.maplemonk.my_sql_distributor_sales_secondaryorderreturnreplaceline rrl on rrl.return_order_id = orr.id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = orr.retailer_id left join eggozdb.maplemonk.my_sql_product_product pp on pp.id = rrl.product_id where lower(orr.status) = \'created\' and distributor_id is not null ) ret_rep left join eggozdb.maplemonk.my_sql_retailer_retailer rr2 on rr2.id = ret_rep.distributor_id ; CREATE OR REPLACE TABLE eggozdb.maplemonk.primary_and_secondary_sku AS select dd.*, dd2.* from ( select datedim.date::date date, rr.code as retailer_name, rr.area_classification, rr.beat_number, rr.onboarding_status, rr.id as retailer_id, cast(timestampadd(minute, 660, rr.onboarding_date) as date) onboarding_date, rr.city_id from eggozdb.maplemonk.date_dim datedim cross join eggozdb.maplemonk.my_sql_retailer_retailer rr ) dd left join ( select date, area area_classification, beat_number_original, retailer_name, parent_retailer_name, classification_name , sku, sum(net_sales) revenue, sum(eggs_sold) eggs_sold, sum(eggs_replaced) eggs_replaced, sum(eggs_return) eggs_return, sum(eggs_promo) eggs_promo, \'no_distributor\' as distributor from eggozdb.maplemonk.summary_reporting_table_beat_retailer_sku group by date, area, beat_number_original, retailer_name, parent_retailer_name, classification_name, sku union all select coalesce(ss.delivery_date, sret.pickup_date, srep.pickup_date, spromo.pickup_date) date, coalesce(ss.area_classification, sret.area_classification, srep.area_classification, spromo.area_classification) area_classification, coalesce(ss.beat_number_original, sret.beat_number, srep.beat_number, spromo.beat_number) beat_number_original, coalesce(ss.retailer_name, sret.retailer_name, srep.retailer_name, spromo.retailer_name) retailer_name, \'no_parent\' as parent_retailer_name, \'distributor_retailer\' as classification_name, coalesce(ss.sku, sret.sku, srep.sku, spromo.sku) sku, sum(ss.sale) revenue, sum(ss.eggs_sold) eggs_sold, srep.eggs_replaced, sret.eggs_return, spromo.eggs_promo, coalesce(ss.distributor_name, sret.distributor, srep.distributor, spromo.distributor) distributor from eggozdb.maplemonk.secondary_sales ss full outer join ( select pickup_date, area_classification, beat_number, retailer_name, \'no_parent\' as parent_retailer_name, \'distributor_retailer\' as classification_name, sku, sum(sku_count*quantity) eggs_return, distributor from eggozdb.maplemonk.secondary_return_replacement_promo where type = \'Return\' group by pickup_date, area_classification, beat_number, retailer_name, sku, distributor ) sret on ss.delivery_date = sret.pickup_date and ss.retailer_name = sret.retailer_name and ss.sku = sret.sku full outer join (select pickup_date, area_classification, beat_number, retailer_name, \'no_parent\' as parent_retailer_name, \'distributor_retailer\' as classification_name, sku, sum(sku_count*quantity) eggs_replaced, distributor from eggozdb.maplemonk.secondary_return_replacement_promo where type = \'Replacement\' group by pickup_date, area_classification, beat_number, retailer_name, sku, distributor ) srep on ss.delivery_date = srep.pickup_date and ss.retailer_name = srep.retailer_name and ss.sku = srep.sku full outer join (select pickup_date, area_classification, beat_number, retailer_name, \'no_parent\' as parent_retailer_name, \'distributor_retailer\' as classification_name, sku, sum(sku_count*quantity) eggs_promo, distributor from eggozdb.maplemonk.secondary_return_replacement_promo where type = \'Promo\' group by pickup_date, area_classification, beat_number, retailer_name, sku, distributor ) spromo on ss.delivery_date = spromo.pickup_date and ss.retailer_name = spromo.retailer_name and ss.sku = spromo.sku group by ss.delivery_date, sret.pickup_date, srep.pickup_date, spromo.pickup_date, ss.area_classification, ss.beat_number_original, ss.retailer_name, ss.sku, ss.distributor_name, sret.area_classification, sret.beat_number, sret.retailer_name, sret.sku, sret.distributor, srep.area_classification, srep.beat_number, srep.retailer_name, srep.sku, srep.distributor, spromo.area_classification, spromo.beat_number, spromo.retailer_name, spromo.sku, spromo.distributor, srep.eggs_replaced, sret.eggs_return, spromo.eggs_promo ) dd2 on dd.date = dd2.date and dd.retailer_name = dd2.retailer_name where year(dd.date::date)>=2021 and dd.date::date <= getdate() ;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from EGGOZDB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        