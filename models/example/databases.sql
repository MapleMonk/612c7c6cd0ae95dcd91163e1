{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table eggozdb.maplemonk.beat_utilization_test as select mm.date, mm.area, mm.beat_number_original, mm.operator, mm.retailer_name, rr.total_onboarded, mm.sold, mm.revenue, mm.replaced, mm.returned, mm.collections, mm.today_billing_collections, nn.onboarding_status from ( select retailer_name, date, area, beat_number_original, operator, sum(net_sales) as revenue, sum(eggs_sold) as sold, sum(collections) as collections, sum(eggs_replaced) as replaced, sum(eggs_promo) as promo, sum(eggs_return) as returned, sum(collections_as_of_today) as today_billing_collections from eggozdb.maplemonk.Summary_reporting_table_beat_retailer_DSO where date <=getdate() group by date, area, beat_number_original, operator, retailer_name having sum(net_sales)<>0 or sum(eggs_sold)<>0 or sum(eggs_replaced)<>0 or sum(eggs_return)<>0 ) mm JOIN (select area_classification, beat_number, count(code) as total_onboarded from eggozdb.maplemonk.my_sql_retailer_retailer where lower(onboarding_status) = \'active\' group by area_classification, beat_number) rr on rr.area_classification = mm.area and rr.beat_number = mm.beat_number_original left join (select code, onboarding_status from eggozdb.maplemonk.my_sql_retailer_retailer) nn on nn.code = mm.retailer_name ; create or replace table eggozdb.maplemonk.secondary_beat_utilization as select mm.date, mm.Beat_number , mm.SKU, mm.Retailer_name ,mm.slug,mm.Area_classification, mm.Eggs_Sold, mm.Single_sku_rate, mm.Single_sku_mrp,mm.Single_sku_discount, mm.Quantity, rr.total_onboarded, mm.Bill_name, mm.Order_price_amount, mm.Order_gross_sales_amount from (SELECT CAST(TIMESTAMPADD(MINUTE, 330, o.delivery_date) AS DATE) AS date, r.beat_number as Beat_number, concat(p.sku_count, left(p.name,1)) as SKU, ol.single_sku_rate as Single_sku_rate, ol.single_sku_mrp as Single_sku_mrp, ol.single_sku_discount as Single_sku_discount, ol.quantity as Quantity, o.name as Bill_name, o.order_price_amount as Order_price_amount, r.code as Retailer_name, p.slug as Slug, ol.quantity * (ol.single_sku_rate + ol.single_sku_discount ) AS Order_gross_sales_amount , r.area_classification as Area_classification, CASE WHEN p.name LIKE \'%liquid%\' THEN ol.quantity * 1000 / 35 ELSE ol.quantity * CASE WHEN p.SKU_Count = 1 THEN CASE WHEN r.area_classification = \'UP-UB\' THEN 1 ELSE 30 END ELSE p.SKU_Count END END AS Eggs_Sold FROM eggozdb.maplemonk.my_sql_distributor_sales_secondaryorder o LEFT JOIN eggozdb.maplemonk.my_sql_distributor_sales_secondaryorderline ol ON ol.order_id = o.id LEFT JOIN eggozdb.maplemonk.my_sql_product_product p ON ol.product_id = p.id LEFT JOIN eggozdb.maplemonk.my_sql_retailer_retailer r ON o.retailer_id = r.id) mm join ( select area_classification, beat_number, count(code) as total_onboarded from eggozdb.maplemonk.my_sql_retailer_retailer where lower(onboarding_status) = \'active\' group by area_classification, beat_number) rr on rr.area_classification = mm.Area_classification and rr.beat_number = mm.Beat_number ;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from EGGOZDB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        