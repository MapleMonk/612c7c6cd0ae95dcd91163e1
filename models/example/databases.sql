{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table ALMOWEAR_DB.maplemonk.sales_consolidated_AW as with a as ( select order_date::date as order_date, sku, max(suborder_mrp) as mrp from ALMOWEAR_DB.maplemonk.easy_ecom_consolidated_AW group by 1,2 ) select CUSTOMER_ID, \'Almo\' as SHOP_NAME, coalesce(carrier_id ,NULL) as carrier_id, coalesce(courier ,NULL) as courier, coalesce(b.email ,c.email) as email, coalesce(b.phone ,c.contact_num) as contact_num, case when b.shop_name = \'Amazon\' then \'Amazon.in\' else \'Shopify_India\' end as MARKETPLACE, coalesce(MARKETPLACE_ID ,NULL) as MARKETPLACE_ID, b.ORDER_ID, b.ORDER_ID as Invoice_id, c.reference_code, c.manifest_date, coalesce(shipping_last_update_date ,NULL) as shipping_last_update_date, coalesce(shipping_status ,b.order_status) as shipping_status, coalesce(b.sku ,c.sku) as sku, coalesce(c.sku_type ,NULL) as sku_type, b.PRODUCT_ID, b.PRODUCT_NAME as PRODUCTNAME, b.CURRENCY, b.IS_REFUND, b.CITY::varchar City, b.STATE:: varchar State, coalesce(c.order_status,b.order_status) as Order_Status, b.ORDER_TIMESTAMP as ORDER_Date, b.shipping_price::float as SHIPPING_PRICE, coalesce(c.number_of_products_in_combo ,NULL) as number_of_products_in_combo, b.quantity::int suborder_quantity, b.quantity::int shipped_quantity, case when b.is_refund = 1 then b.quantity::int end returned_quantity, case when b.is_refund = 0 and lower(b.order_status) in (\'cancelled\') then quantity::int end cancelled_quantity, case when b.is_refund = 1 then line_item_sales end as return_sales, case when b.is_refund = 0 and lower(b.order_status) in (\'cancelled\') then line_item_sales end as cancel_sales, b.TAX::float Tax, a.mrp as suborder_mrp, b.mrp as product_mrp, b.range, b.category, b.style, b.collection, b.discount::float as discount, case when line_item_sales::float is null then 0 else (case when b.shop_name = \'Amazon\' then line_item_sales::float else line_item_sales::float - ifnull(b.discount::float,0) end) end selling_price, coalesce(a.mrp,b.mrp)*suborder_quantity as mrp_sales, case when (mrp_sales is null or mrp_sales<selling_price) then b.discount else mrp_sales-selling_price end Discount_MRP, case when customer_flag = \'New\' then 1 else 0 end as new_customer_flag, coalesce(c.warehouse_name,\'NA\') as Warehouse_Name, NULL as Days_in_Shipment, payment_mode, import_date from almowear_db.maplemonk.FACT_ITEMS b left join a on a.order_date = b.order_timestamp::date and a.sku= b.sku left join (select * from ( select *,row_number()over(partition by reference_code,sku order by import_date desc) rw from almowear_db.maplemonk.easy_ecom_consolidated_AW ) a where rw = 1 ) c on right(b.order_name,len(order_name)-1) = c.reference_code and a.sku = c.sku union all select NULL as customer_id, * from ALMOWEAR_DB.maplemonk.easy_ecom_consolidated_AW where marketplace not in (\'Shopify\',\'Gofynd\',\'Amazon.in\');",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from ALMOWEAR_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        