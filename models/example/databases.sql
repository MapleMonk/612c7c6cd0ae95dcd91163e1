{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table snitch_db.snitch.product_dim as with shopify_product as (select in1.*, \'SHOPIFY\' as source from (select CAST(sn.ID AS VARCHAR) AS \"PRODUCT_ID\", CAST (sn.HANDLE AS VARCHAR) AS \"HANDLE\", CAST(sn.product_type AS TEXT) AS \"PRODUCT_CATEGORY\", sn.VENDOR, CAST(sn.title as VARCHAR) AS \"PRODUCT_TITLE\", CAST(var.value:sku AS VARCHAR) AS \"SKU\", REVERSE(SUBSTRING(REVERSE(sku), CHARINDEX(\'-\', REVERSE(SKU)) + 1)) AS sku_group, CAST(var.value:price AS FLOAT) AS \"PRICE\", CAST(var.value:taxable AS VARCHAR) AS \"TAXABLE\", CASE WHEN c_color = \'option1\' THEN CAST(var.value:option1 AS varchar) WHEN c_color = \'option2\' THEN CAST(var.value:option2 AS varchar) ELSE \'\' END AS color, CASE WHEN s_size = \'option1\' THEN CAST(var.value:option1 AS varchar) WHEN s_size = \'option2\' THEN CAST(var.value:option2 AS varchar) ELSE \'\' END AS size, CAST(var.value:weight AS float) AS \"WEIGHT(KG)\", CAST (sn.created_at AS VARCHAR) AS \"product_CREATED\", CAST (sn.updated_at AS VARCHAR) AS product_updated, CAST (sn.status AS VARCHAR) AS \"product_status\", CAST (sn.published_scope AS VARCHAR) AS \"publish_scope\", CAST (sn.published_at AS VARCHAR) AS \"publish_date\", CAST(var.value:inventory_item_id AS varchar) AS \"inventory_item_id\", CAST(var.value:id AS int) AS \"variant_id\", CAST(var.value:created_at AS varchar) AS \"variant_created_date\", CAST(var.value:updated_at AS varchar) AS \"variant_updated_date\" from (select * from Snitch_db.maplemonk.shopifyindia_products sn LEFT JOIN (select t1.c_color,t2.s_size, case when t1.c_id is null then t2.s_id when t2.s_id is null then t1.c_id else t1.c_id end as \"C_ID\" from (select id as c_id , \"option\" as c_color from (select id, CAST(var.value:name AS varchar) AS \"COLOR\", CAST(var.value:position AS varchar) AS \"position\", concat(\'option\',\"position\") as \"option\" from Snitch_db.maplemonk.shopifyindia_products sn ,lateral flatten(input => sn.options) var) where color like \'Color%\' ) t1 full outer join (select id as s_id,\"option\" as s_size from (select id, CAST(var.value:name AS varchar) AS \"COLOR\", CAST(var.value:position AS varchar) AS \"position\", concat(\'option\',\"position\") as \"option\" from Snitch_db.maplemonk.shopifyindia_products sn ,lateral flatten(input => sn.options) var) where color like \'Size%\') t2 on t1.c_id = t2.s_id) c on sn.id= c.c_id) sn, lateral flatten(input => sn.variants) var ) in1 inner join (select sku,max(\"product_updated\") as product_updated from (select CAST(sn.ID AS VARCHAR) AS \"PRODUCT_ID\", CAST (sn.HANDLE AS VARCHAR) AS \"HANDLE\", CAST(sn.product_type AS TEXT) AS \"PRODUCT_CATEGORY\", sn.VENDOR, CAST(sn.title as VARCHAR) AS \"PRODUCT_TITLE\", CAST(var.value:sku AS VARCHAR) AS \"SKU\", REVERSE(SUBSTRING(REVERSE(sku), CHARINDEX(\'-\', REVERSE(SKU)) + 1)) AS sku_group, CAST(var.value:price AS FLOAT) AS \"PRICE\", CAST(var.value:taxable AS VARCHAR) AS \"TAXABLE\", CASE WHEN c_color = \'option1\' THEN CAST(var.value:option1 AS varchar) WHEN c_color = \'option2\' THEN CAST(var.value:option2 AS varchar) ELSE \'\' END AS color, CASE WHEN s_size = \'option1\' THEN CAST(var.value:option1 AS varchar) WHEN s_size = \'option2\' THEN CAST(var.value:option2 AS varchar) ELSE \'\' END AS size, CAST(var.value:weight AS float) AS \"WEIGHT(KG)\", CAST (sn.created_at AS VARCHAR) AS \"product_CREATED\", CAST (sn.updated_at AS VARCHAR) AS \"product_updated\", CAST (sn.status AS VARCHAR) AS \"product_status\", CAST (sn.published_scope AS VARCHAR) AS \"publish_scope\", CAST (sn.published_at AS VARCHAR) AS \"publish_date\", CAST(var.value:inventory_item_id AS varchar) AS \"inventory_item_id\", CAST(var.value:id AS int) AS \"variant_id\", CAST(var.value:created_at AS varchar) AS \"variant_created_date\", CAST(var.value:updated_at AS varchar) AS \"variant_updated_date\" from (select * from Snitch_db.maplemonk.shopifyindia_products sn LEFT JOIN (select t1.c_color,t2.s_size, case when t1.c_id is null then t2.s_id when t2.s_id is null then t1.c_id else t1.c_id end as \"C_ID\" from (select id as c_id , \"option\" as c_color from (select id, CAST(var.value:name AS varchar) AS \"COLOR\", CAST(var.value:position AS varchar) AS \"position\", concat(\'option\',\"position\") as \"option\" from Snitch_db.maplemonk.shopifyindia_products sn ,lateral flatten(input => sn.options) var) where color like \'Color%\' ) t1 full outer join (select id as s_id,\"option\" as s_size from (select id, CAST(var.value:name AS varchar) AS \"COLOR\", CAST(var.value:position AS varchar) AS \"position\", concat(\'option\',\"position\") as \"option\" from Snitch_db.maplemonk.shopifyindia_products sn ,lateral flatten(input => sn.options) var) where color like \'Size%\') t2 on t1.c_id = t2.s_id) c on sn.id= c.c_id) sn, lateral flatten(input => sn.variants) var ) group by SKU order by 2 desc) in2 ON in1.sku = in2.sku and in1.product_updated = in2.product_updated ) select * from shopify_product union all select distinct null as \"PRODUCT_ID\", null AS \"HANDLE\", null AS \"PRODUCT_CATEGORY\", null VENDOR, null AS \"PRODUCT_TITLE\", replace(A.Value:itemSku,\'\"\',\'\') AS \"SKU\", REVERSE(SUBSTRING(REVERSE(replace(A.Value:itemSku,\'\"\',\'\') ), CHARINDEX(\'-\', REVERSE(replace(A.Value:itemSku,\'\"\',\'\') )) + 1)) AS sku_group, null AS \"PRICE\", null AS \"TAXABLE\", null AS color, null as size, null AS \"WEIGHT(KG)\", null AS \"product_CREATED\", null AS product_updated, null AS \"product_status\", null AS \"publish_scope\", null AS \"publish_date\", null AS \"inventory_item_id\", null as \"variant_id\", null as \"variant_created_date\", null as \"variant_updated_date\", \'UNICOMMERCE\' as source from snitch_db.maplemonk.SNITCH_UNICOMMERCE_GET_ORDERS_BY_IDS_TEST, LATERAL FLATTEN (INPUT => saleorderdto:saleOrderItems)A where lower(replace(A.Value:itemSku,\'\"\',\'\')) not in (select distinct loweR(sku) from shopify_product); create or replace table snitch_db.snitch.product_dim as select distinct p_t.*, m_t.final_size_mapped from snitch_db.snitch.product_dim p_t left join snitch_db.maplemonk.dim_mapping_product_dim m_t on p_t.size = m_t.size and p_t.product_category = m_t.product_category; create or replace table snitch_db.snitch.product_dim_Dupes as ( select * , CASE WHEN ROW_NUMBER() OVER (PARTITION BY sku ORDER BY PRODUCT_UPDATED DESC) = 1 THEN \'N\' ELSE \'Y\' END AS duplicate from snitch_db.snitch.product_dim ); create or replace table snitch_db.snitch.product_dim as (select * from snitch_db.snitch.product_dim_Dupes where duplicate = \'N\') ; create or replace table snitch_db.maplemonk.Customer_DIM_TEMP as select \'unicommerce\' as source_channel, order_id, source, name, phone, email, address_line_1, address_line_2, country, state, city, pincode, null as shopify_customer_id, order_Date as latest_information_Date from ( select replace(saleorderdto:code,\'\"\',\'\') as order_id,case when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%ajio%\' then \'AJIO\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%myntra%\' then \'MYNTRA\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%fynd%\' then \'FYND\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%amazon%\' then \'AMAZON\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%flipkart%\' then \'FLIPKART\' else replace(saleorderdto:channel,\'\"\',\'\') end as source, replace(saleorderdto:billingAddress:addressLine1,\'\"\',\'\') address_line_1, replace(saleorderdto:billingAddress:addressLine2,\'\"\',\'\') address_line_2, replace(saleorderdto:billingAddress:phone,\'\"\',\'\') as phone, replace(saleorderdto:billingAddress:name,\'\"\',\'\') as name, saleorderdto:billingAddress:email::varchar as email, replace(saleorderdto:billingAddress:city,\'\"\',\'\') as city, replace(saleorderdto:billingAddress:state,\'\"\',\'\') as state, replace(saleorderdto:billingAddress:country,\'\"\',\'\') as country, replace(saleorderdto:billingAddress:pincode,\'\"\',\'\') as pincode, date(CONVERT_TIMEZONE(\'UTC\',\'Asia/Kolkata\',dateadd(\'ms\',saleorderdto:displayOrderDateTime,\'1970-01-01\'))) as order_date, row_number() over (partition by source, address_line_1, address_line_1, phone, name, email, city, state, country, pincode order by order_Date desc) rw from snitch_db.maplemonk.SNITCH_UNICOMMERCE_GET_ORDERS_BY_IDS_TEST, LATERAL FLATTEN (INPUT => saleorderdto:saleOrderItems)A where replace(saleorderdto:displayOrderCode,\'\"\',\'\') not in (select distinct name from Snitch_db.maplemonk.shopifyindia_orders) ) where rw = 1 union all select \'logicerp\' as source_channel, null as order_id, source, name, phone, email, address_line_1, address_line_2, country, state, city, pincode, null as shopify_customer_id, latest_information_Date from ( select Branch_Name::varchar as source, retail_cust_name::varchar as name, retail_cust_mobile_no::varchar as phone, retail_cust_email_id::varchar as email, null as address_line_1, null as address_line_2, null as country, null as state, null as city, null as pincode, to_date(bill_date, \'DD/MM/YYYY\') as latest_information_Date, row_number() over (partition by source, address_line_1, address_line_1, phone, name, email, city, state, country, pincode order by latest_information_Date desc) rw from snitch_db.maplemonk.LOGICERPConsolidated_GET_SALE_INVOICE, LATERAL FLATTEN (INPUT => LSTITEMS)A ) where rw = 1 union all select distinct \'shopify\' as source_channel, null as order_id, \'SHOPIFY\' as source, concat(first_name,last_name) as name, coalesce(a.phone,b.phone) phone, coalesce(a.email,b.email) email, address1 as address_line_1, address2 as address_line_2, country, state, city, zip_code as pincode, a.customer_id as shopify_customer_id, updated_date as latest_information_Date from ( select ct.ID as CUSTOMER_ID, case when ct.FIRST_NAME is null then ct.DEFAULT_ADDRESS : first_name else ct.FIRST_NAME end as FIRST_NAME, case when ct.LAST_NAME is null then ct.DEFAULT_ADDRESS : last_name else ct.LAST_NAME end as LAST_NAME, cast(ct.email as varchar) as EMAIL, coalesce(ct.phone,ct.DEFAULT_ADDRESS:phone) phone, cast(ct.TAGS as varchar) as TAGS, ct.STATE as ACCOUNT_STATUS, cast(ct.TAX_EXEMPT as boolean) as TAX_EXEMPT, ct.CURRENCY, CAST(ct.ORDERS_COUNT as int) as ORDERS_COUNT, CAST(ct.TOTAL_SPENT as float) as TOTAL_SPENT, cast(ct.VERIFIED_EMAIL as boolean) as VERIFIED_EMAIL, CAST(ct.LAST_ORDER_ID as int) as LAST_ORDER_ID, CAST(ct.LAST_ORDER_NAME as varchar) as LAST_ORDER_NAME, cast (ct.ACCEPTS_MARKETING as boolean) as ACCEPTS_MARKETING, cast (ct.ACCEPTS_MARKETING_UPDATED_AT as datetime) as ACCEPTS_MARKETING_UPDATED_AT, CAST(ct.DEFAULT_ADDRESS:address1 AS varchar) AS ADDRESS1, CAST(ct.DEFAULT_ADDRESS:address2 AS varchar) AS ADDRESS2, CAST(ct.DEFAULT_ADDRESS:country AS varchar) AS country, CAST(ct.DEFAULT_ADDRESS:country_code AS varchar) AS country_code, CAST(ct.DEFAULT_ADDRESS:province AS varchar) AS state, CAST(ct.DEFAULT_ADDRESS:province_code AS varchar) AS state_code, CAST(ct.DEFAULT_ADDRESS:city AS varchar) As city, CAST(ct.DEFAULT_ADDRESS:zip AS varchar) AS zip_code, updated_at::date as updated_date from Snitch_db.maplemonk.shopifyindia_customers ct where first_name is not null or last_name is not null union (select CUSTOMER_ID,first_name,last_name,email,phone,TAGS,ACCOUNT_STATUS,TAX_EXEMPT,CURRENCY,ORDERS_COUNT,TOTAL_SPENT,VERIFIED_EMAIL,LAST_ORDER_ID,LAST_ORDER_NAME,ACCEPTS_MARKETING,ACCEPTS_MARKETING_UPDATED_AT,address1,address2,country,country_code,state,state_code,city,zip_code, updated_date from (select e.*, row_number() over(partition by CUSTOMER_ID order by first_name ASC) as rn from (select * from (select id from Snitch_db.maplemonk.shopifyindia_customers ct where last_name is null and first_name is null ) nl inner join (select ct.ID as CUSTOMER_ID, CAST(var.value:first_name AS VARCHAR) AS first_name, CAST(var.value:last_name AS VARCHAR) AS last_name, CAST(var.value:address1 AS VARCHAR) AS address1, CAST(var.value:address2 AS VARCHAR) AS address2, coalesce(CAST(var.value:phone AS VARCHAR), phone) AS phone, coalesce(cast(ct.email as varchar),email) as EMAIL, CAST(var.value:country AS VARCHAR) AS country, CAST(var.value:country_code AS VARCHAR) AS country_code, CAST(var.value:province AS VARCHAR) AS state, CAST(var.value:province_code AS VARCHAR) AS state_code, CAST(var.value:city AS VARCHAR) AS city, CAST(var.value:zip AS VARCHAR) AS zip_code, cast(ct.TAGS as varchar) as TAGS, ct.STATE as ACCOUNT_STATUS, cast(ct.TAX_EXEMPT as boolean) as TAX_EXEMPT, ct.CURRENCY, CAST(ct.ORDERS_COUNT as int) as ORDERS_COUNT, CAST(ct.TOTAL_SPENT as float) as TOTAL_SPENT, cast(ct.VERIFIED_EMAIL as boolean) as VERIFIED_EMAIL, CAST(ct.LAST_ORDER_ID as int) as LAST_ORDER_ID, CAST(ct.LAST_ORDER_NAME as varchar) as LAST_ORDER_NAME, cast (ct.ACCEPTS_MARKETING as boolean) as ACCEPTS_MARKETING, cast (ct.ACCEPTS_MARKETING_UPDATED_AT as datetime) as ACCEPTS_MARKETING_UPDATED_AT, updated_at::date as updated_date from Snitch_db.maplemonk.shopifyindia_customers ct, lateral flatten(input => ct.ADDRESSES, outer => true) var ) rm on nl.id = rm.CUSTOMER_ID) e ) x where x.rn<=1 ) )a left join (select customer_id, email, phone from ( select replace(customer:id,\'\"\',\'\') customer_id, coalesce(email, replace(customer:email,\'\"\',\'\')) email, coalesce(phone, replace(customer:default_address:phone,\'\"\',\'\')) phone, row_number() over (partition by replace(customer:id,\'\"\',\'\') order by created_at desc) rw from snitch_db.maplemonk.shopifyindia_orders )where rw=1) b on a.customer_id = b.customer_id; create or replace table snitch_db.maplemonk.Customer_DIM_TEMP as select * from snitch_db.maplemonk.Customer_DIM_TEMP union SELECT \'SHOPIFY\' as source_channel, null as order_id , \'SHOPIFY\' as source,null as name,phone,email,null as address_line_1, null as address_line_2, null as country, null as state, null as city, null as pincode, null as shopify_customer_id, null as latest_information_Date from (SELECT * FROM ( SELECT coalesce(phone, replace(customer:default_address:phone,\'\"\',\'\')) phone, coalesce(email, replace(customer:email,\'\"\',\'\')) email FROM Snitch_db.maplemonk.Shopify_All_orders WHERE RIGHT(REGEXP_REPLACE(coalesce(phone, replace(customer:default_address:phone,\'\"\',\'\')), \'[^a-zA-Z0-9]+\', \'\'), 10) NOT IN ( SELECT RIGHT(REGEXP_REPLACE(phone, \'[^a-zA-Z0-9]+\', \'\'), 10) FROM snitch_db.maplemonk.Customer_DIM_TEMP WHERE phone IS NOT NULL and source = \'SHOPIFY\' ) ) AS Subquery WHERE lower(CAST(email AS VARCHAR)) NOT IN ( SELECT lower(CAST(email AS VARCHAR)) FROM snitch_db.maplemonk.Customer_DIM_TEMP WHERE email IS NOT NULL and source = \'SHOPIFY\' )); create or replace table snitch_db.maplemonk.Final_customerID_TEMP as with new_phone_numbers as ( select phone, contact_num, 19700000000 + row_number() over( order by contact_num asc ) as maple_monk_id from ( select distinct right(regexp_replace(phone, \'[^a-zA-Z0-9]+\'),10) as contact_num, phone from snitch_db.maplemonk.Customer_DIM_TEMP ) a ), int as ( select contact_num, email, coalesce(maple_monk_id,id2) as maple_monk_id from ( select contact_num, email, maple_monk_id, 19800000000+row_number() over(partition by maple_monk_id is NULL order by email asc ) as id2 from ( select distinct coalesce(p.contact_num,right(regexp_replace(e.contact_num, \'[^a-zA-Z0-9]+\'),10)) as contact_num, e.email, maple_monk_id from ( select phone as contact_num, email from snitch_db.maplemonk.Customer_DIM_TEMP ) e left join new_phone_numbers p on p.contact_num = right(regexp_replace(e.contact_num, \'[^a-zA-Z0-9]+\'),10) ) a ) b ) select contact_num, email, maple_monk_id from int where coalesce(contact_num,email) is not NULL; create or replace table snitch_db.maplemonk.Customer_intermediate_details_DIM as select coalesce(m.maple_monk_id_phone, d.maple_monk_id) as customer_id_final, m.* from ( select c.maple_monk_id as maple_monk_id_phone, o.* from snitch_db.maplemonk.Customer_DIM_TEMP o left join ( select * from ( select contact_num phone, maple_monk_id, row_number() over (partition by contact_num order by maple_monk_id asc) magic from snitch_db.maplemonk.Final_customerID_TEMP ) where magic =1 )c on c.phone = right(regexp_replace(o.phone, \'[^a-zA-Z0-9]+\'),10) )m left join ( select distinct maple_monk_id, email from snitch_db.maplemonk.Final_customerID_TEMP where contact_num is null )d on d.email = m.email; create or replace table snitch_db.snitch.Customer_details_DIM as select * from snitch_db.maplemonk.Customer_intermediate_details_DIM where customer_id_final not in ( select t1.customer_id_final from (select * from snitch_db.maplemonk.Customer_intermediate_details_DIM where phone is null) t1 join (select * from snitch_db.maplemonk.Customer_intermediate_details_DIM where phone is not null)t2 on t1.email=t2.email ) ; create or replace table snitch_db.snitch.Customer_DIM_ALL as select case when source_channel=\'unicommerce\' then cast(order_id as varchar) else cast(customer_id_final as varchar) end as customer_id_final, source, name, phone, email, address_line_1, address_line_2, country, state, city, pincode, shopify_customer_id, latest_information_Date from snitch_db.snitch.Customer_details_DIM ; create or replace table snitch_db.snitch.Customer_DIM as select customer_id_final, phone , email from (SELECT customer_id_final, RIGHT(REGEXP_REPLACE(phone, \'[^a-zA-Z0-9]+\', \'\'), 10) AS phone,latest_information_date,email, row_number() over(partition by customer_id_final order by phone,email ,latest_information_date DESC) as rn FROM snitch_db.snitch.Customer_details_DIM ) where rn =1 ; create or replace table snitch_db.snitch.ORDERS_fact as select cast(coalesce(t2.customer_id_final, t3.customer_id_final) as varchar(255)) customer_id_final,o.* from (select \'Shopify_India\' as market_place, \'Shopify_India\' as marketplace_mapped, \'SHOPIFY\' as source, ID:: varchar as order_id , name :: varchar as order_name, coalesce(phone, replace(customer:default_address:phone,\'\"\',\'\')) phone, null as name, coalesce(email, replace(customer:email,\'\"\',\'\')) email, currency, CASE WHEN cancelled_at IS NOT NULL THEN \'CANCELLED\' ELSE \'Shopify_Processed\' END AS order_status, CREATED_AT::DATE AS order_date, CREATED_AT::DATETIME AS order_timestamp, null as quantity, null as SHIPPING_QUANTITY, total_discounts as discount, total_tax as tax, subtotal_price as selling_price, \'SHOPIFY\' as source_channel, TOTAL_LINE_ITEMS_PRICE as mrp, replace(D.value:code,\'\"\',\'\') as discount_code, replace(customer:default_address:zip,\'\"\',\'\') pincode FROM Snitch_db.maplemonk.shopifyindia_orders , lateral flatten (input =>DISCOUNT_CODES,outer => true) as D) o left join (select distinct phone,customer_id_final from snitch_db.snitch.Customer_DIM )t2 on RIGHT(REGEXP_REPLACE(o.phone, \'[^a-zA-Z0-9]+\', \'\'), 10) = t2.phone left join (select * from (select lower(email) email,customer_id_final, row_number() over (partition by lower(email) order by lower(email)) rw from snitch_db.snitch.Customer_Details_DIM ) where rw = 1)t3 on lower(o.email)= lower(t3.email) union all select cast(COALESCE(t3.customer_id_final,t4.customer_id_final) as varchar(255)) as customer_id_final,t3.marketplace,t3.marketplace_mapped,t3.source,t3.order_id,t3.order_name, t3.phone,t3.name,t3.email,t3.currency, t3.order_status,t3.order_date,t3.order_timestamp,t3.SUBORDER_QUANTITY as quantity , t3.shipping_quantity,t3.discount,t3.tax,t3.selling_price,\'LOGICERP\' as source_channel,mrp , null as discount_code,null as pincode from (select t1.*,t2.customer_id_final from (select Branch_Name::varchar as marketplace, Branch_Name::varchar as marketplace_mapped, BRANCH_SHORT_NAME::varchar as source, bill_no::varchar as order_id, new_bill_no::varchar as ordeR_name, retail_cust_mobile_no::varchar as phone, retail_cust_name::varchar as name, retail_cust_email_id::varchar as email, \'INR\' as currency, case when lower(bill_cancelled) = \'false\' then \'Processed\' else \'Cancelled\' end as ORDER_STATUS, to_date(bill_date, \'DD/MM/YYYY\') as order_date, null as order_timestamp, sum(A.Value:Quantity::int) as SUBORDER_QUANTITY, sum(A.Value:Quantity::int) as shipping_quantity, sum((A.Value:CD::float)*-1) as discount, sum((A.Value:Tax_Amt_1::float) + (A.Value:Tax_Amt_3::float)) as tax, sum(A.Value:Net_Amt::float) as SELLING_PRICE, sum(replace(A.Value:Item_MRP::varchar,\'\"\',\'\')::int) as MRP from snitch_db.maplemonk.LOGICERPConsolidated_GET_SALE_INVOICE, LATERAL FLATTEN (INPUT => LSTITEMS)A group by 1,2,3,4,5,6,7,8,9,10,11,12)t1 left join (select distinct phone,customer_id_final from snitch_db.snitch.Customer_DIM)t2 on RIGHT(REGEXP_REPLACE(t1.phone, \'[^a-zA-Z0-9]+\', \'\'), 10) = t2.phone) t3 left join (select distinct email,customer_id_final from snitch_db.snitch.customer_details_dim where phone is null)t4 on lower(t3.email)= lower(t4.email) union all select cast(COALESCE(t3.customer_id_final,t4.customer_id_final) as varchar(255)) as customer_id_final,t3.marketplace,t3.marketplace_mapped,t3.source,t3.order_id,t3.order_name, t3.phone,t3.name,t3.email,t3.currency, t3.order_status,t3.order_date,t3.order_timestamp,t3.SUBORDER_QUANTITY as quantity , t3.shipping_quantity,t3.discount,t3.tax,t3.selling_price,\'UNICOMMERCE\' as source_channel,mrp,null as discount_code,pincode from (select t1.*,t2.customer_id_final from (select * from (select replace(saleorderdto:channel,\'\"\',\'\') marketplace, case when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%ajio%\' then \'AJIO\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%myntra%\' then \'MYNTRA\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%fynd%\' then \'FYND\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%amazon%\' then \'AMAZON\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%flipkart%\' then \'FLIPKART\' else replace(saleorderdto:channel,\'\"\',\'\') end as marketplace_mapped, replace(saleorderdto:source,\'\"\',\'\') as source, replace(saleorderdto:code,\'\"\',\'\') as order_id, replace(saleorderdto:displayOrderCode,\'\"\',\'\') as order_name, replace(saleorderdto:billingAddress:phone,\'\"\',\'\') as phone, replace(saleorderdto:billingAddress:name,\'\"\',\'\') as name, saleorderdto:billingAddress:email::varchar as email, replace(saleorderdto:currencyCode,\'\"\',\'\') as currency, replace(saleorderdto:status,\'\"\',\'\') as ORDER_STATUS, date(CONVERT_TIMEZONE(\'UTC\',\'Asia/Kolkata\',dateadd(\'ms\',saleorderdto:displayOrderDateTime,\'1970-01-01\'))) as order_date, CONVERT_TIMEZONE(\'UTC\',\'Asia/Kolkata\',dateadd(\'ms\',saleorderdto:displayOrderDateTime,\'1970-01-01\')) as order_timestamp, sum(A.Value:packetNumber::int) as SUBORDER_QUANTITY, null as shipping_quantity, sum(A.Value:discount::float) as discount, sum(A.Value:totalIntegratedGst::float) as tax, sum(A.Value:totalPrice::float) as SELLING_PRICE, sum(replace(A.Value:maxRetailPrice,\'\"\',\'\')::int )as MRP, replace(saleorderdto:billingAddress:pincode,\'\"\',\'\') as pincode from snitch_db.maplemonk.SNITCH_UNICOMMERCE_GET_ORDERS_BY_IDS_TEST, LATERAL FLATTEN (INPUT => saleorderdto:saleOrderItems)A group by 1,2,3,4,5,6,7,8,9,10,11,12,19) where marketplace != \'SHOPIFY\' )t1 left join (select distinct phone,customer_id_final from snitch_db.snitch.Customer_DIM)t2 on (RIGHT(REGEXP_REPLACE(t1.phone, \'[^a-zA-Z0-9]+\', \'\'), 10) = t2.phone)) t3 left join (select distinct email,customer_id_final from snitch_db.snitch.customer_details_dim where phone is null)t4 on lower(t3.email)= lower(t4.email) ; create or replace table snitch_db.snitch.orders_fact as select f.*,upper(pm.district) district from( (select * from snitch_db.snitch.orders_fact) f left join ( select pincode,max(district) district from snitch_db.maplemonk.pincode_mapping group by pincode ) pm on f.pincode = pm.pincode ) ; create or replace table snitch_db.snitch.ORDER_lineitems_fact as select sh_t.market_place, sh_t.marketplace_mapped, sh_t.source, sh_t.order_id, sh_t.order_name, sh_t.SALES_ORDER_ITEM_ID, sh_t.salesorderitemcode, sh_t.order_date, sh_t.order_timestamp, sh_t.order_status, sh_t.sku, sh_t.sku_group, sh_t.PRODUCT_ID, sh_t.currency, sh_t.suborder_QUANTITY, sh_t.DISCOUNT, ifnull(uni_t.tax,0) tax, sh_t.selling_price, sh_t.mrp, sh_t.warehouse, sh_t.source_channel, sh_t.payment_method, sh_t.shipping_quantity, sh_t.discount_code from ( select \'Shopify_India\' as market_place, \'Shopify_India\' as marketplace_mapped, \'SHOPIFY\' as source, ID:: varchar as order_id , name :: varchar as order_name, A.VALUE:id :: varchar AS SALES_ORDER_ITEM_ID, null as salesorderitemcode, CREATED_AT::DATE AS order_date, CREATED_AT::DATETIME AS order_timestamp, CASE WHEN cancelled_at IS NOT NULL THEN \'CANCELLED\' ELSE \'Shopify_Processed\' END AS order_status, A.VALUE:sku::STRING AS SKU, REVERSE(SUBSTRING(REVERSE(sku), CHARINDEX(\'-\', REVERSE(sku)) + 1)) AS sku_group, A.VALUE:product_id::STRING AS PRODUCT_ID, currency, A.VALUE:quantity::FLOAT as suborder_QUANTITY, B.VALUE:amount::FLOAT AS DISCOUNT, null as tax, (A.value : price :: float )-ifnull((B.value : amount:: float),0) as selling_price, A.value : price :: float as MRP, null as warehouse, \'SHOPIFY\' as source_channel, gateway as payment_method, A.VALUE:quantity::FLOAT as shipping_quantity, replace(D.value:code,\'\"\',\'\') as discount_code FROM Snitch_db.maplemonk.shopifyindia_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS,outer => true) AS A, LATERAL FLATTEN (INPUT => A.VALUE:discount_allocations,outer => true) AS B , lateral flatten (input =>DISCOUNT_CODES,outer => true) as D ) sh_t left join ( select replace(saleorderdto:code,\'\"\',\'\') as order_id, replace(A.Value:code,\'\"\',\'\') as SALES_ORDER_ITEM_ID, A.Value:totalIntegratedGst::float as tax from snitch_db.maplemonk.SNITCH_UNICOMMERCE_GET_ORDERS_BY_IDS_TEST, LATERAL FLATTEN (INPUT => saleorderdto:saleOrderItems)A )uni_t on sh_t.order_id = uni_t.order_id and sh_t.SALES_ORDER_ITEM_ID = uni_t.SALES_ORDER_ITEM_ID union all select u_t.*,u_t1.shipping_quantity ,null as discount_code from (select * from (select replace(saleorderdto:channel,\'\"\',\'\') marketplace, case when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%ajio%\' then \'AJIO\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%myntra%\' then \'MYNTRA\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%fynd%\' then \'FYND\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%amazon%\' then \'AMAZON\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%flipkart%\' then \'FLIPKART\' else replace(saleorderdto:channel,\'\"\',\'\') end as marketplace_mapped, replace(saleorderdto:source,\'\"\',\'\') as source, replace(saleorderdto:code,\'\"\',\'\') as order_id, replace(saleorderdto:displayOrderCode,\'\"\',\'\') as order_name, A.Value:id::varchar as SALES_ORDER_ITEM_ID, replace(A.Value:code,\'\"\',\'\') as saleOrderItemCode, date(CONVERT_TIMEZONE(\'UTC\',\'Asia/Kolkata\',dateadd(\'ms\',saleorderdto:displayOrderDateTime,\'1970-01-01\'))) as order_date, CONVERT_TIMEZONE(\'UTC\',\'Asia/Kolkata\',dateadd(\'ms\',saleorderdto:displayOrderDateTime,\'1970-01-01\')) as order_timestamp, replace(saleorderdto:status,\'\"\',\'\') as ORDER_STATUS, replace(A.Value:itemSku,\'\"\',\'\') as sku, REVERSE(SUBSTRING(REVERSE(sku), CHARINDEX(\'-\', REVERSE(sku)) + 1)) AS sku_group, replace(A.Value:channelProductId,\'\"\',\'\') as product_id, replace(saleorderdto:currencyCode,\'\"\',\'\') as currency, A.Value:packetNumber::int as SUBORDER_QUANTITY, A.Value:discount::float as discount, A.Value:totalIntegratedGst::float as tax, A.Value:totalPrice::float as SELLING_PRICE, replace(A.Value:maxRetailPrice,\'\"\',\'\') as MRP, replace(A.Value:facilityName,\'\"\',\'\') as warehouse_name, \'UNICOMMERCE\' as source_channel, null as payment_method from snitch_db.maplemonk.SNITCH_UNICOMMERCE_GET_ORDERS_BY_IDS_TEST, LATERAL FLATTEN (INPUT => saleorderdto:saleOrderItems)A) where marketplace != \'SHOPIFY\')u_t left join (select * from (select replace(saleorderdto:code,\'\"\',\'\') ordeR_id, replace(B.value:itemSku, \'\"\',\'\') sku, replace(B.value:quantity, \'\"\',\'\') shipping_quantity, row_number () over (partition by replace(saleorderdto:code,\'\"\',\'\'), replace(B.value:itemSku, \'\"\',\'\') order by 1 ) rw from snitch_db.maplemonk.SNITCH_UNICOMMERCE_GET_ORDERS_BY_IDS_TEST, LATERAL FLATTEN (INPUT => saleorderdto:shippingPackages)A, lateral flatten (input => A.value:items) B) where rw = 1)u_t1 on u_t.order_id = cast(u_t1.order_id as varchar) and u_t.sku = u_t1.sku union all select Branch_Name::varchar as marketplace, Branch_Name::varchar as marketplace_mapped, BRANCH_SHORT_NAME::varchar as source, bill_no::varchar as order_id, new_bill_no::varchar as ordeR_name, replace(A.Value:SO_Item_Order_ID::varchar,\'\"\',\'\') as SALES_ORDER_ITEM_ID, replace(A.Value:SO_Item_Order_ID::varchar,\'\"\',\'\') as saleOrderItemCode, to_date(bill_date, \'DD/MM/YYYY\') as order_date, null as order_timestamp, case when lower(bill_cancelled) = \'false\' then \'Processed\' else \'Cancelled\' end as ORDER_STATUS, replace(A.Value:AddlItemCode,\'\"\',\'\')::varchar as sku, REVERSE(SUBSTRING(REVERSE(sku::varchar), CHARINDEX(\'-\', REVERSE(sku::varchar)) + 1)) AS sku_group, replace(A.Value:HSN_Code::varchar,\'\"\',\'\') as product_id, \'INR\' as currency, A.Value:Quantity::int as SUBORDER_QUANTITY, (A.Value:CD::float)*-1 as discount, (A.Value:Tax_Amt_1::float) + (A.Value:Tax_Amt_3::float) as tax, A.Value:Net_Amt::varchar as SELLING_PRICE, replace(A.Value:Item_MRP::varchar,\'\"\',\'\') as MRP, replace(A.Value:Godown_Name::varchar,\'\"\',\'\') as warehouse_name, \'LOGICERP\' as source_channel, null as payment_method, A.Value:Quantity::int as shipping_QUANTITY, null as discount_code from snitch_db.maplemonk.LOGICERPConsolidated_GET_SALE_INVOICE, LATERAL FLATTEN (INPUT => LSTITEMS)A; create or replace table snitch_db.snitch.ORDER_lineitems_fact as select l_i.*, p_m.mode_of_payment, p_m.primary_payment_type, Coalesce (p_m.secondary_payment_type,p_m.primary_payment_type) as secondary_payment_type , Coalesce(p_m.tertiary_payment_type,p_m.primary_payment_type) as tertiary_payment_type from snitch_db.snitch.ORDER_LINEITEMS_FACT l_i left join snitch_db.maplemonk.dim_mapping_payment_mode p_m on lower(l_i.PAYMENT_METHOD) = lower(p_m.payments) ;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from snitch_db.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        