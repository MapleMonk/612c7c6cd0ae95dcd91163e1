{{ config(
            materialized='table',
                post_hook={
                    "sql": "Create or replace table MapleMonk.zouk_MARKETING_CONSOLIDATED_DTC as select * from `MapleMonk.zouk_MARKETING_CONSOLIDATED` where lower(Channel) like any (\'%facebook%\',\'%google%\',\'%contlo%\',\'%bitespeed%\') ; Create or replace table MapleMonk.zouk_MARKETING_CONSOLIDATED_MP as select * from `MapleMonk.zouk_MARKETING_CONSOLIDATED` where not(lower(Channel) like any (\'%facebook%\',\'%google%\',\'%contlo%\',\'%bitespeed%\')) ; Create or replace table maplemonk.zouk_sales_consolidated_DTC as select * from maplemonk.zouk_sales_consolidated where not(lower(MARKETPLACE_SEGMENT) like any (\'%marketplace%\',\'%offline%\')) ; Create or replace table maplemonk.zouk_sales_cost_source_DTC as select * from maplemonk.zouk_sales_cost_source where lower(Marketplace) like any (\'%shopify%\',\'%website%\',\'app\') ; Create or replace table maplemonk.zouk_sales_cost_source_MP as select * from maplemonk.zouk_sales_cost_source where not(lower(Marketplace) like any (\'%shopify%\',\'%website%\',\'app\',\'%offline%\',\'%ebo%\')) ; Create or replace table maplemonk.zouk_sales_consolidated_MP as select * from maplemonk.zouk_sales_consolidated where lower(MARKETPLACE_SEGMENT) like \'%marketplace%\' ; Create or replace table maplemonk.zouk_sales_consolidated_offline as select * from maplemonk.zouk_sales_consolidated where (lower(MARKETPLACE_SEGMENT) like any (\'%offline%\',\'%ebo%\')) ; Create or replace table maplemonk.zouk_pandl_offline as select * from maplemonk.zouk_pandl where lower(final_Marketplace) like any (\'%offline%\',\'ebo\') ; Create or replace table maplemonk.zouk_pandl_DTC as select * from maplemonk.zouk_pandl where (lower(final_Marketplace) like any (\'%shopify%\',\'%website%\',\'app\')) ; Create or replace table maplemonk.zouk_pandl_MP as select * from maplemonk.zouk_pandl where not(lower(final_Marketplace) like any (\'%shopify%\',\'%website%\',\'app\',\'%offline%\',\'ebo\')) ; Create or replace table maplemonk.zouk_Sales_Cost_Source_offline as with Sessions as ( select PARSE_DATE(\'%m/%d/%Y\',date) as Date ,\"SHOPIFY POS\" as marketplace ,store_name as marketing_channel ,sum(ifnull(cast(Walkins as int64),0)) as walkins ,sum(ifnull(cast(Footfall as int64),0)) as Footfall ,0 as Sessions from `MapleMonk.EBO_Footfall_Walkins_Form_Responses_1` group by 1,2,3 ), returnsales as ( select cast(return_date as date) return_date ,marketing_channel ,case when lower(final_marketplace) like any (\'%amazon%\') then \'AMAZON\' when lower(final_marketplace) like any (\'%shopify%\') then \'SHOPIFY\' else upper(final_marketplace) end as marketplace ,sum(total_return_amount) TOTAL_RETURN_AMOUNT ,sum(total_return_amount_excl_tax) TOTAL_RETURN_AMOUNT_EXCL_TAX ,sum(total_returned_quantity) TOTAL_RETURNED_QUANTITY from maplemonk.zouk_RETURNS_CONSOLIDATED where lower(ifnull(final_marketplace,\'\')) like any (\'%offline%\',\'%ebo%\') group by 1,2,3 order by 1 desc ), orders as ( select cast(FI.order_date as date) Date ,upper(final_marketplace) Marketplace ,upper(FI.CHANNEL) marketing_CHANNEL ,ifnull(sum(ifnull(FI.SELLING_PRICE,0)),0) Total_Sales ,ifnull(sum(ifnull(FI.SELLING_PRICE,0)),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then ifnull(FI.SELLING_PRICE,0) else 0 end),0) TOTAL_SALES_EXCL_CANCL ,count(distinct FI.order_id) Total_Orders ,count(distinct FI.order_id) - count(distinct case when lower(FI.order_status) in (\'cancelled\') then FI.order_id end) Orders_EXCL_CANCL ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' then FI.order_id end)) as New_Customer_Orders ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' then FI.order_id end)) - count(distinct(case when lower(FI.new_customer_flag) = \'new\' and lower(FI.order_status) in (\'cancelled\') then FI.order_id end)) as New_Customer_Orders_EXCL_CANCL ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' then FI.customer_id_final end)) as Total_New_Customers ,count(distinct(case when lower(FI.new_customer_flag) = \'new\' then FI.customer_id_final end)) - count(distinct(case when lower(FI.new_customer_flag) = \'new\' and lower(FI.order_status) in (\'cancelled\') and FI.return_flag = 0 then FI.customer_id_final end)) New_Customers_EXCL_CANCL ,count(distinct FI.customer_id_final) as TOTAL_Unique_Customers ,(count(distinct FI.customer_id_final) - count(distinct case when lower(FI.order_status) in (\'cancelled\') then FI.customer_id_final end)) as Unique_Customers_EXCL_CANCL ,count(distinct(case when lower(FI.new_customer_flag) = \'repeat\' then FI.customer_id_final end)) as Repeat_Customers ,(count(distinct(case when lower(FI.new_customer_flag) = \'repeat\' then FI.customer_id_final end)) - count(distinct(case when lower(FI.new_customer_flag) = \'repeat\' and lower(FI.order_status) in (\'cancelled\') and FI.return_flag = 0 then FI.customer_id_final end))) Repeat_Customers_EXCL_CANCL ,ifnull(sum(FI.discount),0) TOTAL_DISCOUNT ,(ifnull(sum(FI.discount),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.discount end),0)) TOTAL_DISCOUNT_EXCL_CANCL ,ifnull(sum(FI.tax),0) TOTAL_TAX ,(ifnull(sum(FI.tax),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.tax end),0)) TAX_EXCL_CANCL ,ifnull(sum(FI.shipping_price),0) TOTAL_SHIPPING_PRICE ,(ifnull(sum(FI.shipping_price),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.shipping_price end),0)) SHIPPING_PRICE_EXCL_CANCL ,ifnull(sum(case when lower(FI.new_customer_flag) = \'new\' then FI.discount end),0) as New_Customer_Discount ,(ifnull(sum(case when lower(FI.new_customer_flag) = \'new\' then FI.discount end),0) - ifnull(sum(case when lower(FI.new_customer_flag) = \'new\' and lower(order_status) in (\'cancelled\') then FI.discount end),0)) as New_Customer_Discount_EXCL_CANCL ,ifnull(sum(FI.quantity),0) TOTAL_QUANTITY ,(ifnull(sum(FI.quantity),0) - ifnull(sum(case when lower(FI.order_status) in (\'cancelled\') then FI.quantity end),0)) QUANTITY_EXCL_CANCL ,ifnull(sum(case when FI.return_flag=1 then FI.quantity end),0) as Return_Quantity ,ifnull(sum(case when FI.return_flag=1 then ifnull(FI.SELLING_PRICE,0) end),0) as Return_Value ,count(distinct case when lower(order_status) in (\'cancelled\') then order_id end) Cancelled_Orders ,count(distinct case when lower(order_status) not in (\'cancelled\') and return_flag=0 then order_id end) Net_Orders ,count(distinct case when lower(order_status) in (\'delivered\') then order_id end) Delivered_Orders ,count(distinct case when lower(order_status) in (\'returned\',\'rto\') then order_id end) Returned_Orders ,count(distinct case when dispatch_date is not null and lower(order_status) not in (\'cancelled\') then order_id end) Dispatched_Orders ,count(distinct case when lower(order_status) in (\'shipped\',\'printed\',\'confirmed\',\'returned\',\'ready to dispatch\') then order_id end) Realised_Orders ,ifnull(sum(case when lower(order_status) in (\'delivered\') then ifnull(FI.SELLING_PRICE,0)-ifnull(FI.TAX,0) end),0) Delivered_Revenue ,ifnull(sum(case when lower(order_status) in (\'returned\',\'rto\') then ifnull(FI.SELLING_PRICE,0)-ifnull(FI.TAX,0) end),0) Returned_Revenue ,ifnull(sum(case when dispatch_date is not null and lower(order_status) not in (\'cancelled\') then ifnull(FI.SELLING_PRICE,0) end),0) Dispatched_Revenue ,ifnull(sum(case when lower(order_status) in (\'shipped\',\'printed\',\'confirmed\',\'returned\',\'ready to dispatch\') then ifnull(FI.SELLING_PRICE,0) end),0) Realised_Revenue ,count(case when date_trunc(acquisition_date, month)>=DATE_ADD(DATE_TRUNC(order_date, MONTH), INTERVAL -3 MONTH) and date_trunc(acquisition_date, month)<date_trunc(order_date, month) then customer_id_final end) L3M_Customers_Retained ,count(case when date_trunc(acquisition_date, month)>=DATE_ADD(DATE_TRUNC(order_date, MONTH), INTERVAL -6 MONTH) and date_trunc(acquisition_date, month)<date_trunc(order_date, month) then customer_id_final end) L6M_Customers_Retained ,count(case when date_trunc(acquisition_date, month)>=DATE_ADD(DATE_TRUNC(order_date, MONTH), INTERVAL -12 MONTH) and date_trunc(acquisition_date, month)<date_trunc(order_date, month) then customer_id_final end) L12M_Customers_Retained ,sum(case when lower(FI.new_customer_flag) = \'repeat\' then ifnull(FI.selling_price,0) end) Repeat_Customer_Revenue ,count(distinct case when lower(FI.payment_mode) in (\'cod\') then FI.order_id end) as COD_Orders from maplemonk.zouk_SALES_CONSOLIDATED FI where lower(MARKETPLACE_SEGMENT) like any (\'%offline%\',\'%ebo%\') group by 1,2,3 ) select coalesce(fi.Date, SC.date,rs.return_date) as date, upper(coalesce(fi.marketplace,RS.marketplace, SC.marketplace)) as Marketplace, upper(coalesce(fi.marketing_channel,RS.marketing_channel, SC.marketing_channel)) as Marketing_Channel, Total_Sales, TOTAL_SALES_EXCL_CANCL, SC.sessions, SC.walkins, SC.Footfall, Total_Orders, Orders_EXCL_CANCL, New_Customer_Orders, New_Customer_Orders_EXCL_CANCL, Total_New_Customers, New_Customers_EXCL_CANCL, TOTAL_Unique_Customers, Unique_Customers_EXCL_CANCL, Repeat_Customers, Repeat_Customers_EXCL_CANCL, TOTAL_DISCOUNT, TOTAL_DISCOUNT_EXCL_CANCL, TOTAL_TAX, TAX_EXCL_CANCL, TOTAL_SHIPPING_PRICE, SHIPPING_PRICE_EXCL_CANCL, New_Customer_DISCOUNT, New_Customer_Discount_EXCL_CANCL, TOTAL_QUANTITY, QUANTITY_EXCL_CANCL, RS.TOTAL_RETURNED_QUANTITY as Return_Quantity, RS.TOTAL_RETURN_AMOUNT as Return_Value, Cancelled_Orders, Net_Orders, Delivered_Orders, Delivered_Revenue, Dispatched_Orders, Dispatched_Revenue, Realised_Orders, Realised_Revenue, 0 as marketing_spend, 0 as Brand_Spend, COD_Orders, Repeat_Customer_Revenue, 0 as ad_conversions, 0 as ad_impressions, 0 as ad_clicks, 0 ad_sales from orders FI full outer join returnsales RS on RS.return_date = FI.date and lower(RS.marketing_Channel) = lower(FI.marketing_Channel) and lower(RS.marketplace)=lower(FI.marketplace) full outer join SESSIONS SC on coalesce(FI.Date,RS.return_date)=SC.Date and lower(coalesce(FI.Marketing_Channel,RS.marketing_Channel))=lower(SC.Marketing_Channel) and lower(coalesce(FI.marketplace,RS.marketplace))=lower(SC.Marketplace) ;",
                    "transaction": true
                }
            ) }}
            with sample_data as (

                select * from maplemonk.INFORMATION_SCHEMA.TABLES
            ),
            
            final as (
                select * from sample_data
            )
            select * from final
            