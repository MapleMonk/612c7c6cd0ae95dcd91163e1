{{ config(
            materialized='table',
                post_hook={
                    "sql": "create or replace table maplemonk.zouk_EasyEcom_FACT_ITEMS as with orders as ( select * from ( select *,row_number()over(partition by order_id,invoice_id order by last_update_date desc) as rw from maplemonk.EasyEcom_Zouk_EE_CUSTOMER_ORDERS c ) a where rw =1 ), first_order as ( select * from ( select *,row_number()over(partition by contact_num order by order_date asc) as rw from maplemonk.EasyEcom_Zouk_EE_CUSTOMER_ORDERS c ) a where rw =1 ), pick_up_dates as ( select * from ( WITH extracted_data AS ( SELECT suborders, order_id, invoice_id, reference_code, shipping_history FROM orders ) SELECT extracted_data.order_id as ordeR_id, extracted_data.invoice_id as invoice_id, extracted_data.reference_code as reference_code, extracted_data.shipping_history as shipping_history, replace(JSON_EXTRACT_SCALAR(A,\'$.suborder_id\'),\'\"\',\'\') as suborder_id, cast(replace(JSON_EXTRACT_SCALAR(shipping_history,\'$.time\'),\'\"\',\'\') as timestamp) as picked_up_time, row_number() over(partition by replace(JSON_EXTRACT_SCALAR(A,\'$.suborder_id\'),\'\"\',\'\') order by cast(replace(JSON_EXTRACT_SCALAR(shipping_history,\'$.time\'),\'\"\',\'\') as timestamp)) rw FROM extracted_data left join UNNEST(extracted_data.suborders) AS A where lower(replace(JSON_EXTRACT_SCALAR(shipping_history,\'$.status\'),\'\"\',\'\')) like any (\'picked up\', \'pickupdone\') ) where rw = 1 ), intransit_dates as ( select * from ( WITH extracted_data AS ( SELECT suborders, order_id, invoice_id, reference_code, shipping_history FROM orders ) SELECT extracted_data.order_id as ordeR_id, extracted_data.invoice_id as invoice_id, extracted_data.reference_code as reference_code, extracted_data.shipping_history as shipping_history, replace(JSON_EXTRACT_SCALAR(A,\'$.suborder_id\'),\'\"\',\'\') as suborder_id, cast(replace(JSON_EXTRACT_SCALAR(shipping_history,\'$.time\'),\'\"\',\'\') as timestamp) as intransit_time, row_number() over(partition by replace(JSON_EXTRACT_SCALAR(A,\'$.suborder_id\'),\'\"\',\'\') order by cast(replace(JSON_EXTRACT_SCALAR(shipping_history,\'$.time\'),\'\"\',\'\') as timestamp)) rw FROM extracted_data left join UNNEST(extracted_data.suborders) AS A where lower(replace(JSON_EXTRACT_SCALAR(shipping_history,\'$.status\'),\'\"\',\'\')) like any (\'in transit\', \'%arrivedat%\') ) where rw = 1 ), delivery_dates as ( select * from ( WITH extracted_data AS ( SELECT suborders, order_id, invoice_id, reference_code, shipping_history FROM orders ) SELECT extracted_data.order_id as ordeR_id, extracted_data.invoice_id as invoice_id, extracted_data.reference_code as reference_code, extracted_data.shipping_history as shipping_history, replace(JSON_EXTRACT_SCALAR(A,\'$.suborder_id\'),\'\"\',\'\') as suborder_id, cast(replace(JSON_EXTRACT_SCALAR(shipping_history,\'$.time\'),\'\"\',\'\') as timestamp) as delivered_time, row_number() over(partition by replace(JSON_EXTRACT_SCALAR(A,\'$.suborder_id\'),\'\"\',\'\') order by cast(replace(JSON_EXTRACT_SCALAR(shipping_history,\'$.time\'),\'\"\',\'\') as timestamp)) rw FROM extracted_data left join UNNEST(extracted_data.suborders) AS A where lower(replace(JSON_EXTRACT_SCALAR(shipping_history,\'$.status\'),\'\"\',\'\')) like \'delivered\' ) where rw = 1 ) select pincode, upper(Marketplace) as SHOP_NAME, carrier_id, upper(courier) as courier, upper(customer_name) customer_name, email, contact_num, upper(MARKETPLACE) marketplace, MARKETPLACE_ID, s.ORDER_ID, S.suborder_id, s.invoice_id, s.reference_code, Marketplace_LineItem_ID, manifest_date, shipping_Last_update_date shipping_last_update_date, case when lower(shipping_status) = \'delivered\' then shipping_last_update_date end as Delivered_Date, upper(shipping_status) shipping_status, awb, replace(s.SKU, \'\"\',\'\') SKU, upper(replace(sku_type, \'\"\',\'\')) sku_type, PRODUCT_ID, upper(replace(PRODUCTNAME, \'\"\',\'\')) PRODUCTNAME, CURRENCY, IS_REFUND, upper(City) City, upper(State) State, upper(order_status) order_Status, ORDER_Date, SHIPPING_PRICE, number_of_products_in_combo, suborder_quantity, shipped_quantity, returned_quantity, cancelled_quantity, return_sales, cancel_sales, Tax, suborder_mrp, upper(replace(s.category, \'\"\',\'\')) category, discount, selling_price, coalesce(suborder_mrp,0)*suborder_quantity as mrp_sales, case when ((coalesce(suborder_mrp,0)*suborder_quantity) is null or (coalesce(suborder_mrp,0)*suborder_quantity)<selling_price) then discount else (coalesce(suborder_mrp,0)*suborder_quantity)-selling_price end Discount_MRP, new_customer_flag, new_customer_flag_month, upper(Warehouse_Name) Warehouse_name, Days_in_Shipment, upper(Channel) Channel, upper(payment_mode) Payment_mode, import_date, last_update_date, pd.picked_up_time, id.intransit_time, dd.delivered_time, upper(p.name) as mapped_product_name, upper(p.category) as mapped_Category, upper(p.sub_category) as mapped_sub_category from ( select o.PIN_CODE as pincode, o.MARKETPLACE as SHOP_NAME, o.carrier_id, o.courier, o.customer_name, o.email, o.contact_num, o.MARKETPLACE, o.MARKETPLACE_ID, o.ORDER_ID, replace(JSON_EXTRACT_SCALAR(A,\'$.suborder_id\'),\'\"\',\'\') suborder_id, o.invoice_id, o.reference_code, o.manifest_date, o.shipping_Last_update_date shipping_last_update_date, o.shipping_status, o.awb_number awb, replace(JSON_EXTRACT_SCALAR(A,\'$.marketplace_sku\'),\'\"\',\'\') sku, replace(JSON_EXTRACT_SCALAR(A,\'$.sku_type\'),\'\"\',\'\') sku_type, replace(JSON_EXTRACT_SCALAR(A,\'$.product_id\'),\'\"\',\'\') product_id, replace(JSON_EXTRACT_SCALAR(A,\'$.suborder_num\'),\'\"\',\'\') marketplace_lineitem_id, replace(JSON_EXTRACT_SCALAR(A,\'$.productName\'),\'\"\',\'\') productname, case when o.pickup_country=\'India\' then \'INR\' end as CURRENCY, case when cast(replace(JSON_EXTRACT_SCALAR(A,\'$.returned_quantity\'),\'\"\',\'\') as int64) >0 then 1 else 0 end as IS_REFUND, upper(cast(o.CITY as string)) City, upper(cast(o.STATE as string)) State, o.order_status, o.ORDER_Date as ORDER_Date, ifnull(cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.total_shipping_charge\'),\'\"\',\'\'),\',\',\'\') as float64),0) as shipping_price, cast(replace(JSON_EXTRACT_SCALAR(A,\'$.item_quantity\'),\'\"\',\'\') as int64) number_of_products_in_combo, cast(replace(JSON_EXTRACT_SCALAR(A,\'$.suborder_quantity\'),\'\"\',\'\') as int64) suborder_quantity, cast(replace(JSON_EXTRACT_SCALAR(A,\'$.shipped_quantity\'),\'\"\',\'\') as int64) shipped_quantity, cast(replace(JSON_EXTRACT_SCALAR(A,\'$.returned_quantity\'),\'\"\',\'\') as int64) returned_quantity, cast(replace(JSON_EXTRACT_SCALAR(A,\'$.cancelled_quantity\'),\'\"\',\'\') as int64) cancelled_quantity, case when cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.selling_price\'),\'\"\',\'\'),\',\',\'\') as float64) is null then cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.mrp\'),\'\"\',\'\'),\',\',\'\') as float64) else cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.selling_price\'),\'\"\',\'\'),\',\',\'\') as float64) end selling_price, case when (cast(replace(JSON_EXTRACT_SCALAR(A,\'$.returned_quantity\'),\'\"\',\'\') as int64)) > 0 then (case when cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.selling_price\'),\'\"\',\'\'),\',\',\'\') as float64) is null then cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.mrp\'),\'\"\',\'\'),\',\',\'\') as float64) else cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.selling_price\'),\'\"\',\'\'),\',\',\'\') as float64) end)*(cast(replace(JSON_EXTRACT_SCALAR(A,\'$.returned_quantity\'),\'\"\',\'\') as int64))/(cast(replace(JSON_EXTRACT_SCALAR(A,\'$.item_quantity\'),\'\"\',\'\') as int64))end as return_sales, case when cast(replace(JSON_EXTRACT_SCALAR(A,\'$.cancelled_quantity\'),\'\"\',\'\') as int64) > 0 then (case when cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.selling_price\'),\'\"\',\'\'),\',\',\'\') as float64) is null then cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.mrp\'),\'\"\',\'\'),\',\',\'\') as float64) else cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.selling_price\'),\'\"\',\'\'),\',\',\'\') as float64) end) end cancel_sales, ifnull(cast(replace(JSON_EXTRACT_SCALAR(A,\'$.TAX\'),\'\"\',\'\') as float64),0) Tax, cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.mrp\'),\'\"\',\'\'),\',\',\'\') as float64) as suborder_mrp, replace(JSON_EXTRACT_SCALAR(A,\'$.category\'),\'\"\',\'\') category, -1*(coalesce(cast(o.total_discount as float64)*(case when (case when cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.selling_price\'),\'\"\',\'\'),\',\',\'\') as float64) is null then cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.mrp\'),\'\"\',\'\'),\',\',\'\') as float64) else cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.selling_price\'),\'\"\',\'\'),\',\',\'\') as float64) end )=0 then 1 else (case when cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.selling_price\'),\'\"\',\'\'),\',\',\'\') as float64) is null then cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.mrp\'),\'\"\',\'\'),\',\',\'\') as float64) else cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.selling_price\'),\'\"\',\'\'),\',\',\'\') as float64) end ) end/case when sum(case when cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.selling_price\'),\'\"\',\'\'),\',\',\'\') as float64) is null then cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.mrp\'),\'\"\',\'\'),\',\',\'\') as float64) else cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.selling_price\'),\'\"\',\'\'),\',\',\'\') as float64) end )over (partition by o.order_id) = 0 then 1 else sum(case when cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.selling_price\'),\'\"\',\'\'),\',\',\'\') as float64) is null then cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.mrp\'),\'\"\',\'\'),\',\',\'\') as float64) else cast(replace(replace(JSON_EXTRACT_SCALAR(A,\'$.selling_price\'),\'\"\',\'\'),\',\',\'\') as float64) end )over (partition by o.order_id) end ),0)) as discount , case when fo.order_id = o.order_id then \'New\' else \'Repeat\' end as new_customer_flag, case when date_trunc(cast(left(fo.order_date,10) as date),month) = date_trunc(cast(left(o.order_date,10) as date),month) then \'New\' else \'Repeat\' end as new_customer_flag_month, o.company_name as Warehouse_Name, cast(case when o.shipping_STATUS in (\'In Transit\', \'Shipment Created\') then date_diff(current_date(),date(left(o.ORDER_Date,10)),day) when o.shipping_STATUS in (\'Delivered\',\'Delivered To Origin\') then date_diff(date(left(o.shipping_Last_update_date,10)),date(left(o.ORDER_Date,10)),day) end as int64) as Days_in_Shipment, o.marketplace as Channel, o.payment_mode, o.import_date, o.last_update_date, row_number() over (partition by replace(JSON_EXTRACT_SCALAR(A,\'$.suborder_id\'),\'\"\',\'\') order by o.last_update_date desc) rw from orders o left join first_order fo on fo.contact_num = o.contact_num left join UNNEST(o.suborders) A ) s left join pick_up_dates pd on pd.Suborder_id = s.suborder_id left join intransit_dates id on id.Suborder_id = s.suborder_id left join delivery_dates dd on dd.Suborder_id = s.suborder_id left join (select * from (select skucode, name, category, sub_category, row_number() over (partition by skucode order by 1) rw from maplemonk.sku_master) where rw = 1 ) p on s.sku = p.skucode where s.rw = 1 ; create or replace table maplemonk.zouk_easyecom_returns_intermediate as select * from (select ORDER_ID ,INVOICE_ID ,replace(JSON_EXTRACT_SCALAR(RI,\'$.suborder_id\'),\'\"\',\'\') SUBORDER_ID ,REFERENCE_CODE ,CREDIT_NOTE_ID ,credit_note_number ,cast(ORDER_DATE as timestamp) ORDER_DATE ,cast(INVOICE_DATE as timestamp) INVOICE_DATE ,cast(RETURN_DATE as timestamp) RETURN_DATE ,cast(MANIFEST_DATE as timestamp) MANIFEST_DATE ,cast(IMPORT_DATE as timestamp) IMPORT_DATE ,cast(LAST_UPDATE_DATE as timestamp) LAST_UPDATE_DATE ,replace(JSON_EXTRACT_SCALAR(RI,\'$.company_product_id\'),\'\"\',\'\') COMPANY_PRODUCT_ID ,replace(JSON_EXTRACT_SCALAR(RI,\'$.productName\'),\'\"\',\'\') PRODUCTNAME ,replace(JSON_EXTRACT_SCALAR(RI,\'$.product_Id\'),\'\"\',\'\') PRODUCT_ID ,replace(JSON_EXTRACT_SCALAR(RI,\'$.sku\'),\'\"\',\'\') SKU ,MARKETPLACE ,MARKETPLACE_ID ,REPLACEMENT_ORDER ,replace(JSON_EXTRACT_SCALAR(RI,\'$.return_reason\'),\'\"\',\'\') RETURN_REASON ,cast(replace(JSON_EXTRACT_SCALAR(RI,\'$.returned_item_quantity\'),\'\"\',\'\') as float64) RETURNED_QUANTITY ,cast(replace(JSON_EXTRACT_SCALAR(RI,\'$.credit_note_total_item_excluding_tax\'),\'\"\',\'\') as float64) RETURN_AMOUNT_WITHOUT_TAX ,cast(replace(JSON_EXTRACT_SCALAR(RI,\'$.credit_note_total_item_tax\'),\'\"\',\'\') as float64) RETURN_TAX ,cast(replace(JSON_EXTRACT_SCALAR(RI,\'$.credit_note_total_item_shipping_charge\'),\'\"\',\'\') as float64) RETURN_SHIPPING_CHARGE ,cast(replace(JSON_EXTRACT_SCALAR(RI,\'$.credit_note_total_item_miscellaneous\'),\'\"\',\'\') as float64) RETURN_MISC ,ifnull(cast(replace(JSON_EXTRACT_SCALAR(RI,\'$.credit_note_total_item_excluding_tax\'),\'\"\',\'\') as float64),0) + ifnull(cast(replace(JSON_EXTRACT_SCALAR(RI,\'$.credit_note_total_item_tax\'),\'\"\',\'\') as float64),0) + ifnull(cast(replace(JSON_EXTRACT_SCALAR(RI,\'$.credit_note_total_item_shipping_charge\'),\'\"\',\'\') as float64),0) + ifnull(cast(replace(JSON_EXTRACT_SCALAR(RI,\'$.credit_note_total_item_miscellaneous\'),\'\"\',\'\') as float64),0) as TOTAL_RETURN_AMOUNT ,row_number() over (partition by Order_ID, Invoice_ID, REFERENCE_CODE, replace(JSON_EXTRACT_SCALAR(RI,\'$.suborder_id\'),\'\"\',\'\'),credit_note_id, credit_note_number order by cast(LAST_UPDATE_DATE as timestamp) desc) rw from maplemonk.EasyEcom_Zouk_EE_RETURNS R left join UNNEST(ITEMS) RI ) where rw = 1;",
                    "transaction": true
                }
            ) }}
            with sample_data as (

                select * from maplemonk.INFORMATION_SCHEMA.TABLES
            ),
            
            final as (
                select * from sample_data
            )
            select * from final
            