{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "CREATE OR REPLACE TABLE SNITCH_DB.MAPLEMONK.Live_Pricing_All_Channels AS SELECT DISTINCT am.SKU_GROUP, am.SKU_CLASS, am.CATEGORY, am.price, am.AVAILABLE_UNITS, am.NATURAL_ROS, am.SALES_LAST_7_DAYS, am.SALES_LAST_15_DAYS, am.SALES_LAST_30_DAYS, am.NUM_SIZE_AVAILABLE, ajio.AJIO_MRP, ajio.AJIO_SP, myntra.MYNTRA_MRP, myntra.MYNTRA_SP, amazon.AMAZON_MRP, amazon.AMAZON_SP, flipkart.FLIPKART_MRP, flipkart.FLIPKART_SP, INV.COGS_WITH_TAX, INV.COGS_WITHOUT_TAX FROM snitch_db.maplemonk.AVAILABILITY_MASTER am LEFT JOIN ( select * from ( SELECT Distinct REVERSE(SUBSTRING(REVERSE(EAN), CHARINDEX(\'-\', REVERSE(EAN)) + 1)) AS sku_group, MRP AS AJIO_MRP, SELLING_PRICE_ AS AJIO_SP, row_number() over(partition by sku_group order by AJIO_MRP,AJIO_SP desc) rw FROM SNITCH_DB.maplemonk.LIVE_PRICING_AJIO ) where rw=1 ) ajio ON am.SKU_GROUP = ajio.sku_group LEFT JOIN ( select * from ( SELECT Distinct REVERSE(SUBSTRING(REVERSE(ARTICLE_NO), CHARINDEX(\'-\', REVERSE(ARTICLE_NO)) + 1)) AS sku_group, MRP AS MYNTRA_MRP, CURRENT_SELLING_PRICE AS MYNTRA_SP, row_number() over(partition by sku_group order by MYNTRA_MRP,MYNTRA_SP desc) rw FROM SNITCH_DB.maplemonk.LIVE_PRICING_MYNTRA ) where rw=1 ) myntra ON am.SKU_GROUP = myntra.sku_group LEFT JOIN ( select * from ( SELECT Distinct REVERSE(SUBSTRING(REVERSE(SELLER_SKU), CHARINDEX(\'-\', REVERSE(SELLER_SKU)) + 1)) AS sku_group, MAXIMUM_RETAIL_PRICE AS AMAZON_MRP, PRICE AS AMAZON_SP, row_number() over(partition by sku_group order by AMAZON_MRP,AMAZON_SP desc) rw FROM SNITCH_DB.maplemonk.LIVE_PRICING_AMAZON ) where rw=1 ) amazon ON am.SKU_GROUP = amazon.sku_group LEFT JOIN ( select * from ( SELECT Distinct REVERSE(SUBSTRING(REVERSE(SELLER_SKU_ID), CHARINDEX(\'-\', REVERSE(SELLER_SKU_ID)) + 1)) AS sku_group, MRP AS FLIPKART_MRP, Your_Selling_Price AS FLIPKART_SP, Listing_ID AS Flipkart_Listing, row_number() over(partition by sku_group order by FLIPKART_MRP,FLIPKART_SP desc) rw FROM SNITCH_DB.maplemonk.LIVE_PRICING_FLIPKART where SYSTEM_STOCK_COUNT>1 ) where rw=1 ) flipkart ON am.SKU_GROUP = flipkart.sku_group LEFT JOIN ( select * from ( SELECT DISTINCT REVERSE(SUBSTRING(REVERSE(\"Item Type skuCode\"), CHARINDEX(\'-\', REVERSE(\"Item Type skuCode\")) + 1)) AS sku_group, \"Unit price with tax\" AS COGS_WITH_TAX, \"Unit price without tax\" AS COGS_WITHOUT_TAX, row_number() over(partition by sku_group order by COGS_WITH_TAX,COGS_WITHOUT_TAX desc) rw FROM snitch_db.maplemonk.unicommerce_inventory_aging ) where rw=1 ) INV ON am.SKU_GROUP = INV.sku_group ; CREATE OR REPLACE TABLE SNITCH_DB.MAPLEMONK.Live_Pricing AS SELECT LP.SKU_GROUP, LP.SKU_CLASS, LP.CATEGORY, LP.PRICE, LP.AVAILABLE_UNITS, LP.NATURAL_ROS, LP.SALES_LAST_7_DAYS, LP.SALES_LAST_15_DAYS, LP.SALES_LAST_30_DAYS, LP.NUM_SIZE_AVAILABLE, LP.AJIO_MRP, LP.AJIO_SP, LP.MYNTRA_MRP, LP.MYNTRA_SP, LP.AMAZON_MRP, LP.AMAZON_SP, LP.FLIPKART_MRP, LP.COGS_WITH_TAX, LP.COGS_WITHOUT_TAX, CASE WHEN LP.FLIPKART_SP = \'NA\' OR LP.FLIPKART_SP IS NULL THEN 0 ELSE LP.FLIPKART_SP END AS FLIPKART_SP1, --LP.SKU_GROUP_RANK, CASE WHEN LP.SKU_CLASS IN (\'1-Head\', \'4-New\', \'2-Belly\') AND LP.PRICE = IFNULL(LP.AJIO_SP, 0) AND LP.PRICE = IFNULL(LP.AMAZON_SP, 0) AND LP.PRICE = IFNULL(FLIPKART_SP1, 0) AND LP.PRICE = IFNULL(LP.MYNTRA_SP, 0) THEN \'GOOD\' WHEN LP.SKU_CLASS IN (\'1-Head\', \'4-New\', \'2-Belly\') AND LP.PRICE != IFNULL(LP.AJIO_SP, 0) AND LP.PRICE != IFNULL(LP.AMAZON_SP, 0) AND LP.PRICE != IFNULL(FLIPKART_SP1, 0) AND LP.PRICE != IFNULL(LP.MYNTRA_SP, 0) THEN \'HIGH ALERT\' WHEN LP.SKU_CLASS IN (\'1-Head\', \'4-New\', \'2-Belly\') AND LP.PRICE < IFNULL(LP.AJIO_SP, 0) AND LP.PRICE < IFNULL(LP.AMAZON_SP, 0) AND LP.PRICE < IFNULL(FLIPKART_SP1, 0) AND LP.PRICE < IFNULL(LP.MYNTRA_SP, 0) THEN \'Danger\' WHEN LP.SKU_CLASS = \'3-Tail\' AND LP.PRICE > IFNULL(LP.AJIO_SP, 0) AND LP.PRICE > IFNULL(LP.AMAZON_SP, 0) AND LP.PRICE > IFNULL(FLIPKART_SP1, 0) AND LP.PRICE > IFNULL(LP.MYNTRA_SP, 0) THEN \'GOOD\' WHEN LP.SKU_CLASS = \'3-Tail\' AND LP.PRICE != IFNULL(LP.AJIO_SP, 0) AND LP.PRICE != IFNULL(LP.AMAZON_SP, 0) AND LP.PRICE != IFNULL(FLIPKART_SP1, 0) AND LP.PRICE != IFNULL(LP.MYNTRA_SP, 0) THEN \'LIQUIDATE\' ELSE \'UNKNOWN\' END AS Global_Status, CASE WHEN LP.SKU_CLASS IN (\'1-Head\', \'4-New\', \'2-Belly\') AND LP.PRICE = IFNULL(LP.AJIO_SP, 0) THEN \'GOOD\' WHEN LP.SKU_CLASS IN (\'1-Head\', \'4-New\', \'2-Belly\') AND LP.PRICE > IFNULL(LP.AJIO_SP, 0) THEN \'LOW PRICE\' WHEN LP.SKU_CLASS IN (\'1-Head\', \'4-New\', \'2-Belly\') AND LP.PRICE < IFNULL(LP.AJIO_SP, 0) THEN \'HIGH ALERT\' WHEN LP.SKU_CLASS = \'3-Tail\' AND IFNULL(LP.AJIO_SP, 0) < LP.PRICE THEN \'GOOD\' WHEN LP.SKU_CLASS = \'3-Tail\' AND IFNULL(LP.AJIO_SP, 0) >= LP.PRICE THEN \'LIQUIDATE\' ELSE \'UNKNOWN\' END AS Ajio_Status, CASE WHEN LP.SKU_CLASS IN (\'1-Head\', \'4-New\', \'2-Belly\') AND LP.PRICE <= IFNULL(LP.MYNTRA_SP, 0) THEN \'GOOD\' WHEN LP.SKU_CLASS IN (\'1-Head\', \'4-New\', \'2-Belly\') AND LP.PRICE != IFNULL(LP.MYNTRA_SP, 0) THEN \'HIGH ALERT\' WHEN LP.SKU_CLASS = \'3-Tail\' AND IFNULL(LP.MYNTRA_SP, 0) < LP.PRICE THEN \'GOOD\' WHEN LP.SKU_CLASS = \'3-Tail\' AND IFNULL(LP.MYNTRA_SP, 0) >= LP.PRICE THEN \'LIQUIDATE\' ELSE \'UNKNOWN\' END AS Myntra_Status, CASE WHEN LP.SKU_CLASS IN (\'1-Head\', \'4-New\', \'2-Belly\') AND LP.PRICE <= IFNULL(LP.AMAZON_SP, 0) THEN \'GOOD\' WHEN LP.SKU_CLASS IN (\'1-Head\', \'4-New\', \'2-Belly\') AND LP.PRICE != IFNULL(LP.AMAZON_SP, 0) THEN \'HIGH ALERT\' WHEN LP.SKU_CLASS = \'3-Tail\' AND IFNULL(LP.AMAZON_SP, 0) < LP.PRICE THEN \'GOOD\' WHEN LP.SKU_CLASS = \'3-Tail\' AND IFNULL(LP.AMAZON_SP, 0) >= LP.PRICE THEN \'LIQUIDATE\' ELSE \'UNKNOWN\' END AS Amazon_Status, CASE WHEN LP.SKU_CLASS IN (\'1-Head\', \'4-New\', \'2-Belly\') AND LP.PRICE <= FLIPKART_SP1 THEN \'GOOD\' WHEN LP.SKU_CLASS IN (\'1-Head\', \'4-New\', \'2-Belly\') AND LP.PRICE != FLIPKART_SP1 THEN \'HIGH ALERT\' WHEN LP.SKU_CLASS = \'3-Tail\' AND FLIPKART_SP1 < LP.PRICE THEN \'GOOD\' WHEN LP.SKU_CLASS = \'3-Tail\' AND FLIPKART_SP1 >= LP.PRICE THEN \'LIQUIDATE\' ELSE \'UNKNOWN\' END AS Flipkart_Status, CASE WHEN LP.SKU_CLASS IN (\'3-Tail\') THEN LP.PRICE * 0.9 ELSE NULL END AS T1_Pricing, CASE WHEN LP.SKU_CLASS IN (\'3-Tail\') THEN LP.PRICE * 0.85 ELSE NULL END AS T2_Pricing, CASE WHEN LP.SKU_CLASS IN (\'3-Tail\') THEN LP.PRICE * 0.80 ELSE NULL END AS T3_Pricing, CASE WHEN LP.SKU_CLASS IN (\'3-Tail\') THEN (ROUND((LP.COGS_WITH_TAX / (1 - 0.30)), 2)) ELSE NULL END AS Liquidate_Pricing, SG.PRODUCT_ID, SG.TAGS, SG.SLEEVE_TYPE, SG.COLLAR_TYPE, SG.DESIGN, SG.FABRIC, SG.HEM, SG.CLOSURE, SG.FIT, SG.OCCASSION, SG.PRODUCT_TYPE, SG.COLOR, STATUS.status FROM SNITCH_DB.MAPLEMONK.Live_Pricing_All_Channels LP LEFT JOIN SNITCH_DB.MAPLEMONK.sku_group_tags SG ON LP.SKU_GROUP = SG.SKU_GROUP LEFT JOIN ( select * from ( Select REVERSE(SUBSTRING(REVERSE(replace(D.value:sku,\'\"\',\'\')), CHARINDEX(\'-\', REVERSE(replace(D.value:sku,\'\"\',\'\'))) + 1)) AS sku_group, status, replace(D.value:updated_at,\'\"\',\'\') updated, row_number() over(partition by sku_group order by updated desc ) rw FRom snitch_db.maplemonk.shopify_all_products , lateral flatten (input =>variants,outer => true) as D ) where rw=1 )status on status.sku_group = lp.sku_group ;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from snitch_db.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        