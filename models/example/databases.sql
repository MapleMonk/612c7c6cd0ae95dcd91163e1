{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "CREATE OR REPLACE TABLE BBK_DB.MAPLEMONK.CUSTOMER_RETENTION_BBK AS SELECT year(Acquisition_date) Acquisition_Year, monthname(Acquisition_date) Acquisition_Month, last_day(Acquisition_date) Year_Month, acquisition_product, acquisition_outlet, acquisition_source, acquisition_ordertype, count(distinct customer_id_final) total_customers, count(distinct case when last_day(Acquisition_Date)=last_day(order_date) then order_id end) total_orders, sum(case when last_day(Acquisition_Date)=last_day(order_date) then Selling_price_inr end) total_sales, count(distinct case when last_day(Acquisition_Date)<>last_day(order_date) then customer_id_final end) mn_c, count(distinct case when last_day(Acquisition_Date)<>last_day(order_date) then order_id end) mn_o, sum(case when last_day(Acquisition_Date)<>last_day(order_date) then Selling_price_inr end) mn_s, count(distinct case when acquisition_product=product_name and last_day(Acquisition_Date)<>last_day(order_date) then customer_id_final end) product_mn_c, count(distinct case when acquisition_product=product_name and last_day(Acquisition_Date)<>last_day(order_date) then order_id end) product_mn_o, sum(case when acquisition_product=product_name and last_day(Acquisition_Date)<>last_day(order_date) then Selling_price_inr end) product_mn_s, count(distinct case when last_day(dateadd(month,1,Acquisition_Date))=last_day(order_date) then customer_id_final end) m2_c, count(distinct case when last_day(dateadd(month,2,Acquisition_Date))=last_day(order_date) then customer_id_final end) m3_c, count(distinct case when last_day(dateadd(month,3,Acquisition_Date))=last_day(order_date) then customer_id_final end) m4_c, count(distinct case when last_day(dateadd(month,4,Acquisition_Date))=last_day(order_date) then customer_id_final end) m5_c, count(distinct case when last_day(dateadd(month,5,Acquisition_Date))=last_day(order_date) then customer_id_final end) m6_c, count(distinct case when last_day(dateadd(month,6,Acquisition_Date))=last_day(order_date) then customer_id_final end) m7_c, count(distinct case when last_day(dateadd(month,7,Acquisition_Date))=last_day(order_date) then customer_id_final end) m8_c, count(distinct case when last_day(dateadd(month,8,Acquisition_Date))=last_day(order_date) then customer_id_final end) m9_c, count(distinct case when last_day(dateadd(month,9,Acquisition_Date))=last_day(order_date) then customer_id_final end) m10_c, count(distinct case when last_day(dateadd(month,10,Acquisition_Date))=last_day(order_date) then customer_id_final end) m11_c, count(distinct case when last_day(dateadd(month,11,Acquisition_Date))=last_day(order_date) then customer_id_final end) m12_c, count(distinct case when last_day(dateadd(month,1,Acquisition_Date))=last_day(order_date) then order_id end) m2_o, count(distinct case when last_day(dateadd(month,2,Acquisition_Date))=last_day(order_date) then order_id end) m3_o, count(distinct case when last_day(dateadd(month,3,Acquisition_Date))=last_day(order_date) then order_id end) m4_o, count(distinct case when last_day(dateadd(month,4,Acquisition_Date))=last_day(order_date) then order_id end) m5_o, count(distinct case when last_day(dateadd(month,5,Acquisition_Date))=last_day(order_date) then order_id end) m6_o, count(distinct case when last_day(dateadd(month,6,Acquisition_Date))=last_day(order_date) then order_id end) m7_o, count(distinct case when last_day(dateadd(month,7,Acquisition_Date))=last_day(order_date) then order_id end) m8_o, count(distinct case when last_day(dateadd(month,8,Acquisition_Date))=last_day(order_date) then order_id end) m9_o, count(distinct case when last_day(dateadd(month,9,Acquisition_Date))=last_day(order_date) then order_id end) m10_o, count(distinct case when last_day(dateadd(month,10,Acquisition_Date))=last_day(order_date) then order_id end) m11_o, count(distinct case when last_day(dateadd(month,11,Acquisition_Date))=last_day(order_date) then order_id end) m12_o, sum(case when last_day(dateadd(month,1,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) m2_s, sum(case when last_day(dateadd(month,2,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) m3_s, sum(case when last_day(dateadd(month,3,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) m4_s, sum(case when last_day(dateadd(month,4,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) m5_s, sum(case when last_day(dateadd(month,5,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) m6_s, sum(case when last_day(dateadd(month,6,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) m7_s, sum(case when last_day(dateadd(month,7,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) m8_s, sum(case when last_day(dateadd(month,8,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) m9_s, sum(case when last_day(dateadd(month,9,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) m10_s, sum(case when last_day(dateadd(month,10,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) m11_s, sum(case when last_day(dateadd(month,11,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) m12_s, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,1,Acquisition_Date))= last_day(order_date) then customer_id_final end) product_m2_c, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,2,Acquisition_Date))= last_day(order_date) then customer_id_final end) product_m3_c, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,3,Acquisition_Date))= last_day(order_date) then customer_id_final end) product_m4_c, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,4,Acquisition_Date))= last_day(order_date) then customer_id_final end) product_m5_c, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,5,Acquisition_Date))= last_day(order_date) then customer_id_final end) product_m6_c, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,6,Acquisition_Date))= last_day(order_date) then customer_id_final end) product_m7_c, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,7,Acquisition_Date))= last_day(order_date) then customer_id_final end) product_m8_c, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,8,Acquisition_Date))= last_day(order_date) then customer_id_final end) product_m9_c, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,9,Acquisition_Date))= last_day(order_date) then customer_id_final end) product_m10_c, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,10,Acquisition_Date))= last_day(order_date) then customer_id_final end) product_m11_c, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,11,Acquisition_Date))= last_day(order_date) then customer_id_final end) product_m12_c, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,1,Acquisition_Date))= last_day(order_date) then order_id end) product_m2_o, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,2,Acquisition_Date))= last_day(order_date) then order_id end) product_m3_o, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,3,Acquisition_Date))= last_day(order_date) then order_id end) product_m4_o, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,4,Acquisition_Date))= last_day(order_date) then order_id end) product_m5_o, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,5,Acquisition_Date))= last_day(order_date) then order_id end) product_m6_o, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,6,Acquisition_Date))= last_day(order_date) then order_id end) product_m7_o, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,7,Acquisition_Date))= last_day(order_date) then order_id end) product_m8_o, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,8,Acquisition_Date))= last_day(order_date) then order_id end) product_m9_o, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,9,Acquisition_Date))= last_day(order_date) then order_id end) product_m10_o, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,10,Acquisition_Date))= last_day(order_date) then order_id end) product_m11_o, count(distinct case when acquisition_product=product_name and last_day(dateadd(month,11,Acquisition_Date))= last_day(order_date) then order_id end) product_m12_o, sum(case when acquisition_product=product_name and last_day(dateadd(month,1,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) product_m2_s, sum(case when acquisition_product=product_name and last_day(dateadd(month,2,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) product_m3_s, sum(case when acquisition_product=product_name and last_day(dateadd(month,3,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) product_m4_s, sum(case when acquisition_product=product_name and last_day(dateadd(month,4,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) product_m5_s, sum(case when acquisition_product=product_name and last_day(dateadd(month,5,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) product_m6_s, sum(case when acquisition_product=product_name and last_day(dateadd(month,6,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) product_m7_s, sum(case when acquisition_product=product_name and last_day(dateadd(month,7,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) product_m8_s, sum(case when acquisition_product=product_name and last_day(dateadd(month,8,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) product_m9_s, sum(case when acquisition_product=product_name and last_day(dateadd(month,9,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) product_m10_s, sum(case when acquisition_product=product_name and last_day(dateadd(month,10,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) product_m11_s, sum(case when acquisition_product=product_name and last_day(dateadd(month,11,Acquisition_Date))=last_day(order_date) then Selling_price_inr end) product_m12_s from ( select customer_id_final, order_id, acquisition_product, acquisition_outlet, acquisition_source, acquisition_ordertype, itemname as product_name, outletname as outlet, ordertype, saledate as order_Date, item_price as Selling_price_inr, acquisition_date from BBK_DB.maplemonk.fact_items_bbk where customer_id_final is not null )res group by year(Acquisition_Date), monthname(Acquisition_Date), last_day(Acquisition_Date), acquisition_source, acquisition_outlet, acquisition_ordertype, Acquisition_Product; CREATE OR REPLACE TABLE bbk_db.maplemonk.Customer_Master_intermediate AS select fi.customer_id_final, st.outletname, ct.outletcity, ordersource, Acquisition_Date, Acquisition_Product, datediff(day,acquisition_date,current_date) days_since_first_purchase, max(case when fi.saledate=fi1.max_order_date then itemname end) last_product, sum(ifnull(order_amt,0)) total_sales_inr, sum(case when date_trunc(\'month\',saledate)=date_trunc(\'month\',getdate()::date) then ifnull(order_amt,0) end) total_sales_inr_pm, count(distinct order_id) total_orders, count(distinct case when date_trunc(\'month\',saledate)<date_trunc(\'month\',getdate()::date) then order_id end) total_orders_bpm, count(distinct case when date_trunc(\'month\',saledate)=date_trunc(\'month\',getdate()::date) then order_id end) total_orders_pm, case when total_orders = 1 then \'1 order\' when total_orders = 2 then \'2 orders\' when total_orders = 3 then \'3 orders\' when total_orders = 4 then \'4 orders\' when total_orders = 5 then \'5 orders\' when total_orders = 6 then \'6 orders\' when total_orders = 7 then \'7 orders\' when total_orders = 8 then \'8 orders\' when total_orders = 9 then \'9 orders\' when total_orders = 10 then \'10 orders\' when total_orders > 10 then \'>10 orders\' end as total_orders_buckets, case when total_orders_bpm = 0 then \'0 order\' when total_orders_bpm = 1 then \'1 order\' when total_orders_bpm = 2 then \'2 orders\' when total_orders_bpm = 3 then \'3 orders\' when total_orders_bpm = 4 then \'4 orders\' when total_orders_bpm = 5 then \'5 orders\' when total_orders_bpm = 6 then \'6 orders\' when total_orders_bpm = 7 then \'7 orders\' when total_orders_bpm = 8 then \'8 orders\' when total_orders_bpm = 9 then \'9 orders\' when total_orders_bpm = 10 then \'10 orders\' when total_orders_bpm > 10 then \'>10 orders\' end as total_orders_buckets_bpm, count(distinct order_item_id) total_items, max(case when fi.saledate=fi1.max_order_date then order_id end) last_order_id, datediff(day,max(saledate),current_date) days_since_last_purchase, case when count(distinct order_id)=0 then null else datediff(day,min(saledate),max(saledate))/count(distinct order_id) end Avg_days_between_purchases, sum(fi.order_DISCOUNT) discount_inr, case when sum(fi.order_amt)=0 then null else sum(fi.order_DISCOUNT)/sum(fi.order_amt) end discount_percent from bbk_db.maplemonk.FACT_ITEMS_bbk fi left join (select customer_id_final, max(saledate) max_order_date from bbk_db.maplemonk.FACT_ITEMS_bbk group by customer_id_final )fi1 on fi.customer_id_final=fi1.customer_id_final left join (select * from ( select customer_id_final, outletname, row_number() over (partition by customer_id_final order by saledate::date desc) rw from bbk_db.maplemonk.fact_items_bbk where outletname is not null) where rw=1) st on st.customer_id_final = fi.customer_id_final left join (select * from ( select customer_id_final, outletcity, row_number() over (partition by customer_id_final order by saledate::date desc) rw from bbk_db.maplemonk.fact_items_bbk where outletcity is not null) where rw=1) ct on ct.customer_id_final = fi.customer_id_final where fi.customer_id_final is not null and saledate is not null group by fi.customer_id_final, st.outletname, ct.outletcity, fi.ordersource, fi.acquisition_Date, fi.Acquisition_Product ; create or replace table BBK_DB.maplemonk.customer_master_BBK as select x.*, rcm.category from (select c.*, m.Score as M_Score,r.Score as R_Score,f.Score as F_Score, (r.Score*1/3+f.Score*1/3+m.Score*1/3) as RFM_Score from (select *, row_number () over (order by TOTAL_Sales_INR desc)/ (select count (distinct customer_id_final) from BBK_DB.maplemonk.Customer_Master_Intermediate) as Percentile_M, row_number() over(order by DAYS_SINCE_LAST_PURCHASE asc,customer_id_final)/(select count(distinct customer_id_final) from BBK_DB.maplemonk.Customer_Master_Intermediate) as Percentile_R, case when AVG_DAYS_BETWEEN_PURCHASES=0 then 0.4 else row_number () over (partition by case when AVG_DAYS_BETWEEN_PURCHASES=0 then 0 else 1 end order by AVG_DAYS_BETWEEN_PURCHASES asc,customer_id_final) /(select count(distinct customer_id_final) from BBK_DB.maplemonk.Customer_Master_Intermediate) end as Percentile_F from BBK_DB.maplemonk.Customer_Master_Intermediate) c left join BBK_DB.maplemonk.BBK_RFM_Score m on c.Percentile_M > m.\"Lower Limit\" and c.Percentile_M<=m.\"Upper Limit\" left join BBK_DB.maplemonk.BBK_RFM_Score r on c.Percentile_R > r.\"Lower Limit\" and c.Percentile_R<=r.\"Upper Limit\" left join BBK_DB.maplemonk.BBK_RFM_Score f on c.Percentile_F > f.\"Lower Limit\" and c.Percentile_F<=f.\"Upper Limit\")x left join BBK_DB.maplemonk.BBK_RFM_CUSTOMER_CATEGORY_MAPPING rcm on x.M_Score::int>rcm.M_START::int and x.M_Score::int<=M_END::int and x.R_Score::int>rcm.R_START::int and x.R_Score::int<=R_END::int and x.F_Score::int>rcm.F_START::int and x.F_Score::int<=F_END::int ; create or replace table bbk_db.maplemonk.date_customer_dim as select distinct customer_id_final, month_start from bbk_db.maplemonk.fact_items_bbk cross join (select distinct date_trunc(\'month\',saledate) month_start from bbk_db.maplemonk.fact_items_bbk) ; create or replace table bbk_db.maplemonk.customer_status_master_intermediate_bbk as select *, case when sum(new_flag+existing_flag) over (partition by customer_id_final, acquisition_outlet, acquisition_source) = 1 then 1 else 0 end as single_ordercustomer_flag from ( select a.month_start, month(a.month_start) month, year(a.month_start) year, a.customer_id_final, b.acquisition_outlet, b.acquisition_source, ifnull(orders,0) orders, ifnull(order_amt,0) order_amt ,sum(ifnull(orders,0)) over(partition by a.customer_id_final order by a.month_start asc rows between 4 preceding and current row) - ifnull(orders,0) orders_l3m ,sum(ifnull(orders,0)) over(partition by a.customer_id_final order by a.month_start asc rows between 7 preceding and current row) - ifnull(orders,0) - orders_l3m orders_l3to6m ,sum(ifnull(orders,0)) over(partition by a.customer_id_final order by a.month_start asc rows between unbounded preceding and current row) - ifnull(orders,0) - orders_l3m - orders_l3to6m orders_lg6m, case when sum(ifnull(orders,0)) over(partition by a.customer_id_final order by a.month_start asc rows between unbounded preceding and current row) - orders = 0 then 1 else 0 end as new_flag, case when new_flag = 0 then 1 else 0 end as existing_flag, case when orders_l3m > 0 then 1 else 0 end active_flag, case when orders_l3m = 0 and orders_l3to6m > 0 then 1 else 0 end dormant_flag, case when orders_l3m = 0 and orders_l3to6m = 0 and orders_lg6m > 0 then 1 else 0 end lapsed_flag from bbk_db.maplemonk.date_customer_dim a left join (select customer_id_final, date_trunc(\'month\',saledate) month_start, acquisition_outlet, acquisition_source, ifnull(count(distinct order_id),0) orders, ifnull(sum(order_amt),0) order_amt from bbk_db.maplemonk.fact_items_bbk group by 1,2,3,4) b on a.month_start = b.month_start and a.customer_id_final = b.customer_id_final ) ; create or replace table bbk_db.maplemonk.customer_status_master_bbk as select a.*,ifnull(c.customers_till_previous_month,0) customers_till_previous_month from bbk_db.maplemonk.customer_status_master_intermediate_bbk a left join ( select month_start, acquisition_source, acquisition_outlet, sum(new_flag) new_customers, sum(new_customers) over (partition by acquisition_source, acquisition_outlet order by month_start asc rows between unbounded preceding and current row) - new_customers customers_till_previous_month from bbk_db.maplemonk.customer_status_master_intermediate_bbk group by 1,2,3 ) c on a.month_start = c.month_start and a.acquisition_outlet=c.acquisition_outlet and a.acquisition_source = c.acquisition_source ; create or replace table bbk_db.maplemonk.customer_retention_calendar_bbk as select acquisition_month, purchase_month, count(distinct a.customer_id_final) customers, sum(gross_Sales) gross_sales, sum(orders) orders from ( select customer_id_final,last_day(saledate::date) purchase_month, sum(order_amt) gross_sales, count(distinct ordeR_id) orders from bbk_db.maplemonk.FACT_ITEMS_BBK where customer_id_final is not null and lower(ordersource) not in (\'swiggy\',\'outlet\',\'\',\'test bbk\') and billstatus in (\'bil\', \'Bil\') group by 1,2 )a left join ( select distinct customer_id_final, last_day(acquisition_date) Acquisition_month from bbk_db.maplemonk.FACT_ITEMS_BBK where customer_id_final is not null and lower(ordersource) not in (\'swiggy\',\'outlet\',\'\',\'test bbk\') and billstatus in (\'bil\', \'Bil\') )b on a.customer_id_final = b.customer_id_final group by 1,2 order by acquisition_month, purchase_month ;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from BBK_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        