{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "Create or replace table eggozdb.maplemonk.Date_area_dim asselect cast(Date as date) Date, area_classification from eggozdb.maplemonk.date_dimcross join(select distinct area_classification from eggozdb.maplemonk.my_sql_retailer_retailer);CREATE OR REPLACE TABLE eggozdb.maplemonk.SALES_SUMMARY AS select * ,sum(Net_Sales) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Net_Sales from(selecta.date Date,a.area_classification Area_classification,ifnull(b.Net_sales,0) Net_Salesfromeggozdb.maplemonk.Date_area_dim aleft join (select date,area_classification,sum(sales_per_item) Net_salesfrom(select cast(timestampadd(minute,330,o.date) as date) Date ,o.id ,ol1.id,rr.area_classification Area_Classification,sum(o.order_price_amount)/sum(ol2.Items) Sales_per_item --,SUM(ol1.single_sku_rate *ol1.quantity) Sales --, SUM(o.discount_amount)/SUM(ol2.Items) Discountfrom eggozdb.Maplemonk.my_sql_order_order o left join eggozdb.Maplemonk.my_sql_order_orderline ol1 ON o.id=ol1.order_id left join eggozdb.Maplemonk.my_sql_product_product pp ON ol1.product_id =pp.id left join eggozdb.Maplemonk.my_sql_retailer_retailer rr ON o.retailer_id =rr.id left join (select order_id, COUNT(1) AS Items from eggozdb.Maplemonk.my_sql_order_orderline group by order_id) ol2 ON o.id=ol2.order_id WHERE o.status in ('delivered', 'completed') and o.is_trial = 'FALSE' and o.order_brand_type = 'branded'group by cast(timestampadd(minute,330,o.date) as date) , rr.area_classification, o.id, ol1.id)group by date ,area_classification) bon a.area_classification = b.area_classification and a.date = b.datewhere year(a.date)>= 2020 and year(a.date) <= year(getdate())); CREATE OR REPLACE TABLE eggozdb.maplemonk.Eggs_Sold_SUMMARY AS select * ,sum(Eggs_sold) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_sold ,sum(Eggs_sold_white) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_sold_white ,sum(Eggs_sold_brown) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_sold_brown ,sum(Eggs_sold_nutra) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date)MTD_Eggs_sold_nutra ,sum(Eggs_sold_liquid) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date)MTD_Eggs_sold_liquidfrom(selecta.date Date,a.area_classification Area_classification,ifnull(b.Eggs_sold,0) Eggs_sold,ifnull(b.eggs_sold_white,0) Eggs_sold_white,ifnull(b.eggs_sold_brown,0) Eggs_sold_brown,ifnull(b.eggs_sold_nutra,0) Eggs_sold_nutra,ifnull(b.eggs_sold_liquid,0) Eggs_sold_liquid fromeggozdb.maplemonk.Date_area_dim aleft join(select date ,area_classification ,(case when eggs_sold_white is null then 0 else eggs_sold_white end) Eggs_sold_White ,(case when eggs_sold_brown is null then 0 else eggs_sold_Brown end) Eggs_sold_Brown ,(case when eggs_sold_Nutra is null then 0 else eggs_sold_Nutra end) Eggs_sold_Nutra ,(case when eggs_sold_Liquid is null then 0 else eggs_sold_Liquid end) Eggs_sold_Liquid ,((case when eggs_sold_white is null then 0 else eggs_sold_white end) + (case when eggs_sold_brown is null then 0 else eggs_sold_Brown end) + (case when eggs_sold_Nutra is null then 0 else eggs_sold_Nutra end) + (case when eggs_sold_Liquid is null then 0 else eggs_sold_Liquid end)) as eggs_sold from (select cast(timestampadd(minute,330,o.date) as date) Date,rr.area_classification Area_Classification,(case when pp.name like '%White%' then 'White' when pp.name like '%Brown%' then 'Brown' when pp.name like '%Nutra%' then 'Nutra' else 'Liquid' end) Egg_Name ,SUM(ol1.quantity*pp.SKU_Count) Eggs_Sold from eggozdb.Maplemonk.my_sql_order_order o left join eggozdb.Maplemonk.my_sql_order_orderline ol1 ON o.id=ol1.order_id left join eggozdb.Maplemonk.my_sql_product_product pp ON ol1.product_id =pp.id left join eggozdb.Maplemonk.my_sql_retailer_retailer rr ON o.retailer_id =rr.id left join (select order_id, COUNT(1) AS Items from eggozdb.Maplemonk.my_sql_order_orderline group by order_id) ol2 ON o.id=ol2.order_id WHERE o.status in ('delivered', 'completed') and o.is_trial = 'FALSE' and o.order_brand_type = 'branded'group by cast(timestampadd(minute,330,o.date) as date) , rr.area_classification, (case when pp.name like '%White%' then 'White' when pp.name like '%Brown%' then 'Brown' when pp.name like '%Nutra%' then 'Nutra' else 'Liquid' end))pivot( sum(eggs_sold) for egg_name in ('White', 'Brown', 'Nutra', 'Liquid')) as p (Date, Area_Classification, Eggs_sold_White, Eggs_sold_Brown, Eggs_sold_Nutra, Eggs_sold_Liquid)) bon a.area_classification = b.Area_Classification and a.date = b.datewhere year(a.date)>= 2020 and year(a.date) <= year(getdate()) ); CREATE OR REPLACE TABLE eggozdb.maplemonk.Collection_Summary asselect * ,sum(Collections) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Collections from(selecta.date Date,a.area_classification Area_classification,ifnull(b.Collections,0) Collectionsfromeggozdb.maplemonk.Date_area_dim aleft join(select date(timestampadd(minute,330,pp.created_at)) Collection_Date, area_classification, sum(pay_amount) Collections from eggozdb.maplemonk.my_sql_payment_payment pp left join eggozdb.maplemonk.my_sql_payment_invoice pi on pi.id = pp.invoice_id left join eggozdb.maplemonk.my_sql_payment_salestransaction ps on pp.salesTransaction_id = ps.id left join eggozdb.maplemonk.my_sql_order_order oo on oo.id = pi.order_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = ps.retailer_id where ps.transaction_type = 'Credit' and ps.is_trial = 'FALSE'group by area_classification, date(timestampadd(minute,330,pp.created_At))) bon a.area_classification = b.area_classification and a.date = b.collection_datewhere year(a.date)>= 2020 and year(a.date) <= year(getdate()) );create or replace table eggozdb.maplemonk.Replacement_Summary as select * ,sum(Eggs_replaced) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_replaced ,sum(Eggs_replaced_white) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_replaced_white ,sum(Eggs_replaced_brown) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Eggs_replaced_brown ,sum(Eggs_replaced_nutra) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date)MTD_Eggs_replaced_nutra ,sum(Eggs_replaced_liquid) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date)MTD_Eggs_replaced_liquidfrom(selecta.date Date,a.area_classification Area_classification,ifnull(b.Eggs_replaced,0) Eggs_replaced,ifnull(b.eggs_replaced_white,0) Eggs_replaced_white,ifnull(b.eggs_replaced_brown,0) Eggs_replaced_brown,ifnull(b.eggs_replaced_nutra,0) Eggs_replaced_nutra,ifnull(b.eggs_replaced_liquid,0) Eggs_replaced_liquid fromeggozdb.maplemonk.Date_area_dim aleft join(select replacement_date , area_classification ,(case when eggs_replaced_white is null then 0 else eggs_replaced_white end) Eggs_Replaced_White ,(case when eggs_replaced_brown is null then 0 else eggs_replaced_Brown end) Eggs_replaced_Brown ,(case when eggs_replaced_Nutra is null then 0 else eggs_replaced_Nutra end) Eggs_replaced_Nutra ,(case when eggs_replaced_Liquid is null then 0 else eggs_replaced_Liquid end) Eggs_replaced_Liquid ,((case when eggs_replaced_white is null then 0 else eggs_replaced_white end) + (case when eggs_replaced_brown is null then 0 else eggs_replaced_Brown end) + (case when eggs_replaced_Nutra is null then 0 else eggs_replaced_Nutra end) + (case when eggs_replaced_Liquid is null then 0 else eggs_replaced_Liquid end)) as eggs_replaced from (select date(timestampadd(minute,330,or1.date)) as Replacement_Date,rr.area_classification,(case when pp.name like '%White%' then 'White' when pp.name like '%Brown%' then 'Brown' when pp.name like '%Nutra%' then 'Nutra' else 'Liquid' end) Egg_Name,sum(or1.quantity* pp.sku_count) Eggs_replaced from eggozdb.maplemonk.my_sql_order_orderreturnline or1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr ON or1.retailer_id =rr.id left JOIN eggozdb.maplemonk.my_sql_product_product pp on pp.id = or1.product_id where line_type in ('Replacement')group by rr.area_classification, date(timestampadd(minute,330,or1.date)) ,(case when pp.name like '%White%' then 'White' when pp.name like '%Brown%' then 'Brown' when pp.name like '%Nutra%' then 'Nutra' else 'Liquid' end))pivot( sum(eggs_replaced) for egg_name in ('White', 'Brown', 'Nutra', 'Liquid')) as p (Replacement_date, area_classification, Eggs_Replaced_White, Eggs_Replaced_Brown, Eggs_Replaced_Nutra, Eggs_Replaced_Liquid)) bon a.area_classification = b.area_classification and a.date = b.replacement_datewhere year(a.date)>= 2020 and year(a.date) <= year(getdate()) );create or replace table eggozdb.maplemonk.Retailers_onboarded_summary asselect a.date date, a.area_classification Area_Classification ,sum(a.Daily_Retailers_Onboarded) over (partition by a.area_classification,year(a.date), month(a.date) order by year (a.date), month(a.date), a.Date) MTD_Retailers_Onboarded ,a.Daily_Retailers_Onboarded Daily_Retailers_Onboarded ,b.active_stores from(select dad.date date, dad.area_classification area_classification, count(distinct rr.id) Daily_Retailers_onboarded from eggozdb.maplemonk.Date_area_dim dadleft join eggozdb.maplemonk.my_sql_retailer_retailer rron dad.date = date(timestampadd(minute,330,rr.onboarding_date)) and dad.area_classification = rr.area_classificationwhere year(dad.date)>= 2020 and year(dad.date) <= year(getdate())group by dad.date, dad.area_classificationorder by dad.date asc) aleft join(select dad.date date, dad.area_classification area_classification, count(distinct owa.retailer_id) active_Stores from eggozdb.maplemonk.Date_area_dim dad left join (select oo.retailer_id, oo.date,oo.id, rr.area_classification ac from eggozdb.maplemonk.my_sql_order_order ooleft join eggozdb.maplemonk.my_sql_retailer_retailer rron oo.retailer_id = rr.id) owa on dad.area_classification = owa.ac and date_from_parts(year(dad.date), month(dad.date), 1) <= date(timestampadd(minute,330,owa.date)) and dad.date >= date(timestampadd(minute,330,owa.date)) group by dad.date, dad.area_classificationorder by dad.date asc ) bon a.date=b.date and a.area_classification = b.area_classification;CREATE OR REPLACE TABLE eggozdb.maplemonk.Summary_reporting_table asselect a.date,a.area_classification as Area,Net_Sales ,MTD_Net_Sales as MTD_Sales,eggs_sold,Eggs_sold_white,Eggs_sold_brown,Eggs_sold_nutra,Eggs_sold_liquid,mtd_eggs_sold,MTD_Eggs_sold_white,MTD_Eggs_sold_brown,MTD_Eggs_sold_nutra,MTD_Eggs_sold_liquid,collections,mtd_collections,eggs_replaced,eggs_replaced_white,eggs_replaced_brown,eggs_replaced_nutra,eggs_replaced_liquid,mtd_eggs_replaced,mtd_eggs_replaced_white,mtd_eggs_replaced_brown,mtd_eggs_replaced_nutra,mtd_eggs_replaced_liquid,d.Daily_Retailers_Onboarded,d.MTD_Retailers_Onboarded,os.MTD_Retailers_Onboarded Previous_Month_MTD_Retailers_onboarded,datediff(day, date(DATE_TRUNC('MONTH',a.date)), a.date) + 1 as Days_in_month,d.ACTIVE_STORESfrom eggozdb.maplemonk.SALES_SUMMARY aleft join eggozdb.maplemonk.Collection_Summary bon a.area_classification = b.area_classification and a.date = b.dateleft join eggozdb.maplemonk.Replacement_Summary con a.area_classification = c.area_classification and a.date = c.dateleft join eggozdb.maplemonk.Retailers_onboarded_summary don d.area_Classification = a.area_classification and d.date = a.dateleft join eggozdb.maplemonk.Retailers_onboarded_summary oson os.area_Classification = d.area_classification and os.date = DATEADD(DAY,(-1), DATE_TRUNC('MONTH',d.date))left join eggozdb.maplemonk.Eggs_Sold_SUMMARY eon e.area_Classification = a.area_classification and e.date = a.date;create or replace table eggozdb.Maplemonk.Sales_summary_beat_retailer asselect date,area_classification,beat_name,code,sum(sales_per_item) Net_salesfrom(select cast(timestampadd(minute,330,o.date) as date) Date ,o.id ,ol1.id,rr.area_classification Area_Classification,rr.code,ba.beat_name,sum(o.order_price_amount)/sum(ol2.Items) Sales_per_item from eggozdb.Maplemonk.my_sql_order_order o left join eggozdb.Maplemonk.my_sql_order_orderline ol1 ON o.id=ol1.order_id left join eggozdb.Maplemonk.my_sql_product_product pp ON ol1.product_id =pp.id left join eggozdb.Maplemonk.my_sql_retailer_retailer rr ON o.retailer_id =rr.idleft join eggozdb.maplemonk.my_sql_distributionchain_beatassignment baon ba.id = o.beat_assignment_idleft join (select order_id, COUNT(1) AS Items from eggozdb.Maplemonk.my_sql_order_orderline group by order_id) ol2 ON o.id=ol2.order_id WHERE o.status in ('delivered', 'completed') and o.is_trial = 'FALSE' and o.order_brand_type = 'branded' group by cast(timestampadd(minute,330,o.date) as date) , rr.area_classification, rr.code, ba.beat_name, o.id, ol1.id)group by date ,area_classification, beat_name, code;create or replace table eggozdb.Maplemonk.Eggs_Sold_SUMMARY_beat_retailer asselect date ,area_classification ,beat_name ,code ,(case when eggs_sold_white is null then 0 else eggs_sold_white end) Eggs_sold_White ,(case when eggs_sold_brown is null then 0 else eggs_sold_Brown end) Eggs_sold_Brown ,(case when eggs_sold_Nutra is null then 0 else eggs_sold_Nutra end) Eggs_sold_Nutra ,(case when eggs_sold_Liquid is null then 0 else eggs_sold_Liquid end) Eggs_sold_Liquid ,((case when eggs_sold_white is null then 0 else eggs_sold_white end) + (case when eggs_sold_brown is null then 0 else eggs_sold_Brown end) + (case when eggs_sold_Nutra is null then 0 else eggs_sold_Nutra end) + (case when eggs_sold_Liquid is null then 0 else eggs_sold_Liquid end)) as eggs_sold from (select cast(timestampadd(minute,330,o.date) as date) Date,rr.area_classification Area_Classification,ba.beat_name,rr.code,(case when pp.name like '%White%' then 'White' when pp.name like '%Brown%' then 'Brown' when pp.name like '%Nutra%' then 'Nutra' else 'Liquid' end) Egg_Name ,SUM(ol1.quantity*pp.SKU_Count) Eggs_Sold from eggozdb.Maplemonk.my_sql_order_order o left join eggozdb.Maplemonk.my_sql_order_orderline ol1 ON o.id=ol1.order_id left join eggozdb.Maplemonk.my_sql_product_product pp ON ol1.product_id =pp.id left join eggozdb.Maplemonk.my_sql_retailer_retailer rr ON o.retailer_id =rr.idleft join eggozdb.maplemonk.my_sql_distributionchain_beatassignment baon ba.id = o.beat_assignment_idleft join (select order_id, COUNT(1) AS Items from eggozdb.Maplemonk.my_sql_order_orderline group by order_id) ol2 ON o.id=ol2.order_id WHERE o.status in ('delivered', 'completed') and o.is_trial = 'FALSE' and o.order_brand_type = 'branded'group by cast(timestampadd(minute,330,o.date) as date) , rr.area_classification, (case when pp.name like '%White%' then 'White' when pp.name like '%Brown%' then 'Brown' when pp.name like '%Nutra%' then 'Nutra' else 'Liquid' end), ba.beat_name, rr.code)pivot( sum(eggs_sold) for egg_name in ('White', 'Brown', 'Nutra', 'Liquid')) as p (Date, Area_Classification, beat_name, code, Eggs_sold_White, Eggs_sold_Brown, Eggs_sold_Nutra, Eggs_sold_Liquid);CREATE OR REPLACE TABLE eggozdb.maplemonk.Collection_Summary_beat_retailer asselect date(timestampadd(minute,330,pp.created_at)) Date,area_classification,sum(pay_amount) Collections,rr.code,ba.beat_namefrom eggozdb.maplemonk.my_sql_payment_payment pp left join eggozdb.maplemonk.my_sql_payment_invoice pi on pi.id = pp.invoice_id left join eggozdb.maplemonk.my_sql_payment_salestransaction ps on pp.salesTransaction_id = ps.id left join eggozdb.maplemonk.my_sql_order_order oo on oo.id = pi.order_idleft join eggozdb.maplemonk.my_sql_distributionchain_beatassignment baon ba.id = oo.beat_assignment_idleft join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = ps.retailer_id where ps.transaction_type = 'Credit' and ps.is_trial = 'FALSE'group by area_classification, date(timestampadd(minute,330,pp.created_At)), rr.code, ba.beat_name;create or replace table eggozdb.maplemonk.Replacement_Summary_beat_retailer as select replacement_date date , area_classification ,beat_name ,code ,(case when eggs_replaced_white is null then 0 else eggs_replaced_white end) Eggs_Replaced_White ,(case when eggs_replaced_brown is null then 0 else eggs_replaced_Brown end) Eggs_replaced_Brown ,(case when eggs_replaced_Nutra is null then 0 else eggs_replaced_Nutra end) Eggs_replaced_Nutra ,(case when eggs_replaced_Liquid is null then 0 else eggs_replaced_Liquid end) Eggs_replaced_Liquid ,((case when eggs_replaced_white is null then 0 else eggs_replaced_white end) + (case when eggs_replaced_brown is null then 0 else eggs_replaced_Brown end) + (case when eggs_replaced_Nutra is null then 0 else eggs_replaced_Nutra end) + (case when eggs_replaced_Liquid is null then 0 else eggs_replaced_Liquid end)) as eggs_replaced from (select date(timestampadd(minute,330,or1.date)) as Replacement_Date,rr.area_classification,ba.beat_name,rr.code,(case when pp.name like '%White%' then 'White' when pp.name like '%Brown%' then 'Brown' when pp.name like '%Nutra%' then 'Nutra' else 'Liquid' end) Egg_Name,sum(or1.quantity* pp.sku_count) Eggs_replaced from eggozdb.maplemonk.my_sql_order_orderreturnline or1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr ON or1.retailer_id =rr.id left JOIN eggozdb.maplemonk.my_sql_product_product pp on pp.id = or1.product_idleft join eggozdb.maplemonk.my_sql_distributionchain_beatassignment baon ba.id = or1.beat_assignment_idwhere line_type in ('Replacement')group by rr.area_classification, date(timestampadd(minute,330,or1.date)) ,(case when pp.name like '%White%' then 'White' when pp.name like '%Brown%' then 'Brown' when pp.name like '%Nutra%' then 'Nutra' else 'Liquid' end),ba.beat_name,rr.code)pivot( sum(eggs_replaced) for egg_name in ('White', 'Brown', 'Nutra', 'Liquid')) as p (Replacement_date, area_classification, beat_name, code, Eggs_Replaced_White, Eggs_Replaced_Brown, Eggs_Replaced_Nutra, Eggs_Replaced_Liquid); CREATE OR REPLACE TABLE eggozdb.maplemonk.Summary_reporting_table_beat_retailer asselect (case when y.date is not null then y.date else e.date end) date,(case when y.area_classification is not null then y.area_classification else e.area_classification end) Area,(case when y.beat_name is not null then y.beat_name else e.beat_name end) Beat_Name,(case when y.code is not null then y.code else e.code end) Retailer_Name,NET_SALES,eggs_sold,Eggs_sold_white,Eggs_sold_brown,Eggs_sold_nutra,Eggs_sold_liquid,collections,eggs_replaced,eggs_replaced_white,eggs_replaced_brown,eggs_replaced_nutra,eggs_replaced_liquidfrom(select(case when z.date is not null then z.date else c.date end) date,(case when z.area_classification is not null then z.area_classification else c.area_classification end) area_classification,(case when z.beat_name is not null then z.beat_name else c.beat_name end) beat_name,(case when z.code is not null then z.code else c.code end) code ,NET_SALES,collections,eggs_replaced,eggs_replaced_white,eggs_replaced_brown,eggs_replaced_nutra,eggs_replaced_liquidfrom(select (case when a.date is not null then a.date else b.date end) date,(case when a.area_classification is not null then a.area_classification else b.area_classification end) area_classification,(case when a.beat_name is not null then a.beat_name else b.beat_name end) beat_name,(case when a.code is not null then a.code else b.code end) code,NET_SALES,collectionsfromeggozdb.maplemonk.SALES_SUMMARY_beat_retailer afull outer join eggozdb.maplemonk.Collection_Summary_beat_retailer bon a.area_classification = b.area_classification and a.date = b.date and a.code = b.code and a.beat_name = b.beat_name) zfull outer join eggozdb.maplemonk.Replacement_Summary_beat_retailer con z.area_classification = c.area_classification and z.date = c.date and z.code = c.code and z.beat_name = c.beat_name) yfull outer join eggozdb.maplemonk.Eggs_Sold_SUMMARY_beat_retailer eon e.area_Classification = y.area_classification and e.date = y.date and e.code = y.code and e.beat_name = y.beat_name;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from EGGOZDB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        
