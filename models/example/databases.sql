{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table prd_db.beardo.dwh_gross_contribution_Beardo as with additional_sku_mapping as ( select m.*, coalesce(n.corrected_sku_weight,m.sku_weight_intermediate) sku_weight from ( select a.\"Product Code\" sku, max(MRP::float) mrp, div0(substr(case when \"GST Tax Type Code\" = \'\' then null else \"GST Tax Type Code\" end,11,2)::float,100) GST, sum(case when lower(type) = \'simple\' then 1 when lower(type) = \'bundle\' then \"Component Quantity\"::float end) WH_units, sum(case when lower(type) = \'simple\' then a.\"Weight (gms)\"::float when lower(type) = \'bundle\' then b.component_weight*a.\"Component Quantity\"::float end) sku_weight_intermediate, case when WH_units = 1 then 7 when WH_units > 1 then (WH_units+1)*7 end unit_emiza_cost from datalake_db.beardo.mst_unicommerce_item_master a left join ( select msm.\"Product Code\" child_sku, \"Weight (gms)\"::float component_weight from datalake_db.beardo.mst_unicommerce_item_master msm where lower(msm.type) = \'simple\' ) b on a.\"Component Product Code\" = b.child_sku group by 1,3 ) m left join datalake_db.beardo.mst_corrected_weights_for_volume n on n.\"Product Code\" = m.sku ) , orders as ( select * from prd_db.beardo.dwh_SHOPIFY_FACT_ITEMS where (lower(order_status) <> \'cancelled\' or is_refund <> 1) and lower(payment_gateway_mapped) <> \'replacement\' ) select order_timestamp, order_id, ordeR_name, payment_gateway_mapped payment_method, mrp_sales, total_sales, total_discount, div0(total_discount,mrp_sales) discount_percent, NR, COGS total_COGS, Gokwik_charge, ceil(div0(WH_units_for_order,4))*4 + 1.5 spm_cost, case when lower(expected_warehouse) like \'%zed%\' then 0 when Expected_Warehouse is null then 0 else warehousing_cost_line_item + 6.25 end warehousing_cost, case when lower(payment_gateway_mapped) = \'prepaid\' then (case when expected_zone = \'A\' then ceil(div0(order_weight+70,500))*25 when expected_zone = \'B\' then ceil(div0(order_weight+70,500))*32 when expected_zone = \'C\' then ceil(div0(order_weight+70,500))*42 when expected_zone = \'D\' then ceil(div0(order_weight+70,500))*48 when expected_zone = \'E\' then ceil(div0(order_weight+70,500))*54 when expected_zone is null then ceil(div0(order_weight+70,500))*48 end) when lower(payment_gateway_mapped) = \'cod\' then (case when expected_zone = \'A\' then ceil(div0(order_weight+70,500))*25 when expected_zone = \'B\' then ceil(div0(order_weight+70,500))*32 when expected_zone = \'C\' then ceil(div0(order_weight+70,500))*42 when expected_zone = \'D\' then ceil(div0(order_weight+70,500))*48 when expected_zone = \'E\' then ceil(div0(order_weight+70,500))*54 when expected_zone is null then ceil(div0(order_weight+70,500))*48 end) + 30 end as logistics_cost, common_expense_finance, NR - total_COGS - gokwik_charge - warehousing_cost - common_expense_finance - spm_cost - logistics_cost as GC, div0(GC,NR) GC_percent, discount_code, product_list, ceil(div0(order_weight+70,500)) weight_slab, expected_zone, expected_warehouse, GC_percent*100 GC_filter, order_timestamp::string timestamped_date from ( select order_timestamp, order_id, ordeR_name, discount_code, listagg(product_name, \', \') product_list, sum(o.total_sales) total_Sales, sum(asm.mrp*o.quantity) mrp_sales, sum(asm.mrp*o.quantity - (o.GROSS_SALES_AFTER_TAX - discount)) total_discount, sum(div0((o.GROSS_SALES_AFTER_TAX - discount),(1+asm.gst)) + div0(o.shipping_price,1.18)) NR, ifnull(sum(scm.cogs*o.quantity),sum(asm.mrp*o.quantity)*0.15) COGS, sum(case when lower(payment_gateway_mapped) = \'prepaid\' then o.total_sales*0.01 when lower(payment_gateway_mapped) = \'cod\' then o.total_sales*0.015 end) Gokwik_charge, sum(case when lower(ExpectedWarehouse) like \'%zed%\' then 0 when ExpectedWarehouse is null then 0 else (asm.unit_emiza_cost*o.quantity) end) warehousing_cost_line_item, sum(asm.unit_emiza_cost) unit_emiza_cost, sum(o.quantity) quantity, max(expectedwarehouse) expected_warehouse, max(pezm.expectedzone) expected_zone, max(payment_gateway_mapped) payment_gateway_mapped, sum(asm.mrp*o.quantity*0.008) common_expense_finance, sum(asm.WH_units*o.quantity) WH_units_for_order, sum(asm.sku_weight*o.quantity) order_weight from orders o left join additional_sku_mapping asm on o.sku = asm.sku left join datalake_db.beardo.mst_sku_cogs_map scm on o.sku = scm.\"SKU Code\" left join datalake_db.beardo.mst_pincode_expectedwarehouse_map pewm on pewm.pincode = o.pincode left join datalake_db.beardo.mst_pincode_expectedzone_map pezm on pezm.pincode = o.pincode group by 1,2,3,4 ) ;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from PRD_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        