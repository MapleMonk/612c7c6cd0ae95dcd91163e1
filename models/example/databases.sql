{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "--Create table for All Customers using individual Country tables-- CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_customers AS select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_customers UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_customers UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_customers UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_customers UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_customers UNION ALL select *,\'Shopify_USA_Wholesale\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSAWHOLESALE_customers; --Create table for All Orders using individual Country tables-- CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders AS select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_orders UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_orders UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_orders UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_orders UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_orders UNION ALL select *,\'Shopify_USA_Wholesale\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSAWHOLESALE_orders; ALTER TABLE Vahdam_db.maplemonk.Shopify_All_orders RENAME COLUMN _AIRBYTE_SHOPIFYINDIA_ORDERS_HASHID to _AIRBYTE_ORDERS_HASHID; --Create table for All Products using individual Country tables-- CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_products AS select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_products UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_products UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_products UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_products UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_products UNION ALL select *,\'Shopify_USA_Wholesale\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSAWHOLESALE_products; ALTER TABLE Vahdam_db.maplemonk.Shopify_All_products RENAME COLUMN _AIRBYTE_SHOPIFYINDIA_PRODUCTS_HASHID to _AIRBYTE_PRODUCTS_HASHID; --Create table for All Products Variants using individual Country tables-- CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_products_variants AS select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_products_variants UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_products_variants UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_products_variants UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_products_variants UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_products_variants UNION ALL select *,\'Shopify_USA_Wholesale\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSAWHOLESALE_products_variants; ALTER TABLE Vahdam_db.maplemonk.Shopify_All_products_variants RENAME COLUMN _AIRBYTE_SHOPIFYINDIA_PRODUCTS_HASHID to _AIRBYTE_PRODUCTS_HASHID; --[OLD TABLE] Create table for All Orders line items using individual Country tables-- //CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders_line_items AS //select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_orders_line_items UNION ALL //select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_orders_line_items UNION ALL //select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_orders_line_items UNION ALL //select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_orders_line_items UNION ALL //select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_orders_line_items UNION ALL //select *,\'Shopify_USA_Wholesale\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSAWHOLESALE_orders_line_items; //ALTER TABLE Vahdam_db.maplemonk.Shopify_All_orders_line_items RENAME COLUMN _AIRBYTE_SHOPIFYINDIA_ORDERS_HASHID to _AIRBYTE_ORDERS_HASHID; --Create table for All Customers addresses using individual Country tables-- CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_customers_addresses AS select *,\'Shopify_India\' AS Shop_Name from Vahdam_db.maplemonk.shopifyindia_customers_addresses UNION ALL select *,\'Shopify_USA\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSA_customers_addresses UNION ALL select *,\'Shopify_Global\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGlobal_customers_addresses UNION ALL select *,\'Shopify_Germany\' AS Shop_Name from Vahdam_db.maplemonk.shopifyGermany_customers_addresses UNION ALL select *,\'Shopify_Italy\' AS Shop_Name from Vahdam_db.maplemonk.shopifyItaly_customers_addresses UNION ALL select *,\'Shopify_USA_Wholesale\' AS Shop_Name from Vahdam_db.maplemonk.shopifyUSAWHOLESALE_customers_addresses; --CREATE LINE ITEM DISCOUNT TABLE-- CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders_items_discount AS SELECT order_id, LINE_ITEM_ID, SUM(B.VALUE:amount::FLOAT) AS DISCOUNT FROM( SELECT id AS order_id, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:discount_allocations AS discount_allocations FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A)x,LATERAL FLATTEN (INPUT => x.discount_allocations)B GROUP BY ORDER_ID, LINE_ITEM_ID; --CREATE LINE ITEM TAX TABLE-- CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders_items_tax AS SELECT order_id, LINE_ITEM_ID, SUM(B.VALUE:price::FLOAT) AS TAX FROM( SELECT id AS order_id, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:tax_lines AS tax_lines FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A)x,LATERAL FLATTEN (INPUT => x.tax_lines)B GROUP BY order_id, LINE_ITEM_ID; --CREATE REFUNDS TABLE-- CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_Refunds AS SELECT Name, ID AS Order_ID, Shop_name, C.value:line_item_id AS line_item_id, SUM(C.VALUE:quantity) AS quantity, SUM(C.VALUE:subtotal) AS subtotal FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN(INPUT => refunds)A, LATERAL FLATTEN(INPUT=>A.value)B, LATERAL FLATTEN(INPUT => B.value) C WHERE C.value:line_item_id IS NOT null GROUP BY Name, ID, Shop_name, C.value:line_item_id; --CREATE ALL ORDERS LINE ITEM TABLE-- CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders_items AS WITH CTE AS (SELECT SHOP_NAME, ID::VARCHAR(16777216) AS ORDER_ID, NAME AS ORDER_NAME, CUSTOMER, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:sku::STRING AS SKU, A.VALUE:product_id::STRING AS PRODUCT_ID, A.VALUE:title::STRING AS PRODUCT_NAME, CURRENCY, CASE WHEN cancelled_at IS NOT NULL THEN \'CANCELLED\' ELSE \'Shopify_Processed\' END AS order_status, CREATED_AT::DATETIME AS order_timestamp, A.VALUE:price::FLOAT * A.VALUE:quantity::FLOAT AS LINE_ITEM_SALES, (TOTAL_SHIPPING_PRICE_SET:presentment_money:amount::FLOAT/ COUNT(ORDER_ID) OVER(PARTITION BY ORDER_ID ORDER BY ORDER_ID)) AS SHIPPING_PRICE, A.VALUE:quantity::FLOAT as QUANTITY, \'Shopify\' AS Source FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A) SELECT CTE.*, IFNULL(T.TAX,0) AS TAX, IFNULL(D.DISCOUNT,0) AS DISCOUNT, CTE.LINE_ITEM_SALES - IFNULL(D.DISCOUNT,0) + IFNULL(CTE.SHIPPING_PRICE,0) AS NET_SALES, CASE WHEN R.QUANTITY IS NOT NULL THEN 1 ELSE 0 END AS IS_REFUND FROM CTE LEFT JOIN Vahdam_db.maplemonk.Shopify_All_orders_items_tax T ON CTE.ORDER_ID = T.ORDER_ID AND CTE.LINE_ITEM_ID = T.LINE_ITEM_ID LEFT JOIN Vahdam_db.maplemonk.Shopify_All_orders_items_discount D ON CTE.ORDER_ID = D.ORDER_ID AND CTE.LINE_ITEM_ID = D.LINE_ITEM_ID LEFT JOIN Vahdam_db.maplemonk.Shopify_All_Refunds R ON CTE.ORDER_ID = R.ORDER_ID AND CTE.LINE_ITEM_ID = R.LINE_ITEM_ID; --Create FACT ITEMS Table-- CREATE OR REPLACE TABLE Vahdam_db.maplemonk.FACT_ITEMS AS SELECT O.SHOP_NAME, O.ORDER_ID, O.ORDER_NAME, O.CUSTOMER:id::int AS customer_id, O.LINE_ITEM_ID, O.SKU, O.PRODUCT_ID, CASE WHEN O.PRODUCT_NAME IS NULL THEN \'NA\' ELSE O.PRODUCT_NAME END AS PRODUCT_NAME, // PV.barcode, O.CURRENCY, O.IS_REFUND, CASE WHEN CD.city IS NULL OR CD.city = \'\' THEN \'NA\' ELSE CD.city END AS city, CASE WHEN CD.province IS NULL OR CD.province = \'\' THEN \'NA\' ELSE CD.province END AS state, CASE WHEN P.product_type = \'\' THEN \'NA\' ELSE P.product_type END AS category, O.order_status, O.order_timestamp, O.LINE_ITEM_SALES, O.SHIPPING_PRICE, O.QUANTITY, O.TAX, O.DISCOUNT, O.NET_SALES, O.Source FROM Vahdam_db.maplemonk.Shopify_All_orders_items O LEFT JOIN Vahdam_db.maplemonk.Shopify_All_products P ON O.PRODUCT_ID = P.id //LEFT JOIN (SELECT DISTINCT _AIRBYTE_PRODUCTS_HASHID, // barcode // FROM Vahdam_db.maplemonk.Shopify_All_products_variants // WHERE barcode<>\'\') PV //ON P._AIRBYTE_PRODUCTS_HASHID = PV._AIRBYTE_PRODUCTS_HASHID LEFT JOIN(SELECT customer_id, city, province, row_number() OVER ( partition BY customer_id ORDER BY id DESC) rowid FROM Vahdam_db.maplemonk.Shopify_All_customers_addresses) AS CD ON O.CUSTOMER:id::int = CD.customer_id AND CD.rowid = 1; UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS A SET A.city=case when B.\"New city\" is null then INITCAP(A.city) else INITCAP(B.\"New city\") end FROM Vahdam_db.maplemonk.shopify_all_cities_mapping B WHERE UPPER(A.city)=UPPER(B.city); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN customer_flag varchar(50); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN new_customer_flag varchar(50); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN acquisition_channel varchar(16777216); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN acquisition_product varchar(16777216); UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS A SET A.customer_flag = B.flag FROM ( SELECT DISTINCT order_id, customer_id, order_timestamp, CASE WHEN order_timestamp <> Min(order_timestamp) OVER ( partition BY customer_id) THEN \'Repeated\' ELSE \'New\' END AS Flag FROM Vahdam_db.maplemonk.FACT_ITEMS)AS B WHERE A.order_id = B.order_id AND A.customer_id = B.customer_id; UPDATE Vahdam_db.maplemonk.FACT_ITEMS SET customer_flag = CASE WHEN customer_flag IS NULL THEN \'New\' ELSE customer_flag END; UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS A SET A.new_customer_flag = B.flag FROM ( SELECT DISTINCT order_id, customer_id, order_timestamp, CASE WHEN Last_day(order_timestamp, \'month\') <> Last_day(Min(order_timestamp) OVER ( partition BY customer_id)) THEN \'Repeated\' ELSE \'New\' END AS Flag FROM Vahdam_db.maplemonk.FACT_ITEMS)AS B WHERE A.order_id = B.order_id AND A.customer_id = B.customer_id; UPDATE Vahdam_db.maplemonk.FACT_ITEMS SET new_customer_flag = CASE WHEN new_customer_flag IS NULL THEN \'New\' ELSE new_customer_flag END; CREATE OR replace temporary TABLE Vahdam_db.maplemonk.temp_source AS SELECT DISTINCT customer_id, source FROM ( SELECT DISTINCT customer_id, order_timestamp, source, Min(order_timestamp) OVER ( partition BY customer_id) firstOrderdate FROM Vahdam_db.maplemonk.FACT_ITEMS)res WHERE order_timestamp=firstorderdate; UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS a SET a.acquisition_channel=b.source FROM Vahdam_db.maplemonk.temp_source b WHERE a.customer_id = b.customer_id; CREATE OR replace temporary TABLE Vahdam_db.maplemonk.temp_product AS SELECT DISTINCT customer_id, product_name, Row_number() OVER (partition BY customer_id ORDER BY LINE_ITEM_SALES DESC) rowid FROM ( SELECT DISTINCT customer_id, order_timestamp, product_name, LINE_ITEM_SALES , Min(order_timestamp) OVER (partition BY customer_id) firstOrderdate FROM Vahdam_db.maplemonk.FACT_ITEMS )res WHERE order_timestamp=firstorderdate; UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS A SET A.acquisition_product=B.product_name FROM ( SELECT * FROM Vahdam_db.maplemonk.temp_product WHERE rowid=1)B WHERE A.customer_id = B.customer_id; --Including INR Sales and Category into Fact Items table-- CREATE OR REPLACE TEMPORARY TABLE Vahdam_db.maplemonk.FACT_ITEMS_TEMP AS ( SELECT FI.*, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.LINE_ITEM_SALES * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.LINE_ITEM_SALES WHEN FI.CURRENCY = \'USD\' THEN FI.LINE_ITEM_SALES * EX.USD_INR END AS LINE_ITEM_SALES_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.TAX * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.TAX WHEN FI.CURRENCY = \'USD\' THEN FI.TAX * EX.USD_INR END AS TAX_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.DISCOUNT * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.DISCOUNT WHEN FI.CURRENCY = \'USD\' THEN FI.DISCOUNT * EX.USD_INR END AS DISCOUNT_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.NET_SALES * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.NET_SALES WHEN FI.CURRENCY = \'USD\' THEN FI.NET_SALES * EX.USD_INR END AS NET_SALES_INR FROM Vahdam_db.maplemonk.FACT_ITEMS FI LEFT JOIN( SELECT date, RATES:INR AS EUR_INR, (RATES:EUR/RATES:USD)*RATES:INR AS USD_INR FROM( SELECT *, ROW_NUMBER()OVER(PARTITION BY BASE, DATE ORDER BY _AIRBYTE_EMITTED_AT DESC) RW FROM VAHDAM_DB.MAPLEMONK.EXCHANGE_RATES ) A WHERE RW = 1 ) EX ON FI.ORDER_TIMESTAMP::DATE = EX.date WHERE FI.ORDER_TIMESTAMP::DATE >= \'2021-12-01\' UNION ALL SELECT FI.*, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.LINE_ITEM_SALES * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.LINE_ITEM_SALES WHEN FI.CURRENCY = \'USD\' THEN FI.LINE_ITEM_SALES * EX.USD_INR END AS LINE_ITEM_SALES_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.TAX * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.TAX WHEN FI.CURRENCY = \'USD\' THEN FI.TAX * EX.USD_INR END AS TAX_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.DISCOUNT * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.DISCOUNT WHEN FI.CURRENCY = \'USD\' THEN FI.DISCOUNT * EX.USD_INR END AS DISCOUNT_INR, CASE WHEN FI.CURRENCY = \'EUR\' THEN FI.NET_SALES * EX.EUR_INR WHEN FI.CURRENCY = \'INR\' THEN FI.NET_SALES WHEN FI.CURRENCY = \'USD\' THEN FI.NET_SALES * EX.USD_INR END AS NET_SALES_INR FROM Vahdam_db.maplemonk.FACT_ITEMS FI LEFT JOIN( SELECT DATE, USD_INR, USD_INR/USD_EUR AS EUR_INR FROM (SELECT YEARMONTH , DATEFROMPARTS(LEFT(YEARMONTH,4),RIGHT(YEARMONTH,2),01) AS DATE, SUM(CASE WHEN LOCATION = \'IND\' THEN VALUE END) AS USD_INR, SUM(CASE WHEN LOCATION = \'EA19\' THEN VALUE END) AS USD_EUR FROM Vahdam_db.maplemonk.HISTORICAL_MONTHLY_EXCHANGE_RATES WHERE LOCATION IN (\'EA19\',\'IND\') AND DATEFROMPARTS(LEFT(YEARMONTH,4),RIGHT(YEARMONTH,2),01)<\'2021-12-01\' GROUP BY YEARMONTH, DATEFROMPARTS(LEFT(YEARMONTH,4),RIGHT(YEARMONTH,2),01))B ) EX ON date_trunc(\'MONTH\', FI.ORDER_TIMESTAMP::DATE) = date_trunc(\'MONTH\', EX.date::DATE) WHERE FI.ORDER_TIMESTAMP::DATE < \'2021-12-01\'); ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN LINE_ITEM_SALES_INR float; ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN TAX_INR float; ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN DISCOUNT_INR float; ALTER TABLE Vahdam_db.maplemonk.FACT_ITEMS ADD COLUMN NET_SALES_INR float; UPDATE Vahdam_db.maplemonk.FACT_ITEMS AS FI1 SET FI1.LINE_ITEM_SALES_INR = FI2.LINE_ITEM_SALES_INR, FI1.TAX_INR = FI2.TAX_INR, FI1.DISCOUNT_INR = FI2.DISCOUNT_INR, FI1.NET_SALES_INR = FI2.NET_SALES_INR FROM Vahdam_db.maplemonk.FACT_ITEMS_TEMP AS FI2 WHERE FI1.ORDER_ID = FI2.ORDER_ID AND FI1.LINE_ITEM_ID = FI2.LINE_ITEM_ID; --CREATE LINE ITEM DISCOUNT TABLE-- CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders_items_discount AS SELECT order_id, LINE_ITEM_ID, sum(B.VALUE:amount::FLOAT) AS DISCOUNT FROM( SELECT id as order_id, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:discount_allocations AS discount_allocations FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A)x,LATERAL FLATTEN (INPUT => x.discount_allocations)B GROUP BY ORDER_ID, LINE_ITEM_ID; --CREATE LINE ITEM TAX TABLE-- CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders_items_tax AS SELECT order_id, LINE_ITEM_ID, SUM(B.VALUE:price::FLOAT) AS TAX FROM( SELECT id as order_id, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:tax_lines AS tax_lines FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A)x,LATERAL FLATTEN (INPUT => x.tax_lines)B GROUP BY order_id, LINE_ITEM_ID; --CREATE REFUNDS TABLE-- CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_Refunds AS SELECT Name, ID AS Order_ID, Shop_name, C.value:line_item_id AS line_item_id, SUM(C.VALUE:quantity) AS quantity, SUM(C.VALUE:subtotal) AS subtotal FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN(INPUT => refunds)A, LATERAL FLATTEN(INPUT=>A.value)B, LATERAL FLATTEN(INPUT => B.value) C WHERE C.value:line_item_id IS NOT null GROUP BY Name, ID, Shop_name, C.value:line_item_id; --CREATE ALL ORDERS LINE ITEM TABLE-- CREATE OR REPLACE TABLE Vahdam_db.maplemonk.Shopify_All_orders_items AS WITH CTE AS (SELECT SHOP_NAME, ID::VARCHAR(16777216) AS ORDER_ID, NAME AS ORDER_NAME, A.VALUE:id AS LINE_ITEM_ID, A.VALUE:sku::STRING AS PRODUCT_ID, A.VALUE:title::STRING AS PRODUCT_NAME, CURRENCY, CASE WHEN cancelled_at IS NOT NULL THEN \'CANCELLED\' ELSE \'Shopify_Processed\' END AS order_status, CREATED_AT::DATETIME AS order_timestamp, A.VALUE:price::FLOAT * A.VALUE:quantity::FLOAT AS LINE_ITEM_SALES, (TOTAL_SHIPPING_PRICE_SET:presentment_money:amount::FLOAT/ COUNT(ORDER_ID) OVER(PARTITION BY ORDER_ID ORDER BY ORDER_ID)) AS SHIPPING_PRICE, A.VALUE:quantity::FLOAT as QUANTITY, \'Shopify\' AS Source FROM Vahdam_db.maplemonk.Shopify_All_orders, LATERAL FLATTEN (INPUT => LINE_ITEMS)A) SELECT CTE.*, IFNULL(T.TAX,0) AS TAX, IFNULL(D.DISCOUNT,0) AS DISCOUNT, CTE.LINE_ITEM_SALES AS NET_SALES, CASE WHEN R.QUANTITY IS NOT NULL THEN 1 ELSE 0 END AS IS_REFUND FROM CTE LEFT JOIN Vahdam_db.maplemonk.Shopify_All_orders_items_tax T ON CTE.ORDER_ID = T.ORDER_ID AND CTE.LINE_ITEM_ID = T.LINE_ITEM_ID LEFT JOIN Vahdam_db.maplemonk.Shopify_All_orders_items_discount D ON CTE.ORDER_ID = D.ORDER_ID AND CTE.LINE_ITEM_ID = D.LINE_ITEM_ID LEFT JOIN Vahdam_db.maplemonk.Shopify_All_Refunds R ON CTE.ORDER_ID = R.ORDER_ID AND CTE.LINE_ITEM_ID = R.LINE_ITEM_ID;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from VAHDAM_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        