{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table MM_TEST.NaveenSept7.next_purchase_intermediate_MM_TEST as select last_product, next_product, number, list, share from( select *, row_number() over (partition by last_product order by number desc) list, number/sum(number) over (partition by last_product) Share from ( select b.productname last_product, a.productname next_product, count(*) number from ( select row_number() over (partition by customer_id_final order by order_id) order_number,* from (select dense_rank() over (partition by order_id order by selling_price,product_id desc) rw, * from MM_TEST.NaveenSept7.sales_consolidated_MM_TEST where lower(shop_name) like any (\'%shopify%\',\'%woocommerce%\') ) where rw = 1 )a left join ( select distinct customer_id_final , order_number, productname from (select row_number() over (partition by customer_id_final order by order_id) order_number,* from (select dense_rank() over (partition by order_id order by selling_price,product_id desc) rw, * from MM_TEST.NaveenSept7.sales_consolidated_MM_TEST where lower(shop_name) like any (\'%shopify%\',\'%woocommerce%\') ) where rw = 1 ) ) b on a.order_number = (b.order_number + 1) and a.customer_id_final = b.customer_id_final where b.order_number is not null and b.customer_id_final is not null group by b.productname, a.productname order by 3 desc ) ) where list in (1,2,3); create or replace table MM_TEST.NaveenSept7.next_purchase_MM_TEST as select a.last_product, next_product1, next_product2, next_product3, share1, share2, share3 from (select last_product , next_product as next_product1 , share as share1 from MM_TEST.NaveenSept7.next_purchase_intermediate_MM_TEST where list = 1 ) a left join (select last_product ,next_product as next_product2 ,share as share2 from MM_TEST.NaveenSept7.next_purchase_intermediate_MM_TEST where list = 2 ) b on a.last_product = b.last_product left join (select last_product ,next_product as next_product3 ,share as share3 from MM_TEST.NaveenSept7.next_purchase_intermediate_MM_TEST where list = 3 ) c on a.last_product = c.last_product ; create or replace table MM_TEST.NaveenSept7.customer_master_intermediate as select fi.customer_id_final as MM_Customer_ID, max(fi.customer_name) as Name, max(fi.email) Email, fi.phone as Phone, min(Acquisition_Date) Acquisition_Date , min(case when fi.order_date = Acquisition_Date then marketplace end) as Acquistion_Marketplace, min(case when fi.order_date = Acquisition_Date then channel end) as Acquisition_Marketing_Channel, fi.acquisition_product as Acquisition_Product, datediff(day,min(order_date),current_date) Days_Since_First_Purchase, max(case when fi.order_date=fil.max_order_date then PRODUCTNAME end) Last_Product, ifnull(sum(fi.selling_price),0) Total_Sales_INR, count(distinct fi.order_id) Total_Orders, count(distinct case when lower(order_status) in (\'cancelled\',\'returned\',\'rto\') then fi.order_id) Cancelled_Orders, count(distinct case when lower(order_status) in (\'returned\',\'rto\') then fi.order_id) Returned_Orders, count(distinct case when lower(shop_name) like \'%shopify%\' then fi.order_id end ) as Total_Shopify_Orders, count(distinct case when lower(shop_name) like \'%cred%\' then fi.order_id end ) as Total_CRED_Orders, count(distinct fi.line_item_id) Total_Items, max(case when fi.order_date=fi1.max_order_date then order_id end) Last_Order_Id, datediff(day,max(fi.order_date),current_date) Days_Since_Last_Purchase, case when count(distinct order_id)=0 then null else datediff(day,min(order_date),max(order_date))/count(distinct order_id) end Avg_days_between_purchases, sum(fi.DISCOUNT) discount_inr, case when sum(fi.selling_price)=0 then null else sum(fi.DISCOUNT)/sum(fi.selling_price) end discount_percent from MM_TEST.NaveenSept7.SALES_CONSOLIDATED_MM_TEST fi left join (select customer_id_final, max(order_date) Max_Order_Date from MM_TEST.NaveenSept7.SALES_CONSOLIDATED_MM_TEST group by customer_id_final )fi1 on fi.Customer_Id_Final=fi1.Customer_Id_Final where fi.Customer_Id_Final is not null and Order_Date is not null group by fi.Customer_Id_Final, fi.Phone, fi.Acquisition_Product; create or replace table MM_TEST.NaveenSept7.CUSTOMER_MASTER_MM_TEST as select x.*, np.next_product1, np.next_product2, np.next_product3, np.share1, np.share2, np.share3, rcm.category as Customer_Segment from (select c.*, m.Score as M_Score, r.Score as R_Score, f.Score as F_Score, (r.Score*1/3+f.Score*1/3+m.Score*1/3) as RFM_Score from (select *, row_number () over (order by TOTAL_Sales_INR desc)/ (select count (distinct CUSTOMER_ID_FINAL) from MM_TEST.NaveenSept7.Customer_Master_Intermediate) as Percentile_M, row_number() over(order by DAYS_SINCE_LAST_PURCHASE asc,CUSTOMER_ID_FINAL)/(select count(distinct CUSTOMER_ID_FINAL) from MM_TEST.NaveenSept7.Customer_Master_Intermediate) as Percentile_R, case when AVG_DAYS_BETWEEN_PURCHASES=0 then 0.4 else row_number () over (partition by case when AVG_DAYS_BETWEEN_PURCHASES=0 then 0 else 1 end order by AVG_DAYS_BETWEEN_PURCHASES asc,CUSTOMER_ID_FINAL) /(select count(distinct CUSTOMER_ID_FINAL) from MM_TEST.NaveenSept7.Customer_Master_Intermediate) end as Percentile_F from MM_TEST.NaveenSept7.Customer_Master_Intermediate) c left join MM_TEST.NaveenSept7.RFM_Score m on c.Percentile_M > m.\"Lower Limit\" and c.Percentile_M<=m.\"Upper Limit\" left join MM_TEST.NaveenSept7.RFM_Score r on c.Percentile_R > r.\"Lower Limit\" and c.Percentile_R<=r.\"Upper Limit\" left join MM_TEST.NaveenSept7.RFM_Score f on c.Percentile_F > f.\"Lower Limit\" and c.Percentile_F<=f.\"Upper Limit\" )x left join MM_TEST.NaveenSept7.RFM_CUSTOMER_CATEGORY_MAPPING rcm on x.M_Score::int>rcm.M_START::int and x.M_Score::int<=M_END::int and x.R_Score::int>rcm.R_START::int and x.R_Score::int<=R_END::int and x.F_Score::int>rcm.F_START::int and x.F_Score::int<=F_END::int Left join MM_TEST.NaveenSept7.next_purchase_MM_TEST np On np.last_product = x.last_product ;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from MM_TEST.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        