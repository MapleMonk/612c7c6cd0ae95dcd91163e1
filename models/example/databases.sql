{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table xyxx_db.maplemonk.shipping_cost_by_order as select ordeR_name, ordeR_Status_final, case when ordeR_Status_final = \'EXCHANGE\' then shipping_cost*2 else shipping_cost end as shipping_cost from ( select ordeR_name, order_status_final, case when outerwear_flag > 0 and total_quantity <2 then 1 when outerwear_flag > 0 and total_quantity >=2 and total_quantity <=4 then 2 when outerwear_flag > 0 and total_quantity >4 then 2 + ceil(div0(total_value,2000)) when outerwear_flag = 0 and total_quantity <= 5 then 0.5 when outerwear_flag = 0 and total_quantity > 5 and total_quantity <= 7 then 1 when outerwear_flag = 0 and total_quantity > 7 then 1.5 end as weight_slab, case when order_status_final = \'CANCELLED\' then 0 when lower(courier) like \'%blue%\' and bluedart_zone = \'A\' and ifnull(payment_method,\'Unknown\') = \'COD\' then 27 + div0((weight_slab - 0.5),0.5)*27 + 24.84 + 3.942 + 30 when lower(courier) like \'%blue%\' and bluedart_zone = \'A\' and ifnull(payment_method,\'Unknown\') <> \'COD\' then 27 + div0((weight_slab - 0.5),0.5)*27 + 24.84 + 3.942 when lower(courier) like \'%blue%\' and bluedart_zone = \'B\' and ifnull(payment_method,\'Unknown\') = \'COD\' then 32 + div0((weight_slab - 0.5),0.5)*32 + 29.44 + 4.672 + 30 when lower(courier) like \'%blue%\' and bluedart_zone = \'B\' and ifnull(payment_method,\'Unknown\') <> \'COD\' then 32 + div0((weight_slab - 0.5),0.5)*32 + 29.44 + 4.672 when lower(courier) like \'%blue%\' and bluedart_zone = \'C\' and ifnull(payment_method,\'Unknown\') = \'COD\' then 36 + div0((weight_slab - 0.5),0.5)*26 + 33.12 + 4.756 + 30 when lower(courier) like \'%blue%\' and bluedart_zone = \'C\' and ifnull(payment_method,\'Unknown\') <> \'COD\' then 36 + div0((weight_slab - 0.5),0.5)*26 + 33.12 + 4.756 when lower(courier) like \'%ithink%\' and ithink_zone = \'A or B\' then 35 + div0((weight_slab - 0.5),0.5)*35 when lower(courier) like \'%ithink%\' and ithink_zone = \'D\' then 64 + div0((weight_slab - 0.5),0.5)*62 when lower(courier) like \'%ithink%\' and ithink_zone = \'E or F\' then 77 + div0((weight_slab - 0.5),0.5)*75 end as shipping_cost from ( select order_name, case when exchange_flag = 1 then \'EXCHANGE\' else order_Status end as ordeR_status_final, courier, ifnull(b.ithink_zone,\'D\') ithink_zone, ifnull(b.bluedart_zone,\'B\') bluedart_zone, a.payment_method, sum(quantity) total_quantity, sum(selling_price) total_value, sum(case when product_category not in (\'TRUNK\', \'BRIEF\',\'BOXER\', \'BOXER SHORTS\') then 1 else 0 end ) outerwear_flag from XYXX_DB.maplemonk.sales_consolidated_XYXX a left join (select * from ( select *, row_number() over (partition by pin_code order by 1) rw from XYXX_DB.maplemonk.zone_mapping ) where rw=1) b on a.pincode = b.pin_code where lower(shop_name) in (\'shopify_india\', \'cred\') group by 1,2,3,4,5,6 ) ) ; create or replace table xyxx_db.maplemonk.packaging_cost_by_order as select ordeR_name, ordeR_status_final, case when ordeR_status_final = \'CANCELLED\' then 0 when ordeR_status_final = \'EXCHANGE\' then case when outerwear_flag > 0 and total_quantity <3 then 31*2 when outerwear_flag > 0 and total_quantity >=3 and total_quantity <=5 then 62*2 when outerwear_flag > 0 and total_quantity >5 then (62 + ceil(div0(total_value,2000))*31)*2 when outerwear_flag = 0 and total_quantity <= 3 then 23*2 when outerwear_flag = 0 and total_quantity > 3 and total_quantity <= 6 then 15*2 when outerwear_flag = 0 and total_quantity > 6 then 31*2 end else case when outerwear_flag > 0 and total_quantity <3 then 31 when outerwear_flag > 0 and total_quantity >=3 and total_quantity <=5 then 62 when outerwear_flag > 0 and total_quantity >5 then 62 + ceil(div0(total_value,2000))*31 when outerwear_flag = 0 and total_quantity <= 3 then 23 when outerwear_flag = 0 and total_quantity > 3 and total_quantity <= 6 then 15 when outerwear_flag = 0 and total_quantity > 6 then 31 end end as packaging_cost from( select order_name, case when exchange_flag = 1 then \'EXCHANGE\' else order_Status end as ordeR_status_final, sum(quantity) total_quantity, sum(selling_price) total_value, sum(case when product_category not in (\'TRUNK\', \'BRIEF\',\'BOXER\', \'BOXER SHORTS\') then 1 else 0 end ) outerwear_flag from XYXX_DB.maplemonk.sales_consolidated_XYXX a where lower(shop_name) in (\'shopify_india\', \'cred\') group by 1,2 ) ; create or replace table xyxx_db.maplemonk.PandL_xyxx as select * from ( select row_number() over (partition by order_id, SALEORDERITEMCODE order by commission_value desc) rw ,SALEORDERITEMCODE ,a.source as Marketing_Source ,a.channel as Marketing_Channel ,a.order_date as Date ,a.selling_price Gross_sale ,d.MRP*quantity MRP ,case when lower(coalesce(a.final_status,\'1\')) not in (\'canceled\',\'rto\') then d.cogs*quantity else 0 end as COGS ,a.order_id ,a.sku , a.shop_name , a.awb ,a.quantity ,a.shippingpackagecode , b.status shipment_partner_Status , a.order_Status , a.unicommerce_shipping_status ,a.final_status ,payment_method ,upper(coalesce(a.product_name, d.product_name)) PRODUCT_NAME ,upper(coalesce(a.product_sub_category, d.product_sub_category)) product_sub_category ,upper(coalesce(a.product_category, d.product_category)) PRODUCT_CATEGORY ,upper(a.product_super_category) PRODUCT_SUPER_CATEGORY ,b.shipment_aggregator ,a.order_name ,a.quantity*ifnull(v.cost,0) GIFTS_EXPENSE ,div0(scbo.shipping_cost, count(1) over (partition by order_id)) Logistics ,div0(case when lower(a.final_status) = \'rto\' then b.return_shipping_charges else 0 end,count(1) over (partition by order_id)) as Return_Charges ,div0(pcbo.packaging_cost, count(1) over (partition by order_id)) packaging_cost ,div0((case when lower(final_status) in (\'rto\',\'canceled\') then 0 else coalesce(b.cod_charges,case when lower(a.payment_method) = \'cod\' then e.cod_charges end) end ),count(1) over (partition by order_id) ) Cash_Collection_Charges , f.payment_details , f.SUCCESS_PAYMENT_GATEWAY , div0(ifnull(case when lower(f.SUCCESS_PAYMENT_GATEWAY) like \'%razor%\' then f.transaction_fee else (case when lower(f2.detail) like \'%percent%\' then f2.charges*a.selling_price when lower(f2.detail) like \'%flat%\' then f2.charges end) end,0),count(1) over (partition by a.order_id)) as transaction_fee ,div0(ifnull(g.spend,0), count(1) over (partition by a.order_Date::date, a.channel)) as Paid_Marketing_Google ,div0(ifnull(h.spend,0), count(1) over (partition by a.order_Date::date, a.channel)) as Paid_Marketing_Facebook ,div0(ifnull(h1.spend,0), count(1) over (partition by a.order_Date::date, a.channel)) as Paid_Marketing_Facebook_Branding ,div0(ifnull(i.charges,0), count(1) over (partition by a.channel, month(a.order_Date), year(a.order_Date))) as Paid_Marketing_CRED ,div0(ifnull(j.charges,0), count(1) over (partition by month(a.order_Date), year(a.order_date))) as Paid_Marketing_Affiliates ,div0(ifnull(k.charges,0), count(1) over (partition by month(a.order_Date), year(a.order_Date), a.channel)) as Paid_Marketing_Bing ,a.selling_price*(replace(l.charges,\'%\',\'\')::float)/100 Shopify_transaction_fee ,div0(ifnull(m.charges,0), count(1) over (partition by month(a.order_Date), year(a.order_Date))) as Shopify_hosting_fee ,div0(ifnull(n.charges,0), count(1) over (partition by month(a.order_Date), year(a.order_Date))) as Semrush ,div0(ifnull(o.charges,0), count(1) over (partition by month(a.order_Date), year(a.order_Date))) as LaterGram ,div0(ifnull(p.total_cost,0), count(1) over (partition by a.order_Date::date)) as SMS_partner ,div0(ifnull(q.charges::float,0), count(1) over (partition by month(a.order_Date), year(a.order_Date),lower(a.channel))) as Contlo ,div0(ifnull(r.charges,0), count(1) over (partition by month(a.order_Date), year(a.order_Date))) as Telephone ,div0(ifnull(s.charges,0), count(1) over (partition by month(a.order_Date), year(a.order_Date))) as AgoraPulse ,div0(ifnull(t.charges,0), count(1) over (partition by month(a.order_Date), year(a.order_Date))) as MailChimp ,u.commission_value ,u.commission_type ,case when lower(marketing_channel) like any (\'%cred%\', \'%affiliate%\') then (case when lower(ifnull(u.commission_type,\'cps\')) = \'cps\' and lower(final_status) not in (\'canceled\',\'rto\') then ifnull(u.commission_value::float,0.5)*a.selling_price when lower(u.commission_type) = \'flat fee per order\' and lower(final_status) not in (\'canceled\', \'rto\') then div0(ifnull(u.commission_value::float,0), count(1) over (partition by order_id)) end) end as affiliate_commission, shopify_discount, sum(quantity) over (partition by ordeR_id) order_quantity, case when discount_code = \'Custom discount\' and order_quantity = 1 then \'Custom discount 1\' when discount_code = \'Custom discount\' and order_quantity = 2 then \'Custom discount 2\' when discount_code = \'Custom discount\' and order_quantity = 3 then \'Custom discount 3\' when discount_code = \'Custom discount\' and order_quantity = 4 then \'Custom discount 4\' when discount_code = \'Custom discount\' and order_quantity = 5 then \'Custom discount 5\' when discount_code = \'Custom discount\' and order_quantity > 5 then \'Custom discount >5\' else discount_code end as discount_code, sum(ifnull(shopify_discount,0)) over (partition by ordeR_id) order_discount, sum(ifnull(gross_sale,0)) over (partition by ordeR_id) order_gross_sale, case when div0(order_discount,order_gross_sale+order_discount) = 0 then \'0 %\' when div0(order_discount,order_gross_sale+order_discount) > 0 and div0(order_discount,order_gross_sale+order_discount) <= 0.1 then \'0 - 10 %\' when div0(order_discount,order_gross_sale+order_discount) > 0.1 and div0(order_discount,order_gross_sale+order_discount) <= 0.2 then \'10 - 20 %\' when div0(order_discount,order_gross_sale+order_discount) > 0.2 and div0(order_discount,order_gross_sale+order_discount) <= 0.3 then \'20 - 30 %\' when div0(order_discount,order_gross_sale+order_discount) > 0.3 and div0(order_discount,order_gross_sale+order_discount) <= 0.4 then \'30 - 40 %\' when div0(order_discount,order_gross_sale+order_discount) > 0.4 and div0(order_discount,order_gross_sale+order_discount) <= 0.5 then \'40 - 50 %\' when div0(order_discount,order_gross_sale+order_discount) > 0.5 then \'>50 %\' end as discount_buckets, case when div0(shopify_discount,gross_sale+shopify_discount) = 0 then \'0 %\' when div0(shopify_discount,gross_sale+shopify_discount) > 0 and div0(shopify_discount,gross_sale+shopify_discount) <= 0.1 then \'0 - 10 %\' when div0(shopify_discount,gross_sale+shopify_discount) > 0.1 and div0(shopify_discount,gross_sale+shopify_discount) <= 0.2 then \'10 - 20 %\' when div0(shopify_discount,gross_sale+shopify_discount) > 0.2 and div0(shopify_discount,gross_sale+shopify_discount) <= 0.3 then \'20 - 30 %\' when div0(shopify_discount,gross_sale+shopify_discount) > 0.3 and div0(shopify_discount,gross_sale+shopify_discount) <= 0.4 then \'30 - 40 %\' when div0(shopify_discount,gross_sale+shopify_discount) > 0.4 and div0(shopify_discount,gross_sale+shopify_discount) <= 0.5 then \'40 - 50 %\' when div0(shopify_discount,gross_sale+shopify_discount) > 0.5 then \'>50 %\' end as discount_buckets_line_items, new_customer_flag, customer_id_final, case when new_customer_flag = \'Repeat\' then LAG(order_date) IGNORE NULLS OVER (partition by customer_id_final ORDER BY ordeR_date) end previous_date, datediff(day,previous_date,order_Date) days_from_last_order from XYXX_DB.maplemonk.sales_consolidated_XYXX a left join (select * from (select shipment_aggregator,awb,status,forward_shipping_charges, COD_Charges, return_shipping_charges, row_number() over (partition by awb order by updated_date desc) rw from xyxx_db.maplemonk.logistics_fact_items_xyxx) where rw=1 ) b on a.awb = b.awb left join (select * from (select sku_id, start_date, end_date, product_sub_category, product_category, product_name, try_to_double(mrp) mrp, try_to_double(cogs) cogs, row_number() over (partition by sku_id, start_date, end_date order by mrp desc) rw from xyxx_db.maplemonk.mapping_product_mrp_cogs) where rw=1) d on d.sku_id = a.sku and to_date(a.order_date)::date >= to_date(start_date) and to_date(a.order_date)::date <= to_date(end_date) left join (select * from (select *, row_number() over (partition by lower(partner), to_date::date, from_Date::date order by 1) rw from xyxx_db.maplemonk.mapping_shipment_cost) where rw =1) e on e.from_date::date <= a.order_date::date and e.to_date::date >=a.order_date::date and lower(a.courier) = lower(e.partner) left join xyxx_db.maplemonk.shopify_all_order_level_payment_summary f on a.order_name = f.order_name left join (select to_date::Date to_Date , from_date::Date from_date , partner , detail , case when lower(detail) like \'%percent%\' then replace(charges,\'%\',\'\')/100 when lower(detail) like \'%flat%\' then replace(charges,\',\',\'\') end as charges from xyxx_db.maplemonk.mapping_payment_cost ) f2 on a.order_Date::date >= to_date(f2.from_date) and a.order_Date::date <= to_Date(f2.TO_DATE) and lower(f.SUCCESS_PAYMENT_GATEWAY) = lower(f2.partner) left join (select date, sum(spend) spend from xyxx_db.maplemonk.marketing_consolidated_xyxx where lower(channel) like \'%google%\' group by date) g on g.date = a.order_Date::date and lower(a.channel) = \'google\' left join (select date, sum(spend) spend from xyxx_db.maplemonk.marketing_consolidated_xyxx where lower(channel) like \'%facebook%\' and not(lower(campaign_name) like \'%insta-link-click-only%\') group by date) h on h.date = a.order_Date::date and lower(a.channel) = \'facebook\' left join (select date, sum(spend) spend from xyxx_db.maplemonk.marketing_consolidated_xyxx where lower(channel) like \'%facebook%\' and lower(campaign_name) like \'%insta-link-click-only%\' and date >= \'2023-06-01\' and date <=\'2023-06-27\' group by date order by date desc) h1 on h1.date = a.order_Date::date and lower(a.channel) = \'facebook\' left join (select replace(charges,\',\',\'\')::float charges, partner, to_Date,from_date from xyxx_db.maplemonk.mapping_marketing_costs where partner = \'CRED\') i on a.order_Date::date >= to_date(i.from_date) and a.order_Date::date <= to_Date(i.to_Date) and lower(a.channel) = \'cred\' left join (select replace(charges,\',\',\'\')::float charges, partner, to_Date,from_date from xyxx_db.maplemonk.mapping_marketing_costs where partner = \'Affiliates\') j on a.order_Date::date >= to_Date(j.from_date) and a.order_Date::date <= to_date(j.to_Date) left join (select replace(charges,\',\',\'\')::float charges, partner, to_Date,from_date from xyxx_db.maplemonk.mapping_marketing_costs where partner = \'Bing\') k on a.order_Date::date >= to_Date(k.from_date) and a.order_Date::date <= to_date(k.to_Date) and lower(a.channel) = \'bing\' left join (select * from xyxx_db.maplemonk.mapping_tool_costs where partner = \'Shopify\' and type = \'Transaction Fee\' order by to_date) l on a.order_Date::date >= to_Date(l.from_date) and a.order_Date::date <= to_date(l.to_Date) left join (select * from xyxx_db.maplemonk.mapping_tool_costs where partner = \'Shopify\' and type = \'Hosting Fee\') m on a.order_Date::date >= to_Date(m.from_date) and a.order_Date::date <= to_date(m.to_Date) left join (select * from xyxx_db.maplemonk.mapping_tool_costs where partner = \'SemRush\' ) n on a.order_Date::date >= to_Date(n.from_date) and a.order_Date::date <= to_date(n.to_Date) left join (select * from xyxx_db.maplemonk.mapping_tool_costs where partner = \'LaterGram\' ) o on a.order_Date::date >= to_Date(o.from_date) and a.order_Date::date <= to_date(o.to_Date) left join (select sent_date, sum(total_cost) total_cost from xyxx_db.maplemonk.contlo_fact_items_xyxx group by 1 order by 1 desc) p on a.order_Date::date = to_Date(p.sent_date) left join (select * from xyxx_db.maplemonk.mapping_tool_costs where partner = \'Contlo\' ) q on a.order_Date::date >= to_Date(q.from_date) and a.order_Date::date <= to_date(q.to_Date) and lower(a.channel) = \'retention\' left join (select * from xyxx_db.maplemonk.mapping_tool_costs where partner = \'Telephone\' ) r on a.order_Date::date >= to_Date(r.from_date) and a.order_Date::date <= to_date(r.to_Date) left join (select * from xyxx_db.maplemonk.mapping_tool_costs where partner = \'AgoraPulse\' ) s on a.order_Date::date >= to_Date(s.from_date) and a.order_Date::date <= to_date(s.to_Date) left join (select * from xyxx_db.maplemonk.mapping_tool_costs where partner = \'MailChimp\' ) t on a.order_Date::date >= to_Date(t.from_date) and a.order_Date::date <= to_date(t.to_Date) left join (select case when lower(commission_type) in (\'cps\') then try_cast(replace(replace(commission_value,\'₹\',\'\'),\'%\',\'\') as float)/100 when lower(commission_type) like (\'%flat fee%\') then try_cast(replace(replace(commission_value,\'₹\',\'\'),\'%\',\'\') as float) end COMMISSION_VALUE ,COMMISSION_TYPE ,upper(AFFILIATE) AFFILIATE , try_to_date(date_to,\'MM/DD/YYYY\') END_DATE ,try_to_date(date_from,\'MM/DD/YYYY\') START_DATE from xyxx_db.maplemonk.mapping_affiliate_costs ) u on a.order_Date::date >= to_Date(u.START_DATE) and a.order_Date::date <= to_date(u.END_DATE) and lower(a.source) = lower(u.affiliate) left join (select * from (select *, row_number() over (partition by sku_id order by 1) rw from xyxx_db.maplemonk.mapping_gifts) where rw=1 ) v on a.sku = v.sku_id left join xyxx_db.maplemonk.shipping_cost_by_order scbo on scbo.ordeR_name = a.ordeR_name left join xyxx_db.maplemonk.packaging_cost_by_order pcbo on pcbo.order_name = a.order_name where lower(a.shop_name) in (\'shopify_india\', \'cred\') ) where rw = 1;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from XYXX_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        