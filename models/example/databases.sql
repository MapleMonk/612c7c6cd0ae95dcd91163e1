{{ config(
            materialized='table',
                post_hook={
                    "sql": "create or replace table RPSG_DB.maplemonk.fact_items_easyecom_DRV as with orders as ( select \"TAT\",\"CITY\",\"EMAIL\",\"STATE\",\"COUNTRY\",\"COURIER\",\"MESSAGE\",\"BATCH_ID\",\"ORDER_ID\",\"PIN_CODE\",\"QCPASSED\",\"TCS_RATE\",\"BUYER_GST\",\"DOCUMENTS\",\"SUBORDERS\",\"TOTAL_TAX\",\"AWB_NUMBER\",\"BLOCKSPLIT\",\"CARRIER_ID\",\"INVOICE_ID\",\"ORDER_DATE\",\"ORDER_TYPE\",\"SELLER_GST\",\"TCS_AMOUNT\",\"CONTACT_NUM\",\"IMPORT_DATE\",\"MANIFEST_NO\",\"MARKETPLACE\",\"PICKUP_CITY\",\"WAREHOUSEID\",\"BILLING_CITY\",\"BILLING_NAME\",\"COMPANY_NAME\",\"INVOICE_DATE\",\"ORDER_STATUS\",\"PAYMENT_MODE\",\"PICKUP_STATE\",\"QUEUE_STATUS\",\"TOTAL_AMOUNT\",\"Package Width\",\"BILLING_STATE\",\"CUSTOMER_NAME\",\"MANIFEST_DATE\",\"QUEUE_MESSAGE\",\"Package Height\",\"Package Length\",\"Package Weight\",\"ADDRESS_LINE_1\",\"ADDRESS_LINE_2\",\"BILLING_MOBILE\",\"INVOICE_NUMBER\",\"MARKETPLACE_ID\",\"ORDER_PRIORITY\",\"ORDER_QUANTITY\",\"ORDER_TYPE_KEY\",\"PICKUP_ADDRESS\",\"PICKUP_COUNTRY\",\"REFERENCE_CODE\",\"SALESMANUSERID\",\"TOTAL_DISCOUNT\",\"BILLING_COUNTRY\",\"ORDER_STATUS_ID\",\"PAYMENT_MODE_ID\",\"PICKUP_PIN_CODE\",\"SHIPPING_STATUS\",\"BILLING_PIN_CODE\",\"LAST_UPDATE_DATE\",\"SHIPPING_HISTORY\",\"BILLING_ADDRESS_1\",\"BILLING_ADDRESS_2\",\"REPLACEMENT_ORDER\",\"COLLECTABLE_AMOUNT\",\"SHIPPING_STATUS_ID\",\"IMPORT_WAREHOUSE_ID\",\"IMPORT_WAREHOUSE_NAME\",\"TOTAL_SHIPPING_CHARGE\",\"MARKETPLACE_INVOICE_NUM\",\"SHIPPING_LAST_UPDATE_DATE\",\"PAYMENT_GATEWAY_TRANSACTION_NUMBER\" from ( select *,row_number()over(partition by order_id,invoice_id order by last_update_date desc) as rw from RPSG_DB.MAPLEMONK.EASYECOM_CUSTOMER_ORDERS c ) a where rw =1 and order_date::date < \'2024-01-01\' union all select \"TAT\",\"CITY\",\"EMAIL\",\"STATE\",\"COUNTRY\",\"COURIER\",\"MESSAGE\",\"BATCH_ID\",\"ORDER_ID\",\"PIN_CODE\",\"QCPASSED\",\"TCS_RATE\",\"BUYER_GST\",\"DOCUMENTS\",\"SUBORDERS\",\"TOTAL_TAX\",\"AWB_NUMBER\",\"BLOCKSPLIT\",\"CARRIER_ID\",\"INVOICE_ID\",\"ORDER_DATE\",\"ORDER_TYPE\",\"SELLER_GST\",\"TCS_AMOUNT\",\"CONTACT_NUM\",\"IMPORT_DATE\",\"MANIFEST_NO\",\"MARKETPLACE\",\"PICKUP_CITY\",\"WAREHOUSEID\",\"BILLING_CITY\",\"BILLING_NAME\",\"COMPANY_NAME\",\"INVOICE_DATE\",\"ORDER_STATUS\",\"PAYMENT_MODE\",\"PICKUP_STATE\",\"QUEUE_STATUS\",\"TOTAL_AMOUNT\",\"Package Width\",\"BILLING_STATE\",\"CUSTOMER_NAME\",\"MANIFEST_DATE\",\"QUEUE_MESSAGE\",\"Package Height\",\"Package Length\",\"Package Weight\",\"ADDRESS_LINE_1\",\"ADDRESS_LINE_2\",\"BILLING_MOBILE\",\"INVOICE_NUMBER\",\"MARKETPLACE_ID\",\"ORDER_PRIORITY\",\"ORDER_QUANTITY\",\"ORDER_TYPE_KEY\",\"PICKUP_ADDRESS\",\"PICKUP_COUNTRY\",\"REFERENCE_CODE\",\"SALESMANUSERID\",\"TOTAL_DISCOUNT\",\"BILLING_COUNTRY\",\"ORDER_STATUS_ID\",\"PAYMENT_MODE_ID\",\"PICKUP_PIN_CODE\",\"SHIPPING_STATUS\",\"BILLING_PIN_CODE\",\"LAST_UPDATE_DATE\",\"SHIPPING_HISTORY\",\"BILLING_ADDRESS_1\",\"BILLING_ADDRESS_2\",\"REPLACEMENT_ORDER\",\"COLLECTABLE_AMOUNT\",\"SHIPPING_STATUS_ID\",\"IMPORT_WAREHOUSE_ID\",\"IMPORT_WAREHOUSE_NAME\",\"TOTAL_SHIPPING_CHARGE\",\"MARKETPLACE_INVOICE_NUM\",\"SHIPPING_LAST_UPDATE_DATE\",\"PAYMENT_GATEWAY_TRANSACTION_NUMBER\" from ( select *,row_number()over(partition by order_id,invoice_id order by last_update_date desc) as rw from RPSG_DB.MAPLEMONK.\"2024_01_01_customer_orders\" c ) a where rw =1 and order_date::date >= \'2024-01-01\' ), first_order as ( select * from ( select *,row_number()over(partition by contact_num order by order_date asc) as rw from orders c ) a where rw =1 ), pick_up_dates as ( select * from (select o.ORDER_ID, A.Value:suborder_id Suborder_id, o.invoice_id, o.reference_code, o.shipping_history, coalesce(TRY_TO_TIMESTAMP(replace(B.value:time,\'\"\',\'\'), \'DD Mon YYYY, HH24:MI\'),TRY_TO_TIMESTAMP(replace(B.value:time,\'\"\',\'\'), \'YYYY-MM-DD HH24:MI:SS\')) picked_up_time, row_number() over (partition by A.Value:suborder_id order by picked_up_time) rw from orders o, LATERAL FLATTEN (INPUT => o.SUBORDERS) A, LATERAL FLATTEN (INPUT => parse_json(o.shipping_history)) B where lower(B.value: status) like any (\'picked up\', \'pickupdone\', \'pickdone\', \'pick done\', \'pick up\') ) where rw =1 ), intransit_dates as ( select * from (select o.ORDER_ID, A.Value:suborder_id Suborder_id, o.invoice_id, o.reference_code, o.shipping_history, coalesce(TRY_TO_TIMESTAMP(replace(B.value:time,\'\"\',\'\'), \'DD Mon YYYY, HH24:MI\'),TRY_TO_TIMESTAMP(replace(B.value:time,\'\"\',\'\'), \'YYYY-MM-DD HH24:MI:SS\')) intransit_time ,row_number() over (partition by A.Value:suborder_id order by intransit_time) rw from orders o ,LATERAL FLATTEN (INPUT => o.SUBORDERS) A, LATERAL FLATTEN (INPUT => parse_json(o.shipping_history)) B where lower(B.value:status) like any (\'in transit\', \'%arrivedat%\') ) where rw = 1 ) , delivery_dates as ( select * from (select o.ORDER_ID, A.Value:suborder_id Suborder_id, o.invoice_id, o.reference_code, o.shipping_history, coalesce(TRY_TO_TIMESTAMP(replace(B.value:time,\'\"\',\'\'), \'DD Mon YYYY, HH24:MI\'),TRY_TO_TIMESTAMP(replace(B.value:time,\'\"\',\'\'), \'YYYY-MM-DD HH24:MI:SS\')) delivered_time ,row_number() over (partition by A.Value:suborder_id order by delivered_time) rw from orders o ,LATERAL FLATTEN (INPUT => o.SUBORDERS) A, LATERAL FLATTEN (INPUT => parse_json(o.shipping_history)) B where lower(B.value:status) like \'delivered\' ) where rw = 1 ) select Marketplace as SHOP_NAME, carrier_id, courier, customer_name, email, contact_num, MARKETPLACE, MARKETPLACE_ID, s.ORDER_ID, s.Suborder_id, s.invoice_id, s.reference_code, Marketplace_LineItem_ID, manifest_date, shipping_Last_update_date shipping_last_update_date, shipping_status, replace(s.SKU, \'\"\',\'\') SKU, replace(sku_type, \'\"\',\'\') sku_type, PRODUCT_ID, replace(PRODUCTNAME, \'\"\',\'\') PRODUCTNAME, CURRENCY, IS_REFUND, awb, City, State, pin_code, order_status, ORDER_Date, SHIPPING_PRICE, number_of_products_in_combo, suborder_quantity, shipped_quantity, returned_quantity, cancelled_quantity, return_sales, cancel_sales, Tax, suborder_mrp, replace(category, \'\"\',\'\') category, discount, selling_price, coalesce(suborder_mrp,0)*suborder_quantity as mrp_sales, case when (mrp_sales is null or mrp_sales<selling_price) then discount else mrp_sales-selling_price end Discount_MRP, new_customer_flag, new_customer_flag_month, Warehouse_Name, Days_in_Shipment, Channel, payment_mode, import_date, last_update_date, invoice_date, Company_name, pd.picked_up_time, id.intransit_time, dd.delivered_time, from ( select o.MARKETPLACE as SHOP_NAME, o.carrier_id, o.courier, o.customer_name, o.email, o.contact_num, o.MARKETPLACE, o.MARKETPLACE_ID, o.ORDER_ID, A.Value:suborder_id Suborder_id, A.Value:suborder_num Marketplace_LineItem_ID, o.invoice_id, o.reference_code, o.manifest_date, o.awb_number awb, o.shipping_Last_update_date shipping_last_update_date, o.shipping_status, A.Value:marketplace_sku as sku, A.Value:sku_type sku_type, A.Value:product_id PRODUCT_ID, A.Value:productName PRODUCTNAME, case when o.pickup_country=\'India\' then \'INR\' end as CURRENCY, case when try_to_decimal(A.Value:returned_quantity::string) >0 then 1 else 0 end as IS_REFUND, upper(o.CITY::varchar) City, upper(o.STATE::varchar) State, o.pin_code, o.order_status, o.ORDER_Date as ORDER_Date, ifnull(try_to_double(A.Value:total_shipping_charge::string),0) as SHIPPING_PRICE, try_to_decimal(A.Value:item_quantity::string) as number_of_products_in_combo, try_to_decimal(A.Value:suborder_quantity::string) suborder_quantity, try_to_decimal(A.Value:shipped_quantity::string) shipped_quantity, try_to_decimal(A.Value:returned_quantity::string) returned_quantity, try_to_decimal(A.Value:cancelled_quantity::string) cancelled_quantity, case when replace(A.Value:selling_price,\',\',\'\')=\'#N/A\' then try_to_double(A.Value:mrp::string) when replace(A.Value:selling_price,\',\',\'\') is null or replace(A.Value:selling_price,\',\',\'\') in (\'NAN\') then 0 else try_to_double(replace(A.Value:selling_price,\',\',\'\')::string) end selling_price, case when returned_quantity > 0 then selling_price*returned_quantity/try_to_double(A.Value:item_quantity::string) end as return_sales, case when cancelled_quantity > 0 then selling_price end cancel_sales, ifnull(try_to_double(A.Value:tax::string),0) Tax, try_to_double(A.Value:mrp::string) as suborder_mrp, A.Value:category category, -1*(coalesce(o.total_discount*(case when selling_price=0 then 1 else selling_price end/case when sum(selling_price)over (partition by o.order_id) = 0 then 1 else sum(selling_price)over (partition by o.order_id) end ),0)::float) as discount , case when fo.order_id = o.order_id then 1 else 0 end as new_customer_flag, case when date_trunc(\'month\',fo.order_date::date) = date_trunc(\'month\',o.order_date::date) then 1 else 0 end as new_customer_flag_month, o.import_warehouse_name as Warehouse_Name, case when o.shipping_STATUS in (\'In Transit\', \'Shipment Created\') then datediff(day,date(o.ORDER_Date), getdate()) when o.shipping_STATUS in (\'Delivered\',\'Delivered To Origin\') then datediff(day,date(o.ORDER_Date),date(o.shipping_Last_update_date)) end::int as Days_in_Shipment, o.marketplace as Channel, o.payment_mode, o.import_date, o.last_update_date, o.invoice_date, o.Company_name, row_number() over (partition by A.Value:suborder_id order by o.last_update_date desc) orw from orders o left join first_order fo on fo.contact_num = o.contact_num ,LATERAL FLATTEN (INPUT => o.SUBORDERS)A ) s left join pick_up_dates pd on pd.Suborder_id = s.suborder_id left join intransit_dates id on id.Suborder_id = s.suborder_id left join delivery_dates dd on dd.Suborder_id = s.suborder_id where s.orw=1;",
                    "transaction": true
                }
            ) }}
            with sample_data as (

                select * from RPSG_DB.information_schema.databases
            ),
            
            final as (
                select * from sample_data
            )
            select * from final
            