{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated_intermediate as select CUSTOMER_ID ,SHOP_NAME ,MARKETPLACE ,CHANNEL ,SOURCE ,ORDER_ID ,REFERENCE_CODE ,PHONE ,NAME ,EMAIL ,SHIPPING_LAST_UPDATE_DATE ,SKU ,PRODUCT_ID ,PRODUCT_NAME ,CURRENCY ,CITY ,STATE ,ORDER_STATUS ,ORDER_DATE ,div0(QUANTITY,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID,INVOICE_ID)) Quantity ,div0(GROSS_SALES_BEFORE_TAX,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID,INVOICE_ID)) GROSS_SALES_BEFORE_TAX ,div0(DISCOUNT, count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID,INVOICE_ID)) DISCOUNT ,div0(TAX,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID,INVOICE_ID)) TAX ,div0(SHIPPING_PRICE,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID,INVOICE_ID)) SHIPPING_PRICE ,div0(SELLING_PRICE,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID,INVOICE_ID)) SELLING_PRICE ,OMS_ORDER_STATUS ,SHIPPING_STATUS ,FINAL_SHIPPING_STATUS ,SALEORDERITEMCODE ,SALES_ORDER_ITEM_ID ,AWB ,PAYMENT_GATEWAY ,PAYMENT_MODE ,COURIER ,DISPATCH_DATE ,sc.DELIVERED_DATE ,DELIVERED_STATUS ,RETURN_FLAG ,div0(RETURNED_QUANTITY,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID,INVOICE_ID)) RETURNED_QUANTITY ,div0(RETURNED_SALES,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID,INVOICE_ID)) RETURNED_SALES ,div0(CANCELLED_QUANTITY,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID,INVOICE_ID)) CANCELLED_QUANTITY ,NEW_CUSTOMER_FLAG ,ACQUISITION_PRODUCT ,DAYS_IN_SHIPMENT ,ACQUSITION_DATE ,SKU_CODE ,PRODUCT_NAME_FINAL ,PRODUCT_CATEGORY ,PRODUCT_SUB_CATEGORY ,WAREHOUSE ,div0(MRP,count(1) over (partition by ORDER_ID,SALEORDERITEMCODE,SALES_ORDER_ITEM_ID,INVOICE_ID)) MRP ,discount_code ,INVOICE_ID ,coalesce(pcm.skucode_child, sku_code) SKU_CODE_CHILD ,coalesce(upper(pcm.productname),upper(PRODUCT_NAME_FINAL)) CHILD_PRODUCT_NAME ,coalesce(upper(pcm.category),upper(PRODUCT_CATEGORY)) CHILD_PRODUCT_CATEGORY ,coalesce(upper(pcm.sub_category), upper(PRODUCT_SUB_CATEGORY)) CHILD_PRODUCT_SUBCATEGORY ,case when pcm.skucode_child is null then sc.quantity else ifnull(pcm.qty,0)*sc.quantity end as QUANTITY_CHILD ,case when pcm.skucode_child is null then sc.RETURNED_QUANTITY else ifnull(pcm.qty,0)*sc.RETURNED_QUANTITY end as RETURNED_QUANTITY_CHILD ,case when pcm.skucode_child is null then sc.CANCELLED_QUANTITY else ifnull(pcm.qty,0)*sc.CANCELLED_QUANTITY end as CANCELLED_QUANTITY_CHILD from MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated_pre_intermediate sc left join (select SMP.* , SM.productname , SM.Category , SM.Sub_category , SM.SKU_Type , SM.PACK_OF from (select * from (select replace(skucode,\'`\',\'\') skucode , replace(skucode_child,\'`\',\'\') skucode_child , qty , row_number() over (partition by skucode, skucode_child order by 1) rw from MYMUSE_DB.MAPLEMONK.mymuse_sku_mapping_parent_child ) where rw=1 ) SMP left join (select * from (select skucode , productname , category , sub_category , SKU_Type , PACK_OF , row_number() over (partition by skucode order by 1) rw from MYMUSE_DB.MAPLEMONK.mymuse_sku_master ) where rw = 1 ) SM on SMP.skucode_child = SM.skucode ) pcm on sc.sku_code = pcm.skucode; create or replace table MYMUSE_DB.MAPLEMONK.Final_customerID as with new_phone_numbers as ( select phone, contact_num, 19700000000 + row_number() over( order by contact_num asc ) as maple_monk_id from ( select distinct right(regexp_replace(phone, \'[^a-zA-Z0-9]+\'),10) as contact_num, phone from MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated_intermediate ) a ), int as ( select contact_num, email, coalesce(maple_monk_id,id2) as maple_monk_id from ( select contact_num, email, maple_monk_id, 19800000000+row_number() over(partition by maple_monk_id is NULL order by email asc ) as id2 from ( select distinct coalesce(p.contact_num,right(regexp_replace(e.contact_num, \'[^a-zA-Z0-9]+\'),10)) as contact_num, e.email, maple_monk_id from ( select phone as contact_num, email from MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated_intermediate ) e left join new_phone_numbers p on p.contact_num = right(regexp_replace(e.contact_num, \'[^a-zA-Z0-9]+\'),10) ) a ) b ) select contact_num, email, maple_monk_id from int where coalesce(contact_num,email) is not NULL; create or replace table MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated as select coalesce(m.maple_monk_id_phone, d.maple_monk_id) as customer_id_final, min(order_date) over(partition by customer_id_final) as acquisition_date, min(case when lower(order_status) not in (\'cancelled\') then order_date end) over(partition by customer_id_final) as first_complete_order_date, m.* from ( select c.maple_monk_id as maple_monk_id_phone, o.* from MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated_intermediate o left join ( select * from ( select contact_num phone, maple_monk_id, row_number() over (partition by contact_num order by maple_monk_id asc) magic from MYMUSE_DB.MAPLEMONK.Final_customerID ) where magic =1 )c on c.phone = right(regexp_replace(o.phone, \'[^a-zA-Z0-9]+\'),10) )m left join ( select distinct maple_monk_id, email from MYMUSE_DB.MAPLEMONK.Final_customerID where contact_num is null )d on d.email = m.email; ALTER TABLE MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated drop COLUMN new_customer_flag ; ALTER TABLE MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated ADD COLUMN new_customer_flag varchar(50); ALTER TABLE MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated ADD COLUMN new_customer_flag_month varchar(50); ALTER TABLE MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated drop COLUMN acquisition_product ; ALTER TABLE MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated ADD COLUMN acquisition_product varchar(16777216); ALTER TABLE MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated ADD COLUMN acquisition_channel varchar(16777216); ALTER TABLE MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated ADD COLUMN acquisition_marketplace varchar(16777216); UPDATE MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated AS A SET A.new_customer_flag = B.flag FROM ( SELECT DISTINCT order_id, customer_id_final, Order_Date, CASE WHEN Order_Date = first_complete_order_date then \'New\' WHEN Order_Date < first_complete_order_date or first_complete_order_date is null THEN \'Yet to make completed order\' WHEN Order_Date > first_complete_order_date then \'Repeat\' END AS Flag FROM MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated)AS B WHERE A.order_id = B.order_id AND A.customer_id_final = B.customer_id_final; UPDATE MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated SET new_customer_flag = CASE WHEN new_customer_flag IS NULL and (case when lower(order_status) is null then 1=1 else lower(order_status) not in (\'cancelled\') end) THEN \'New\' WHEN new_customer_flag IS NULL and (case when lower(order_status) is null then 1=1 else lower(order_status) in (\'cancelled\') end) THEN \'Yet to make completed order\' ELSE new_customer_flag END; UPDATE MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated AS A SET A.new_customer_flag_month = B.flag FROM ( SELECT DISTINCT order_id, customer_id_final, Order_Date, CASE WHEN Last_day(order_date, \'month\') = Last_day(first_complete_order_date, \'month\') THEN \'New\' WHEN Last_day(order_date, \'month\') < Last_day(first_complete_order_date, \'month\') or acquisition_date is null THEN \'Yet to make completed order\' WHEN Last_day(order_date, \'month\') > Last_day(first_complete_order_date, \'month\') THEN \'Repeat\' END AS Flag FROM MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated)AS B WHERE A.order_id = B.order_id AND A.customer_id_final = B.customer_id_final; UPDATE MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated SET new_customer_flag_month = CASE WHEN new_customer_flag_month IS NULL and (case when lower(order_status) is null then 1=1 else lower(order_status) not in (\'cancelled\') end) THEN \'New\' ELSE new_customer_flag_month END; CREATE OR replace temporary TABLE MYMUSE_DB.MAPLEMONK.temp_source_1 AS SELECT DISTINCT customer_id_final, channel, marketplace FROM ( SELECT DISTINCT customer_id_final, order_date, source as channel, shop_name as marketplace, Min(case when lower(order_status) <> \'cancelled\' then order_date end) OVER (partition BY customer_id_final) firstOrderdate FROM MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated ) res WHERE order_date=firstorderdate; UPDATE MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated AS a SET a.acquisition_channel=b.channel FROM MYMUSE_DB.MAPLEMONK.temp_source_1 b WHERE a.customer_id_final = b.customer_id_final; UPDATE MYMUSE_DB.MAPLEMONK. MYMUSE_DB_sales_consolidated AS a SET a.acquisition_marketplace=b.marketplace FROM MYMUSE_DB.MAPLEMONK.temp_source_1 b WHERE a.customer_id_final = b.customer_id_final; CREATE OR replace temporary TABLE MYMUSE_DB.MAPLEMONK.temp_product_1 AS SELECT DISTINCT customer_id_final, product_name_final, Row_number() OVER (partition BY customer_id_final ORDER BY SELLING_PRICE DESC) rowid FROM ( SELECT DISTINCT customer_id_final, order_date, product_name_final, SELLING_PRICE , Min(case when lower(order_status) <> \'cancelled\' then order_date end) OVER (partition BY customer_id_final) firstOrderdate FROM MYMUSE_DB.MAPLEMONK.MYMUSE_DB_sales_consolidated )res WHERE order_date=firstorderdate; UPDATE MYMUSE_DB.MAPLEMONK.MYMUSE_DB_sales_consolidated AS A SET A.acquisition_product=B.product_name_final FROM ( SELECT * FROM MYMUSE_DB.MAPLEMONK.temp_product_1 WHERE rowid=1 )B WHERE A.customer_id_final = B.customer_id_final; create or replace table MYMUSE_DB.MAPLEMONK. MYMUSE_DB_fact_items_easyecom_returns_detailed as select ORDER_ID ,INVOICE_ID ,RI.VALUE:\"suborder_id\" SUBORDER_ID ,REFERENCE_CODE ,CREDIT_NOTE_ID ,try_to_timestamp(ORDER_DATE) ORDER_DATE ,try_to_timestamp(INVOICE_DATE) INVOICE_DATE ,try_to_timestamp(RETURN_DATE) RETURN_DATE ,try_to_timestamp(MANIFEST_DATE) MANIFEST_DATE ,try_to_timestamp(IMPORT_DATE) IMPORT_DATE ,try_to_timestamp(LAST_UPDATE_DATE) LAST_UPDATE_DATE ,RI.VALUE:company_product_id COMPANY_PRODUCT_ID ,replace(RI.VALUE:productName,\'\"\',\'\') PRODUCTNAME ,RI.VALUE:product_id PRODUCT_ID ,replace(RI.VALUE:sku,\'\"\',\'\') SKU ,MARKETPLACE ,MARKETPLACE_ID ,REPLACEMENT_ORDER ,replace(RI.VALUE:return_reason,\'\"\',\'\') RETURN_REASON ,ifnull(RI.VALUE:returned_item_quantity::float,0) RETURNED_QUANTITY ,ifnull(RI.Value:credit_note_total_item_excluding_tax::float,0) RETURN_AMOUNT_WITHOUT_TAX ,ifnull(RI.Value:credit_note_total_item_tax::float,0) RETURN_TAX ,ifnull(RI.Value:credit_note_total_item_shipping_charge::float,0) RETURN_SHIPPING_CHARGE ,ifnull(RI.VALUE:credit_note_total_item_miscellaneous::float,0) RETURN_MISC ,ifnull(RI.Value:credit_note_total_item_excluding_tax::float,0) + ifnull(RI.Value:credit_note_total_item_tax::float,0) + ifnull(RI.Value:credit_note_total_item_shipping_charge::float,0)+ifnull(RI.VALUE:credit_note_total_item_miscellaneous::float,0) TOTAL_RETURN_AMOUNT from MYMUSE_DB.MAPLEMONK.EASYECOM_EASYECOM_MYMUSE_RETURNS R, LATERAL flatten(INPUT => R.ITEMS) RI; Create or replace table MYMUSE_DB.MAPLEMONK.MYMUSE_DB_fact_items_easyecom_returns_detailed as select ifnull(FE.channel,\'NA\') Marketing_CHANNEL ,FR.* from MYMUSE_DB.MAPLEMONK.MYMUSE_DB_fact_items_easyecom_returns_detailed FR left join (select distinct replace(reference_code,\'#\',\'\') REFERENCE_CODE, channel from MYMUSE_DB.MAPLEMONK.MYMUSE_DB_sales_consolidated) FE on FR.REFERENCE_CODE = FE.REFERENCE_CODE; create or replace table MYMUSE_DB.MAPLEMONK.MYMUSE_DB_EASYECOM_RETURNS_SUMMARY as select upper(MARKETPLACE) Marketplace ,Return_Date ,upper(Marketing_CHANNEL) Marketing_channel ,sum(RETURNED_QUANTITY) TOTAL_RETURNED_QUANTITY ,sum(TOTAL_RETURN_AMOUNT) TOTAL_RETURN_AMOUNT ,sum(RETURN_TAX) TOTAL_RETURN_TAX ,sum(RETURN_AMOUNT_WITHOUT_TAX) TOTAL_RETURN_AMOUNT_EXCL_TAX from MYMUSE_DB.MAPLEMONK.MYMUSE_DB_fact_items_easyecom_returns_detailed group by 1,2,3 order by 2 desc;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from MYMUSE_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        