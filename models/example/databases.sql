{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table hox_db.maplemonk.HOX_BLANKO_Tax_consolidated_report as with abc as ( select a.report_type, a.Reference_Code, a.Order_status, a.invoice_status, a.order_type, date(a.report_date) as report_date, a.SKU, sum(a.Quantity) as QUANTITY, sum(a.Invoice_amount) as Invoice_amt, sum(a.absolute_invoice_amount) as absolute_invoice_amount, sum(a.Tax_exclusive_gross)as Tax_exclusive_gross , sum(a.Total_tax_amount) as Total_tax_amount from HOX_DB.MapleMonk.HOX_BLANKO_Amazon_Tax_Fact_Items a group by 1,2,3,4,5,6,7 ), base as ( select distinct report_type, Reference_Code, Order_status, invoice_status, order_type, report_date, SKU, marketplace, QUANTITY, div0(Invoice_amt, count(1) over (partition by Reference_Code, lower(report_type), lower(Order_status), SKU, report_date order by 1)) as Invoice_amt, div0(Selling_price, count(1) over (partition by Reference_Code, lower(report_type), lower(Order_status), SKU, report_date order by 1)) as Selling_price, div0(absolute_invoice_amount, count(1) over (partition by Reference_Code, lower(report_type), lower(Order_status), SKU, report_date order by 1)) as absolute_invoice_amount, Tax_exclusive_gross , Total_tax_amount from ( select distinct a.report_type, a.Reference_Code, a.Order_status, a.invoice_status, a.order_type, date(a.report_date) as report_date, coalesce(b.common_sku, a.SKU) as SKU, b.marketplace, sum(a.Quantity) as QUANTITY, sum(coalesce(nullif(a.Invoice_amt,0),b.total_sales)) as Invoice_amt, sum(b.total_sales) as Selling_price, sum(coalesce(nullif(a.absolute_invoice_amount,0),b.total_sales)) as absolute_invoice_amount, sum(a.Tax_exclusive_gross)as Tax_exclusive_gross , sum(a.Total_tax_amount) as Total_tax_amount From abc a left join ( select order_id, sku, common_sku , case when lower(source) = \'amazon\' then \'Amazon FBA\' else \'Amazon EasyShip\' end as marketplace, sum(total_sales)as total_sales from HOX_DB.MAPLEMONK.HOX_DB_amazon_fact_items group by 1,2,3,4 )b on a.Reference_Code = b.order_id and lower(a.SKU) = lower(b.SKU) group by 1,2,3,4,5,6,7,8 )as o ), final_base as ( select distinct report_type, null as Company_Name, null as seller_gst, marketplace, Reference_Code, order_type, Order_status, Invoice_status, report_date, ifnull(c.item_count,1) * a.Quantity as QUANTITY, a.SKU, coalesce(c.new_sku , a.sku) as component_sku_name, case when (c.parent_sku is null or c.parent_sku = \'\') then Invoice_amt else div0(Invoice_amt, count(1) over (partition by Reference_Code, lower(report_type), lower(Order_status), a.SKU order by 1)) end as Invoice_amt, case when (c.parent_sku is null or c.parent_sku = \'\') then Selling_price else div0(Selling_price, count(1) over (partition by Reference_Code, lower(report_type), lower(Order_status), a.SKU order by 1)) end as Selling_price, case when (c.parent_sku is null or c.parent_sku = \'\') then absolute_invoice_amount else div0(absolute_invoice_amount, count(1) over (partition by Reference_Code, lower(report_type), lower(Order_status), a.SKU order by 1)) end as absolute_invoice_amount, Tax_exclusive_gross, Total_tax_amount from base a left join hox_db.maplemonk.hox_db_Sku_child_mapping c on lower(a.SKU) = lower(c.sku_code) ), easyecom_tax as ( select REPORT_TYPE , COMPANY_NAME , SELLER_GST , MARKETPLACE , REFERENCE_CODE , ORDER_TYPE , ORDER_STATUS , INVOICE_STATUS , date(REPORT_DATE) as REPORT_DATE , QUANTITY , SKU , COMPONENT_SKU_NAME , INVOICE_AMOUNT , SELLING_PRICE , ABSOLUTE_INVOICE_AMOUNT , TAX_EXCLUSIVE_GROSS , TOTAL_TAX_AMOUNT from hox_db.maplemonk.HOX_BLANKO_Easyecom_Tax_Fact_Items ) select *, date(date_trunc(\'month\', REPORT_DATE)) as report_month, date(date_trunc( \'week\', REPORT_DATE)) as report_week from final_base union select *, date(date_trunc(\'month\', REPORT_DATE)) as report_month, date(date_trunc( \'week\', REPORT_DATE)) as report_week from easyecom_tax",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from HOX_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        