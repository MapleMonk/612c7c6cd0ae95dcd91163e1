{{ config(
            materialized='table',
                post_hook={
                    "sql": "create or replace table prd_db.beardo.dwh_gross_contribution_Beardo as select * from ( with additional_sku_mapping as ( select m.*, coalesce(n.corrected_sku_weight,m.sku_weight_intermediate) sku_weight from ( select a.\"Product Code\" sku, max(ifnull(MRP,0)) mrp, div0(substr(case when \"GST Tax Type Code\" = \'\' then null else \"GST Tax Type Code\" end,11,2)::float,100) GST, sum(case when lower(type) = \'simple\' then 1 when lower(type) = \'bundle\' then (case when a.\"Component Quantity\" = \'\' then 0 else a.\"Component Quantity\"::float end) end) WH_units, sum(case when lower(type) = \'simple\' then (a.\"Weight (gms)\"::float) when lower(type) = \'bundle\' then b.component_weight*(case when a.\"Component Quantity\" = \'\' then 0 else a.\"Component Quantity\"::float end) end) sku_weight_intermediate, sum(case when b.component_weight <= 500 then 5.5*ifnull((case when a.\"Component Quantity\" = \'\' then 0 else a.\"Component Quantity\"::float end),1) when b.component_weight > 500 and b.component_weight <=1000 then 11*ifnull((case when a.\"Component Quantity\" = \'\' then 0 else a.\"Component Quantity\"::float end),1) when b.component_weight >1000 then 16.5*ifnull((case when a.\"Component Quantity\" = \'\' then 0 else a.\"Component Quantity\"::float end),1) end) warehousing_cost_sku, case when WH_units = 1 then 7 when WH_units > 1 then (WH_units+1)*7 end unit_emiza_cost from datalake_db.beardo.mst_unicommerce_item_master a left join ( select msm.\"Product Code\" child_sku, \"Weight (gms)\"::float component_weight from datalake_db.beardo.mst_unicommerce_item_master msm where lower(msm.type) = \'simple\' ) b on case when a.\"Component Product Code\" = \'\' then a.\"Product Code\" else a.\"Component Product Code\" end = b.child_sku group by 1,3 ) m left join datalake_db.beardo.mst_corrected_weights_for_volume n on n.\"Product Code\" = m.sku ) , orders as ( select * from prd_db.beardo.dwh_SHOPIFY_FACT_ITEMS where (lower(order_status) <> \'cancelled\' or is_refund <> 1) and lower(ifnull(payment_gateway_mapped,\'a\')) <> \'replacement\' ) select order_timestamp, order_id, ordeR_name, payment_gateway_mapped payment_method, mrp_sales, total_sales, total_discount, div0(total_discount,mrp_sales) discount_percent, NR, COGS total_COGS, Gokwik_charge, ceil(div0(WH_units_for_order,4))*4 + 1.5 spm_cost, case when lower(expected_warehouse) like \'%zed%\' then 0 when Expected_Warehouse is null then 0 else warehousing_cost_line_item + 6.25 end warehousing_cost, case when lower(payment_gateway_mapped) = \'prepaid\' then (case when expected_zone = \'A\' then ceil(div0(order_weight+70,500))*25 when expected_zone = \'B\' then ceil(div0(order_weight+70,500))*32 when expected_zone = \'C\' then ceil(div0(order_weight+70,500))*42 when expected_zone = \'D\' then ceil(div0(order_weight+70,500))*48 when expected_zone = \'E\' then ceil(div0(order_weight+70,500))*54 when expected_zone is null then ceil(div0(order_weight+70,500))*48 end) when lower(payment_gateway_mapped) = \'cod\' then (case when expected_zone = \'A\' then ceil(div0(order_weight+70,500))*25 when expected_zone = \'B\' then ceil(div0(order_weight+70,500))*32 when expected_zone = \'C\' then ceil(div0(order_weight+70,500))*42 when expected_zone = \'D\' then ceil(div0(order_weight+70,500))*48 when expected_zone = \'E\' then ceil(div0(order_weight+70,500))*54 when expected_zone is null then ceil(div0(order_weight+70,500))*48 end) + 30 end as logistics_cost, common_expense_finance, ifnull(NR,0) - ifnull(total_COGS,0) - ifnull(gokwik_charge,0) - ifnull(warehousing_cost,0) - ifnull(common_expense_finance,0) - ifnull(spm_cost,0) - ifnull(logistics_cost,0) as GC, div0(GC,NR) GC_percent, discount_code, product_list, ceil(div0(order_weight+70,500)) weight_slab, expected_zone, expected_warehouse, GC_percent*100 GC_filter, order_timestamp::string timestamped_date, WH_units_for_order from ( select order_timestamp, order_id, ordeR_name, discount_code, listagg(product_name, \', \') product_list, sum(o.total_sales) total_Sales, sum(asm.mrp*o.quantity) mrp_sales, sum(asm.mrp*o.quantity - (o.GROSS_SALES_AFTER_TAX - discount)) total_discount, sum(div0((o.GROSS_SALES_AFTER_TAX - discount),(1+asm.gst)) + div0(o.shipping_price,1.18)) NR, ifnull(sum(scm.cogs*o.quantity),sum(asm.mrp*o.quantity)*0.15) COGS, sum(case when lower(payment_gateway_mapped) = \'prepaid\' then o.total_sales*0.01 when lower(payment_gateway_mapped) = \'cod\' then o.total_sales*0.015 end) Gokwik_charge, sum(case when lower(ExpectedWarehouse) like \'%zed%\' then 0 when ExpectedWarehouse is null then 0 else (asm.unit_emiza_cost*o.quantity) end) warehousing_cost_line_item, sum(asm.unit_emiza_cost) unit_emiza_cost, sum(o.quantity) quantity, max(expectedwarehouse) expected_warehouse, max(pezm.expectedzone) expected_zone, max(payment_gateway_mapped) payment_gateway_mapped, sum(asm.mrp*o.quantity*0.008) common_expense_finance, sum(asm.WH_units*o.quantity) WH_units_for_order, sum(asm.sku_weight*o.quantity) order_weight from orders o left join additional_sku_mapping asm on o.sku = asm.sku left join datalake_db.beardo.mst_sku_cogs_map scm on o.sku = scm.\"SKU Code\" left join datalake_db.beardo.mst_pincode_expectedwarehouse_map pewm on pewm.pincode = o.pincode left join datalake_db.beardo.mst_pincode_expectedzone_map pezm on pezm.pincode = o.pincode group by 1,2,3,4 )) where ordeR_timestamp::date <=\'2024-04-30\' union all select * from ( with additional_sku_mapping as ( select m.*, coalesce(n.corrected_sku_weight,m.sku_weight_intermediate) sku_weight from ( select a.\"Product Code\" sku, max(ifnull(MRP,0)::float) mrp, div0(substr(case when \"GST Tax Type Code\" = \'\' then null else \"GST Tax Type Code\" end,11,2)::float,100) GST, sum(case when lower(type) = \'simple\' then 1 when lower(type) = \'bundle\' then (case when a.\"Component Quantity\" = \'\' then 0 else a.\"Component Quantity\"::float end) end) WH_units, sum(case when lower(type) = \'simple\' then a.\"Weight (gms)\"::float when lower(type) = \'bundle\' then b.component_weight*(case when a.\"Component Quantity\" = \'\' then 0 else a.\"Component Quantity\"::float end) end) sku_weight_intermediate, sum(case when b.component_weight <= 500 then 5.5*ifnull((case when a.\"Component Quantity\" = \'\' then 0 else a.\"Component Quantity\"::float end),1) when b.component_weight > 500 and b.component_weight <=1000 then 11*ifnull((case when a.\"Component Quantity\" = \'\' then 0 else a.\"Component Quantity\"::float end),1) when b.component_weight >1000 then 16.5*ifnull((case when a.\"Component Quantity\" = \'\' then 0 else a.\"Component Quantity\"::float end),1) end) warehousing_cost_sku, case when WH_units = 1 then 7 when WH_units > 1 then (WH_units+1)*7 end unit_emiza_cost from datalake_db.beardo.mst_unicommerce_item_master a left join ( select msm.\"Product Code\" child_sku, \"Weight (gms)\"::float component_weight from datalake_db.beardo.mst_unicommerce_item_master msm where lower(msm.type) = \'simple\' ) b on case when a.\"Component Product Code\" = \'\' then a.\"Product Code\" else a.\"Component Product Code\" end = b.child_sku group by 1,3 ) m left join datalake_db.beardo.mst_corrected_weights_for_volume n on n.\"Product Code\" = m.sku ) , orders as ( select * from prd_db.beardo.dwh_SHOPIFY_FACT_ITEMS where (lower(order_status) <> \'cancelled\' or is_refund <> 1) and lower(ifnull(payment_gateway_mapped,\'a\')) <> \'replacement\' ) select order_timestamp, order_id, ordeR_name, payment_gateway_mapped payment_method, mrp_sales, total_sales, total_discount, div0(total_discount,mrp_sales) discount_percent, NR, COGS total_COGS, 0 as Gokwik_charge, ceil(div0(WH_units_for_order,4))*4 + 1.5 spm_cost, case when lower(expected_warehouse) like \'%zed%\' then 0 when Expected_Warehouse is null then 0 else warehousing_cost end as warehousing_cost, case when lower(payment_gateway_mapped) = \'prepaid\' then (case when expected_zone = \'A\' then ceil(div0(order_weight+70,500))*23 when expected_zone = \'B\' then ceil(div0(order_weight+70,500))*29 when expected_zone = \'C\' then ceil(div0(order_weight+70,500))*34 when expected_zone = \'D\' then ceil(div0(order_weight+70,500))*44 when expected_zone = \'E\' then ceil(div0(order_weight+70,500))*59 when expected_zone is null then ceil(div0(order_weight+70,500))*44 end) when lower(payment_gateway_mapped) = \'cod\' then (case when expected_zone = \'A\' then ceil(div0(order_weight+70,500))*23 when expected_zone = \'B\' then ceil(div0(order_weight+70,500))*29 when expected_zone = \'C\' then ceil(div0(order_weight+70,500))*34 when expected_zone = \'D\' then ceil(div0(order_weight+70,500))*44 when expected_zone = \'E\' then ceil(div0(order_weight+70,500))*59 when expected_zone is null then ceil(div0(order_weight+70,500))*44 end) + 30 end as logistics_cost, common_expense_finance, NR - total_COGS - 0 - warehousing_cost - common_expense_finance - spm_cost - logistics_cost as GC, div0(GC,NR) GC_percent, discount_code, product_list, ceil(div0(order_weight+70,500)) weight_slab, expected_zone, expected_warehouse, GC_percent*100 GC_filter, order_timestamp::string timestamped_date, WH_units_for_order from ( select order_timestamp, order_id, ordeR_name, discount_code, listagg(product_name, \', \') product_list, sum(wh_units) wh_units, sum (warehousing_cost_sku * o.quantity) warehousing_cost, sum(o.total_sales) total_Sales, sum(asm.mrp*o.quantity) mrp_sales, sum(asm.mrp*o.quantity - (o.GROSS_SALES_AFTER_TAX - discount)) total_discount, sum(div0((o.GROSS_SALES_AFTER_TAX - discount),(1+asm.gst)) + div0(o.shipping_price,1.18)) NR, ifnull(sum(scm.cogs*o.quantity),sum(asm.mrp*o.quantity)*0.15) COGS, sum(case when lower(payment_gateway_mapped) = \'prepaid\' then o.total_sales*0.01 when lower(payment_gateway_mapped) = \'cod\' then o.total_sales*0.015 end) Gokwik_charge, sum(case when lower(ExpectedWarehouse) like \'%zed%\' then 0 when ExpectedWarehouse is null then 0 else (asm.unit_emiza_cost*o.quantity) end) warehousing_cost_line_item, sum(asm.unit_emiza_cost) unit_emiza_cost, sum(o.quantity) quantity, max(expectedwarehouse) expected_warehouse, max(pezm.expectedzone) expected_zone, max(payment_gateway_mapped) payment_gateway_mapped, sum(asm.mrp*o.quantity*0.008) common_expense_finance, sum(asm.WH_units*o.quantity) WH_units_for_order, sum(asm.sku_weight*o.quantity) order_weight from orders o left join additional_sku_mapping asm on o.sku = asm.sku left join datalake_db.beardo.mst_sku_cogs_map scm on o.sku = scm.\"SKU Code\" left join datalake_db.beardo.mst_pincode_expectedwarehouse_map pewm on pewm.pincode = o.pincode left join datalake_db.beardo.mst_pincode_expectedzone_map pezm on pezm.pincode = o.pincode group by 1,2,3,4 )) where ordeR_timestamp::date >=\'2024-05-01\' ; create or replace table prd_db.beardo.dwh_gross_contribution_day_level_Beardo as select order_timestamp::Date date ,payment_method ,weight_slab ,expected_zone ,expected_warehouse ,count(distinct ordeR_id) orders ,sum(mrp_sales) mrp_sales ,sum(total_sales) total_Sales ,sum(total_discount) total_discount ,sum(NR) NR ,sum(NR*(1-y.return_rate)) expected_NR ,sum(total_cogs) total_cogs ,sum(total_cogs*(1-y.return_Rate)) expected_total_cogs ,sum(gokwik_charge) gokwik_charge ,sum(spm_cost) spm_cost ,sum(warehousing_cost) warehousing_cost ,sum(warehousing_cost + 6*WH_units_for_order*y.return_rate) expected_warehousing_cost ,sum(logistics_cost) logistics_cost ,sum(case when payment_method = \'Prepaid\' then logistics_cost*(1+y.return_rate) when payment_method = \'COD\' then (logistics_cost -30)*(1+y.return_rate) end) expected_logistics_cost ,sum(common_expense_finance) common_expense_finance ,div0(300000/day(last_day(ordeR_timestamp::Date)), count(*) over (partition by ordeR_timestamp::Date order by 1)) daily_rent ,sum(NR*(1-y.return_rate)) - sum(total_cogs*(1-y.return_Rate)) - sum(gokwik_charge) - sum(warehousing_cost + 6*y.return_rate) - sum(common_expense_finance) - sum(spm_cost) - sum(case when payment_method = \'Prepaid\' then logistics_cost*(1+y.return_rate) when payment_method = \'COD\' then (logistics_cost -30)*(1+y.return_rate) end) - daily_rent as expected_GC ,avg(y.return_rate) return_rate from prd_db.beardo.dwh_gross_contribution_Beardo x left join( select a.date, b.return_rate from (select distinct order_Date::Date date from prd_db.beardo.dwh_sales_consolidated) a left join (select date_trunc(\'month\',order_date::Date) month, div0(count(case when lower(final_Status) = \'returned\' then ordeR_id end),count(ordeR_id)) return_rate from prd_db.beardo.dwh_sales_consolidated where shop_name = \'SHOPIFY_BEARDO\' group by date_trunc(\'month\',order_date::Date)) b on dateadd(month,-2,date_trunc(\'month\',a.date)) = b.month ) y on x.order_timestamp::Date = y.Date group by 1,2,3,4,5 ;",
                    "transaction": true
                }
            ) }}
            with sample_data as (

                select * from PRD_DB.information_schema.databases
            ),
            
            final as (
                select * from sample_data
            )
            select * from final
            