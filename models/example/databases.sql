{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table beardo_db.maplemonk.unicommerce_fact_items as with order_related as ( select case when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%flipkart%\' then \'FLIPKART\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%amz_fba%\' then \'AMAZON_FBA\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%amazon_in%\' then \'AMAZON_IN\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%cred%\' then \'CRED\' when lower(replace(saleorderdto:channel,\'\"\',\'\')) like \'%shopify%\' then \'SHOPIFY\' else upper(replace(saleorderdto:channel,\'\"\',\'\')) end as shop_name, upper(replace(saleorderdto:channel,\'\"\',\'\')) marketplace, null as marketplace_id, replace(saleorderdto:source,\'\"\',\'\') as source, replace(saleorderdto:code,\'\"\',\'\') as order_id, replace(saleorderdto:displayOrderCode,\'\"\',\'\') as order_name, replace(saleorderdto:displayOrderCode,\'\"\',\'\') as reference_code, replace(saleorderdto:billingAddress:phone,\'\"\',\'\') as contact_num, replace(saleorderdto:billingAddress:name,\'\"\',\'\') as customer_name, saleorderdto:billingAddress:email as email, replace(A.Value:itemSku,\'\"\',\'\') as sku, null as sku_type, replace(A.Value:channelProductId,\'\"\',\'\') as product_id, replace(A.Value:itemName,\'\"\',\'\') as product_name, replace(saleorderdto:currencyCode,\'\"\',\'\') as currency, replace(saleorderdto:billingAddress:city,\'\"\',\'\') as city, replace(saleorderdto:billingAddress:state,\'\"\',\'\') as state, replace(saleorderdto:status,\'\"\',\'\') as ORDER_STATUS, date(CONVERT_TIMEZONE(\'UTC\',\'Asia/Kolkata\',dateadd(\'ms\',saleorderdto:displayOrderDateTime,\'1970-01-01\'))) as order_date, ifnull(A.Value:shippingCharges,0)::float as shipping_price, ifnull(A.Value:packetNumber,0)::int as SUBORDER_QUANTITY, null as number_of_products_in_combo, A.Value:discount::float as discount, A.Value:totalIntegratedGst::float as tax, A.Value:totalPrice::float as SELLING_PRICE, replace(A.Value:maxRetailPrice,0)::float as suborder_MRP, coalesce(suborder_mrp,0)*suborder_quantity as mrp_sales, case when (mrp_sales is null or mrp_sales<selling_price) then discount else mrp_sales-selling_price end Discount_MRP, replace(A.Value:shippingPackageCode,\'\"\',\'\') as shippingPackageCode, replace(A.Value:shippingPackageStatus,\'\"\',\'\') as shippingPackageStatus, replace(A.Value:code,\'\"\',\'\') as saleOrderItemCode, replace(A.Value:code,\'\"\',\'\') as suborder_id, A.Value:id as SALES_ORDER_ITEM_ID, A.Value:facilityName as warehouse_name, null as channel, null as payment_mode, null as import_Date, to_timestamp_ntz(replace(A.value:updated,\'\"\',\'\')::int/1000)as last_update_date from beardo_db.maplemonk.UNICOMMERCE_BEARDO_GET_ORDERS_BY_IDS_TEST, LATERAL FLATTEN (INPUT => saleorderdto:saleOrderItems)A ), first_order as ( select * from ( select *,replace(saleorderdto:billingAddress:phone,\'\"\',\'\') contact_num , replace(saleorderdto:code,\'\"\',\'\') as order_id, date(CONVERT_TIMEZONE(\'UTC\',\'Asia/Kolkata\',dateadd(\'ms\',saleorderdto:displayOrderDateTime,\'1970-01-01\'))) as order_date, row_number()over(partition by replace(saleorderdto:billingAddress:phone,\'\"\',\'\') order by date(CONVERT_TIMEZONE(\'UTC\',\'Asia/Kolkata\',dateadd(\'ms\',saleorderdto:displayOrderDateTime,\'1970-01-01\'))) asc) as rw from beardo_db.maplemonk.UNICOMMERCE_BEARDO_GET_ORDERS_BY_IDS_TEST , LATERAL FLATTEN (INPUT => saleorderdto:saleOrderItems)A ) a where rw =1 ) , shipping_related as ( select replace(saleorderdto:code,\'\"\',\'\') as order_id, replace(A.Value:shippingProvider,\'\"\',\'\') as courier, replace(A.Value:status,\'\"\',\'\') shipping_status, replace(A.Value:invoice,\'\"\',\'\') invoice_id, A.Value:dispatched dispatched, A.Value:delivered delivered, A.Value:code as shippingPackageCode, A.Value:noOfItems as shipped_quantity, to_timestamp_ntz(A.value:invoiceDate::int/1000) as Invoice_date, to_timestamp_ntz(A.value:updated::int/1000) as shipping_last_update_date, null as carrier_id from beardo_db.maplemonk.UNICOMMERCE_BEARDO_GET_ORDERS_BY_IDS_TEST, LATERAL FLATTEN (INPUT => saleorderdto:shippingPackages)A ), returns as ( select replace(saleorderdto:code,\'\"\',\'\') as order_id, B.Value:saleOrderItemCode as saleOrderItemCode, B.Value:itemSku as itemSku,B.* from beardo_db.maplemonk.UNICOMMERCE_BEARDO_GET_ORDERS_BY_IDS_TEST, LATERAL FLATTEN (INPUT => saleorderdto:returns)A, LATERAL FLATTEN (INPUT => A.Value:returnItems)B ) select o.*,s.courier, s.shipping_status, s.invoice_id, s.carrier_id, s.shipping_last_update_date, date(s.dispatched) manifest_date, date(s.delivered) Delivered_Date, s.shipped_quantity, case when r.itemSku is not NUll then 1 else 0 end as is_refund, case when is_refund = 1 then suborder_quantity else 0 end::int as returned_quantity, case when is_refund = 1 then selling_price else 0 end::float as return_sales, case when order_status = \'CANCELLED\' then suborder_quantity else 0 end::int as cancelled_quantity, case when order_status = \'CANCELLED\' then selling_price else 0 end::float as cancel_sales, FIRST_VALUE( product_name) OVER ( PARTITION BY o.contact_num ORDER BY o.order_date asc ) AS acquisition_product, case when fo.order_id = o.order_id then \'New\' else \'Repeat\' end as new_customer_flag, case when date_trunc(\'month\',fo.order_date::date) = date_trunc(\'month\',o.order_date::date) then \'New\' else \'Repeat\' end as new_customer_flag_month, case when order_status=\'COMPLETE\' then delivered_date-o.order_date else current_date - o.order_date end as days_in_shipment, s.invoice_date, null as category, null as cost from order_related o left join shipping_related s on o.shippingPackageCode= s.shippingPackageCode and o.order_id = s.order_id left join returns r on r.saleOrderItemCode = o.saleOrderItemCode and r.order_id=o.order_id left join first_order fo on fo.contact_num = o.contact_num ;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from Beardo_db.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        