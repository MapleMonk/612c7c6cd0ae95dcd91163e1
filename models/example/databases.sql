{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table eggozdb.maplemonk.eggoz_soh as select distinct cast(timestampadd(minute, 660, t1.date) as date) as entry_date, cau.name as sales_person, t1.type as visit_type, rr.code as retailer_name, rr.area_classification, t1.id as model_id, rr.beat_number as beat_number_original, concat(pp.sku_count,left(pp.name,1)) as sku, t2.quantity as eggoz_soh, t1.retailer_id, pp.sku_count, bc.city_name, bc.state from eggozdb.maplemonk.my_sql_order_sohmodel t1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = t1.retailer_id left join eggozdb.maplemonk.my_sql_order_eggozsoh t2 on t2.soh_model_id = t1.id left join eggozdb.maplemonk.my_sql_product_product pp on pp.id = t2.product_id left join eggozdb.maplemonk.my_sql_saleschain_salespersonprofile ss on ss.id = t1.sales_person_profile_id left join eggozdb.maplemonk.my_sql_custom_auth_user cau on cau.id = ss.user_id left join eggozdb.maplemonk.my_sql_base_city bc on bc.id = rr.city_id ; create or replace table eggozdb.maplemonk.eggoz_soh_adherence as select t1.date::date date, cau.name as sales_person_name, t1.sales_person_profile_id, rr.area_classification, rr.beat_number, count(distinct t1.retailer_id) retailers_covered, t2.active_retailers, count(distinct t1.retailer_id)*100/t2.active_retailers adherence from eggozdb.maplemonk.my_sql_order_sohmodel t1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = t1.retailer_id left join eggozdb.maplemonk.my_sql_saleschain_salespersonprofile ss on ss.id = t1.sales_person_profile_id left join eggozdb.maplemonk.my_sql_custom_auth_user cau on cau.id = ss.user_id left join (select beat_number, area_classification, count(id) active_retailers from eggozdb.maplemonk.my_sql_retailer_retailer where onboarding_status=\'Active\' group by area_classification, beat_number) t2 on t2.area_classification = rr.area_classification and t2.beat_number = rr.beat_number group by t1.date, t1.sales_person_profile_id, rr.area_classification, rr.beat_number, cau.name, t2.active_retailers ; create or replace table eggozdb.maplemonk.doi as select nn.*, (nn.soh_old + sum(ll.eggs_sold)/nn.sku_count+sum(ll.eggs_promo)/nn.sku_count-sum(ll.eggs_return)/nn.sku_count - nn.soh_new + case when sum(ll.eggs_replaced)/nn.sku_count-nn.soh_old >0 then sum(ll.eggs_replaced)/nn.sku_count-nn.soh_old else 0 end) as tertiary_sales_sku, div0(nn.soh_new*(datediff(day,date_old,date_new)+1),(nn.soh_old + sum(ll.eggs_sold)/nn.sku_count+sum(ll.eggs_promo)/nn.sku_count-sum(ll.eggs_return)/nn.sku_count - nn.soh_new + case when (sum(ll.eggs_replaced)/nn.sku_count)-nn.soh_old >0 then (sum(ll.eggs_replaced)/nn.sku_count-nn.soh_old) else 0 end)) doi_sku, datediff(day,date_old,date_new)+1 days, sum(ll.revenue) revenue, sum(ll.eggs_sold)/nn.sku_count sku_sold, sum(ll.eggs_replaced)/nn.sku_count sku_replaced, sum(ll.eggs_return)/nn.sku_count sku_return, sum(ll.eggs_promo)/nn.sku_count sku_promo, nn.soh_new*nn.sku_count soh_new_eggs, nn.soh_old*nn.sku_count soh_old_eggs, (nn.soh_old*nn.sku_count + sum(ll.eggs_sold) + sum(ll.eggs_promo) - sum(ll.eggs_return) - nn.soh_new*nn.sku_count + case when sum(ll.eggs_replaced) - nn.soh_old*nn.sku_count > 0 then sum(ll.eggs_replaced)-nn.soh_old*nn.sku_count else 0 end) as tertiary_sales_eggs, div0(nn.soh_new*nn.sku_count*(datediff(day,date_old,date_new)+1),(nn.soh_old*nn.sku_count + sum(ll.eggs_sold)+sum(ll.eggs_promo)-sum(ll.eggs_return) - nn.soh_new*nn.sku_count + case when (sum(ll.eggs_replaced))-nn.soh_old*nn.sku_count >0 then (sum(ll.eggs_replaced)-nn.soh_old*nn.sku_count) else 0 end)) doi_eggs, sum(ll.eggs_sold) eggs_sold, sum(ll.eggs_replaced) eggs_replaced, sum(ll.eggs_return) eggs_return, sum(ll.eggs_promo) eggs_promo, ll.retailer_type, ll.distributor from (select mm.model_id, mm.visit_type, mm.sales_person, mm.retailer_name, mm.retailer_id, mm.area_classification, mm.beat_number, mm.sku_count, mm.eggoz_sku, mm.date as date_new, mm.date_1 as date_old, mm.eggoz_soh soh_new, ifnull(mm.soh_1,0) soh_old from ( select tt.*, lag(tt.date) over (partition by tt.retailer_name, tt.area_classification, tt.beat_number, tt.sku_count, tt.eggoz_sku order by tt.date asc) date_1, lag(tt.eggoz_soh) over (partition by tt.retailer_name, tt.area_classification, tt.beat_number, tt.eggoz_sku order by tt.date asc) soh_1 from ( select t1.id model_id, cast(timestampadd(minute, 660, date) as date) date, t1.type visit_type, cau.name as sales_person, rr.code as retailer_name, rr.area_classification, rr.beat_number, pp.sku_count, concat(pp.sku_count,left(pp.name,1)) eggoz_sku, t2.quantity eggoz_soh, t1.retailer_id from eggozdb.maplemonk.my_sql_order_sohmodel t1 left join eggozdb.maplemonk.my_sql_order_eggozsoh t2 on t2.soh_model_id = t1.id left join eggozdb.maplemonk.my_sql_product_product pp on pp.id = t2.product_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = t1.retailer_id left join eggozdb.maplemonk.my_sql_saleschain_salespersonprofile ss on ss.id = t1.sales_person_profile_id left join eggozdb.maplemonk.my_sql_custom_auth_user cau on cau.id = ss.user_id where t1.type in (\'Visit\',\'Closing\') group by t1.id, t1.date, t1.type , cau.name, rr.code, rr.area_classification, rr.beat_number, pp.sku_count, pp.name, t2.quantity, t1.retailer_id ) tt ) mm where mm.date_1 is not null) nn left join ( select date, retailer_name, area_classification, beat_number_original, sku, revenue, eggs_sold, eggs_replaced, eggs_return, eggs_promo, retailer_type, distributor, retailer_id from eggozdb.maplemonk.primary_and_secondary_sku where area_classification in (\'Noida-GT\',\'Gurgaon-GT\',\'Delhi-GT\',\'NCR-OF-MT\') and year(date) = 2023 and month(date) = 03 or month(date) = 02 and sku is not null ) ll on ll.retailer_name = nn.retailer_name and ll.sku = nn.eggoz_sku and ll.retailer_id = nn.retailer_id where ll.date between nn.date_old and nn.date_new group by nn.model_id, nn.visit_type, nn.sales_person, nn.retailer_name, nn.retailer_id, nn.area_classification, nn.beat_number, nn.sku_count, nn.eggoz_sku, nn.date_new, nn.date_old, nn.soh_new, nn.soh_old, ll.retailer_type, ll.distributor ; create or replace table eggozdb.maplemonk.competitor_soh as select t1.id as model_id, t1.type as visit_type, cast(timestampadd(minute, 660, t1.date) as date) date, t2.brand_name, cau.name as sales_person, rr.code as retailer_name, rr.area_classification, rr.beat_number, concat(t3.sku_count,left(t3.sku,1)) sku, t3.quantity comp_soh, t3.sku_count, t1.retailer_id from eggozdb.maplemonk.my_sql_order_sohmodel t1 left join eggozdb.maplemonk.my_sql_order_competitorsoh t2 on t2.soh_model_id = t1.id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = t1.retailer_id left join eggozdb.maplemonk.my_sql_order_competitorsohinline t3 on t3.competitor_soh_id = t2.id left join eggozdb.maplemonk.my_sql_saleschain_salespersonprofile ss on ss.id = t1.sales_person_profile_id left join eggozdb.maplemonk.my_sql_custom_auth_user cau on cau.id = ss.user_id where t2.brand_name is not null ; create or replace table eggozdb.maplemonk.store_potential as select t5.*, t6.eggoz_soh_punch_count, t7.comp_soh_punch_count from (select date_from_parts(t3.year, t3.month, 01) date, t3.retailer_name, t3.retailer_id, t3.area_classification, t3.beat_number, t3.sku_count, t3.sku, t3.eggoz_soh, t3.comp_soh, t3.eggoz_soh_eggs, t3.comp_soh_eggs, ifnull(t4.revenue,0) revenue, ifnull(t4.eggs_sold,0) eggs_sold, ifnull(t4.eggs_replaced,0) eggs_replaced, ifnull(t4.eggs_return,0) eggs_return, ifnull(t4.eggs_promo,0) eggs_promo from ( select month(date) month, year(date) year, retailer_name, retailer_id, area_classification, beat_number, sku_count, sku, sum(eggoz_soh) eggoz_soh, sum(comp_soh) comp_soh, sum(eggoz_soh_eggs) eggoz_soh_eggs, sum(comp_soh_eggs) comp_soh_eggs from ( select coalesce(t1.model_id,t2.model_id) model_id, coalesce(t1.visit_type,t2.visit_type) visit_type, coalesce(t1.sales_person, t2.sales_person) sales_person, coalesce(t1.retailer_name, t2.retailer_name) retailer_name, coalesce(t1.retailer_id,t2.retailer_id) retailer_id, coalesce(t1.area_classification,t2.area_classification) area_classification, coalesce(t1.beat_number_original,t2.beat_number) beat_number, coalesce(t1.sku_count,t2.sku_count) sku_count, coalesce(t1.sku,t2.sku) sku, coalesce(t1.entry_date,t2.date) date, ifnull(t1.eggoz_soh,0) eggoz_soh, ifnull(t2.comp_soh,0) comp_soh, ifnull(t1.eggoz_soh*t1.sku_count,0) eggoz_soh_eggs, ifnull(t2.comp_soh_eggs,0) comp_soh_eggs from eggoz_soh t1 full outer join (select model_id, visit_type, date, sales_person, retailer_name, area_classification, beat_number, sku, sum(comp_soh) comp_soh, sum(comp_soh*sku_count) comp_soh_eggs, sku_count, retailer_id from competitor_soh where visit_type in (\'Closing\',\'Visit\') group by model_id, visit_type, date, sales_person, retailer_name, area_classification, beat_number, sku, sku_count, retailer_id) t2 on t1.retailer_id = t2.retailer_id and t1.entry_date = t2.date and t1.sku = t2.sku and t1.model_id = t2.model_id ) group by month(date), year(date), retailer_name, retailer_id, area_classification, beat_number, sku_count, sku ) t3 left join ( select year(date) year, month(date) month, retailer_name, area_classification, beat_number_original, onboarding_status, retailer_id, parent_retailer_name, sku, sum(revenue) revenue, sum(eggs_sold) eggs_sold, sum(eggs_replaced) eggs_replaced, sum(eggs_return) eggs_return, sum(eggs_promo) eggs_promo, retailer_type, distributor, cluster_dec, cluster_dec from primary_and_secondary_sku where sku is not null and area_classification in (\'Gurgaon-GT\',\'Delhi-GT\',\'Noida-GT\',\'NCR-OF-MT\') group by year(date), month(date), retailer_name, area_classification, beat_number_original, onboarding_status, retailer_id, parent_retailer_name, sku, retailer_type, distributor, cluster_dec, cluster_dec ) t4 on t3.retailer_id = t4.retailer_id and t3.month = t4.month and t3.year = t4.year and t3.sku = t4.sku ) t5 left join (select month(entry_date) month, year(entry_date) year, count(distinct model_id) eggoz_soh_punch_count, retailer_id from eggoz_soh where sku is not null group by month(entry_date), year(entry_date), retailer_id) t6 on month(t5.date) = t6.month and year(t5.date) = t6.year and t5.retailer_id = t6.retailer_id left join (select month(date) month, year(date) year, count(distinct model_id) comp_soh_punch_count, retailer_id from competitor_soh where sku is not null group by month(date), year(date), retailer_id) t7 on month(t5.date) = t7.month and year(t5.date) = t7.year and t5.retailer_id = t7.retailer_id ; create or replace table eggozdb.maplemonk.pjp_soh_adherance as select t1.pjp, coalesce(t1.date_pjp,t2.entry_date) date, t1.date_pjp, t2.entry_date, coalesce(t1.beat_number_pjp,t2.beat_number_original) beat_number , case when t1.no_of_outlets is null then (select count(code) from eggozdb.maplemonk.my_sql_retailer_retailer where beat_number = coalesce(t1.beat_number_pjp,t2.beat_number_original) and onboarding_status = \'Active\' and area_classification = coalesce(t1.area_classification_pjp,t2.area_classification)) else t1.no_of_outlets end as no_of_outlets , coalesce(t1.area_classification_pjp,t2.area_classification) area_classification, t2.outlets_touched, coalesce(t1.city_pjp,t2.city_name) city from (select \'pjp\' pjp, date::date date_pjp, beat_number beat_number_pjp, no_of_outlets, area_classification area_classification_pjp, city city_pjp from bi_pjp) t1 full outer join (select entry_date::date entry_date, count(distinct retailer_name) outlets_touched, area_classification, beat_number_original::varchar beat_number_original, city_name from eggoz_soh group by entry_date::date, area_classification, beat_number_original, city_name) t2 on t1.date_pjp = t2.entry_date and t1.beat_number_pjp = t2.beat_number_original and lower(t1.area_classification_pjp) = lower(t2.area_classification) where coalesce(t1.beat_number_pjp,t2.beat_number_original) like \'%1%\' ; create or replace table eggozdb.maplemonk.Beatwise_KPI_Overall_Final as Select pa.date, pa.area, pa.beat_number_original,pa.Eggs_Sold,pa.Eggs_Sold_White,pa.Net_Sales,pa.eggs_returned, pa.Eggs_Sold_Brown, pa.Eggs_Sold_Nutra, pa.Eggs_Sold_FR, pa.Revenue, pa.Collections, pa.Eggs_Replaced, pa.Eggs_Promo,pb.branded_shortfall,pb.NON_BRANDED_SHORTFALL, pb.LESS_SUPPLIED, pb.LESS_SUPPLIED_AFTER_COMMITMENT, pb.SOLD_VS_SUPPLY, pb.SOLD_AND_REPLACEMENT_VS_SUPPLY,pb.FRESH_RETURNED_TO_WAREHOUSE, pb.demand, pb.supply, pb.out, pb.sold, pb.Damage,pb.transfer, pb.promo, pb.Fresh_In, pb.Old_In, pc.No_of_Visit_P, pc.Total_Onboarded_P , pd.No_of_Visit_S, pd.Total_Onboarded_S, pe.No_of_Visit_B, pe.Total_Onboarded_B,pf.No_of_Visit_B_S , pf.Total_Onboarded_B_S, pg.No_of_Visit_total_Primary, pg.Total_Onboarded_Primary, ph.No_of_Visit_Total_Secondary, ph.Total_Onboarded_Secondary,pi.Last_Mile_cost, pi.Last_Mile_Eggs_Out, pi.last_mile_unloading_cost, pj.Total_Procurred_Egg, pj.Amount, pj.Procurred_Egg_White,pj.Amount_White, pj.Procurred_Egg_Brown, pj.Amount_Brown, pj.Procurred_Egg_Nutra, pj.Amount_Nutra, pj.Proc_Price, pj.Procured_Price_White, pj.Procured_Price_Brown, pj.Procured_Price_Nutra, pj.Total_Packaged_Eggs,pj.Total_Packaging_Cost, pj.Eggs_Replaced_White, pj.Eggs_Replaced_Brown, pj.Eggs_Replaced_Nutra, pj.Eggs_Return_White, pj.Eggs_Return_Brown, pj.Eggs_Return_Nutra , pk.First_Mile_Eggs, pk.First_Mile_Cost, pl.No_of_Days, pl.Days_In_Month from ( SELECT DATE_TRUNC(\'DAY\', date) AS date, area AS area, beat_number_original AS beat_number_original, case when sum(eggs_sold) is null then 0 else sum(eggs_sold) end AS Eggs_Sold, sum(eggs_sold_white) AS Eggs_Sold_White, sum(eggs_sold_brown) AS Eggs_Sold_Brown, sum(eggs_sold_nutra) AS Eggs_Sold_Nutra, sum(eggs_sold_fr) AS Eggs_Sold_FR, sum(net_sales) AS Revenue, sum(net_sales) as Net_Sales, sum(eggs_return) as eggs_returned, case when sum(net_sales)=0 then 0 else sum(collections)/sum(net_sales) end AS Collection_Per, sum(collections) AS Collections, sum(eggs_replaced) AS Eggs_Replaced, case when sum(eggs_sold)=0 then 0 else sum(eggs_replaced)/sum(eggs_sold) end AS Replacement_Per, case when sum(eggs_sold_white)=0 then 0 else sum(eggs_replaced_white)/sum(eggs_sold_white) end AS Eggs_Replacement_White_Per, case when sum(eggs_sold_brown)=0 then 0 else sum(eggs_replaced_brown)/sum(eggs_sold_brown) end AS Eggs_Replacement_Brown_Per, case when sum(eggs_sold_nutra)=0 then 0 else sum(eggs_replaced_nutra)/sum(eggs_sold_nutra) end AS Eggs_Replacement_Nutra_Per, case when sum(eggs_sold_fr)=0 then 0 else sum(eggs_replaced_fr)/sum(eggs_sold_fr) end AS Eggs_Replacement_FR_Per, case when sum(eggs_sold)=0 then 0 else sum(eggs_promo)/sum(eggs_sold) end AS Promo_Per, sum(eggs_promo) AS Eggs_Promo FROM maplemonk.summary_reporting_table_beat_retailer WHERE area IN (\'Delhi-GT\', \'Gurgaon-GT\', \'Noida-GT\', \'NCR-OF-MT\', \'NCR-ON-MT\') GROUP BY area, DATE_TRUNC(\'DAY\', date), beat_number_original )pa left join ( SELECT DATE_TRUNC(\'DAY\', date) AS date2, area AS area, beat_number as beat_number, sum(out)-sum(sold)-sum(replacement)+sum(transfer)-sum(promo)-sum(fresh_in) AS BRANDED_SHORTFALL, SUM(replacement)+SUM(return)-sum(damage)-SUM(old_in) AS NON_BRANDED_SHORTFALL, case when sum(demand)=0 then 0 ELSE -1*(sum(demand) - sum(out))/sum(demand) END AS LESS_SUPPLIED, case when sum(supply)=0 then 0 ELSE -1*(sum(supply) - sum(out))/sum(supply) END AS LESS_SUPPLIED_AFTER_COMMITMENT, case when sum(out)=0 then 0 ELSE sum(sold)/sum(out) END AS SOLD_VS_SUPPLY, case when sum(out)=0 then 0 ELSE (sum(sold)+sum(replacement))/sum(out) END AS SOLD_AND_REPLACEMENT_VS_SUPPLY, case when sum(out)=0 then 0 ELSE sum(fresh_in)/sum(out) END AS FRESH_RETURNED_TO_WAREHOUSE, sum(demand) AS Demand, sum(supply) AS Supply, sum(out) AS Out, sum(sold) AS Sold, sum(damage) AS Damage, sum(return) AS Return, sum(replacement) AS Replacement, sum(transfer) AS Transfer, sum(promo) AS Promo, sum(fresh_in) AS Fresh_In, sum(old_in) AS Old_In FROM maplemonk.beat_material_kpi GROUP BY DATE_TRUNC(\'DAY\', date), area, beat_number )pb on pa.date = pb.date2 and pa.area = pb.area and pa.beat_number_original = pb.beat_number left join ( select distinct mm.Date3, mm.area, mm.beat_number_original, sum(mm.retailers_Covered) over (partition by mm.Date3 , mm.area order by mm.Date3 , mm.area) as No_of_Visit_P , sum(mm.total_onboarded) over (partition by mm.Date3 , mm.area order by mm.Date3 , mm.area) as Total_Onboarded_P , avg(mm.beat_Utilization_per) over (partition by mm.Date3 , mm.area order by mm.Date3 , mm.area) as Beat_Utilization_Perc_P from ( SELECT DATE_TRUNC(\'DAY\', date) AS date3, area AS area, beat_number_original AS beat_number_original, count(retailer_name)/(AVG(total_onboarded)*count(DISTINCT date)) AS Beat_Utilization_Per, COUNT(DISTINCT DATE) AS Beat_Visit_counts, count(DISTINCT retailer_name) AS Retailers_Covered, AVG(total_onboarded) AS Total_Onboarded, sum(replaced) AS Replaced, sum(returned) AS Returned, sum(sold) AS Eggs_Sold FROM maplemonk.beat_utilization_test GROUP BY DATE_TRUNC(\'DAY\', date), area, beat_number_original HAVING ((COUNT(DISTINCT(retailer_name)) > 4)) )mm )pc on pa.date = pc.date3 and pa.area = pc.area and pa.beat_number_original = pc.beat_number_original left join ( select distinct nn.Date4, nn.area_classification, nn.beat_number, sum(nn.Retailers_Covered) over (partition by nn.Date4 , nn.area_classification order by nn.Date4 , nn.area_classification) as No_of_Visit_S , sum(nn.Onboarded_Retailers) over (partition by nn.date4 , nn.area_classification order by nn.Date4 , nn.area_classification) as Total_Onboarded_S , avg(nn.beat_Utilization_per) over (partition by nn.date4, nn.area_classification order by nn.Date4 , nn.area_classification) as Beat_Utilization_Perc_S from ( SELECT DATE_TRUNC(\'DAY\', date) AS date4, area_classification AS area_classification, beat_number AS beat_number, count(retailer_id)/(AVG(onboarded_retailers_in_beat)*count(DISTINCT date)) AS Beat_Utilization_Per, COUNT(DISTINCT DATE) AS Beat_Visit_counts, count(DISTINCT retailer_id) AS Retailers_covered, AVG(onboarded_retailers_in_beat) AS Onboarded_Retailers, sum(eggs_sold) AS Eggs_Sold, sum(eggs_rep) AS Eggs_Replaced FROM maplemonk.secondary_untouched_retailers WHERE ((order_status is not null or return_status is not null or replacement_status is not NULL or promo_status is not NULL)) GROUP BY DATE_TRUNC(\'DAY\', date), area_classification, beat_number HAVING ((Count(DISTINCT(retailer_id))>4)) )nn )pd on pa.date = pd.date4 and pa.area = pd.area_classification and pa.beat_number_original = pd.beat_number left join ( select distinct uu.date5, uu.area, uu.beat_number_original, sum(uu.No_of_Visits) over (partition by uu.date5 , uu.area order by uu.date5 , uu.area) as No_of_Visit_B , sum(uu.Total_Onboarded) over (partition by uu.date5 , uu.area order by uu.date5 , uu.area) as Total_Onboarded_B from ( SELECT DATE_TRUNC(\'DAY\', date) AS date5, beat_number_original AS beat_number_original, area AS area, count(DISTINCT retailer_name) AS No_of_Visits, count(DISTINCT case when onboarding_status = \'Active\' then retailer_name end) AS active_Retailer_visits, count (distinct retailer_name) - count(DISTINCT case when onboarding_status = \'Active\' then retailer_name end) AS other_retailer_vists, AVG(total_onboarded) AS Total_Onboarded, count(DISTINCT(retailer_name))/avg(total_onboarded) AS Utilization_Per, sum(sold) AS Eggs_Sold, sum(revenue) AS Revenue, sum(today_billing_collections) AS Today_Billing_Collections, sum(collections) AS Collections, case when sum(sold) = 0 then 0 else sum(replaced)/sum(sold) end AS Replaced_Per, sum(returned) AS Returned, sum(replaced) AS Replaced, case when sum(sold) = 0 then 0 else sum(returned)/sum(sold) END AS Returned_Per FROM maplemonk.beat_utilization_test WHERE sold > 0 GROUP BY DATE_TRUNC(\'DAY\', date), beat_number_original, area )uu )pe on pa.date = pe.date5 and pa.area = pe.area and pa.beat_number_original = pe.beat_number_original left join ( select distinct gg.date6, gg.area, gg.beat_number , sum(gg.No_of_Visits) over (partition by gg.date6 , gg.area order by gg.date6 , gg.area) as No_of_Visit_B_S , sum(gg.Onboarded_Retailers) over (partition by gg.date6 , gg.area order by gg.date6 , gg.area) as Total_Onboarded_B_S from ( SELECT beat_number AS beat_number, area AS area, DATE_TRUNC(\'DAY\', date) AS date6, count(DISTINCT retailer_id) AS No_of_visits, count(DISTINCT case when onboarding_status = \'Active\' then retailer_id end) AS Active_Retailer_visits, count (distinct retailer_id) - count(DISTINCT case when onboarding_status = \'Active\' then retailer_id end) AS Other_retailer_visits, AVG(onboarded_retailers_in_beat) AS Onboarded_Retailers, count(DISTINCT(retailer_id))/AVG(onboarded_retailers_in_beat) AS Beat_Utilization, sum(eggs_ret) AS Eggs_Returned, sum(total_return_amount) AS Amount_Returned, sum(sale) AS Sale, sum(eggs_promo) AS Eggs_Promo, sum(eggs_sold) AS Eggs_Sold, sum(eggs_rep) AS Eggs_Replaced FROM maplemonk.secondary_untouched_retailers WHERE eggs_sold > 0 AND ((order_status is not null or return_status is not null or replacement_status is not NULL or promo_status is not NULL)) GROUP BY beat_number, area, DATE_TRUNC(\'DAY\', date) )gg )pf on pa.date = pf.date6 and pa.area = pf.area and pa.beat_number_original = pf.beat_number left join ( select distinct mm.Date3, mm.area, mm.beat_number_original, sum(mm.retailers_Covered) over (partition by mm.Date3 , mm.area order by mm.Date3 , mm.area) as No_of_Visit_total_Primary ,sum(mm.total_onboarded) over (partition by mm.Date3 , mm.area order by mm.Date3 , mm.area) as Total_Onboarded_Primary from ( SELECT DATE_TRUNC(\'DAY\', date) AS date3, area AS area, beat_number_original AS beat_number_original, count(retailer_name)/(AVG(total_onboarded)*count(DISTINCT date)) AS Beat_Utilization_Per, COUNT(DISTINCT DATE) AS Beat_Visit_counts, count(DISTINCT retailer_name) AS Retailers_Covered, AVG(total_onboarded) AS Total_Onboarded, sum(replaced) AS Replaced, sum(returned) AS Returned, sum(sold) AS Eggs_Sold FROM maplemonk.beat_utilization_test GROUP BY DATE_TRUNC(\'DAY\', date), area, beat_number_original )mm )pg on pa.date = pg.date3 and pa.area = pg.area and pa.beat_number_original = pg.beat_number_original left join ( select distinct nn.Date4, nn.area_classification , nn.beat_number, sum(nn.Retailers_Covered) over (partition by nn.Date4 , nn.area_classification order by nn.Date4 , nn.area_classification) as No_of_Visit_Total_Secondary ,sum(nn.Onboarded_Retailers) over (partition by nn.date4 , nn.area_classification order by nn.Date4 , nn.area_classification) as Total_Onboarded_Secondary from ( SELECT DATE_TRUNC(\'DAY\', date) AS date4, area_classification AS area_classification, beat_number AS beat_number, count(retailer_id)/(AVG(onboarded_retailers_in_beat)*count(DISTINCT date)) AS Beat_Utilization_Per, COUNT(DISTINCT DATE) AS Beat_Visit_counts, count(DISTINCT retailer_id) AS Retailers_covered, AVG(onboarded_retailers_in_beat) AS Onboarded_Retailers, sum(eggs_sold) AS Eggs_Sold, sum(eggs_rep) AS Eggs_Replaced FROM maplemonk.secondary_untouched_retailers WHERE ((order_status is not null or return_status is not null or replacement_status is not NULL or promo_status is not NULL)) GROUP BY DATE_TRUNC(\'DAY\', date), area_classification, beat_number )nn )ph on pa.date = ph.date4 and pa.area = ph.area_classification and pa.beat_number_original = ph.beat_number left join ( select distinct yu.Date13, yu.beat,sum(yu.Last_Mile_cost) over (partition by yu.Date13,yu.area_classification order by yu.Date13,yu.area_classification) as Last_Mile_Cost , sum(yu.last_mile_eggs_out) over (partition by yu.Date13,yu.area_classification order by yu.Date13,yu.area_classification) as Last_Mile_Eggs_Out, sum(yu.last_mile_unloading_cost) over (partition by yu.Date13,yu.area_classification order by yu.Date13,yu.area_classification) as Last_mile_Unloading_cost , yu.Area_classification from ( select DISTINCT to_date(pp.date, \'dd/mm/yyyy\') as Date13, pp.beat, sum(pp.Cost) over (partition by pp.date,pp.\"GT/MT\" order by pp.date,pp.\"GT/MT\") as Last_Mile_Cost, sum(pp.Total_Eggs_Out) over (partition by pp.date,pp.\"GT/MT\" order by pp.date, pp.\"GT/MT\") as Last_Mile_Eggs_Out , pp.\"GT/MT\" , sum(pp.Unloading_Cost) over (partition by pp.date,pp.\"GT/MT\" order by pp.date, pp.\"GT/MT\") as Last_mile_Unloading_cost , case when \"GT/MT\" in (\'D-DST\',\'DGT\') then \'Delhi-GT\' when \"GT/MT\" in (\'G-DST\',\'GGT\') then \'Gurgaon-GT\' when \"GT/MT\" in (\'N-DST\', \'NGT\') then \'Noida-GT\' when \"GT/MT\" in (\'ON-MT\') then \'NCR-ON-MT\' when \"GT/MT\" in (\'OFF-MT\') then \'NCR-OF-MT\' when \"GT/MT\" in (\'UB\',\'DRZ\') then \'UB\' else \'Others\' end as Area_classification from ( select Date , \"Cost/Egg_Out\" as Cost_Per_Egg, Area, Cost, Total_Eggs_Out , beat, \"GT/MT\" ,Unloading_Cost from maplemonk.transport_costs_last___mid_mile where beat not in (\'Mid Mile\' , \'Unbranded\' , \'D2C\' , \'Adhoc\' , \'Horeca\' , \'Darjan\' ,\'Material Transfer\', \'Sample\' , \'Unbranded \') order by date )pp where to_date(pp.date, \'dd/mm/yyyy\') >= \'2023-01-01\' ) yu )pi on pa.date = pi.Date13 and pa.area = pi.area_classification and pa.beat_number_original = pi.beat left join ( select ui.*, bv.* from ( Select DISTINCT xx.GRN_DATE, xx.region, xx.Total_Procurred_Egg,xx.Amount, yy.Procurred_Egg_White, yy.Amount_White,zz.Procurred_Egg_Brown,zz.Amount_Brown, gg.Procurred_Egg_Nutra, gg.Amount_Nutra, xx.Amount/xx.Total_Procurred_Egg as Proc_Price , yy.Amount_White/yy.Procurred_Egg_White as Procured_Price_White , zz.Amount_Brown/zz.Procurred_Egg_Brown as Procured_Price_Brown , gg.Amount_Nutra/gg.Procurred_Egg_Nutra as Procured_Price_Nutra From ( SELECT GRN_DATE, region, sum(EGGS) as Total_Procurred_Egg, sum(amount) as Amount from eggozdb.maplemonk.region_wise_procurement_masterdata group by 1 ,2 ) xx left join (SELECT GRN_DATE, region, sum(EGGS) as Procurred_Egg_White , sum(amount) as Amount_White from eggozdb.maplemonk.region_wise_procurement_masterdata where type =\'White\' group by 1,2 )yy on xx.GRN_DATE= yy.GRN_DATE and xx.region = yy.region left join ( SELECT GRN_DATE, region, sum(EGGS) as Procurred_Egg_Brown , sum(amount) as Amount_Brown from eggozdb.maplemonk.region_wise_procurement_masterdata where type = \'Brown\' group by 1,2 ) zz on xx.GRN_DATE = zz.GRN_DATE and xx.region = zz.region left join ( SELECT GRN_DATE, region ,sum(EGGS) as Procurred_Egg_Nutra, sum(amount) as Amount_Nutra from eggozdb.maplemonk.region_wise_procurement_masterdata where type = \'Nutra+\' group by 1,2 ) gg on xx.GRN_DATE = gg.GRN_DATE and xx.region= gg.region )ui left join ( Select DISTINCT (ds.date), ds.area, ds.beat_number_original, case when ds.area in (\'Bangalore-GT\',\'Bangalore-OF-MT\', \'Bangalore-ON-MT\',\'Bangalore-UB\' ) then \'Bangalore\' when ds.area in (\'Delhi-GT\',\'Noida-GT\', \'NCR-OF-MT\', \'Gurgaon-GT\', \'NCR-ON-MT\') then \'NCR\' when ds.area in (\'East-GT\',\'East-OF-MT\', \'East-ON-MT\', \'East-UB\') then \'East\' when ds.area in (\'MP-ON-MT\', \'MP-OF-MT\', \'Indore-GT\', \'Bhopal-GT\') then \'M.P\' else \'NA\' end as Area_classification22, sum(ds.packaged_eggs) over (partition by ds.date , ds.area order by ds.date , ds.area) as Total_packaged_Eggs, sum(ds.packaging_cost) over (partition by ds.date , ds.area order by ds.date , ds.area) as Total_Packaging_Cost , sum(ds.Eggs_Sold_White) over (partition by ds.date , ds.area order by ds.date , ds.area) as Eggs_Sold_White, sum(ds.Eggs_Sold_Brown) over (partition by ds.date , ds.area order by ds.date , ds.area) as Eggs_Sold_Brown, sum(ds.Eggs_Sold_Nutra) over (partition by ds.date , ds.area order by ds.date , ds.area) as Eggs_Sold_Nutra, sum(ds.Eggs_Replaced_White) over (partition by ds.date , ds.area order by ds.date , ds.area) as Eggs_Replaced_White, sum(ds.Eggs_Replaced_Brown) over (partition by ds.date , ds.area order by ds.date , ds.area) as Eggs_Replaced_Brown, sum(ds.Eggs_Replaced_Nutra) over (partition by ds.date , ds.area order by ds.date , ds.area) as Eggs_Replaced_Nutra, sum(ds.Eggs_Return_White) over (partition by ds.date , ds.area order by ds.date , ds.area) as Eggs_Return_White, sum(ds.Eggs_Return_Brown) over (partition by ds.date , ds.area order by ds.date , ds.area) as Eggs_Return_Brown, sum(ds.Eggs_Return_Nutra) over (partition by ds.date , ds.area order by ds.date , ds.area) as Eggs_Return_Nutra from ( Select cc.* , dd.packaging_cost_per_egg , cc.packaged_eggs * dd.packaging_cost_per_egg as Packaging_Cost from ( SELECT DATE_TRUNC(\'DAY\', date) AS date, area AS area, case when area in (\'Bangalore-GT\',\'Bangalore-OF-MT\') then \'Bangalore-Others\' when area in (\'Delhi-GT\',\'Noida-GT\', \'NCR-OF-MT\', \'Gurgaon-GT\') then \'NCR-Others\' when area in (\'East-GT\',\'East-OF-MT\') then \'East-Others\' when area in (\'NCR-ON-MT\') then \'NCR-ON-MT\' when area in (\'Bangalore-ON-MT\') then \'Bangalore-ON-MT\' when area in (\'East-ON-MT\') then \'East-ON-MT\' else \'NA\' end as Area_classification1, sku AS sku, BEAT_NUMBER_ORIGINAL as BEAT_NUMBER_ORIGINAL, case when sum(eggs_sold) is null then 0 else sum(eggs_sold) end AS Eggs_Sold, sum(net_sales) AS Revenue, sum(amount_return) AS Amount_Returned, case when sum(eggs_sold)-sum(eggs_return) = 0 then 0 else (sum(net_sales)-sum(amount_return))/(sum(eggs_sold)-sum(eggs_return)) END AS Avg_SP, sum(eggs_replaced) AS Eggs_replaced, sum(eggs_return) AS Eggs_Returned, case when sum(eggs_sold)=0 then 0 else sum(eggs_promo)/sum(eggs_sold) end AS Promo_Per, sum(eggs_promo) AS Eggs_promo, case when sum(eggs_sold)-sum(eggs_return) = 0 then 0 ELSE sum(eggs_replaced)/(sum(eggs_sold)-sum(eggs_return)) END AS Replacement_Per, case when sum(eggs_sold)-sum(eggs_return) = 0 then 0 ELSE (sum(eggs_return)/(sum(eggs_sold)-sum(eggs_return))) END AS Returned_Per, sum(eggs_sold) + sum(eggs_promo)+ sum(eggs_replaced) as Packaged_Eggs, sum(eggs_sold_White) as Eggs_Sold_White, sum(eggs_sold_Brown) as Eggs_Sold_Brown, sum(eggs_sold_Nutra) as Eggs_Sold_Nutra, sum(eggs_return_white) as Eggs_Return_White, sum(eggs_return_brown) as Eggs_Return_Brown, sum(eggs_return_nutra) as Eggs_Return_Nutra, sum(eggs_replaced_white) as Eggs_Replaced_White, sum(eggs_replaced_brown) as Eggs_Replaced_Brown, sum(eggs_replaced_Nutra) as Eggs_Replaced_Nutra FROM maplemonk.summary_reporting_table_beat_retailer_sku GROUP BY DATE_TRUNC(\'DAY\', date), area, sku, beat_number_original )cc left join ( select area, sku, packaging_cost_per_egg from eggozdb.maplemonk.pkg_cost_Packaging_cost )dd on cc.sku = dd.sku and cc.Area_classification1 = dd.area )ds )bv on ui.GRN_DATE = bv.date and ui.region = bv.Area_classification22 )pj on pa.date = pj.date and pa.area = pj.area and pa.beat_number_original = pj.beat_number_original left join ( select distinct to_date(Date, \'dd/mm/yyyy\') as Date15, sum(\"Picked_up_Qty(In_Eggs)\") over (partition by date order by Date) as First_Mile_Eggs , sum(Total_Expense) over (partition by date order by Date) as First_Mile_Cost from maplemonk.transport_costs_FM_Vehicle_Details_after_1st_April order by to_date(Date, \'dd/mm/yyyy\') )pk on pa.date = pk.date15 left join ( select DISTINCT date, datediff(\'day\',date_trunc(\'month\',date),date)+1 no_of_days , datediff(\'day\',date_trunc(\'month\',date), last_day(date,\'month\'))+1 days_in_month from eggozdb.maplemonk.summary_reporting_table_beat_retailer group by date, area, parent_retailer_name )pl on pa.date = pl.date ;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from EGGOZDB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        