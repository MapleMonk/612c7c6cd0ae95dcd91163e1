{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "CREATE OR REPLACE TABLE eggozdb.maplemonk.SALES_SUMMARY AS select * ,sum(Net_Sales) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Net_Sales from (select a.date Date ,a.area_classification Area_classification ,ifnull(b.Net_sales,0) Net_Sales, ifnull(b.retailer_count,0) retailer_count from eggozdb.maplemonk.Date_area_dim a left join ( select date ,area_classification ,sum(sales_per_item) Net_sales ,count(distinct retailer_id) retailer_count from ( select cast(timestampadd(minute,660,o.date) as date) Date, rr.id retailer_id ,o.id ,ol1.id ,rr.area_classification Area_Classification ,sum(single_sku_rate*quantity + single_sku_discount*quantity + single_sku_tax*quantity) Sales_per_item from eggozdb.Maplemonk.my_sql_order_order o left join eggozdb.Maplemonk.my_sql_order_orderline ol1 ON o.id=ol1.order_id left join eggozdb.Maplemonk.my_sql_product_product pp ON ol1.product_id =pp.id left join eggozdb.Maplemonk.my_sql_retailer_retailer rr ON o.retailer_id =rr.id left join (select order_id, COUNT(1) AS Items from eggozdb.Maplemonk.my_sql_order_orderline group by order_id) ol2 ON o.id=ol2.order_id WHERE o.status in (\'delivered\', \'completed\') and o.is_trial = \'FALSE\' and pp.brand_type <> \'unbranded\' and o.is_promo = 0 group by cast(timestampadd(minute,660,o.date) as date) , rr.area_classification, o.id, ol1.id, rr.id ) group by date ,area_classification) b on a.area_classification = b.area_classification and a.date = b.date ); CREATE OR REPLACE TABLE eggozdb.maplemonk.Eggs_Sold_SUMMARY AS select * ,sum(eggs_sold) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_sold ,sum(eggs_sold_white) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_sold_white ,sum(eggs_sold_brown) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_sold_brown ,sum(eggs_sold_nutra) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_sold_nutra ,sum(eggs_sold_freerange) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_sold_freerange ,sum(eggs_sold_liquid) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_sold_liquid ,sum(eggs_sold_frozen) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_sold_frozen ,sum(eggs_sold_champs) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_sold_champs from ( select a.date Date ,a.area_classification Area_classification ,ifnull(b.eggs_sold,0) eggs_sold , ifnull(b.eggs_sold_white,0) eggs_sold_white , ifnull(b.eggs_sold_brown,0) eggs_sold_brown , ifnull(b.eggs_sold_nutra,0) eggs_sold_nutra , ifnull(b.eggs_sold_freerange,0) eggs_sold_freerange , ifnull(b.eggs_sold_liquid,0) eggs_sold_liquid , ifnull(b.eggs_sold_frozen,0) eggs_sold_frozen , ifnull(b.eggs_sold_champs,0) eggs_sold_champs from eggozdb.maplemonk.Date_area_dim a left join ( select date ,area_classification , ifnull(eggs_sold_white,0) eggs_sold_white , ifnull(eggs_sold_brown,0) eggs_sold_brown , ifnull(eggs_sold_nutra,0) eggs_sold_nutra , ifnull(eggs_sold_freerange,0) eggs_sold_freerange , ifnull(eggs_sold_liquid,0) eggs_sold_liquid , ifnull(eggs_sold_frozen,0) eggs_sold_frozen , ifnull(eggs_sold_champs,0) eggs_sold_champs ,(ifnull(eggs_sold_white,0) + ifnull(eggs_sold_brown,0) + ifnull(eggs_sold_nutra,0) + ifnull(eggs_sold_freerange,0) + ifnull(eggs_sold_liquid,0) + ifnull(eggs_sold_frozen,0) + ifnull(eggs_sold_champs,0) ) as eggs_sold from ( select cast(timestampadd(minute,660,o.date) as date) Date ,rr.area_classification Area_Classification ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end) Egg_Name ,SUM(ol1.quantity*pp.SKU_Count) Eggs_Sold from eggozdb.Maplemonk.my_sql_order_order o left join eggozdb.Maplemonk.my_sql_order_orderline ol1 ON o.id=ol1.order_id left join eggozdb.Maplemonk.my_sql_product_product pp ON ol1.product_id =pp.id left join eggozdb.Maplemonk.my_sql_retailer_retailer rr ON o.retailer_id =rr.id left join (select order_id, COUNT(1) AS Items from eggozdb.Maplemonk.my_sql_order_orderline group by order_id) ol2 ON o.id=ol2.order_id WHERE o.status in (\'delivered\', \'completed\') and o.is_trial = \'FALSE\' and pp.brand_type <> \'unbranded\' and o.is_promo = 0 group by cast(timestampadd(minute,660,o.date) as date) , rr.area_classification, ( case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end ) ) pivot(sum(eggs_sold) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Champs\', \'FreeRange\', \'Frozen\', \'Liquid\')) as p (Date, Area_Classification, eggs_sold_white, eggs_sold_brown, eggs_sold_nutra, eggs_sold_champs, eggs_sold_freerange, eggs_sold_frozen, eggs_sold_liquid) ) b on a.area_classification = b.Area_Classification and a.date = b.date where year(a.date)>= 2020 and year(a.date) <= year(getdate()) ); CREATE OR REPLACE TABLE eggozdb.maplemonk.Collection_Summary as select * ,sum(Collections) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_Collections from ( select a.date Date ,a.area_classification Area_classification ,ifnull(b.Collections,0) Collections from eggozdb.maplemonk.Date_area_dim a left join ( select date(timestampadd(minute,660,ps.transaction_date)) Collection_Date, area_classification, sum(pay_amount) Collections from eggozdb.maplemonk.my_sql_payment_payment pp left join eggozdb.maplemonk.my_sql_payment_invoice pi on pi.id = pp.invoice_id left join eggozdb.maplemonk.my_sql_payment_salestransaction ps on pp.salesTransaction_id = ps.id left join eggozdb.maplemonk.my_sql_order_order oo on oo.id = pi.order_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = ps.retailer_id where ps.transaction_type in (\'Credit\',\'Adjusted\') and ps.is_trial = \'FALSE\' and oo.is_promo = 0 group by area_classification, date(timestampadd(minute,660,ps.transaction_date)) ) b on a.area_classification = b.area_classification and a.date = b.collection_date where year(a.date)>= 2020 and year(a.date) <= year(getdate()) ); create or replace table eggozdb.maplemonk.Replacement_Summary as select * ,sum(eggs_replaced) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_replaced ,sum(eggs_replaced_white) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_replaced_white ,sum(eggs_replaced_brown) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_replaced_brown ,sum(eggs_replaced_nutra) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_replaced_nutra ,sum(eggs_replaced_freerange) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_replaced_freerange ,sum(eggs_replaced_liquid) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_replaced_liquid ,sum(eggs_replaced_frozen) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_replaced_frozen ,sum(eggs_replaced_champs) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_replaced_champs from ( select a.date Date ,a.area_classification Area_classification ,ifnull(b.eggs_replaced,0) eggs_replaced , ifnull(b.eggs_replaced_white,0) eggs_replaced_white , ifnull(b.eggs_replaced_brown,0) eggs_replaced_brown , ifnull(b.eggs_replaced_nutra,0) eggs_replaced_nutra , ifnull(b.eggs_replaced_freerange,0) eggs_replaced_freerange , ifnull(b.eggs_replaced_liquid,0) eggs_replaced_liquid , ifnull(b.eggs_replaced_frozen,0) eggs_replaced_frozen , ifnull(b.eggs_replaced_champs,0) eggs_replaced_champs from eggozdb.maplemonk.Date_area_dim a left join ( select replacement_date , area_classification , ifnull(eggs_replaced_white,0) eggs_replaced_white , ifnull(eggs_replaced_brown,0) eggs_replaced_brown , ifnull(eggs_replaced_nutra,0) eggs_replaced_nutra , ifnull(eggs_replaced_freerange,0) eggs_replaced_freerange , ifnull(eggs_replaced_liquid,0) eggs_replaced_liquid , ifnull(eggs_replaced_frozen,0) eggs_replaced_frozen , ifnull(eggs_replaced_champs,0) eggs_replaced_champs ,(ifnull(eggs_replaced_white,0) + ifnull(eggs_replaced_brown,0) + ifnull(eggs_replaced_nutra,0) + ifnull(eggs_replaced_freerange,0) + ifnull(eggs_replaced_liquid,0) + ifnull(eggs_replaced_frozen,0) + ifnull(eggs_replaced_champs,0) ) as eggs_replaced from ( select date(timestampadd(minute,660,or1.date)) as Replacement_Date ,rr.area_classification ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end) Egg_Name ,sum(or1.quantity* pp.sku_count) Eggs_replaced from eggozdb.maplemonk.my_sql_order_orderreturnline or1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr ON or1.retailer_id =rr.id left JOIN eggozdb.maplemonk.my_sql_product_product pp on pp.id = or1.product_id where line_type in (\'Replacement\') and pp.brand_type <> \'unbranded\' group by rr.area_classification, date(timestampadd(minute,660,or1.date)) ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end) ) pivot( sum(eggs_replaced) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Champs\', \'FreeRange\', \'Frozen\', \'Liquid\')) as p (Replacement_date, area_classification, eggs_replaced_white, eggs_replaced_brown, eggs_replaced_nutra, eggs_replaced_champs, eggs_replaced_freerange, eggs_replaced_frozen, eggs_replaced_liquid) ) b on a.area_classification = b.area_classification and a.date = b.replacement_date where year(a.date)>= 2020 and year(a.date) <= year(getdate()) ) ; create or replace table eggozdb.maplemonk.Return_Summary as select * ,sum(eggs_returned) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_returned ,sum(eggs_returned_white) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_returned_white ,sum(eggs_returned_brown) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_returned_brown ,sum(eggs_returned_nutra) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_returned_nutra ,sum(eggs_returned_freerange) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_returned_freerange ,sum(eggs_returned_liquid) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_returned_liquid ,sum(eggs_returned_frozen) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_returned_frozen ,sum(eggs_returned_champs) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_returned_champs from ( select a.date Date ,a.area_classification Area_classification ,ifnull(b.eggs_returned,0) eggs_returned , ifnull(b.eggs_returned_white,0) eggs_returned_white , ifnull(b.eggs_returned_brown,0) eggs_returned_brown , ifnull(b.eggs_returned_nutra,0) eggs_returned_nutra , ifnull(b.eggs_returned_freerange,0) eggs_returned_freerange , ifnull(b.eggs_returned_liquid,0) eggs_returned_liquid , ifnull(b.eggs_returned_frozen,0) eggs_returned_frozen , ifnull(b.eggs_returned_champs,0) eggs_returned_champs from eggozdb.maplemonk.Date_area_dim a left join ( select return_date , area_classification , ifnull(eggs_returned_white,0) eggs_returned_white , ifnull(eggs_returned_brown,0) eggs_returned_brown , ifnull(eggs_returned_nutra,0) eggs_returned_nutra , ifnull(eggs_returned_freerange,0) eggs_returned_freerange , ifnull(eggs_returned_liquid,0) eggs_returned_liquid , ifnull(eggs_returned_frozen,0) eggs_returned_frozen , ifnull(eggs_returned_champs,0) eggs_returned_champs ,(ifnull(eggs_returned_white,0) + ifnull(eggs_returned_brown,0) + ifnull(eggs_returned_nutra,0) + ifnull(eggs_returned_freerange,0) + ifnull(eggs_returned_liquid,0) + ifnull(eggs_returned_frozen,0) + ifnull(eggs_returned_champs,0) ) as eggs_returned from ( select date(timestampadd(minute,660,or1.pickup_date)) as Return_Date ,rr.area_classification ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end) Egg_Name ,sum(or1.quantity* pp.sku_count) Eggs_returned from eggozdb.maplemonk.my_sql_order_orderreturnline or1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr ON or1.retailer_id =rr.id left JOIN eggozdb.maplemonk.my_sql_product_product pp on pp.id = or1.product_id where line_type in (\'Return\') and pp.brand_type <> \'unbranded\' group by rr.area_classification, date(timestampadd(minute,660,or1.pickup_date)) ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end) ) pivot( sum(eggs_returned) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Champs\', \'FreeRange\', \'Frozen\', \'Liquid\')) as p (Return_date, area_classification, eggs_returned_white, eggs_returned_brown, eggs_returned_nutra, eggs_returned_champs, eggs_returned_freerange, eggs_returned_frozen, eggs_returned_liquid) ) b on a.area_classification = b.area_classification and a.date = b.return_date where year(a.date)>= 2020 and year(a.date) <= year(getdate()) ) ; create or replace table eggozdb.maplemonk.ReturnAmount_Summary as select * ,sum(amount_return) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_amount_return ,sum(amount_return_white) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_amount_return_white ,sum(amount_return_brown) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_amount_return_brown ,sum(amount_return_nutra) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_amount_return_nutra ,sum(amount_return_freerange) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_amount_return_freerange ,sum(amount_return_liquid) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_amount_return_liquid ,sum(amount_return_frozen) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_amount_return_frozen ,sum(amount_return_champs) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_amount_return_champs from ( select a.date Date ,a.area_classification Area_classification ,ifnull(b.amount_return,0) amount_return , ifnull(b.amount_return_white,0) amount_return_white , ifnull(b.amount_return_brown,0) amount_return_brown , ifnull(b.amount_return_nutra,0) amount_return_nutra , ifnull(b.amount_return_freerange,0) amount_return_freerange , ifnull(b.amount_return_liquid,0) amount_return_liquid , ifnull(b.amount_return_frozen,0) amount_return_frozen , ifnull(b.amount_return_champs,0) amount_return_champs from eggozdb.maplemonk.Date_area_dim a left join ( select return_date , area_classification , ifnull(amount_return_white,0) amount_return_white , ifnull(amount_return_brown,0) amount_return_brown , ifnull(amount_return_nutra,0) amount_return_nutra , ifnull(amount_return_freerange,0) amount_return_freerange , ifnull(amount_return_liquid,0) amount_return_liquid , ifnull(amount_return_frozen,0) amount_return_frozen , ifnull(amount_return_champs,0) amount_return_champs ,(ifnull(amount_return_white,0) + ifnull(amount_return_brown,0) + ifnull(amount_return_nutra,0) + ifnull(amount_return_freerange,0) + ifnull(amount_return_liquid,0) + ifnull(amount_return_frozen,0) + ifnull(amount_return_champs,0) ) as amount_return from ( select date(timestampadd(minute,660,or1.pickup_date)) as return_date ,rr.area_classification ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end) Egg_Name ,sum(or1.amount) Amount_Return from eggozdb.maplemonk.my_sql_order_orderreturnline or1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr ON or1.retailer_id =rr.id left JOIN eggozdb.maplemonk.my_sql_product_product pp on pp.id = or1.product_id where line_type in (\'Return\') and pp.brand_type <> \'unbranded\' group by rr.area_classification, date(timestampadd(minute,660,or1.pickup_date)) ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end) ) pivot( sum(Amount_Return) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Champs\', \'FreeRange\', \'Frozen\', \'Liquid\')) as p (return_date, area_classification, amount_return_white, amount_return_brown, amount_return_nutra, amount_return_champs, amount_return_freerange, amount_return_frozen, amount_return_liquid) ) b on a.area_classification = b.area_classification and a.date = b.return_date where year(a.date)>= 2020 and year(a.date) <= year(getdate()) ) ; create or replace table eggozdb.maplemonk.Promo_Summary as select * ,sum(eggs_promo) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_promo ,sum(eggs_promo_white) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_promo_white ,sum(eggs_promo_brown) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_promo_brown ,sum(eggs_promo_nutra) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_promo_nutra ,sum(eggs_promo_freerange) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_promo_freerange ,sum(eggs_promo_liquid) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_promo_liquid ,sum(eggs_promo_frozen) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_promo_frozen ,sum(eggs_promo_champs) over (partition by area_classification,year(date), month(date) order by year (date), month(date), Date) MTD_eggs_promo_champs from ( select a.date Date ,a.area_classification Area_classification ,ifnull(b.eggs_promo,0) eggs_promo , ifnull(b.eggs_promo_white,0) eggs_promo_white , ifnull(b.eggs_promo_brown,0) eggs_promo_brown , ifnull(b.eggs_promo_nutra,0) eggs_promo_nutra , ifnull(b.eggs_promo_freerange,0) eggs_promo_freerange , ifnull(b.eggs_promo_liquid,0) eggs_promo_liquid , ifnull(b.eggs_promo_frozen,0) eggs_promo_frozen , ifnull(b.eggs_promo_champs,0) eggs_promo_champs from eggozdb.maplemonk.Date_area_dim a left join ( select promo_date , area_classification , ifnull(eggs_promo_white,0) eggs_promo_white , ifnull(eggs_promo_brown,0) eggs_promo_brown , ifnull(eggs_promo_nutra,0) eggs_promo_nutra , ifnull(eggs_promo_freerange,0) eggs_promo_freerange , ifnull(eggs_promo_liquid,0) eggs_promo_liquid , ifnull(eggs_promo_frozen,0) eggs_promo_frozen , ifnull(eggs_promo_champs,0) eggs_promo_champs ,(ifnull(eggs_promo_white,0) + ifnull(eggs_promo_brown,0) + ifnull(eggs_promo_nutra,0) + ifnull(eggs_promo_freerange,0) + ifnull(eggs_promo_liquid,0) + ifnull(eggs_promo_frozen,0) + ifnull(eggs_promo_champs,0) ) as eggs_promo from ( select date(timestampadd(minute,660,or1.date)) as Promo_Date ,rr.area_classification ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end) Egg_Name ,sum(or1.quantity* pp.sku_count) Eggs_promo from eggozdb.maplemonk.my_sql_order_orderreturnline or1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr ON or1.retailer_id =rr.id left JOIN eggozdb.maplemonk.my_sql_product_product pp on pp.id = or1.product_id where line_type in (\'Promo\') and pp.brand_type <> \'unbranded\' group by rr.area_classification, date(timestampadd(minute,660,or1.date)) ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end) ) pivot( sum(eggs_promo) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Champs\', \'FreeRange\', \'Frozen\', \'Liquid\')) as p (promo_date, area_classification, eggs_promo_white, eggs_promo_brown, eggs_promo_nutra, eggs_promo_champs, eggs_promo_freerange, eggs_promo_frozen, eggs_promo_liquid) ) b on a.area_classification = b.area_classification and a.date = b.promo_date where year(a.date)>= 2020 and year(a.date) <= year(getdate()) ) ; create or replace table eggozdb.maplemonk.Retailers_onboarded_summary as select dad.date, dad.area_classification, sum(tt.onboarded_retailers) over (partition by tt.area_classification, year(tt.onboarding_date), month(tt.onboarding_date) order by year(tt.onboarding_date), month(tt.onboarding_date)) as mtd_retailers_onboarded, sum(tt.onboarded_retailers) over (partition by tt.area_classification, year(tt.onboarding_date), month(tt.onboarding_date), tt.onboarding_date order by year(tt.onboarding_date), month(tt.onboarding_date), tt.onboarding_date) as daily_retailers_onboarded, nn.active_stores, mm.billing_stores, ll.\"Orders Count\" as new_retailers_bills from eggozdb.maplemonk.date_area_dim dad left join ( select ar2.date as onboarding_date, ar2.area_classification, count(distinct rr.retailer_name) as onboarded_retailers from eggozdb.maplemonk.date_area_dim ar2 left join ( select cast(timestampadd(minute, 660, onboarding_date) as date) onboarding_date, area_classification, code retailer_name from eggozdb.maplemonk.my_sql_retailer_retailer where onboarding_status = \'Active\' and id<>7518 ) rr on ar2.area_classification = rr.area_classification and ar2.date = rr.onboarding_date where year(ar2.date) >= 2021 and ar2.date<=cast(timestampadd(minute,660,getdate()) as date) group by ar2.date, ar2.area_classification ) tt on dad.date = tt.onboarding_date and dad.area_classification = tt.area_classification left join ( select ar1.date, ar1.area_classification, count(distinct ar.retailer_name) active_Stores from eggozdb.maplemonk.date_area_dim ar1 join ( select retailer_name, date, area_classification from eggozdb.maplemonk.active_retailers ) ar on ar1.area_classification = ar.area_classification and date_from_parts(year(ar1.date), month(ar1.date), 1) <= ar.date and ar1.date >= ar.date where year(ar1.date) >= 2021 and ar1.date<=cast(timestampadd(minute,660,getdate()) as date) group by ar1.date, ar1.area_classification ) nn on dad.date = nn.date and dad.area_classification = nn.area_classification left join ( select ar1.date, ar1.area_classification, count(distinct ar.retailer_name) billing_Stores from eggozdb.maplemonk.date_area_dim ar1 join ( select retailer_name, date, area_classification from eggozdb.maplemonk.billing_retailers ) ar on ar1.area_classification = ar.area_classification and date_from_parts(year(ar1.date), month(ar1.date), 1) <= ar.date and ar1.date >= ar.date where year(ar1.date) >= 2021 and ar1.date<=cast(timestampadd(minute,660,getdate()) as date) group by ar1.date, ar1.area_classification ) mm on dad.date = mm.date and dad.area_classification = mm.area_classification left join ( SELECT \"MONTH-YEAR\" AS \"MONTH-YEAR\", \"ACQ-MONTH-YEAR\" AS \"ACQ-MONTH-YEAR\", area_classification, count(code) AS \"Orders Count\" FROM maplemonk.retailer_cohort WHERE ((classification_name IN (\'A\',\'A+\',\'B\',\'C\',\'D\',\'DC\'))) and \"MONTH-YEAR\"=\"ACQ-MONTH-YEAR\" GROUP BY \"MONTH-YEAR\",\"ACQ-MONTH-YEAR\", area_classification ) ll on month(dad.date)=right(ll.\"MONTH-YEAR\",2) and year(dad.date)=left(ll.\"MONTH-YEAR\",4) and dad.area_classification=ll.area_classification where year(dad.date) >= 2021 and dad.date<=cast(timestampadd(minute,660,getdate()) as date) ; CREATE OR REPLACE TABLE eggozdb.maplemonk.Summary_reporting_table as select a.date , a.area_classification as Area , a.retailer_count , Net_Sales , MTD_Net_Sales as MTD_Sales , eggs_sold , eggs_sold_white , eggs_sold_brown , eggs_sold_nutra , eggs_sold_champs , eggs_sold_freerange , eggs_sold_frozen , eggs_sold_liquid , MTD_eggs_sold , MTD_eggs_sold_white , MTD_eggs_sold_brown , MTD_eggs_sold_nutra , MTD_eggs_sold_champs , MTD_eggs_sold_freerange , MTD_eggs_sold_frozen , MTD_eggs_sold_liquid , collections , mtd_collections , eggs_replaced , eggs_replaced_white , eggs_replaced_brown , eggs_replaced_nutra , eggs_replaced_champs , eggs_replaced_freerange , eggs_replaced_frozen , eggs_replaced_liquid , MTD_eggs_replaced , MTD_eggs_replaced_white , MTD_eggs_replaced_brown , MTD_eggs_replaced_nutra , MTD_eggs_replaced_champs , MTD_eggs_replaced_freerange , MTD_eggs_replaced_frozen , MTD_eggs_replaced_liquid , eggs_returned , eggs_returned_white , eggs_returned_brown , eggs_returned_nutra , eggs_returned_champs , eggs_returned_freerange , eggs_returned_frozen , eggs_returned_liquid , MTD_eggs_returned , MTD_eggs_returned_white , MTD_eggs_returned_brown , MTD_eggs_returned_nutra , MTD_eggs_returned_champs , MTD_eggs_returned_freerange , MTD_eggs_returned_frozen , MTD_eggs_returned_liquid , amount_return , amount_return_white , amount_return_brown , amount_return_nutra , amount_return_champs , amount_return_freerange , amount_return_frozen , amount_return_liquid , MTD_amount_return , MTD_amount_return_white , MTD_amount_return_brown , MTD_amount_return_nutra , MTD_amount_return_champs , MTD_amount_return_freerange , MTD_amount_return_frozen , MTD_amount_return_liquid , eggs_promo , eggs_promo_white , eggs_promo_brown , eggs_promo_nutra , eggs_promo_champs , eggs_promo_freerange , eggs_promo_frozen , eggs_promo_liquid , MTD_eggs_promo , MTD_eggs_promo_white , MTD_eggs_promo_brown , MTD_eggs_promo_nutra , MTD_eggs_promo_champs , MTD_eggs_promo_freerange , MTD_eggs_promo_frozen , MTD_eggs_promo_liquid ,d.Daily_Retailers_Onboarded ,d.MTD_Retailers_Onboarded ,os.MTD_Retailers_Onboarded Previous_Month_MTD_Retailers_onboarded ,datediff(day, date(DATE_TRUNC(\'MONTH\',a.date)), a.date) + 1 as Days_in_month ,d.ACTIVE_STORES ,d.billing_stores ,d.new_retailers_bills from eggozdb.maplemonk.SALES_SUMMARY a left join eggozdb.maplemonk.Collection_Summary b on a.area_classification = b.area_classification and a.date = b.date left join eggozdb.maplemonk.Replacement_Summary c on a.area_classification = c.area_classification and a.date = c.date left join eggozdb.maplemonk.Retailers_onboarded_summary d on d.area_Classification = a.area_classification and d.date = a.date left join eggozdb.maplemonk.Retailers_onboarded_summary os on os.area_Classification = d.area_classification and os.date = DATEADD(DAY,(-1), DATE_TRUNC(\'MONTH\',d.date)) left join eggozdb.maplemonk.Eggs_Sold_SUMMARY e on e.area_Classification = a.area_classification and e.date = a.date left join eggozdb.maplemonk.Return_Summary f on a.area_classification = f.area_classification and a.date = f.date left join eggozdb.maplemonk.Promo_Summary g on a.area_classification = g.area_classification and a.date = g.date left join eggozdb.maplemonk.ReturnAmount_Summary ra on a.area_classification = ra.area_classification and a.date = ra.date ; create or replace table eggozdb.Maplemonk.Sales_summary_beat_retailer as select date ,salesPerson_id ,name,email ,area_classification ,beat_name ,beat_number_operations ,beat_number_original ,code ,SKU ,product_type ,product_name ,classification_name ,sum(sales_per_item) Net_sales from ( select cast(timestampadd(minute,660,o.date) as date) Date ,o.id ,o.salesPerson_id salesPerson_id ,cu.name ,cu.email ,ol1.id ,rr.area_classification Area_Classification ,rr.code ,ba.beat_name ,ba.beat_number beat_number_operations ,rr.beat_number beat_number_original ,rc.name classification_name ,rr.onboarding_status ,sum(single_sku_rate*quantity + single_sku_discount*quantity +single_sku_tax*quantity) Sales_per_item ,concat(pp.sku_count,pp.short_name) SKU ,pp.product_type ,pp.name as product_name from eggozdb.Maplemonk.my_sql_order_order o left join eggozdb.Maplemonk.my_sql_order_orderline ol1 ON o.id=ol1.order_id left join eggozdb.maplemonk.my_sql_saleschain_salespersonprofile sp on o.salesPerson_id=sp.id left join eggozdb.maplemonk.my_sql_custom_auth_user cu on sp.user_id = cu.id left join eggozdb.Maplemonk.my_sql_product_product pp ON ol1.product_id =pp.id left join eggozdb.Maplemonk.my_sql_retailer_retailer rr ON o.retailer_id =rr.id left join eggozdb.Maplemonk.my_sql_retailer_classification rc ON rr.classification_id = rc.id left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment ba on ba.id = o.beat_assignment_id left join (select order_id, COUNT(1) AS Items from eggozdb.Maplemonk.my_sql_order_orderline group by order_id) ol2 ON o.id=ol2.order_id WHERE o.status in (\'delivered\', \'completed\') and o.is_trial = \'FALSE\' and pp.brand_type <> \'unbranded\' and o.is_promo = 0 group by cast(timestampadd(minute,660,o.date) as date) , rr.area_classification, rr.code, ba.beat_name,ba.beat_number, o.id, ol1.id, concat(pp.sku_count,pp.short_name), pp.product_type, pp.name,o.salesPerson_id,cu.name,cu.email, rc.name, rr.onboarding_status,rr.beat_number ) group by date ,area_classification,salesPerson_id,name,email, beat_name, code, SKU, product_type, product_name, classification_name, onboarding_status,beat_number_operations, beat_number_original ; create or replace table eggozdb.Maplemonk.Eggs_Sold_SUMMARY_beat_retailer as select date ,area_classification ,beat_name ,beat_number_operations ,beat_number_original ,code ,product_name ,classification_name ,SKU ,product_type , ifnull(eggs_sold_white,0) eggs_sold_white , ifnull(eggs_sold_brown,0) eggs_sold_brown , ifnull(eggs_sold_nutra,0) eggs_sold_nutra , ifnull(eggs_sold_freerange,0) eggs_sold_freerange , ifnull(eggs_sold_liquid,0) eggs_sold_liquid , ifnull(eggs_sold_frozen,0) eggs_sold_frozen , ifnull(eggs_sold_champs,0) eggs_sold_champs ,(ifnull(eggs_sold_white,0) + ifnull(eggs_sold_brown,0) + ifnull(eggs_sold_nutra,0) + ifnull(eggs_sold_freerange,0) + ifnull(eggs_sold_liquid,0) + ifnull(eggs_sold_frozen,0) + ifnull(eggs_sold_champs,0) ) as eggs_sold ,salesPerson_id from ( select cast(timestampadd(minute,660,o.date) as date) Date ,rr.area_classification Area_Classification ,ba.beat_name ,ba.beat_number beat_number_operations ,rr.beat_number beat_number_original ,rr.code ,rc.name as classification_name ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end) Egg_Name ,concat(pp.sku_count,pp.short_name) SKU ,pp.product_type ,pp.name as product_name ,SUM(ol1.quantity*pp.SKU_Count) Eggs_Sold ,o.salesPerson_id from eggozdb.Maplemonk.my_sql_order_order o left join eggozdb.Maplemonk.my_sql_order_orderline ol1 ON o.id=ol1.order_id left join eggozdb.Maplemonk.my_sql_product_product pp ON ol1.product_id =pp.id left join eggozdb.Maplemonk.my_sql_retailer_retailer rr ON o.retailer_id =rr.id left join eggozdb.Maplemonk.my_sql_retailer_classification rc ON rr.classification_id = rc.id left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment ba on ba.id = o.beat_assignment_id left join (select order_id, COUNT(1) AS Items from eggozdb.Maplemonk.my_sql_order_orderline group by order_id) ol2 ON o.id=ol2.order_id WHERE o.status in (\'delivered\', \'completed\') and o.is_trial = \'FALSE\' and pp.brand_type <> \'unbranded\' and o.is_promo = 0 group by cast(timestampadd(minute,660,o.date) as date) , rr.area_classification, (case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end) , ba.beat_name, ba.beat_number, rr.code, rc.name, concat(pp.sku_count,pp.short_name), pp.product_type, pp.name, rr.beat_number, o.salesPerson_id ) pivot( sum(eggs_sold) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Champs\', \'FreeRange\', \'Frozen\', \'Liquid\')) as p (Date, Area_Classification, beat_name, beat_number_operations, beat_number_original, code, SKU, product_type, product_name, salesPerson_id, classification_name, eggs_sold_white, eggs_sold_brown, eggs_sold_nutra, eggs_sold_champs, eggs_sold_freerange, eggs_sold_frozen, eggs_sold_liquid) ; CREATE OR REPLACE TABLE eggozdb.maplemonk.Collection_Summary_beat_retailer as select date(timestampadd(minute,660,ps.transaction_date)) Date ,area_classification ,sum(pay_amount) Collections ,rr.code ,ba.beat_name ,ba.beat_number beat_number_operations ,rr.beat_number beat_number_original ,rc.name Classification_name ,pc.number payment_cycle from eggozdb.maplemonk.my_sql_payment_payment pp left join eggozdb.maplemonk.my_sql_payment_invoice pi on pi.id = pp.invoice_id left join eggozdb.maplemonk.my_sql_payment_salestransaction ps on pp.salesTransaction_id = ps.id left join eggozdb.maplemonk.my_sql_order_order oo on oo.id = pi.order_id left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment ba on ba.id = ps.beat_assignment_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = ps.retailer_id left join eggozdb.maplemonk.my_sql_retailer_retailerpaymentcycle pc on pc.id = rr.payment_cycle_id left join eggozdb.Maplemonk.my_sql_retailer_classification rc ON rr.classification_id = rc.id where ps.transaction_type in (\'Credit\',\'Adjusted\') and ps.is_trial = \'FALSE\' and oo.is_promo = 0 group by area_classification, date(timestampadd(minute,660,ps.transaction_date)), rr.code, ba.beat_name, rc.name, ba.beat_number, rr.beat_number, pc.number ; create or replace table eggozdb.maplemonk.Replacement_Summary_beat_retailer as select replacement_date date , area_classification ,beat_name ,beat_number_operations ,beat_number_original ,code ,classification_name ,SKU ,product_type ,product_name , ifnull(eggs_replaced_white,0) eggs_replaced_white , ifnull(eggs_replaced_brown,0) eggs_replaced_brown , ifnull(eggs_replaced_nutra,0) eggs_replaced_nutra , ifnull(eggs_replaced_freerange,0) eggs_replaced_freerange , ifnull(eggs_replaced_liquid,0) eggs_replaced_liquid , ifnull(eggs_replaced_frozen,0) eggs_replaced_frozen , ifnull(eggs_replaced_champs,0) eggs_replaced_champs ,(ifnull(eggs_replaced_white,0) + ifnull(eggs_replaced_brown,0) + ifnull(eggs_replaced_nutra,0) + ifnull(eggs_replaced_freerange,0) + ifnull(eggs_replaced_liquid,0) + ifnull(eggs_replaced_frozen,0) + ifnull(eggs_replaced_champs,0) ) as eggs_replaced ,salesperson_id from ( select date(timestampadd(minute,660,or1.date)) as Replacement_Date ,rr.area_classification ,ba.beat_name ,ba.beat_number beat_number_operations ,rr.beat_number beat_number_original ,rr.code ,rc.name as classification_name ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end) Egg_Name ,concat(pp.sku_count,pp.short_name) SKU ,pp.product_type ,pp.name as product_name ,sum(or1.quantity* pp.sku_count) Eggs_replaced ,or1.salesperson_id from eggozdb.maplemonk.my_sql_order_orderreturnline or1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr ON or1.retailer_id =rr.id left join eggozdb.Maplemonk.my_sql_retailer_classification rc ON rr.classification_id = rc.id left JOIN eggozdb.maplemonk.my_sql_product_product pp on pp.id = or1.product_id left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment ba on ba.id = or1.beat_assignment_id where line_type in (\'Replacement\') and pp.brand_type <> \'unbranded\' group by rr.area_classification, date(timestampadd(minute,660,or1.date)) ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end) ,ba.beat_name, ba.beat_number, rr.beat_number, or1.salesperson_id ,rr.code,rc.name, concat(pp.sku_count,pp.short_name), pp.product_type, pp.name ) pivot( sum(eggs_replaced) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Champs\', \'FreeRange\', \'Frozen\', \'Liquid\')) as p (Replacement_date, area_classification, beat_name, beat_number_operations, beat_number_original, SKU, product_type, product_name, salesperson_id, code, classification_name, eggs_replaced_white, eggs_replaced_brown, eggs_replaced_nutra, eggs_replaced_champs, eggs_replaced_freerange, eggs_replaced_frozen, eggs_replaced_liquid) ; create or replace table eggozdb.maplemonk.Promo_Summary_beat_retailer as select Promo_date date , area_classification ,beat_name ,beat_number_operations ,beat_number_original ,code ,classification_name ,SKU ,product_type ,product_name , ifnull(eggs_promo_white,0) eggs_promo_white , ifnull(eggs_promo_brown,0) eggs_promo_brown , ifnull(eggs_promo_nutra,0) eggs_promo_nutra , ifnull(eggs_promo_freerange,0) eggs_promo_freerange , ifnull(eggs_promo_liquid,0) eggs_promo_liquid , ifnull(eggs_promo_frozen,0) eggs_promo_frozen , ifnull(eggs_promo_champs,0) eggs_promo_champs ,(ifnull(eggs_promo_white,0) + ifnull(eggs_promo_brown,0) + ifnull(eggs_promo_nutra,0) + ifnull(eggs_promo_freerange,0) + ifnull(eggs_promo_liquid,0) + ifnull(eggs_promo_frozen,0) + ifnull(eggs_promo_champs,0) ) as eggs_promo , salesPerson_id from ( select date(timestampadd(minute,660,or1.date)) as Promo_Date ,rr.area_classification ,ba.beat_name ,ba.beat_number beat_number_operations ,rr.beat_number beat_number_original ,rr.code ,rc.name as classification_name ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end) Egg_Name ,concat(pp.sku_count,pp.short_name) SKU ,pp.product_type ,pp.name as product_name ,sum(or1.quantity* pp.sku_count) Eggs_promo , or1.salesPerson_id from eggozdb.maplemonk.my_sql_order_orderreturnline or1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr ON or1.retailer_id =rr.id left join eggozdb.Maplemonk.my_sql_retailer_classification rc ON rr.classification_id = rc.id left JOIN eggozdb.maplemonk.my_sql_product_product pp on pp.id = or1.product_id left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment ba on ba.id = or1.beat_assignment_id where line_type in (\'Promo\') and pp.brand_type <> \'unbranded\' group by rr.area_classification, date(timestampadd(minute,660,or1.date)) ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end) ,ba.beat_name,ba.beat_number, rr.beat_number ,rr.code, rc.name, concat(pp.sku_count,pp.short_name), pp.product_type, pp.name, or1.salesPerson_id ) pivot( sum(eggs_promo) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Champs\', \'FreeRange\', \'Frozen\', \'Liquid\')) as p (promo_date, area_classification, beat_name,beat_number_operations,beat_number_original, SKU, product_type, product_name, salesPerson_id, code, classification_name, eggs_promo_white, eggs_promo_brown, eggs_promo_nutra, eggs_promo_champs, eggs_promo_freerange, eggs_promo_frozen, eggs_promo_liquid) ; create or replace table eggozdb.maplemonk.Return_Summary_beat_retailer as select return_date date , area_classification ,beat_name ,beat_number_operations ,beat_number_original ,code ,classification_name ,SKU ,product_type ,product_name , ifnull(eggs_return_white,0) eggs_return_white , ifnull(eggs_return_brown,0) eggs_return_brown , ifnull(eggs_return_nutra,0) eggs_return_nutra , ifnull(eggs_return_freerange,0) eggs_return_freerange , ifnull(eggs_return_liquid,0) eggs_return_liquid , ifnull(eggs_return_frozen,0) eggs_return_frozen , ifnull(eggs_return_champs,0) eggs_return_champs ,(ifnull(eggs_return_white,0) + ifnull(eggs_return_brown,0) + ifnull(eggs_return_nutra,0) + ifnull(eggs_return_freerange,0) + ifnull(eggs_return_liquid,0) + ifnull(eggs_return_frozen,0) + ifnull(eggs_return_champs,0) ) as eggs_return , salesperson_id from ( select date(timestampadd(minute,660,or1.pickup_date)) as return_Date ,rr.area_classification ,ba.beat_name ,ba.beat_number beat_number_operations ,rr.beat_number beat_number_original ,rr.code ,rc.name as classification_name ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end) Egg_Name ,concat(pp.sku_count,pp.short_name) SKU ,pp.product_type ,pp.name as product_name ,sum(or1.quantity* pp.sku_count) Eggs_return ,or1.salesperson_id from eggozdb.maplemonk.my_sql_order_orderreturnline or1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr ON or1.retailer_id =rr.id left join eggozdb.Maplemonk.my_sql_retailer_classification rc ON rr.classification_id = rc.id left JOIN eggozdb.maplemonk.my_sql_product_product pp on pp.id = or1.product_id left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment ba on ba.id = or1.beat_assignment_id where line_type in (\'Return\') and pp.brand_type <> \'unbranded\' group by rr.area_classification, date(timestampadd(minute,660,or1.pickup_date)) ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end) ,ba.beat_name,ba.beat_number, rr.beat_number,salesperson_id ,rr.code, rc.name, concat(pp.sku_count,pp.short_name), pp.product_type, pp.name ) pivot( sum(eggs_return) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Champs\', \'FreeRange\', \'Frozen\', \'Liquid\')) as p (return_date, area_classification, beat_name,beat_number_operations,beat_number_original, SKU, product_type, product_name, salesperson_id, code, classification_name, eggs_return_white, eggs_return_brown, eggs_return_nutra, eggs_return_champs, eggs_return_freerange, eggs_return_frozen, eggs_return_liquid) ; create or replace table eggozdb.maplemonk.ReturnAmount_Summary_beat_retailer as select return_date date , area_classification ,beat_name ,beat_number_operations ,beat_number_original ,code ,classification_name ,SKU ,product_type ,product_name , ifnull(amount_return_white,0) amount_return_white , ifnull(amount_return_brown,0) amount_return_brown , ifnull(amount_return_nutra,0) amount_return_nutra , ifnull(amount_return_freerange,0) amount_return_freerange , ifnull(amount_return_liquid,0) amount_return_liquid , ifnull(amount_return_frozen,0) amount_return_frozen , ifnull(amount_return_champs,0) amount_return_champs ,(ifnull(amount_return_white,0) + ifnull(amount_return_brown,0) + ifnull(amount_return_nutra,0) + ifnull(amount_return_freerange,0) + ifnull(amount_return_liquid,0) + ifnull(amount_return_frozen,0) + ifnull(amount_return_champs,0) ) as amount_return , salesPerson_id from ( select date(timestampadd(minute,660,or1.pickup_date)) as return_Date ,rr.area_classification ,ba.beat_name ,ba.beat_number beat_number_operations ,rr.beat_number beat_number_original ,rr.code ,rc.name as classification_name ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end) Egg_Name ,concat(pp.sku_count,pp.short_name) SKU ,pp.product_type ,pp.name as product_name ,sum(amount+tax_amount) amount_return ,or1.salesPerson_id from eggozdb.maplemonk.my_sql_order_orderreturnline or1 left join eggozdb.maplemonk.my_sql_retailer_retailer rr ON or1.retailer_id =rr.id left join eggozdb.Maplemonk.my_sql_retailer_classification rc ON rr.classification_id = rc.id left JOIN eggozdb.maplemonk.my_sql_product_product pp on pp.id = or1.product_id left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment ba on ba.id = or1.beat_assignment_id where line_type in (\'Return\') and pp.brand_type <> \'unbranded\' group by rr.area_classification, date(timestampadd(minute,660,or1.pickup_date)) ,(case when pp.name like \'%White%\' then \'White\' when pp.name like \'%Brown%\' then \'Brown\' when pp.name like \'%Nutra%\' then \'Nutra\' when pp.name like \'%Champs%\' then \'Champs\' when pp.name like \'%Free Range%\' then \'FreeRange\' when pp.name like \'%Frozen%\' then \'Frozen\' when pp.name like \'%Liquid%\' then \'Liquid\' end) ,ba.beat_name,ba.beat_number, rr.beat_number, or1.salesPerson_id ,rr.code, rc.name, concat(pp.sku_count,pp.short_name), pp.product_type, pp.name ) pivot( sum(amount_return) for egg_name in (\'White\', \'Brown\', \'Nutra\', \'Champs\', \'FreeRange\', \'Frozen\', \'Liquid\')) as p (return_date, area_classification, beat_name,beat_number_operations,beat_number_original, SKU, product_type, product_name, salesPerson_id, code, classification_name, amount_return_white, amount_return_brown, amount_return_nutra, amount_return_champs, amount_return_freerange, amount_return_frozen, amount_return_liquid) ; CREATE OR REPLACE TABLE eggozdb.maplemonk.Pendency_beat_retailer as select cast(timestampadd(minute,660,oo.date) as date) Date ,area_classification ,sum(pay_amount) Collections_as_of_today ,rr.code ,ba.beat_name ,ba.beat_number beat_number_operations ,rr.beat_number beat_number_original ,rc.name Classification_name from eggozdb.maplemonk.my_sql_payment_payment pp left join eggozdb.maplemonk.my_sql_payment_invoice pi on pi.id = pp.invoice_id left join eggozdb.maplemonk.my_sql_payment_salestransaction ps on pp.salesTransaction_id = ps.id left join eggozdb.maplemonk.my_sql_order_order oo on oo.id = pi.order_id left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment ba on ba.id = oo.beat_assignment_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = ps.retailer_id left join eggozdb.Maplemonk.my_sql_retailer_classification rc ON rr.classification_id = rc.id where ps.transaction_type in (\'Credit\',\'Adjusted\') and ps.is_trial = \'FALSE\' and oo.is_promo = 0 group by area_classification, cast(timestampadd(minute,660,oo.date) as date), rr.code, ba.beat_name, rc.name, ba.beat_number, rr.beat_number ; CREATE OR REPLACE TABLE eggozdb.maplemonk.Summary_reporting_table_beat_retailer as WITH SALES_SUMMARY_beat_retailer_CTE AS ( select DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name, SUM(net_sales)AS NET_SALES, sum(case when product_name like \'%White%\' then net_sales end) net_sales_white, sum(case when product_name like \'%Brown%\' then net_sales end) net_sales_brown, sum(case when product_name like \'%Nutra%\' then net_sales end) net_sales_nutra, sum(case when product_name like \'%Champs%\' then net_sales end) net_sales_champs, sum(case when product_name like \'%Free Range%\' then net_sales end) net_sales_freerange, sum(case when product_name like \'%Frozen%\' then net_sales end) net_sales_frozen, sum(case when product_name like \'%Liquid%\' then net_sales end) net_sales_liquid from eggozdb.maplemonk.SALES_SUMMARY_beat_retailer GROUP BY DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name ), Replacement_Summary_beat_retailer_CTE AS ( SELECT DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name, sum(eggs_replaced_white) eggs_replaced_white, sum(eggs_replaced_brown) eggs_replaced_brown, sum(eggs_replaced_nutra) eggs_replaced_nutra, sum(eggs_replaced_champs) eggs_replaced_champs, sum(eggs_replaced_freerange) eggs_replaced_freerange, sum(eggs_replaced_frozen) eggs_replaced_frozen, sum(eggs_replaced_liquid) eggs_replaced_liquid, sum(eggs_replaced) eggs_replaced FROM eggozdb.maplemonk.Replacement_Summary_beat_retailer GROUP BY DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name), EGGS_SOLD_SUMMARY_BEAT_RETAILER_CTE AS ( select DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name, sum(eggs_sold_white) eggs_sold_white, sum(eggs_sold_brown) eggs_sold_brown, sum(eggs_sold_nutra) eggs_sold_nutra, sum(eggs_sold_champs) eggs_sold_champs, sum(eggs_sold_freerange) eggs_sold_freerange, sum(eggs_sold_frozen) eggs_sold_frozen, sum(eggs_sold_liquid) eggs_sold_liquid, sum(eggs_sold) eggs_sold FROM eggozdb.maplemonk.EGGS_SOLD_SUMMARY_BEAT_RETAILER GROUP BY DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name), Promo_Summary_beat_retailer_CTE AS ( SELECT DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name, sum(eggs_promo_white) eggs_promo_white, sum(eggs_promo_brown) eggs_promo_brown, sum(eggs_promo_nutra) eggs_promo_nutra, sum(eggs_promo_champs) eggs_promo_champs, sum(eggs_promo_freerange) eggs_promo_freerange, sum(eggs_promo_frozen) eggs_promo_frozen, sum(eggs_promo_liquid) eggs_promo_liquid, sum(eggs_promo) eggs_promo FROM eggozdb.maplemonk.Promo_Summary_beat_retailer GROUP BY DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name), Return_Summary_beat_retailer_CTE AS ( SELECT DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name, sum(eggs_return_white) eggs_return_white, sum(eggs_return_brown) eggs_return_brown, sum(eggs_return_nutra) eggs_return_nutra, sum(eggs_return_champs) eggs_return_champs, sum(eggs_return_freerange) eggs_return_freerange, sum(eggs_return_frozen) eggs_return_frozen, sum(eggs_return_liquid) eggs_return_liquid, sum(eggs_return) eggs_return FROM eggozdb.maplemonk.Return_Summary_beat_retailer GROUP BY DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name), ReturnAmount_Summary_beat_retailer_CTE AS ( SELECT DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name, sum(amount_return_white) amount_return_white, sum(amount_return_brown) amount_return_brown, sum(amount_return_nutra) amount_return_nutra, sum(amount_return_champs) amount_return_champs, sum(amount_return_freerange) amount_return_freerange, sum(amount_return_frozen) amount_return_frozen, sum(amount_return_liquid) amount_return_liquid, sum(amount_return) amount_return FROM eggozdb.maplemonk.RETURNAMOUNT_SUMMARY_BEAT_RETAILER GROUP BY DATE, AREA_CLASSIFICATION, BEAT_NAME, beat_number_operations, beat_number_original, CODE, classification_name) select table2.*, bc2.cluster_name, bc3.city_name as city, rr2.category_id, rr2.marketing_cluster from ( select v.*,rp.name Parent_retailer_name, cast(timestampadd(minute,660,mp.onboarding_date) as date) ONBOARDING_DATE, mp.onboarding_status ,case when v.beat_number_operations = 0 then v.beat_number_original else v.beat_number_operations end as beat_number_consolidated ,case when eggs_sold<>0 then 1 else 0 end as is_sales from ( select t.*,(case when k.collections_as_of_today is null then 0 else k.collections_as_of_today end) collections_as_of_today from( select (case when u.date is not null then u.date else ra.date end) date ,(case when u.area_classification is not null then u.area_classification else ra.area_classification end) Area ,(case when u.beat_name is not null then u.beat_name else ra.beat_name end) Beat_Name ,(case when u.beat_number_operations is not null then u.beat_number_operations else ra.beat_number_operations end) beat_number_operations ,(case when u.beat_number_original is not null then u.beat_number_original else ra.beat_number_original end) beat_number_original ,(case when u.code is not null then u.code else ra.code end) Retailer_Name ,(case when u.classification_name is not null then u.classification_name else ra.classification_name end) classification_name ,ifnull(net_sales,0) net_sales ,ifnull(net_sales_white,0) net_sales_white ,ifnull(net_sales_brown,0) net_sales_brown ,ifnull(net_sales_nutra,0) net_sales_nutra ,ifnull(net_sales_champs,0) net_sales_champs ,ifnull(net_sales_freerange,0) net_sales_freerange ,ifnull(net_sales_frozen,0) net_sales_frozen ,ifnull(net_sales_liquid,0) net_sales_liquid ,ifnull(eggs_sold,0) eggs_sold ,ifnull(eggs_sold_white,0) eggs_sold_white ,ifnull(eggs_sold_brown,0) eggs_sold_brown ,ifnull(eggs_sold_nutra,0) eggs_sold_nutra ,ifnull(eggs_sold_champs,0) eggs_sold_champs ,ifnull(eggs_sold_freerange,0) eggs_sold_freerange ,ifnull(eggs_sold_frozen,0) eggs_sold_frozen ,ifnull(eggs_sold_liquid,0) eggs_sold_liquid ,(case when collections is null then 0 else collections end) collections ,ifnull(eggs_replaced,0) eggs_replaced ,ifnull(eggs_replaced_white,0) eggs_replaced_white ,ifnull(eggs_replaced_brown,0) eggs_replaced_brown ,ifnull(eggs_replaced_nutra,0) eggs_replaced_nutra ,ifnull(eggs_replaced_champs,0) eggs_replaced_champs ,ifnull(eggs_replaced_freerange,0) eggs_replaced_freerange ,ifnull(eggs_replaced_frozen,0) eggs_replaced_frozen ,ifnull(eggs_replaced_liquid,0) eggs_replaced_liquid ,ifnull(eggs_promo,0) eggs_promo ,ifnull(eggs_promo_white,0) eggs_promo_white ,ifnull(eggs_promo_brown,0) eggs_promo_brown ,ifnull(eggs_promo_nutra,0) eggs_promo_nutra ,ifnull(eggs_promo_champs,0) eggs_promo_champs ,ifnull(eggs_promo_freerange,0) eggs_promo_freerange ,ifnull(eggs_promo_frozen,0) eggs_promo_frozen ,ifnull(eggs_promo_liquid,0) eggs_promo_liquid ,ifnull(eggs_return,0) eggs_return ,ifnull(eggs_return_white,0) eggs_return_white ,ifnull(eggs_return_brown,0) eggs_return_brown ,ifnull(eggs_return_nutra,0) eggs_return_nutra ,ifnull(eggs_return_champs,0) eggs_return_champs ,ifnull(eggs_return_freerange,0) eggs_return_freerange ,ifnull(eggs_return_frozen,0) eggs_return_frozen ,ifnull(eggs_return_liquid,0) eggs_return_liquid ,ifnull(amount_return,0) amount_return ,ifnull(amount_return_white,0) amount_return_white ,ifnull(amount_return_brown,0) amount_return_brown ,ifnull(amount_return_nutra,0) amount_return_nutra ,ifnull(amount_return_champs,0) amount_return_champs ,ifnull(amount_return_freerange,0) amount_return_freerange ,ifnull(amount_return_frozen,0) amount_return_frozen ,ifnull(amount_return_liquid,0) amount_return_liquid from( select (case when w.date is not null then w.date else r.date end) date ,(case when w.area_classification is not null then w.area_classification else r.area_classification end) Area_classification ,(case when w.beat_name is not null then w.beat_name else r.beat_name end) Beat_Name ,(case when w.beat_number_operations is not null then w.beat_number_operations else r.beat_number_operations end) beat_number_operations ,(case when w.beat_number_original is not null then w.beat_number_original else r.beat_number_original end) beat_number_original ,(case when w.code is not null then w.code else r.code end) code ,(case when w.classification_name is not null then w.classification_name else r.classification_name end) classification_name ,ifnull(net_sales,0) net_sales ,ifnull(net_sales_white,0) net_sales_white ,ifnull(net_sales_brown,0) net_sales_brown ,ifnull(net_sales_nutra,0) net_sales_nutra ,ifnull(net_sales_champs,0) net_sales_champs ,ifnull(net_sales_freerange,0) net_sales_freerange ,ifnull(net_sales_frozen,0) net_sales_frozen ,ifnull(net_sales_liquid,0) net_sales_liquid ,ifnull(eggs_sold,0) eggs_sold ,ifnull(eggs_sold_white,0) eggs_sold_white ,ifnull(eggs_sold_brown,0) eggs_sold_brown ,ifnull(eggs_sold_nutra,0) eggs_sold_nutra ,ifnull(eggs_sold_champs,0) eggs_sold_champs ,ifnull(eggs_sold_freerange,0) eggs_sold_freerange ,ifnull(eggs_sold_frozen,0) eggs_sold_frozen ,ifnull(eggs_sold_liquid,0) eggs_sold_liquid ,(case when collections is null then 0 else collections end) collections ,ifnull(eggs_replaced,0) eggs_replaced ,ifnull(eggs_replaced_white,0) eggs_replaced_white ,ifnull(eggs_replaced_brown,0) eggs_replaced_brown ,ifnull(eggs_replaced_nutra,0) eggs_replaced_nutra ,ifnull(eggs_replaced_champs,0) eggs_replaced_champs ,ifnull(eggs_replaced_freerange,0) eggs_replaced_freerange ,ifnull(eggs_replaced_frozen,0) eggs_replaced_frozen ,ifnull(eggs_replaced_liquid,0) eggs_replaced_liquid ,ifnull(eggs_promo,0) eggs_promo ,ifnull(eggs_promo_white,0) eggs_promo_white ,ifnull(eggs_promo_brown,0) eggs_promo_brown ,ifnull(eggs_promo_nutra,0) eggs_promo_nutra ,ifnull(eggs_promo_champs,0) eggs_promo_champs ,ifnull(eggs_promo_freerange,0) eggs_promo_freerange ,ifnull(eggs_promo_frozen,0) eggs_promo_frozen ,ifnull(eggs_promo_liquid,0) eggs_promo_liquid ,ifnull(eggs_return,0) eggs_return ,ifnull(eggs_return_white,0) eggs_return_white ,ifnull(eggs_return_brown,0) eggs_return_brown ,ifnull(eggs_return_nutra,0) eggs_return_nutra ,ifnull(eggs_return_champs,0) eggs_return_champs ,ifnull(eggs_return_freerange,0) eggs_return_freerange ,ifnull(eggs_return_frozen,0) eggs_return_frozen ,ifnull(eggs_return_liquid,0) eggs_return_liquid from ( select (case when x.date is not null then x.date else p.date end) date ,(case when x.area_classification is not null then x.area_classification else p.area_classification end) Area_classification ,(case when x.beat_name is not null then x.beat_name else p.beat_name end) Beat_Name ,(case when x.beat_number_operations is not null then x.beat_number_operations else p.beat_number_operations end) beat_number_operations ,(case when x.beat_number_original is not null then x.beat_number_original else p.beat_number_original end) beat_number_original ,(case when x.code is not null then x.code else p.code end) code ,(case when x.classification_name is not null then x.classification_name else p.classification_name end) classification_name ,ifnull(net_sales,0) net_sales ,ifnull(net_sales_white,0) net_sales_white ,ifnull(net_sales_brown,0) net_sales_brown ,ifnull(net_sales_nutra,0) net_sales_nutra ,ifnull(net_sales_champs,0) net_sales_champs ,ifnull(net_sales_freerange,0) net_sales_freerange ,ifnull(net_sales_frozen,0) net_sales_frozen ,ifnull(net_sales_liquid,0) net_sales_liquid ,ifnull(eggs_sold,0) eggs_sold ,ifnull(eggs_sold_white,0) eggs_sold_white ,ifnull(eggs_sold_brown,0) eggs_sold_brown ,ifnull(eggs_sold_nutra,0) eggs_sold_nutra ,ifnull(eggs_sold_champs,0) eggs_sold_champs ,ifnull(eggs_sold_freerange,0) eggs_sold_freerange ,ifnull(eggs_sold_frozen,0) eggs_sold_frozen ,ifnull(eggs_sold_liquid,0) eggs_sold_liquid ,(case when collections is null then 0 else collections end) collections ,ifnull(eggs_replaced,0) eggs_replaced ,ifnull(eggs_replaced_white,0) eggs_replaced_white ,ifnull(eggs_replaced_brown,0) eggs_replaced_brown ,ifnull(eggs_replaced_nutra,0) eggs_replaced_nutra ,ifnull(eggs_replaced_champs,0) eggs_replaced_champs ,ifnull(eggs_replaced_freerange,0) eggs_replaced_freerange ,ifnull(eggs_replaced_frozen,0) eggs_replaced_frozen ,ifnull(eggs_replaced_liquid,0) eggs_replaced_liquid ,ifnull(eggs_promo,0) eggs_promo ,ifnull(eggs_promo_white,0) eggs_promo_white ,ifnull(eggs_promo_brown,0) eggs_promo_brown ,ifnull(eggs_promo_nutra,0) eggs_promo_nutra ,ifnull(eggs_promo_champs,0) eggs_promo_champs ,ifnull(eggs_promo_freerange,0) eggs_promo_freerange ,ifnull(eggs_promo_frozen,0) eggs_promo_frozen ,ifnull(eggs_promo_liquid,0) eggs_promo_liquid from( select (case when y.date is not null then y.date else e.date end) date ,(case when y.area_classification is not null then y.area_classification else e.area_classification end) area_classification ,(case when y.beat_name is not null then y.beat_name else e.beat_name end) Beat_Name ,(case when y.beat_number_operations is not null then y.beat_number_operations else e.beat_number_operations end) beat_number_operations ,(case when y.beat_number_original is not null then y.beat_number_original else e.beat_number_original end) beat_number_original ,(case when y.code is not null then y.code else e.code end) code ,(case when y.classification_name is not null then y.classification_name else e.classification_name end) classification_name , net_sales , net_sales_white , net_sales_brown , net_sales_nutra , net_sales_champs , net_sales_freerange , net_sales_frozen , net_sales_liquid ,collections , eggs_replaced , eggs_replaced_white , eggs_replaced_brown , eggs_replaced_nutra , eggs_replaced_champs , eggs_replaced_freerange , eggs_replaced_frozen , eggs_replaced_liquid , eggs_sold , eggs_sold_white , eggs_sold_brown , eggs_sold_nutra , eggs_sold_champs , eggs_sold_freerange , eggs_sold_frozen , eggs_sold_liquid from (select (case when z.date is not null then z.date else c.date end) date ,(case when z.area_classification is not null then z.area_classification else c.area_classification end) area_classification ,(case when z.beat_name is not null then z.beat_name else c.beat_name end) beat_name ,(case when z.beat_number_operations is not null then z.beat_number_operations else c.beat_number_operations end) beat_number_operations ,(case when z.beat_number_original is not null then z.beat_number_original else c.beat_number_original end) beat_number_original ,(case when z.code is not null then z.code else c.code end) code ,(case when z.classification_name is not null then z.classification_name else c.classification_name end) classification_name , net_sales , net_sales_white , net_sales_brown , net_sales_nutra , net_sales_champs , net_sales_freerange , net_sales_frozen , net_sales_liquid ,collections , eggs_replaced , eggs_replaced_white , eggs_replaced_brown , eggs_replaced_nutra , eggs_replaced_champs , eggs_replaced_freerange , eggs_replaced_frozen , eggs_replaced_liquid from (select (case when a.date is not null then a.date else b.date end) date ,(case when a.area_classification is not null then a.area_classification else b.area_classification end) area_classification ,(case when a.beat_name is not null then a.beat_name else b.beat_name end) beat_name ,(case when a.beat_number_operations is not null then a.beat_number_operations else b.beat_number_operations end) beat_number_operations ,(case when a.beat_number_original is not null then a.beat_number_original else b.beat_number_original end) beat_number_original ,(case when a.code is not null then a.code else b.code end) code ,(case when a.classification_name is not null then a.classification_name else b.classification_name end) classification_name , net_sales , net_sales_white , net_sales_brown , net_sales_nutra , net_sales_champs , net_sales_freerange , net_sales_frozen , net_sales_liquid ,collections from SALES_SUMMARY_beat_retailer_CTE a full outer join eggozdb.maplemonk.Collection_Summary_beat_retailer b on a.area_classification = b.area_classification and a.date = b.date and a.code = b.code and a.beat_name = b.beat_name and a.beat_number_operations = b.beat_number_operations and a.beat_number_original = b.beat_number_original and a.classification_name = b.classification_name ) z full outer join Replacement_Summary_beat_retailer_CTE c on z.area_classification = c.area_classification and z.date = c.date and z.code = c.code and z.beat_name = c.beat_name and z.beat_number_operations = c.beat_number_operations and z.beat_number_original = c.beat_number_original and z.classification_name = c.classification_name ) y full outer join EGGS_SOLD_SUMMARY_BEAT_RETAILER_CTE e on e.area_Classification = y.area_classification and e.date = y.date and e.code = y.code and e.beat_name = y.beat_name and e.beat_number_operations = y.beat_number_operations and e.beat_number_original = y.beat_number_original and e.classification_name = y.classification_name )x full outer join Promo_Summary_beat_retailer_CTE p on p.area_Classification = x.area_classification and p.date = x.date and p.code = x.code and p.beat_name = x.beat_name and p.beat_number_operations = x.beat_number_operations and p.beat_number_original = x.beat_number_original and p.classification_name = x.classification_name )w full outer join return_Summary_beat_retailer_CTE r on r.area_Classification = w.area_classification and r.date = w.date and r.code = w.code and r.beat_name = w.beat_name and r.beat_number_operations = w.beat_number_operations and r.beat_number_original = w.beat_number_original and r.classification_name = w.classification_name )u full outer join returnamount_Summary_beat_retailer_CTE ra on ra.area_Classification = u.area_classification and ra.date = u.date and ra.code = u.code and ra.beat_name = u.beat_name and ra.beat_number_operations = u.beat_number_operations and ra.beat_number_original = u.beat_number_original and ra.classification_name = u.classification_name )t left join eggozdb.maplemonk.Pendency_beat_retailer k on t.area = k.area_classification and t.date = k.date and t.Retailer_Name = k.code and t.beat_name = k.beat_name and t.beat_number_operations = k.beat_number_operations and t.beat_number_original = k.beat_number_original and t.classification_name = k.classification_name )v left join eggozdb.maplemonk.my_sql_retailer_retailer mp on mp.code = v.retailer_name left join eggozdb.maplemonk.my_sql_retailer_retailerparent rp on rp.id = mp.parent_id ) table2 left join eggozdb.maplemonk.my_sql_retailer_retailer rr2 on table2.area = rr2.area_classification and table2.beat_number_original = rr2.beat_number and table2.retailer_name = rr2.code left join eggozdb.maplemonk.my_sql_base_cluster bc2 on bc2.id = rr2.cluster_id left join eggozdb.maplemonk.my_sql_base_city bc3 on bc3.id = rr2.city_id ; CREATE OR REPLACE TABLE eggozdb.maplemonk.Summary_reporting_table_beat_retailer_SKU as select table2.*, bc2.cluster_name, bc3.city_name as city, rr2.category_id, rr2.marketing_cluster from ( select x.*,rp.name Parent_retailer_name, mp.onboarding_Date::date ONBOARDING_DATE, mp.onboarding_status, DATEDIFF(day, mp.onboarding_Date::date, getdate()) Days_since_onboard, cs.number retailer_commission ,case when x.beat_number_operations = 0 then x.beat_number_original else x.beat_number_operations end as beat_number_consolidated from (select (case when v.date is not null then v.date else e.date end) date ,(case when v.area_classification is not null then v.area_classification else e.area_classification end) Area ,(case when v.beat_name is not null then v.beat_name else e.beat_name end) Beat_Name ,(case when v.beat_number_operations is not null then v.beat_number_operations else e.beat_number_operations end) beat_number_operations ,(case when v.beat_number_original is not null then v.beat_number_original else e.beat_number_original end) beat_number_original ,(case when v.code is not null then v.code else e.code end) Retailer_Name ,(case when v.classification_name is not null then v.classification_name else e.classification_name end) classification_name ,(case when v.product_name is not null then v.product_name else e.product_name end) product_name ,(case when v.product_type is not null then v.product_type else e.product_type end) product_type ,(case when v.SKU is not null then v.SKU else e.SKU end) SKU ,ifnull(net_sales,0) net_sales ,ifnull(eggs_sold,0) eggs_sold ,ifnull(eggs_sold_white,0) eggs_sold_white ,ifnull(eggs_sold_brown,0) eggs_sold_brown ,ifnull(eggs_sold_nutra,0) eggs_sold_nutra ,ifnull(eggs_sold_champs,0) eggs_sold_champs ,ifnull(eggs_sold_freerange,0) eggs_sold_freerange ,ifnull(eggs_sold_frozen,0) eggs_sold_frozen ,ifnull(eggs_sold_liquid,0) eggs_sold_liquid ,ifnull(eggs_replaced,0) eggs_replaced ,ifnull(eggs_replaced_white,0) eggs_replaced_white ,ifnull(eggs_replaced_brown,0) eggs_replaced_brown ,ifnull(eggs_replaced_nutra,0) eggs_replaced_nutra ,ifnull(eggs_replaced_champs,0) eggs_replaced_champs ,ifnull(eggs_replaced_freerange,0) eggs_replaced_freerange ,ifnull(eggs_replaced_frozen,0) eggs_replaced_frozen ,ifnull(eggs_replaced_liquid,0) eggs_replaced_liquid ,ifnull(eggs_promo,0) eggs_promo ,ifnull(eggs_promo_white,0) eggs_promo_white ,ifnull(eggs_promo_brown,0) eggs_promo_brown ,ifnull(eggs_promo_nutra,0) eggs_promo_nutra ,ifnull(eggs_promo_champs,0) eggs_promo_champs ,ifnull(eggs_promo_freerange,0) eggs_promo_freerange ,ifnull(eggs_promo_frozen,0) eggs_promo_frozen ,ifnull(eggs_promo_liquid,0) eggs_promo_liquid ,ifnull(eggs_return,0) eggs_return ,ifnull(eggs_return_white,0) eggs_return_white ,ifnull(eggs_return_brown,0) eggs_return_brown ,ifnull(eggs_return_nutra,0) eggs_return_nutra ,ifnull(eggs_return_champs,0) eggs_return_champs ,ifnull(eggs_return_freerange,0) eggs_return_freerange ,ifnull(eggs_return_frozen,0) eggs_return_frozen ,ifnull(eggs_return_liquid,0) eggs_return_liquid ,ifnull(amount_return,0) amount_return ,ifnull(amount_return_white,0) amount_return_white ,ifnull(amount_return_brown,0) amount_return_brown ,ifnull(amount_return_nutra,0) amount_return_nutra ,ifnull(amount_return_champs,0) amount_return_champs ,ifnull(amount_return_freerange,0) amount_return_freerange ,ifnull(amount_return_frozen,0) amount_return_frozen ,ifnull(amount_return_liquid,0) amount_return_liquid ,coalesce(v.salesPerson_id,e.salesPerson_id) salesPerson_id from (select (case when u.date is not null then u.date else ra.date end) date ,(case when u.area_classification is not null then u.area_classification else ra.area_classification end) Area_classification ,(case when u.beat_name is not null then u.beat_name else ra.beat_name end) Beat_Name ,(case when u.beat_number_operations is not null then u.beat_number_operations else ra.beat_number_operations end) beat_number_operations ,(case when u.beat_number_original is not null then u.beat_number_original else ra.beat_number_original end) beat_number_original ,(case when u.code is not null then u.code else ra.code end) code ,(case when u.classification_name is not null then u.classification_name else ra.classification_name end) classification_name ,(case when u.product_name is not null then u.product_name else ra.product_name end) product_name ,(case when u.product_type is not null then u.product_type else ra.product_type end) product_type ,(case when u.SKU is not null then u.SKU else ra.SKU end) SKU ,ifnull(net_sales,0) net_sales ,ifnull(eggs_replaced,0) eggs_replaced ,ifnull(eggs_replaced_white,0) eggs_replaced_white ,ifnull(eggs_replaced_brown,0) eggs_replaced_brown ,ifnull(eggs_replaced_nutra,0) eggs_replaced_nutra ,ifnull(eggs_replaced_champs,0) eggs_replaced_champs ,ifnull(eggs_replaced_freerange,0) eggs_replaced_freerange ,ifnull(eggs_replaced_frozen,0) eggs_replaced_frozen ,ifnull(eggs_replaced_liquid,0) eggs_replaced_liquid ,ifnull(eggs_promo,0) eggs_promo ,ifnull(eggs_promo_white,0) eggs_promo_white ,ifnull(eggs_promo_brown,0) eggs_promo_brown ,ifnull(eggs_promo_nutra,0) eggs_promo_nutra ,ifnull(eggs_promo_champs,0) eggs_promo_champs ,ifnull(eggs_promo_freerange,0) eggs_promo_freerange ,ifnull(eggs_promo_frozen,0) eggs_promo_frozen ,ifnull(eggs_promo_liquid,0) eggs_promo_liquid ,ifnull(eggs_return,0) eggs_return ,ifnull(eggs_return_white,0) eggs_return_white ,ifnull(eggs_return_brown,0) eggs_return_brown ,ifnull(eggs_return_nutra,0) eggs_return_nutra ,ifnull(eggs_return_champs,0) eggs_return_champs ,ifnull(eggs_return_freerange,0) eggs_return_freerange ,ifnull(eggs_return_frozen,0) eggs_return_frozen ,ifnull(eggs_return_liquid,0) eggs_return_liquid ,ifnull(amount_return,0) amount_return ,ifnull(amount_return_white,0) amount_return_white ,ifnull(amount_return_brown,0) amount_return_brown ,ifnull(amount_return_nutra,0) amount_return_nutra ,ifnull(amount_return_champs,0) amount_return_champs ,ifnull(amount_return_freerange,0) amount_return_freerange ,ifnull(amount_return_frozen,0) amount_return_frozen ,ifnull(amount_return_liquid,0) amount_return_liquid ,coalesce(u.salesPerson_id, ra.salesPerson_id) salesPerson_id from (select (case when y.date is not null then y.date else r.date end) date ,(case when y.area_classification is not null then y.area_classification else r.area_classification end) Area_classification ,(case when y.beat_name is not null then y.beat_name else r.beat_name end) Beat_Name ,(case when y.beat_number_operations is not null then y.beat_number_operations else r.beat_number_operations end) beat_number_operations ,(case when y.beat_number_original is not null then y.beat_number_original else r.beat_number_original end) beat_number_original ,(case when y.code is not null then y.code else r.code end) Code ,(case when y.classification_name is not null then y.classification_name else r.classification_name end) classification_name ,(case when y.product_name is not null then y.product_name else r.product_name end) product_name ,(case when y.product_type is not null then y.product_type else r.product_type end) product_type ,(case when y.SKU is not null then y.SKU else r.SKU end) SKU ,ifnull(net_sales,0) net_sales ,ifnull(eggs_replaced,0) eggs_replaced ,ifnull(eggs_replaced_white,0) eggs_replaced_white ,ifnull(eggs_replaced_brown,0) eggs_replaced_brown ,ifnull(eggs_replaced_nutra,0) eggs_replaced_nutra ,ifnull(eggs_replaced_champs,0) eggs_replaced_champs ,ifnull(eggs_replaced_freerange,0) eggs_replaced_freerange ,ifnull(eggs_replaced_frozen,0) eggs_replaced_frozen ,ifnull(eggs_replaced_liquid,0) eggs_replaced_liquid ,ifnull(eggs_promo,0) eggs_promo ,ifnull(eggs_promo_white,0) eggs_promo_white ,ifnull(eggs_promo_brown,0) eggs_promo_brown ,ifnull(eggs_promo_nutra,0) eggs_promo_nutra ,ifnull(eggs_promo_champs,0) eggs_promo_champs ,ifnull(eggs_promo_freerange,0) eggs_promo_freerange ,ifnull(eggs_promo_frozen,0) eggs_promo_frozen ,ifnull(eggs_promo_liquid,0) eggs_promo_liquid ,ifnull(eggs_return,0) eggs_return ,ifnull(eggs_return_white,0) eggs_return_white ,ifnull(eggs_return_brown,0) eggs_return_brown ,ifnull(eggs_return_nutra,0) eggs_return_nutra ,ifnull(eggs_return_champs,0) eggs_return_champs ,ifnull(eggs_return_freerange,0) eggs_return_freerange ,ifnull(eggs_return_frozen,0) eggs_return_frozen ,ifnull(eggs_return_liquid,0) eggs_return_liquid ,coalesce(y.salesPerson_id,r.salesPerson_id) salesPerson_id from (select (case when z.date is not null then z.date else p.date end) date ,(case when z.area_classification is not null then z.area_classification else p.area_classification end) area_classification ,(case when z.beat_name is not null then z.beat_name else p.beat_name end) beat_name ,(case when z.beat_number_operations is not null then z.beat_number_operations else p.beat_number_operations end) beat_number_operations ,(case when z.beat_number_original is not null then z.beat_number_original else p.beat_number_original end) beat_number_original ,(case when z.code is not null then z.code else p.code end) code ,(case when z.classification_name is not null then z.classification_name else p.classification_name end) classification_name ,(case when z.product_name is not null then z.product_name else p.product_name end) product_name ,(case when z.product_type is not null then z.product_type else p.product_type end) product_type ,(case when z.SKU is not null then z.SKU else p.SKU end) SKU , net_sales , eggs_replaced , eggs_replaced_white , eggs_replaced_brown , eggs_replaced_nutra , eggs_replaced_champs , eggs_replaced_freerange , eggs_replaced_frozen , eggs_replaced_liquid , eggs_promo , eggs_promo_white , eggs_promo_brown , eggs_promo_nutra , eggs_promo_champs , eggs_promo_freerange , eggs_promo_frozen , eggs_promo_liquid , coalesce(z.salesPerson_id,p.salesPerson_id) salesPerson_id from (select (case when a.date is not null then a.date else c.date end) date ,(case when a.area_classification is not null then a.area_classification else c.area_classification end) area_classification ,(case when a.beat_name is not null then a.beat_name else c.beat_name end) beat_name ,(case when a.beat_number_operations is not null then a.beat_number_operations else c.beat_number_operations end) beat_number_operations ,(case when a.beat_number_original is not null then a.beat_number_original else c.beat_number_original end) beat_number_original ,(case when a.code is not null then a.code else c.code end) code ,(case when a.classification_name is not null then a.classification_name else c.classification_name end) classification_name ,(case when a.product_name is not null then a.product_name else c.product_name end) product_name ,(case when a.product_type is not null then a.product_type else c.product_type end) product_type ,(case when a.SKU is not null then a.SKU else c.SKU end) SKU , net_sales , eggs_replaced , eggs_replaced_white , eggs_replaced_brown , eggs_replaced_nutra , eggs_replaced_champs , eggs_replaced_freerange , eggs_replaced_frozen , eggs_replaced_liquid , coalesce(a.salesPerson_id,c.salesperson_id) salesPerson_id from eggozdb.maplemonk.SALES_SUMMARY_beat_retailer a full outer join eggozdb.maplemonk.Replacement_Summary_beat_retailer c on a.area_classification = c.area_classification and a.date = c.date and a.code = c.code and a.beat_name = c.beat_name and a.beat_number_operations = c.beat_number_operations and a.beat_number_original = c.beat_number_original and a.SKU=c.SKU and a.classification_name=c.classification_name and a.salesperson_id = c.salesperson_id ) z full outer join eggozdb.maplemonk.Promo_Summary_beat_retailer p on p.area_Classification = z.area_classification and p.date = z.date and p.code = z.code and p.beat_name = z.beat_name and p.beat_number_operations = z.beat_number_operations and p.beat_number_original = z.beat_number_original and p.SKU=z.SKU and p.classification_name=z.classification_name and p.salesperson_id = z.salesperson_id )y full outer join eggozdb.maplemonk.Return_Summary_beat_retailer r on r.area_Classification = y.area_classification and r.date = y.date and r.code = y.code and r.beat_name = y.beat_name and r.beat_number_operations = y.beat_number_operations and r.beat_number_original = y.beat_number_original and r.SKU=y.SKU and r.classification_name=y.classification_name and r.salesperson_id = y.salesperson_id )u full outer join eggozdb.maplemonk.ReturnAmount_Summary_beat_retailer ra on ra.area_Classification = u.area_classification and ra.date = u.date and ra.code = u.code and ra.beat_name = u.beat_name and ra.beat_number_operations = u.beat_number_operations and ra.beat_number_original = u.beat_number_original and ra.SKU=u.SKU and ra.classification_name=u.classification_name and ra.salesperson_id = u.salesperson_id )v full outer join eggozdb.maplemonk.EGGS_SOLD_SUMMARY_BEAT_RETAILER e on e.area_Classification = v.area_classification and e.date = v.date and e.code = v.code and e.beat_name = v.beat_name and e.beat_number_operations = v.beat_number_operations and e.beat_number_original = v.beat_number_original and e.SKU=v.SKU and e.classification_name=v.classification_name and e.salesperson_id = v.salesperson_id )x left join eggozdb.maplemonk.my_sql_retailer_retailer mp on mp.code = x.retailer_name left join eggozdb.maplemonk.my_sql_retailer_retailerparent rp on rp.id = mp.parent_id left join eggozdb.maplemonk.my_sql_retailer_commissionslab cs on mp.commission_slab_id=cs.id ) table2 left join eggozdb.maplemonk.my_sql_retailer_retailer rr2 on table2.area = rr2.area_classification and table2.beat_number_original = rr2.beat_number and table2.retailer_name = rr2.code left join eggozdb.maplemonk.my_sql_base_cluster bc2 on bc2.id = rr2.cluster_id left join eggozdb.maplemonk.my_sql_base_city bc3 on bc3.id = rr2.city_id ; create or replace table eggozdb.maplemonk.summary_reporting_table_city as select distinct date, area, city, sum(eggs_sold) over (partition by area, city, year(date), month(date) order by year(date), month(date), date) mtd_eggs_sold, sum(eggs_replaced) over (partition by area, city, year(date), month(date) order by year(date), month(date), date) mtd_eggs_replaced, sum(eggs_return) over (partition by area, city, year(date), month(date) order by year(date), month(date), date) mtd_eggs_return, sum(eggs_promo) over (partition by area, city, year(date), month(date) order by year(date), month(date), date) mtd_eggs_promo, sum(net_sales) over (partition by area, city, year(date), month(date) order by year(date), month(date), date) mtd_sales, sum(amount_return) over (partition by area, city, year(date), month(date) order by year(date), month(date), date) mtd_amount_return, sum(collections) over (partition by area, city, year(date), month(date) order by year(date), month(date), date) mtd_collections from ( select dd.date, dd.area_classification as area, dd.city, ss.eggs_sold, ss.eggs_replaced, ss.eggs_return, ss.net_sales, ss.amount_return, ss.collections, ss.eggs_promo from eggozdb.maplemonk.date_area_city_dim dd left join eggozdb.maplemonk.summary_reporting_table_beat_retailer ss on dd.date = ss.date and dd.area_classification = ss.area and dd.city = ss.city ) ; create or replace table eggozdb.maplemonk.secondary_sales AS select rr2.code as distributor_name, tt.* from ( select oo.name bill_name, oo.status, cast(timestampadd(minute, 660, oo.delivery_date) as date) delivery_date, sum(oo.order_price_amount) order_price_amount, ol.quantity * (ol.single_sku_rate + ol.single_sku_discount+ol.single_sku_tax) sale,sp.id as salesperson_id , cu.name,cu.email, ol.single_sku_rate, ol.single_sku_discount,ol.single_sku_tax, ol.quantity*pp.sku_count AS eggs_sold, concat(pp.sku_count,pp.short_name) sku, pp.slug, ol.quantity, pp.product_type, oo.retailer_id, oo.scheme_discount_amount as discount, rr.code as retailer_name, rr.area_classification, rr.beat_number beat_number_original, sst.beat_number as beat_number_operations, bc.cluster_name, rr.onboarding_status, rr.city_id, rr.distributor_id, rcc.name as retailer_category from eggozdb.maplemonk.my_sql_distributor_sales_secondaryorder oo left join eggozdb.maplemonk.my_sql_distributor_sales_secondarytrip sst on sst.id = oo.trip_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = oo.retailer_id left join eggozdb.maplemonk.my_sql_retailer_customer_category rcc on rcc.id = rr.category_id left join eggozdb.maplemonk.my_sql_distributor_sales_secondaryorderline ol on ol.order_id = oo.id left join eggozdb.maplemonk.my_sql_product_product pp on pp.id = ol.product_id left join eggozdb.maplemonk.my_sql_base_cluster bc on rr.cluster_id = bc.id left join eggozdb.maplemonk.my_sql_saleschain_salespersonprofile sp on oo.SALESPERSON_ID=sp.id left join eggozdb.maplemonk.my_sql_custom_auth_user cu on sp.user_id = cu.id where lower(oo.status) = \'created\' and pp.brand_type <> \'unbranded\' group by cast(timestampadd(minute, 660, oo.delivery_date) as date), oo.retailer_id, oo.name, oo.scheme_discount_amount, pp.name, pp.short_name, pp.slug, oo.status, ol.quantity, pp.sku_count, pp.product_type, rr.area_classification, pp.slug, rr.code, rr.beat_number, sst.beat_number, rr.onboarding_status, rr.city_id, rr.distributor_id, ol.single_sku_rate, ol.single_sku_discount,ol.single_sku_tax,sp.id,cu.name,cu.email, bc.cluster_name, rcc.name ) tt left join eggozdb.maplemonk.my_sql_retailer_retailer rr2 on rr2.id = tt.distributor_id ; CREATE OR REPLACE TABLE eggozdb.maplemonk.secondary_return_replacement_promo_sku AS select rr2.code as distributor, ret_rep.* from ( select rr.code as retailer_name,rr.area_classification, dsr.type,dsr.salesPerson_id, cu.name,cu.email, rr.beat_number, sst.beat_number as beat_number_operations, cast(timestampadd(minute,660,dsr.return_date) as date) pickup_date, pp.slug,pp.brand_type, dsrl.quantity as return_qnty,concat(pp.sku_count,pp.short_name) as SKU, pp.sku_count, dsrl.quantity, pp.sku_count*dsrl.quantity as eggs_count, pp.product_type, dsrl.single_sku_rate, dsrl.single_sku_discount, dsr.return_amount as amount, dsr.order_id, rr.retailer_id, rr.distributor_id, (dsrl.quantity*dsrl.single_sku_rate-dsrl.quantity*dsrl.single_sku_discount) as SKU_return_amount from eggozdb.maplemonk.my_sql_distributor_sales_secondaryorderreturn dsr left join eggozdb.maplemonk.my_sql_distributor_sales_secondarytrip sst on sst.id = dsr.trip_id left join eggozdb.maplemonk.my_sql_distributor_sales_secondaryorderreturnreplaceline dsrl on dsr.id=dsrl.return_order_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on dsr.retailer_id=rr.id left join eggozdb.maplemonk.my_sql_product_product pp on dsrl.product_id=pp.id left join eggozdb.maplemonk.my_sql_saleschain_salespersonprofile sp on dsr.salesperson_id=sp.id left join eggozdb.maplemonk.my_sql_custom_auth_user cu on sp.user_id = cu.id where lower(dsr.status) = \'created\' and pp.brand_type <> \'unbranded\' group by dsrl.product_id, dsr.retailer_id, rr.code, cast(timestampadd(minute,660,dsr.return_date) as date), concat(pp.sku_count,pp.short_name), pp.slug,cu.name,cu.email, dsrl.quantity, dsrl.single_sku_rate, dsrl.single_sku_discount, dsr.return_amount, dsr.order_id,dsr.type, dsrl.quantity*dsrl.single_sku_rate-dsrl.quantity*dsrl.single_sku_discount,pp.sku_count*dsrl.quantity, rr.area_classification,dsr.salesPerson_id, pp.brand_type, rr.retailer_id, rr.distributor_id, dsrl.quantity, rr.beat_number, sst.beat_number, pp.sku_count, pp.product_type ) ret_rep left join eggozdb.maplemonk.my_sql_retailer_retailer rr2 on rr2.id = ret_rep.distributor_id ; CREATE OR REPLACE TABLE eggozdb.maplemonk.primary_return_replacement_promo_sku AS select rr2.code as distributor, ret_rep.* from ( select rr.code as retailer_name,rp.name as parent_retailer_name, rr.area_classification, dsrl.line_type,dsr.salesPerson_id, cu.name,cu.email, rr.beat_number, sst.beat_number as beat_number_operations, cast(timestampadd(minute,660,dsr.return_picked_date) as date) pickup_date, pp.slug,pp.brand_type, dsrl.quantity as return_qnty,concat(pp.sku_count,pp.short_name) as SKU, pp.sku_count, dsrl.quantity, pp.sku_count*dsrl.quantity as eggs_count, pp.product_type, dsr.deviated_amount as amount, dsr.order_id, rr.retailer_id, rr.distributor_id, dsrl.amount as SKU_return_amount from eggozdb.maplemonk.my_sql_order_returnordertransaction dsr left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment sst on sst.id = dsr.beat_assignment_id left join eggozdb.maplemonk.my_sql_order_orderreturnline dsrl on dsr.id=dsrl.return_order_transaction_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on dsr.retailer_id=rr.id left join eggozdb.maplemonk.my_sql_retailer_retailerparent rp on rr.parent_id = rp.id left join eggozdb.maplemonk.my_sql_product_product pp on dsrl.product_id=pp.id left join eggozdb.maplemonk.my_sql_saleschain_salespersonprofile sp on dsr.salesperson_id=sp.id left join eggozdb.maplemonk.my_sql_custom_auth_user cu on sp.user_id = cu.id where lower(dsr.status) =\'collected\' and pp.brand_type <> \'unbranded\' group by dsrl.product_id, dsr.retailer_id, rr.code, rp.name, cast(timestampadd(minute,660,dsr.return_picked_date) as date), concat(pp.sku_count,pp.short_name), pp.slug,cu.name,cu.email, dsrl.amount, dsr.deviated_amount, dsr.order_id,dsrl.line_type, pp.sku_count*dsrl.quantity, rr.area_classification,dsr.salesPerson_id, pp.brand_type, rr.retailer_id, rr.distributor_id, dsrl.quantity, rr.beat_number, sst.beat_number, pp.sku_count, pp.product_type ) ret_rep left join eggozdb.maplemonk.my_sql_retailer_retailer rr2 on rr2.id = ret_rep.distributor_id ; CREATE OR REPLACE TABLE eggozdb.maplemonk.secondary_return_replacement_promo AS select distributor, type, pickup_date, retailer_id, salesperson_id, sum(eggs_count) as eggs, sum(SKU_return_amount) return_amount, retailer_name, area_classification, beat_number, beat_number_operations, distributor_id, brand_type, product_type from (select rr2.code as distributor, ret_rep.* from ( select rr.code as retailer_name,rr.area_classification, dsr.type,dsr.salesPerson_id, cu.name,cu.email, rr.beat_number, sst.beat_number as beat_number_operations, cast(timestampadd(minute,660,dsr.return_date) as date) pickup_date, pp.slug,pp.brand_type, dsrl.quantity as return_qnty,concat(pp.sku_count,pp.short_name) as SKU, pp.sku_count, dsrl.quantity, pp.sku_count*dsrl.quantity as eggs_count, pp.product_type, dsrl.single_sku_rate, dsrl.single_sku_discount, dsr.return_amount as amount, dsr.order_id, rr.retailer_id, rr.distributor_id, (dsrl.quantity*dsrl.single_sku_rate-dsrl.quantity*dsrl.single_sku_discount) as SKU_return_amount from eggozdb.maplemonk.my_sql_distributor_sales_secondaryorderreturn dsr left join eggozdb.maplemonk.my_sql_distributor_sales_secondarytrip sst on sst.id = dsr.trip_id left join eggozdb.maplemonk.my_sql_distributor_sales_secondaryorderreturnreplaceline dsrl on dsr.id=dsrl.return_order_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on dsr.retailer_id=rr.id left join eggozdb.maplemonk.my_sql_product_product pp on dsrl.product_id=pp.id left join eggozdb.maplemonk.my_sql_saleschain_salespersonprofile sp on dsr.salesperson_id=sp.id left join eggozdb.maplemonk.my_sql_custom_auth_user cu on sp.user_id = cu.id where lower(dsr.status) = \'created\' and pp.brand_type <> \'unbranded\' group by dsrl.product_id, dsr.retailer_id, rr.code, cast(timestampadd(minute,660,dsr.return_date) as date), concat(pp.sku_count,pp.short_name), pp.slug,cu.name,cu.email, dsrl.quantity, dsrl.single_sku_rate, dsrl.single_sku_discount, dsr.return_amount, dsr.order_id,dsr.type, dsrl.quantity*dsrl.single_sku_rate-dsrl.quantity*dsrl.single_sku_discount,pp.sku_count*dsrl.quantity, rr.area_classification,dsr.salesPerson_id, pp.brand_type, rr.retailer_id, rr.distributor_id, dsrl.quantity, rr.beat_number, sst.beat_number, pp.sku_count, pp.product_type ) ret_rep left join eggozdb.maplemonk.my_sql_retailer_retailer rr2 on rr2.id = ret_rep.distributor_id) group by distributor, type, pickup_date, retailer_id, salesperson_id, retailer_name, area_classification, beat_number, beat_number_operations, distributor_id, brand_type, product_type ; CREATE OR REPLACE TABLE eggozdb.maplemonk.primary_return_replacement_promo AS select distributor, line_type, pickup_date, retailer_id, salesperson_id, sum(eggs_count) as eggs, sum(SKU_return_amount) return_amount, retailer_name, area_classification, beat_number, beat_number_operations, distributor_id, brand_type, product_type from (select rr2.code as distributor, ret_rep.* from ( select rr.code as retailer_name,rr.area_classification, dsrl.line_type,dsr.salesPerson_id, cu.name,cu.email, rr.beat_number, sst.beat_number as beat_number_operations, cast(timestampadd(minute,660,dsr.return_picked_date) as date) pickup_date, pp.slug,pp.brand_type, dsrl.quantity as return_qnty,concat(pp.sku_count,pp.short_name) as SKU, pp.sku_count, dsrl.quantity, pp.sku_count*dsrl.quantity as eggs_count, pp.product_type, dsr.deviated_amount as amount, dsr.order_id, rr.retailer_id, rr.distributor_id, dsrl.amount as SKU_return_amount from eggozdb.maplemonk.my_sql_order_returnordertransaction dsr left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment sst on sst.id = dsr.beat_assignment_id left join eggozdb.maplemonk.my_sql_order_orderreturnline dsrl on dsr.id=dsrl.return_order_transaction_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on dsr.retailer_id=rr.id left join eggozdb.maplemonk.my_sql_product_product pp on dsrl.product_id=pp.id left join eggozdb.maplemonk.my_sql_saleschain_salespersonprofile sp on dsr.salesperson_id=sp.id left join eggozdb.maplemonk.my_sql_custom_auth_user cu on sp.user_id = cu.id where lower(dsr.status) <>\'cancelled\' and pp.brand_type <> \'unbranded\' group by dsrl.product_id, dsr.retailer_id, rr.code, cast(timestampadd(minute,660,dsr.return_picked_date) as date), concat(pp.sku_count,pp.short_name), pp.slug,cu.name,cu.email, dsrl.quantity, dsrl.amount, dsr.deviated_amount, dsr.order_id,dsrl.line_type, pp.sku_count*dsrl.quantity, rr.area_classification,dsr.salesPerson_id, pp.brand_type, rr.retailer_id, rr.distributor_id, dsrl.quantity, rr.beat_number, sst.beat_number, pp.sku_count, pp.product_type ) ret_rep left join eggozdb.maplemonk.my_sql_retailer_retailer rr2 on rr2.id = ret_rep.distributor_id) group by distributor, line_type, pickup_date, retailer_id, salesperson_id, retailer_name, area_classification, beat_number, beat_number_operations, distributor_id, brand_type, product_type ; create or replace table eggozdb.maplemonk.primary_sales AS select rr2.code as distributor_name, tt.* from ( select oo.name bill_name, oo.status, cast(timestampadd(minute, 660, oo.delivery_date) as date) delivery_date, sum(oo.order_price_amount) order_price_amount, ol.quantity * (ol.single_sku_rate + ol.single_sku_discount+ol.single_sku_tax) sale, sum(oo.discount_amount+oo.scheme_discount_amount)/(count(oo.name) over (partition by cast(timestampadd(minute, 660, oo.delivery_date) as date), oo.retailer_id, oo.name)) discount, sp.id as salesperson_id , cu.name, cu.email, ol.single_sku_rate, ol.single_sku_discount,ol.single_sku_tax, ol.quantity*pp.sku_count AS eggs_sold, concat(pp.sku_count,pp.short_name) sku, pp.slug, ol.quantity, pp.product_type, oo.retailer_id, rr.code as retailer_name, rp.name as parent_retailer_name, rr.area_classification, rr.beat_number beat_number_original, sst.beat_number as beat_number_operations, bc.cluster_name, rr.onboarding_status, rr.city_id, rr.distributor_id, rcc.name as retailer_category from eggozdb.maplemonk.my_sql_order_order oo left join eggozdb.maplemonk.my_sql_distributionchain_beatassignment sst on sst.id = oo.beat_assignment_id left join eggozdb.maplemonk.my_sql_retailer_retailer rr on rr.id = oo.retailer_id left join eggozdb.maplemonk.my_sql_retailer_retailerparent rp on rr.parent_id = rp.id left join eggozdb.maplemonk.my_sql_retailer_customer_category rcc on rcc.id = rr.category_id left join eggozdb.maplemonk.my_sql_order_orderline ol on ol.order_id = oo.id left join eggozdb.maplemonk.my_sql_product_product pp on pp.id = ol.product_id left join eggozdb.maplemonk.my_sql_base_cluster bc on rr.cluster_id = bc.id left join eggozdb.maplemonk.my_sql_saleschain_salespersonprofile sp on oo.SALESPERSON_ID=sp.id left join eggozdb.maplemonk.my_sql_custom_auth_user cu on sp.user_id = cu.id where lower(oo.status) in (\'delivered\',\'completed\') and pp.brand_type <> \'unbranded\' group by cast(timestampadd(minute, 660, oo.delivery_date) as date), oo.retailer_id, oo.name, pp.name, pp.short_name, pp.slug, oo.status, ol.quantity, pp.sku_count, pp.product_type, rr.area_classification, pp.slug, rr.code, rp.name, rr.beat_number, sst.beat_number, rr.onboarding_status, rr.city_id, rr.distributor_id, ol.single_sku_rate, ol.single_sku_discount,ol.single_sku_tax,sp.id,cu.name,cu.email, bc.cluster_name, rcc.name ) tt left join eggozdb.maplemonk.my_sql_retailer_retailer rr2 on rr2.id = tt.distributor_id",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from EGGOZDB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        