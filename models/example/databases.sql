{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "CREATE OR REPLACE TABLE almowear_db.maplemonk.Customer_Master_Intermediate AS select fi.customer_id, concat(c.first_name,\' \',c.last_name) name, c.email, c.phone, fi.source, min(fi.order_timestamp::date) Acquisition_Date, fi.Acquisition_Product, datediff(day,min(order_timestamp),current_date) days_since_first_purchase, fi1.Product_name as last_product, ifnull(sum(LINE_ITEM_SALES),0) total_spend_inr, count(distinct order_id) total_orders, count(distinct LINE_ITEM_ID) total_items, max(case when fi.order_timestamp=fi1.max_order_date then order_id end) last_order_id, datediff(day,max(order_timestamp),current_date) days_since_last_purchase, case when count(distinct order_id)=0 then null else datediff(day,min(order_timestamp),max(order_timestamp))/count(distinct order_id) end Avg_days_between_purchases, sum(fi.DISCOUNT) discount_inr, case when sum(fi.LINE_ITEM_SALES)=0 then null else sum(fi.DISCOUNT)/sum(fi.LINE_ITEM_SALES) end discount_percent from almowear_db.maplemonk.FACT_ITEMS fi left join (select * from (select *, count(id) over(partition by id order by _AIRBYTE_EMITTED_AT desc)rw from almowear_db.maplemonk.Shopify_All_customers)x where rw=1) c on fi.customer_id = c.id left join ( select * from (select customer_id,Product_name,order_timestamp as max_order_date,row_number()over(partition by customer_id order by order_timestamp desc, line_item_sales desc) as rw from almowear_db.maplemonk.FACT_ITEMS where source=\'Shopify\' ) a where rw = 1 )fi1 on fi.customer_id=fi1.customer_id where fi.customer_id is not null and fi.source=\'Shopify\' and order_timestamp is not null and fi.order_status in (\'Shopify_Processed\',\'Shipped - Delivered to Buyer\',\'Shipped\') group by fi.customer_id, concat(c.first_name,\' \',c.last_name), c.email, c.phone, fi.source, fi.Acquisition_Product; CREATE OR REPLACE TABLE almowear_db.maplemonk.Customer_Master_AW AS select x.*, rcm.category from(select c.*, m.Score as M_Score,r.Score as R_Score,f.Score as F_Score, (r.Score*1/3+f.Score*1/3+m.Score*1/3) as RFM_Score from (select *, row_number() over(order by TOTAL_SPEND_INR desc)/ (select count(distinct CUSTOMER_ID) from almowear_db.maplemonk.Customer_Master_Intermediate) as Percentile_M, row_number() over(order by DAYS_SINCE_LAST_PURCHASE asc,CUSTOMER_ID)/(select count(distinct CUSTOMER_ID) from almowear_db.maplemonk.Customer_Master_Intermediate) as Percentile_R, case when AVG_DAYS_BETWEEN_PURCHASES=0 then 0.4 else row_number() over(partition by case when AVG_DAYS_BETWEEN_PURCHASES=0 then 0 else 1 end order by AVG_DAYS_BETWEEN_PURCHASES asc,CUSTOMER_ID)/(select count(distinct CUSTOMER_ID) from almowear_db.maplemonk.Customer_Master_Intermediate) end as Percentile_F from almowear_db.maplemonk.Customer_Master_Intermediate) c left join almowear_db.maplemonk.Almo_RFM_Score m on c.Percentile_M > m.\"Lower Limit\" and c.Percentile_M<=m.\"Upper Limit\" left join almowear_db.maplemonk.Almo_RFM_Score r on c.Percentile_R > r.\"Lower Limit\" and c.Percentile_R<=r.\"Upper Limit\" left join almowear_db.maplemonk.ALMO_RFM_SCORE f on c.Percentile_F > f.\"Lower Limit\" and c.Percentile_F<=f.\"Upper Limit\")x left join almowear_db.maplemonk.ALMO_RFM_CUSTOMER_CATEGORY_MAPPING rcm on x.M_Score::int>rcm.M_START::int and x.M_Score::int<=M_END::int and x.R_Score::int>rcm.R_START::int and x.R_Score::int<=R_END::int and x.F_Score::int>rcm.F_START::int and x.F_Score::int<=F_END::int;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from ALMOWEAR_DB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        