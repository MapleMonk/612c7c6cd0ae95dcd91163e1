{{ config(
                        materialized='table',
                            post_hook={
                                "sql": "create or replace table eggozdb.maplemonk.area_classification_target as select mm.Date, mm.Area, mm.Region, mm.MTD_Sales, mm.Revenue_target, mm.MTD_Eggs_Sold, mm.no_of_days, mm.days_in_month, mm.collections_target, mm.mtd_collections from (select sku.date, sku.area_c as area, bgt.region, (sku.mtd_net_sales-rs.mtd_amount_return) as mtd_sales ,(sku2.mtd_eggs_sold-rs2.mtd_eggs_returned) as mtd_eggs_sold ,bgt.MTD_TARGET_NOV::FLOAT as revenue_target ,bgt.COLLECTIONS_TARGET_NOV::FLOAT as collections_target ,30 no_of_days ,30 days_in_month ,cs.mtd_collections, row_number() over (partition by sku.date, sku.area_c order by sku.date, sku.area_c) rownumber from (select date, sum(mtd_net_sales) as mtd_net_sales, area_classification as area_c from maplemonk.sales_summary group by date, area_c) sku join maplemonk.target_region_wise_target_plan bgt on lower(bgt.area_classification) = lower(sku.area_c) join (select date, eggs_sold, mtd_eggs_sold, area_classification as area_classification from maplemonk.eggs_sold_summary) sku2 on lower(sku.area_c) = lower(sku2.area_classification) and sku.date = sku2.date join (select date, collections, mtd_collections, area_classification as area_classification from maplemonk.Collection_Summary) cs on lower(cs.area_classification) = lower(sku.area_c) and sku.date = cs.date join (select date, mtd_amount_return, area_classification as area_classification from maplemonk.returnamount_Summary) rs on lower(rs.area_classification) = lower(sku.area_c) and sku.date = rs.date join (select date, mtd_eggs_returned, area_classification as area_classification from maplemonk.return_Summary) rs2 on lower(rs2.area_classification) = lower(sku.area_c) and sku.date = rs2.date WHERE sku.date >= \'2022-11-01\' AND sku.date <= \'2022-11-30\' ) mm where mm.rownumber = 1 ; create or replace table eggozdb.maplemonk.parent_retailer_target as SELECT bgt.parent as parent_retailer_name, bgt.classification as area, sum(sku.net_sales)-sum(sku.amount_return) AS mtd_sales, sum(sku.eggs_sold)-sum(sku.eggs_return) as mtd_eggs_sold, replace(bgt.\"Target-Dec\",\',\',\'\')::FLOAT as revenue_target ,datediff(day,DATE_TRUNC(\'month\',cast(timestampadd(minute,660,current_date()) as date)), dateadd(day,\'-1\',cast(timestampadd(minute, 660, getdate()) as date)))+1 no_of_days ,datediff(\'day\',date_trunc(\'month\',cast(timestampadd(minute,660,current_date()) as date)), last_day(cast(timestampadd(minute,660,current_date()) as date),\'month\'))+1 days_in_month FROM eggozdb.maplemonk.target_mt_target bgt left join (select area, parent_retailer_name, sum(net_sales) as net_sales, sum(amount_return) as amount_return, sum(eggs_sold) as eggs_sold, sum(eggs_return) as eggs_return from eggozdb.maplemonk.summary_reporting_table_beat_retailer where date >= TO_DATE(DATE_TRUNC(\'month\', dateadd(\'day\',-1,cast(timestampadd(minute,660,current_date()) as date)))) and date <= dateadd(\'day\',-1,cast(timestampadd(minute, 660, getdate()) as date)) group by area, parent_retailer_name )sku on lower(bgt.Parent) = lower(sku.parent_retailer_name) and lower(bgt.classification) = lower(sku.area) GROUP BY bgt.parent, bgt.classification, replace(bgt.\"Target-Dec\",\',\',\'\')::FLOAT ; create or replace table eggozdb.maplemonk.beat_jse_target as SELECT sku.beat_number_original \"beat number original\", bgt.\"JSE\" JSE, sku.area_classification, bgt.\"SO\" SO, bgt.\"Sales Head\", active_onboarded.active_retailers, active_onboarded.retailers_onboarded new_onboarded, replace(bgt.Revenue_dec_target,\',\',\'\')::FLOAT as revenue_target, replace(bgt.Collections_dec_target,\',\',\'\')::FLOAT as collections_target, sum(sku.revenue) AS mtd_sales, sum(sku.collections) as collections, sum(sku.eggs_sold) as mtd_eggs_sold, datediff(day,DATE_TRUNC(\'month\', cast(timestampadd(minute,660,current_date()) as date)), dateadd(day,\'-1\',cast(timestampadd(minute, 660, getdate()) as date)))+1 no_of_days, datediff(\'day\',date_trunc(\'month\',cast(timestampadd(minute,660,current_date()) as date)), last_day(cast(timestampadd(minute,660,current_date()) as date),\'month\'))+1 days_in_month FROM (select * from eggozdb.maplemonk.primary_and_secondary where date between TO_DATE(DATE_TRUNC(\'month\', dateadd(\'day\',-1,cast(timestampadd(minute,660,current_date()) as date)))) and dateadd(\'day\',-1,cast(timestampadd(minute, 660, getdate()) as date)) ) sku join maplemonk.target_jse_gt bgt on lower(bgt.beat_number_original) = lower(sku.beat_number_original) and lower(sku.area_classification) = lower(bgt.City) left join ( select coalesce(tt.onboarding_month,nn.activity_month) month, coalesce(tt.area_classification,nn.area_classification) area_classification, coalesce(tt.beat_number,nn.beat_number_original) beat_number_original, tt.retailers_onboarded, nn.active_retailers from ( select month(cast(timestampadd(minute, 660, onboarding_date) as date)) onboarding_month, area_classification, beat_number, count(distinct code) retailers_onboarded from eggozdb.maplemonk.my_sql_retailer_retailer where cast(timestampadd(minute, 660, onboarding_date) as date) between TO_DATE(DATE_TRUNC(\'month\', dateadd(\'day\',-1,cast(timestampadd(minute,660,current_date()) as date)))) and dateadd(\'day\',-1,cast(timestampadd(minute, 660, getdate()) as date)) group by month(cast(timestampadd(minute, 660, onboarding_date) as date)), area_classification, beat_number ) tt full outer join ( select month(date) activity_month, count(distinct retailer_name) as active_retailers, area_classification, beat_number_original from eggozdb.maplemonk.active_retailers where date between TO_DATE(DATE_TRUNC(\'month\', dateadd(\'day\',-1,cast(timestampadd(minute,660,current_date()) as date)))) and dateadd(\'day\',-1,cast(timestampadd(minute, 660, getdate()) as date)) group by month(date), area_classification, beat_number_original ) nn on tt.onboarding_month = nn.activity_month and tt.area_classification = nn.area_classification and tt.beat_number = nn.beat_number_original ) active_onboarded on active_onboarded.beat_number_original = sku.beat_number_original and active_onboarded.area_classification = sku.area_classification GROUP BY sku.beat_number_original, bgt.JSE, bgt.SO, bgt.\"Sales Head\", sku.area_classification, replace(bgt.Revenue_dec_target,\',\',\'\')::FLOAT, replace(bgt.Collections_dec_target,\',\',\'\')::FLOAT, active_onboarded.active_retailers, active_onboarded.retailers_onboarded ;",
                                "transaction": true
                            }
                        ) }}
                        with sample_data as (

                            select * from EGGOZDB.information_schema.databases
                        ),
                        
                        final as (
                            select * from sample_data
                        )
                        select * from final
                        